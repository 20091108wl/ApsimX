// -----------------------------------------------------------------------
// <copyright file="SWIMTests.cs" company="APSIM Initiative">
//     Copyright (c) APSIM Initiative
// </copyright>
//
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SWIMFrame;

namespace UnitTests
{
    /// <summary>
    /// A suite of tests for the SWIM framework.
    /// All input and output values were retrieved from FORTRAN version using WRITE statements
    /// at start and end of method.
    /// </summary>
    [TestFixture]
    class SWIMTests
    {
        /// <summary>
        /// Test method nonlin.
        /// </summary>
        [Test]
        public void TestNonlin()
        {
            int[] n = new int[] { 23, 23, 23, 23 };
            double[][] x = new double[][] { new double[] { 3.354301E-06, 9.062281E-06, 2.211101E-05, 5.405671E-05, 1.286441E-04, 3.034657E-04, 7.068768E-04, 1.632747E-03, 3.740277E-03, 8.510290E-03, 1.924374E-02, 4.327070E-02, 9.674788E-02, 2.148795E-01, 4.724994E-01, 1.019938E+00, 2.120870E+00, 4.103255E+00, 7.062010E+00, 1.052146E+01, 1.373546E+01, 1.628369E+01, 1.813795E+01 },
                                            new double[] { 3.354301E-06,9.062281E-06,2.211101E-05,5.405671E-05,1.286441E-04,3.034657E-04,7.068768E-04,1.632747E-03,3.740277E-03,8.510290E-03,1.924374E-02,4.327070E-02,9.674788E-02,2.148795E-01,4.724994E-01,1.019938E+00,2.120870E+00,4.103255E+00,7.062010E+00,1.052146E+01,1.373546E+01,1.628369E+01,1.813795E+01 },
                                            new double[] { 1.740164E-06,5.488312E-06,1.750446E-05,5.750873E-05,1.811315E-04,5.503100E-04,1.607630E-03,4.531185E-03,1.234010E-02,3.249982E-02,8.262891E-02,2.015138E-01,4.644696E-01,9.847437E-01,1.851519E+00,3.002137E+00,4.207595E+00,5.252194E+00,6.054463E+00,6.631843E+00,7.034421E+00,7.311037E+00,7.49985218 },
                                            new double[] { 1.740164E-06,5.488312E-06,1.750446E-05,5.750873E-05,1.811315E-04,5.503100E-04,1.607630E-03,4.531185E-03,1.234010E-02,3.249982E-02,8.262891E-02,2.015138E-01,4.644696E-01,9.847437E-01,1.851519E+00,3.002137E+00,4.207595E+00,5.252194E+00,6.054463E+00,6.631843E+00,7.034421E+00,7.311037E+00,7.49985218 }
                                          };
            double[][] y = new double[][] { new double[] { 8.740528E-10, -1.139631E-06, -3.745951E-06, -1.012318E-05, -2.500095E-05, -5.983057E-05, -1.400616E-04, -3.237275E-04, -7.402293E-04, -1.677716E-03, -3.770240E-03, -8.399180E-03, -1.852487E-02, -4.033605E-02, -8.621387E-02, -1.789396E-01, -3.537897E-01, -6.472698E-01, -1.061788E+00, -1.537311E+00, -1.986433E+00, -2.354419E+00, -2.631054E+00 },
                                            new double[] { 8.740528E-10,-5.688333E-07,-1.870282E-06,-5.052952E-06,-1.247203E-05,-2.981977E-05,-6.971090E-05,-1.607958E-04,-3.665741E-04,-8.272015E-04,-1.847065E-03,-4.076566E-03,-8.869883E-03,-1.893890E-02,-3.937207E-02,-7.867789E-02,-1.482514E-01,-2.571233E-01,-4.019165E-01,-5.627090E-01,-7.143035E-01,-8.406170E-01,-0.937671313 },
                                            new double[] { 4.534462E-10,-1.860098E-07,-7.827367E-07,-2.763741E-06,-8.861448E-06,-2.696707E-05,-7.839762E-05,-2.189419E-04,-5.880709E-04,-1.518430E-03,-3.755019E-03,-8.819437E-03,-1.937167E-02,-3.886927E-02,-6.938366E-02,-1.084229E-01,-1.492204E-01,-1.853670E-01,-2.139873E-01,-2.351721E-01,-2.502733E-01,-0.260818333,-0.268098632 },
                                            new double[] { 4.534462E-10,-1.235415E-07,-5.200053E-07,-1.834312E-06,-5.871893E-06,-1.782608E-05,-5.164364E-05,-1.435129E-04,-3.827704E-04,-9.785819E-04,-2.386859E-03,-5.502670E-03,-1.180372E-02,-2.305212E-02,-4.009008E-02,-6.140720E-02,-8.352305E-02,-1.032118E-01,-1.189630E-01,-1.307495E-01,-1.392288E-01,-0.145191196,-0.149328616 }
                                          };
            double[] re = new double[] { 1E-2, 1E-2, 1E-2, 1E-2 };
            int[] expected = new int[] { 9, 7, 5, 4 };

            for (int i = 0; i < n.Length; i++)
                Assert.AreEqual(expected[i], (int)Extensions.TestMethod("Fluxes", "nonlin", new object[] { n[i], x[i], y[i], re[i] }));
        }

        /// <summary>
        /// Test method odef.
        /// </summary>
        [Test]
        public void TestOdef()
        {
            int[] n1 = new int[] { 1, 1, 1, 20 };
            int[] n2 = new int[] { 2, 2, 12, 23 };
            SoilProps sp = Soil.gensptbl(1.0, new SoilParam(10, 103, 0.4, 2.0, -2.0, -10.0, 1.0 / 3.0, 1.0), true);
            Fluxes.FluxTable(1.0, sp);
            double[][] aK = new double[][] {new double[] { 8.740528E-10,3.148991E-09,1.116638E-08,3.906024E-08,1.350389E-07,4.621461E-07,1.567779E-06,5.278070E-06,1.765091E-05,5.868045E-05,1.940329E-04,6.381824E-04,2.086113E-03,6.757548E-03,2.152482E-02,6.618264E-02,1.887549E-01,4.655217E-01,9.153457E-01,1.393520E+00,1.733586E+00,1.916091084,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                                            new double[] { 8.740528E-10,3.148991E-09,1.116638E-08,3.906024E-08,1.350389E-07,4.621461E-07,1.567779E-06,5.278070E-06,1.765091E-05,5.868045E-05,1.940329E-04,6.381824E-04,2.086113E-03,6.757548E-03,2.152482E-02,6.618264E-02,1.887549E-01,4.655217E-01,9.153457E-01,1.393520E+00,1.733586E+00,1.916091E+00,2.000000E+00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                            new double[] { 8.740528E-10,3.148991E-09,1.116638E-08,3.906024E-08,1.350389E-07,4.621461E-07,1.567779E-06,5.278070E-06,1.765091E-05,5.868045E-05,1.940329E-04,6.381824E-04,2.086113E-03,6.757548E-03,2.152482E-02,6.618264E-02,1.887549E-01,4.655217E-01,9.153457E-01,1.393520E+00,1.733586E+00,1.916091E+00,2.000000E+00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                            new double[] { 8.740528E-10,3.148991E-09,1.116638E-08,3.906024E-08,1.350389E-07,4.621461E-07,1.567779E-06,5.278070E-06,1.765091E-05,5.868045E-05,1.940329E-04,6.381824E-04,2.086113E-03,6.757548E-03,2.152482E-02,6.618264E-02,1.887549E-01,4.655217E-01,9.153457E-01,1.393520E+00,1.733586E+00,1.916091E+00,2.000000E+00,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
                                            };
            double[][] hpK = new double[][] { new double[] { 1.942348E-09, 6.760092E-09, 2.390674E-08, 8.260039E-08, 2.837631E-07, 9.641152E-07, 3.252644E-06, 1.089420E-05, 3.627295E-05, 1.201039E-04, 3.956002E-04, 1.295509E-03, 4.209049E-03, 1.348672E-02, 4.200805E-02, 1.232292E-01, 3.212703E-01, 6.904247E-01, 1.165940E+00, 1.578200E+00, 1.834723657, 1.963039316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                              new double[] { 1.942348E-09,6.760092E-09,2.390674E-08,8.260039E-08,2.837631E-07,9.641152E-07,3.252644E-06,1.089420E-05,3.627295E-05,1.201039E-04,3.956002E-04,1.295509E-03,4.209049E-03,1.348672E-02,4.200805E-02,1.232292E-01,3.212703E-01,6.904247E-01,1.165940E+00,1.578200E+00,1.834724E+00,1.963039E+00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                              new double[] { 1.942348E-09,6.760092E-09,2.390674E-08,8.260039E-08,2.837631E-07,9.641152E-07,3.252644E-06,1.089420E-05,3.627295E-05,1.201039E-04,3.956002E-04,1.295509E-03,4.209049E-03,1.348672E-02,4.200805E-02,1.232292E-01,3.212703E-01,6.904247E-01,1.165940E+00,1.578200E+00,1.834724E+00,1.963039E+00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                              new double[] { 1.942348E-09,6.760092E-09,2.390674E-08,8.260039E-08,2.837631E-07,9.641152E-07,3.252644E-06,1.089420E-05,3.627295E-05,1.201039E-04,3.956002E-04,1.295509E-03,4.209049E-03,1.348672E-02,4.200805E-02,1.232292E-01,3.212703E-01,6.904247E-01,1.165940E+00,1.578200E+00,1.834724E+00,1.963039E+00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
                                            };
            double[][] u = new double[][] { new double[] { 4.9914082920553025, 4364796.0347727695 },
                                            new double[] { 5.0000148144063985, 4379861.1673235269 },
                                            new double[] { 4.9682912374903765, -570.76826254349544 },
                                            new double[] { -1.8708427784692783, 0.46037822906582598}
                                          };

            for (int i = 0; i < n1.Length; i++)
                Assert.AreEqual(u[i], (double[])Extensions.TestMethod("Fluxes", "odef", new object[] { n1[i], n2[i], aK[i], hpK[i] }));
        }

        /// <summary>
        /// Test method MVG.Params
        /// </summary>
        [Test]
        public void TestMVGParams()
        {
            Assert.AreEqual(true, MVG.TestParams(103, 9.0, 0.99670220130280185, 9.99999999999998460E-003));
            Assert.AreEqual(true, MVG.TestParams(109, 21.0, 0.99990576371017859, 0.25132106297918300));
        }

        /// <summary>
        /// Test method gensptbl
        /// </summary>
        [Test]
        public void TestGensptbl()
        {
            MVG.TestParams(103, 9.0, 0.99670220130280185, 9.99999999999998460E-003);
            SoilProps sp = Soil.gensptbl(1.0, new SoilParam(10, 103, 0.4, 2.0, -2.0, -10.0, 1.0 / 3.0, 1.0), true);
            Assert.AreEqual(103, sp.sid);
            Assert.AreEqual(16, sp.nld);
            Assert.AreEqual(67, sp.n);
            Assert.AreEqual(23, sp.nc);
            Assert.AreEqual(0.4, sp.ths);
            Assert.AreEqual(2.0, sp.ks);
            Assert.AreEqual(-2.0, sp.he);
            Assert.AreEqual(18.137953, sp.phie, 0.0001);
            Assert.AreEqual(new double[] { 0, 1.681505E-03, 3.641995E-03, 5.927758E-03, 8.592762E-03, 1.169993E-02, 1.532262E-02, 1.954637E-02, 2.447089E-02, 3.021248E-02, 3.690667E-02, 4.471152E-02, 5.381131E-02, 6.442088E-02, 7.679074E-02, 9.121293E-02 }, sp.Sd);
            Assert.AreEqual(new double[] { 1.611810E+01, 1.565758E+01, 1.519706E+01, 1.473655E+01, 1.427603E+01, 1.381551E+01, 1.335499E+01, 1.289448E+01, 1.243396E+01, 1.197344E+01, 1.151293E+01, 1.105241E+01, 1.059189E+01, 1.013137E+01, 9.670857E+00, 9.210341E+00 }, sp.lnh);
            Assert.AreEqual(new double[] { 9.12E-02, 9.57E-02, 0.10031816, 0.10517308, 0.11024141, 0.11553251, 0.12105618, 0.12682264, 0.13284256, 0.13912708, 0.14568783, 0.15253696, 0.15968712, 0.16715157, 0.17494409, 0.18307911, 0.19157168, 0.20043752, 0.20969297, 0.21935518, 0.22944199, 0.239972, 0.25096464, 0.26244017, 0.27441967, 0.28692514, 0.29997942, 0.31360632, 0.32783052, 0.34267759, 0.35817391, 0.37434664, 0.39122367, 0.40883315, 0.42720348, 0.44636273, 0.46633807, 0.48715466, 0.50883472, 0.53139526, 0.55484605, 0.57918596, 0.60439837, 0.6304453, 0.65725988, 0.68473697, 0.7127229, 0.74100459, 0.7693013, 0.79726136, 0.82446897, 0.85046542, 0.8747865, 0.89701217, 0.91681963, 0.93402398, 0.94859558, 0.96064913, 0.97040969, 0.97816873, 0.98424155, 0.98893458, 0.99252462, 0.99524909, 0.9973039, 0.99884635, 1 }, sp.S);
            Assert.AreEqual(new double[] { -10000, -8789.3145, -7725.2046, -6789.9253, -5967.8789, -5245.3564, -4610.3086, -4052.1453, -3561.5579, -3130.3652, -2751.3765, -2418.2712, -2125.4946, -1868.1639, -1641.988, -1443.1949, -1268.4694, -1114.8977, -979.91858, -861.28125, -757.0072, -665.35742, -584.80353, -514.0022, -451.77271, -397.07724, -349.00366, -306.75031, -269.61249, -236.97089, -208.28116, -183.06487, -160.90146, -141.42136, -124.29967, -109.25089, -96.024048, -84.398552, -74.180542, -65.199608, -57.305988, -50.368034, -44.27005, -38.910336, -34.19952, -30.059032, -26.419828, -23.221218, -20.409859, -17.938866, -15.767034, -13.858142, -12.180356, -10.705698, -9.4095745, -8.2703714, -7.2690892, -6.3890309, -5.61552, -4.9356575, -4.3381042, -3.8128963, -3.3512745, -2.9455404, -2.5889282, -2.2754903, -2 }, sp.h);
            Assert.AreEqual(new double[] { 8.74E-10, 1.34E-09, 2.06E-09, 3.15E-09, 4.81E-09, 7.33E-09, 1.12E-08, 1.70E-08, 2.58E-08, 3.91E-08, 5.91E-08, 8.94E-08, 1.35E-07, 2.04E-07, 3.07E-07, 4.62E-07, 6.95E-07, 1.04E-06, 1.57E-06, 2.35E-06, 3.52E-06, 5.28E-06, 7.90E-06, 1.18E-05, 1.77E-05, 2.64E-05, 3.93E-05, 5.87E-05, 8.75E-05, 1.30E-04, 1.94E-04, 2.89E-04, 4.29E-04, 6.38E-04, 9.48E-04, 1.41E-03, 2.09E-03, 3.09E-03, 4.57E-03, 6.76E-03, 9.97E-03, 1.47E-02, 2.15E-02, 3.15E-02, 4.58E-02, 6.62E-02, 9.49E-02, 0.13471563, 0.18875489, 0.26027736, 0.35204545, 0.46552172, 0.59999633, 0.75199533, 0.91534567, 1.0820619, 1.2438266, 1.3935198, 1.5262517, 1.6396606, 1.7335856, 1.8094147, 1.8693978, 1.9160911, 1.9519905, 1.9793297, 2 }, sp.K);
            Assert.AreEqual(new double[] { 3.35E-06, 4.90E-06, 6.44E-06, 9.06E-06, 1.20E-05, 1.66E-05, 2.21E-05, 3.00E-05, 4.01E-05, 5.41E-05, 7.21E-05, 9.66E-05, 1.29E-04, 1.72E-04, 2.28E-04, 3.03E-04, 4.03E-04, 5.34E-04, 7.07E-04, 9.35E-04, 1.24E-03, 1.63E-03, 2.15E-03, 2.84E-03, 3.74E-03, 4.92E-03, 6.47E-03, 8.51E-03, 1.12E-02, 1.47E-02, 1.92E-02, 2.52E-02, 3.30E-02, 4.33E-02, 5.66E-02, 7.40E-02, 9.67E-02, 0.12633528, 0.16483819, 0.21487948, 0.27981141, 0.36389574, 0.4724994, 0.61230737, 0.79151124, 1.0199381, 1.3090248, 1.6715364, 2.1208696, 2.6698196, 3.3287408, 4.1032548, 4.9919143, 5.9845467, 7.0620103, 8.1978016, 9.3612528, 10.521457, 11.650793, 12.727274, 13.735456, 14.666175, 15.515541, 16.283688, 16.973536, 17.589748, 18.137953 }, sp.phi);
            Assert.AreEqual(new double[] { 9.12E-02, 0.10517308, 0.12105618, 0.13912708, 0.15968712, 0.18307911, 0.20969297, 0.239972, 0.27441967, 0.31360632, 0.35817391, 0.40883315, 0.46633807, 0.53139526, 0.60439837, 0.68473697, 0.7693013, 0.85046542, 0.91681963, 0.96064913, 0.98424155, 0.99524909, 1 }, sp.Sc);
            Assert.AreEqual(new double[] { -10000, -6789.9253, -4610.3086, -3130.3652, -2125.4946, -1443.1949, -979.91858, -665.35742, -451.77271, -306.75031, -208.28116, -141.42136, -96.024048, -65.199608, -44.27005, -30.059032, -20.409859, -13.858142, -9.4095745, -6.3890309, -4.3381042, -2.9455404, -2 }, sp.hc);
            Assert.AreEqual(new double[] { 8.74E-10, 3.15E-09, 1.12E-08, 3.91E-08, 1.35E-07, 4.62E-07, 1.57E-06, 5.28E-06, 1.77E-05, 5.87E-05, 1.94E-04, 6.38E-04, 2.09E-03, 6.76E-03, 2.15E-02, 6.62E-02, 0.18875489, 0.46552172, 0.91534567, 1.3935198, 1.7335856, 1.9160911, 2 }, sp.Kc);
            Assert.AreEqual(new double[] { 3.35E-06, 9.06E-06, 2.21E-05, 5.41E-05, 1.29E-04, 3.03E-04, 7.07E-04, 1.63E-03, 3.74E-03, 8.51E-03, 1.92E-02, 4.33E-02, 9.67E-02, 0.21487948, 0.4724994, 1.0199381, 2.1208696, 4.1032548, 7.0620103, 10.521457, 13.735456, 16.283688, 18.137953 }, sp.phic);
            Assert.AreEqual(new double[] { 1.71E-04, 102.79558, -11014180, 5.81E-04, -10.950004, 1036646.8, 6.49E-04, 11.631827, -144048.53, 1.07E-03, 2.4742544, 6477.6963, 1.48E-03, 2.8009834, -3280.0042, 2.21E-03, 1.429702, -297.33185, 3.21E-03, 1.0055914, -151.95483, 4.71E-03, 0.61984211, -33.613876, 6.89E-03, 0.40856281, -10.596748, 1.01E-02, 0.26370642, -2.8950191, 1.48E-02, 0.17302954, -0.85836959, 2.17E-02, 0.11327697, -0.25019225, 3.18E-02, 7.43E-02, -7.54E-02, 4.64E-02, 4.85E-02, -2.33E-02, 6.69E-02, 3.10E-02, -7.70E-03, 9.42E-02, 1.87E-02, -2.83E-03, 0.12541132, 9.55E-03, -1.20E-03, 0.14951368, 2.54E-03, -5.72E-04, 0.14989966, -2.43E-03, -2.72E-04, 0.12351422, -5.18E-03, -1.01E-04, 8.72E-02, -6.12E-03, 6.77E-06, 5.62E-02, -6.04E-03, 8.34E-05 }, sp.Kco);
            Assert.AreEqual(new double[] { 4.22E-04, -2.43E-02, 1.6745514, 4.15E-04, 3.81E-02, -0.78944385, 1.31E-03, 6.04E-03, 1.0811266, 2.35E-03, 5.97E-02, 0.11368366, 5.18E-03, 6.93E-02, 1.231865, 1.03E-02, 0.15162292, 1.1724924, 2.11E-02, 0.24482536, 2.2706239, 4.21E-02, 0.44526318, 3.1186645, 8.43E-02, 0.76159847, 4.9380713, 0.16711499, 1.3289092, 7.2972093, 0.33009821, 2.2842703, 11.092872, 0.64871347, 3.932873, 16.658104, 1.2700446, 6.7402439, 25.343624, 2.4763455, 11.553151, 39.240189, 4.8074398, 19.836424, 63.999161, 9.2763567, 34.366638, 116.94948, 17.721508, 60.912647, 267.01154, 33.26878, 113.51585, 860.63892, 60.792885, 232.55156, 4135.3701, 107.63366, 554.94055, 27854.828, 185.68622, 1599.162, 232817.22, 315.37164, 5433.1401, 2175972 }, sp.phico);
            Assert.AreEqual(new double[] { 2553.3308, 3.00E+08, -5.58E+13, 2005.6914, -1.15E+08, 4.16E+12, 787.41882, -7908385, 3.03E+10, 409.71344, -2788451.3, 1.33E+10, 192.02237, -462884.94, 7.43E+08, 95.473686, -106561.99, 82872184, 46.876476, -21770.463, 6979937.5, 23.405447, -4798.3735, 687198.06, 11.715723, -1044.2969, 65081.379, 5.9086218, -232.84184, 6447.4155, 2.992559, -52.216114, 641.73175, 1.522995, -11.86102, 65.254692, 0.77818018, -2.7212012, 6.7357335, 0.39929438, -0.63357753, 0.71273834, 0.20587862, -0.15097752, 7.85E-02, 0.10690963, -3.77E-02, 9.37E-03, 5.62E-02, -1.03E-02, 1.31E-03, 3.01E-02, -3.31E-03, 2.40E-04, 1.66E-02, -1.36E-03, 6.41E-05, 9.44E-03, -7.36E-04, 2.57E-05, 5.49E-03, -4.98E-04, 1.48E-05, 3.24E-03, -3.88E-04, 1.17E-05 }, sp.Sco);

            sp = Soil.gensptbl(1.0, new SoilParam(10, 109, 0.6, 0.2, -2.0, -40.0, 1.0 / 9.0, 1.0), true);
            Assert.AreEqual(109, sp.sid);
            Assert.AreEqual(16, sp.nld);
            Assert.AreEqual(67, sp.n);
            Assert.AreEqual(23, sp.nc);
            Assert.AreEqual(0.6, sp.ths);
            Assert.AreEqual(2.0, sp.ks);
            Assert.AreEqual(-2.0, sp.he);
            Assert.AreEqual(7.4998522, sp.phie);
            Assert.AreEqual(new double[] { 0, 1.762584E-02, 3.617703E-02, 5.570216E-02, 7.625236E-02, 9.788146E-02, 1.206461E-01, 1.446059E-01, 1.698235E-01, 1.963652E-01, 2.243003E-01, 2.537019E-01, 2.846472E-01, 3.172170E-01, 3.514968E-01, 3.875760E-01 }, sp.Sd);
            Assert.AreEqual(new double[] { 1.611810E+01, 1.565758E+01, 1.519706E+01, 1.473655E+01, 1.427603E+01, 1.381551E+01, 1.335499E+01, 1.289448E+01, 1.243396E+01, 1.197344E+01, 1.151293E+01, 1.105241E+01, 1.059189E+01, 1.013137E+01, 9.670857E+00, 9.210341E+00 }, sp.lnh);
            Assert.AreEqual(new double[] { 3.88E-01, 0.39802191, 0.4086186, 0.41936827, 0.43027312, 0.44133538, 0.4525573, 0.46394116, 0.4754892, 0.48720375, 0.49908715, 0.51114172, 0.52336979, 0.53577358, 0.54835546, 0.56111759, 0.57406211, 0.58719105, 0.60050613, 0.61400896, 0.62770075, 0.64158225, 0.65565348, 0.66991365, 0.68436086, 0.6989916, 0.71380019, 0.72877842, 0.74391448, 0.75919175, 0.77458793, 0.79007274, 0.80560666, 0.82113814, 0.83660144, 0.85191458, 0.86697733, 0.88167113, 0.89586055, 0.90939844, 0.92213374, 0.93392366, 0.94464731, 0.95421922, 0.96259916, 0.96979564, 0.97586316, 0.9808923, 0.98499763, 0.98830467, 0.99093872, 0.99301726, 0.99464488, 0.9959116, 0.99689269, 0.99764961, 0.99823189, 0.99867868, 0.99902099, 0.99928284, 0.99948293, 0.9996357, 0.99975228, 0.99984115, 0.99990898, 0.9999606, 1 }, sp.S);
            Assert.AreEqual(new double[] { -10000, -8789.3145, -7725.2046, -6789.9253, -5967.8789, -5245.3564, -4610.3086, -4052.1453, -3561.5579, -3130.3652, -2751.3765, -2418.2712, -2125.4946, -1868.1639, -1641.988, -1443.1949, -1268.4694, -1114.8977, -979.91858, -861.28125, -757.0072, -665.35742, -584.80353, -514.0022, -451.77271, -397.07724, -349.00366, -306.75031, -269.61249, -236.97089, -208.28116, -183.06487, -160.90146, -141.42136, -124.29967, -109.25089, -96.024048, -84.398552, -74.180542, -65.199608, -57.305988, -50.368034, -44.27005, -38.910336, -34.19952, -30.059032, -26.419828, -23.221218, -20.409859, -17.938866, -15.767034, -13.858142, -12.180356, -10.705698, -9.4095745, -8.2703714, -7.2690892, -6.3890309, -5.61552, -4.9356575, -4.3381042, -3.8128963, -3.3512745, -2.9455404, -2.5889282, -2.2754903, -2 }, sp.h);
            Assert.AreEqual(new double[] { 4.53E-10, 7.93E-10, 1.38E-09, 2.37E-09, 4.07E-09, 6.94E-09, 1.18E-08, 1.98E-08, 3.32E-08, 5.53E-08, 9.18E-08, 1.51E-07, 2.49E-07, 4.07E-07, 6.63E-07, 1.07E-06, 1.73E-06, 2.79E-06, 4.47E-06, 7.12E-06, 1.13E-05, 1.79E-05, 2.83E-05, 4.44E-05, 6.95E-05, 1.08E-04, 1.68E-04, 2.60E-04, 4.01E-04, 6.14E-04, 9.37E-04, 1.42E-03, 2.14E-03, 3.19E-03, 4.72E-03, 6.91E-03, 9.98E-03, 1.42E-02, 1.99E-02, 2.72E-02, 3.65E-02, 4.76E-02, 6.05E-02, 7.48E-02, 8.98E-02, 1.05E-01, 0.11972843, 0.13337603, 0.14560257, 0.15622041, 0.1652011, 0.17263249, 0.17867298, 0.18351294, 0.18734698, 0.19035704, 0.19270369, 0.19452323, 0.19592811, 0.19700934, 0.19783939, 0.19847542, 0.19896205, 0.19933397, 0.19961797, 0.19983469, 0.2 }, sp.K);
            Assert.AreEqual(new double[] { 1.74E-06, 2.67E-06, 3.59E-06, 5.49E-06, 7.87E-06, 1.19E-05, 1.75E-05, 2.63E-05, 3.87E-05, 5.75E-05, 8.45E-05, 1.24E-04, 1.81E-04, 2.64E-04, 3.82E-04, 5.50E-04, 7.90E-04, 1.13E-03, 1.61E-03, 2.28E-03, 3.22E-03, 4.53E-03, 6.35E-03, 8.87E-03, 1.23E-02, 1.71E-02, 2.36E-02, 3.25E-02, 4.45E-02, 6.08E-02, 8.26E-02, 1.12E-01, 1.51E-01, 2.02E-01, 2.68E-01, 3.54E-01, 0.46446955, 0.60328245, 0.77538371, 0.98474365, 1.2339785, 1.523618, 1.8515186, 2.2126453, 2.5993474, 3.0021374, 3.4107835, 3.8154471, 4.2075949, 4.5805526, 4.9296689, 5.2521939, 5.5469718, 5.8140793, 6.0544629, 6.2696362, 6.4614353, 6.6318431, 6.7828636, 6.9164438, 7.034421, 7.1384988, 7.2302341, 7.3110371, 7.382174, 7.4447765, 7.4998522 }, sp.phi);
            Assert.AreEqual(new double[] { 0.38757604, 0.41936827, 0.4525573, 0.48720375, 0.52336979, 0.56111759, 0.60050613, 0.64158225, 0.68436086, 0.72877842, 0.77458793, 0.82113814, 0.86697733, 0.90939844, 0.94464731, 0.96979564, 0.98499763, 0.99301726, 0.99689269, 0.99867868, 0.99948293, 0.99984115, 1 }, sp.Sc);
            Assert.AreEqual(new double[] { -10000, -6789.9253, -4610.3086, -3130.3652, -2125.4946, -1443.1949, -979.91858, -665.35742, -451.77271, -306.75031, -208.28116, -141.42136, -96.024048, -65.199608, -44.27005, -30.059032, -20.409859, -13.858142, -9.4095745, -6.3890309, -4.3381042, -2.9455404, -2 }, sp.hc);
            Assert.AreEqual(new double[] { 4.53E-10, 2.37E-09, 1.18E-08, 5.53E-08, 2.49E-07, 1.07E-06, 4.47E-06, 1.79E-05, 6.95E-05, 2.60E-04, 9.37E-04, 3.19E-03, 9.98E-03, 2.72E-02, 6.05E-02, 0.1050304, 0.14560257, 0.17263249, 0.18734698, 0.19452323, 0.19783939, 0.19933397, 0.2 }, sp.Kc);
            Assert.AreEqual(new double[] { 1.74E-06, 5.49E-06, 1.75E-05, 5.75E-05, 1.81E-04, 5.50E-04, 1.61E-03, 4.53E-03, 1.23E-02, 3.25E-02, 8.26E-02, 2.02E-01, 0.46446955, 0.98474365, 1.8515186, 3.0021374, 4.2075949, 5.2521939, 6.0544629, 6.6318431, 7.034421, 7.3110371, 7.4998522 }, sp.phic);
            Assert.AreEqual(new double[] { 1.52E-04, 275.79688, -4.79E+07, 7.38E-04, -13.831285, 1.45E+06, 8.36E-04, 10.314801, -9.95E+04, 1.29E-03, 2.4263067, -1.40E+03, 1.80E-03, 1.5067874, -8.66E+02, 2.60E-03, 0.68806851, -1.05E+02, 3.72E-03, 0.36473933, -2.13E+01, 5.35E-03, 0.19182637, -3.90E+00, 7.67E-03, 0.10534669, -8.16E-01, 1.10E-02, 5.88E-02, -1.79E-01, 1.56E-02, 3.32E-02, -4.33E-02, 2.18E-02, 1.85E-02, -1.18E-02, 2.92E-02, 9.58E-03, -3.80E-03, 3.62E-02, 3.86E-03, -1.50E-03, 3.96E-02, 6.89E-05, -7.07E-04, 3.70E-02, -2.31E-03, -3.65E-04, 2.98E-02, -3.60E-03, -1.84E-04, 2.17E-02, -4.16E-03, -6.87E-05, 1.49E-02, -4.32E-03, 1.73E-05, 9.95E-03, -4.29E-03, 9.56E-05, 6.54E-03, -4.17E-03, 1.77E-04, 4.28E-03, -4.02E-03, 2.80E-04 }, sp.Kco);
            Assert.AreEqual(new double[] { 1.19E-04, -4.25E-03, 1.33E-01, 1.38E-04, 7.70E-03, -2.82E-02, 6.85E-04, 4.51E-03, 2.61E-01, 1.87E-03, 2.94E-02, 3.73E-01, 5.66E-03, 6.56E-02, 1.15E+00, 1.57E-02, 0.1850682, 2.49E+00, 4.26E-02, 0.45603305, 5.85E+00, 0.11098163, 1.1248091, 1.28E+01, 0.28088471, 2.6562076, 27.878031, 0.68908828, 6.1284242, 59.312584, 1.6403812, 13.747643, 126.24812, 3.7775047, 30.129936, 275.00134, 8.3575506, 64.633461, 647.46033, 17.536446, 136.85663, 1794.5167, 34.343792, 291.97479, 6430.291, 62.246727, 654.85992, 30697.492, 105.39489, 1623.5507, 184109.5, 170.35548, 4542.1826, 1268640.8, 268.27866, 14015.146, 9396454, 417.03894, 45982.266, 72001096, 644.38965, 155615.83, 5.61E+08, 992.91235, 535381.31, 4.39364403E+09 }, sp.phico);
            Assert.AreEqual(new double[] { 1.02E+04, 1.67E+09, -5.70E+14, 5.54E+03, -4.46E+08, 1.79E+13, 1489.0962, -2.34E+07, 1.96E+11, 512.53589, -2.91E+06, 9.17E+09, 173.10504, -3.01E+05, 2.95E+08, 62.165543, -36891.793, 12607316, 23.001612, -4721, 567503.69, 8.8281174, -655.44958, 29000.309, 3.4944146, -96.757126, 1622.6423, 1.4265225, -15.279375, 100.77829, 0.60046798, -2.5885923, 6.9927955, 0.26147828, -0.47877559, 0.56028718, 0.11867946, -0.10004492, 5.51E-02, 5.69E-02, -2.50E-02, 7.30E-03, 2.92E-02, -8.05E-03, 1.43E-03, 1.62E-02, -3.50E-03, 4.29E-04, 9.60E-03, -2.03E-03, 1.84E-04, 5.95E-03, -1.48E-03, 1.04E-04, 3.78E-03, -1.23E-03, 7.40E-05, 2.43E-03, -1.10E-03, 6.48E-05, 1.57E-03, -1.03E-03, 6.78E-05, 1.02E-03, -9.71E-04, 8.24E-05 }, sp.Sco);
        }

        [Test]
        public void TestSofh()
        {
            MVG.Params(103, 0.4, 2.0, -2.0, -1E7, 1.0, -10.0, 0.14285714285714285, 2.3333333333333335);
            Assert.AreEqual(0, MVG.Sofh(-1E7));
            Assert.AreEqual(6.83350741435243408E-002, MVG.Sofh(-21544.346900318826), 1E-5);
            Assert.AreEqual(9.12129297498235209E-002, MVG.Sofh(-1E4), 1E-5);
            Assert.AreEqual(0.12076080836067363, MVG.Sofh(-4641.5888336127764), 1E-5);
        }

        [Test]
        public void TestKofh()
        {
            MVG.Params(103, 0.4, 2.0, -2.0, -1E7, 1.0, -10.0, 0.14285714285714285, 2.3333333333333335);
            Assert.AreEqual(0, MVG.Sofh(-1E7));
            Assert.AreEqual(3.43374502028177369E-023, MVG.Kofh(-4641588.8336127782), 1E-5);
            Assert.AreEqual(8.74052752237417620E-010, MVG.Kofh(-1E4), 1E-5);
            Assert.AreEqual(1.09235574984506215E-008, MVG.Kofh(-4641.5888336127764), 1E-5);
        }

        [Test]
        public void TestKofhS()
        {
            MVG.Params(103, 0.4, 2.0, -2.0, -1E7, 1.0, -10.0, 0.14285714285714285, 2.3333333333333335);
            Assert.AreEqual(8.74052752237418757E-010, MVG.KofhS(-10000.0, 9.12129297498235347E-002));
            Assert.AreEqual(2.05800228611534415E-009, MVG.KofhS(-7725.2047680064061, 0.10031815579678077));
            Assert.AreEqual(4.80986339103528703E-009, MVG.KofhS(-5967.8788707628973, 0.11024140753648699));
        }
    }
}
