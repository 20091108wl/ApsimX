// -----------------------------------------------------------------------
// <copyright file="SWIMTests.cs" company="APSIM Initiative">
//     Copyright (c) APSIM Initiative
// </copyright>
//
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SWIMFrame;

namespace UnitTests
{
    /// <summary>
    /// A suite of tests for the SWIM framework.
    /// All input and output values were retrieved from FORTRAN version using WRITE statements
    /// at start and end of method.
    /// </summary>
    [TestFixture]
    class SWIMTests
    {
        /// <summary>
        /// Test method nonlin.
        /// </summary>
        [Test]
        public void TestNonlin()
        {
            int[] n = new int[] { 23, 23, 23, 23 };
            double[][] x = new double[][] { new double[] { 3.354301E-06, 9.062281E-06, 2.211101E-05, 5.405671E-05, 1.286441E-04, 3.034657E-04, 7.068768E-04, 1.632747E-03, 3.740277E-03, 8.510290E-03, 1.924374E-02, 4.327070E-02, 9.674788E-02, 2.148795E-01, 4.724994E-01, 1.019938E+00, 2.120870E+00, 4.103255E+00, 7.062010E+00, 1.052146E+01, 1.373546E+01, 1.628369E+01, 1.813795E+01 },
                                            new double[] { 3.354301E-06,9.062281E-06,2.211101E-05,5.405671E-05,1.286441E-04,3.034657E-04,7.068768E-04,1.632747E-03,3.740277E-03,8.510290E-03,1.924374E-02,4.327070E-02,9.674788E-02,2.148795E-01,4.724994E-01,1.019938E+00,2.120870E+00,4.103255E+00,7.062010E+00,1.052146E+01,1.373546E+01,1.628369E+01,1.813795E+01 },
                                            new double[] { 1.740164E-06,5.488312E-06,1.750446E-05,5.750873E-05,1.811315E-04,5.503100E-04,1.607630E-03,4.531185E-03,1.234010E-02,3.249982E-02,8.262891E-02,2.015138E-01,4.644696E-01,9.847437E-01,1.851519E+00,3.002137E+00,4.207595E+00,5.252194E+00,6.054463E+00,6.631843E+00,7.034421E+00,7.311037E+00,7.49985218 },
                                            new double[] { 1.740164E-06,5.488312E-06,1.750446E-05,5.750873E-05,1.811315E-04,5.503100E-04,1.607630E-03,4.531185E-03,1.234010E-02,3.249982E-02,8.262891E-02,2.015138E-01,4.644696E-01,9.847437E-01,1.851519E+00,3.002137E+00,4.207595E+00,5.252194E+00,6.054463E+00,6.631843E+00,7.034421E+00,7.311037E+00,7.49985218 }
                                          };
            double[][] y = new double[][] { new double[] { 8.740528E-10, -1.139631E-06, -3.745951E-06, -1.012318E-05, -2.500095E-05, -5.983057E-05, -1.400616E-04, -3.237275E-04, -7.402293E-04, -1.677716E-03, -3.770240E-03, -8.399180E-03, -1.852487E-02, -4.033605E-02, -8.621387E-02, -1.789396E-01, -3.537897E-01, -6.472698E-01, -1.061788E+00, -1.537311E+00, -1.986433E+00, -2.354419E+00, -2.631054E+00 },
                                            new double[] { 8.740528E-10,-5.688333E-07,-1.870282E-06,-5.052952E-06,-1.247203E-05,-2.981977E-05,-6.971090E-05,-1.607958E-04,-3.665741E-04,-8.272015E-04,-1.847065E-03,-4.076566E-03,-8.869883E-03,-1.893890E-02,-3.937207E-02,-7.867789E-02,-1.482514E-01,-2.571233E-01,-4.019165E-01,-5.627090E-01,-7.143035E-01,-8.406170E-01,-0.937671313 },
                                            new double[] { 4.534462E-10,-1.860098E-07,-7.827367E-07,-2.763741E-06,-8.861448E-06,-2.696707E-05,-7.839762E-05,-2.189419E-04,-5.880709E-04,-1.518430E-03,-3.755019E-03,-8.819437E-03,-1.937167E-02,-3.886927E-02,-6.938366E-02,-1.084229E-01,-1.492204E-01,-1.853670E-01,-2.139873E-01,-2.351721E-01,-2.502733E-01,-0.260818333,-0.268098632 },
                                            new double[] { 4.534462E-10,-1.235415E-07,-5.200053E-07,-1.834312E-06,-5.871893E-06,-1.782608E-05,-5.164364E-05,-1.435129E-04,-3.827704E-04,-9.785819E-04,-2.386859E-03,-5.502670E-03,-1.180372E-02,-2.305212E-02,-4.009008E-02,-6.140720E-02,-8.352305E-02,-1.032118E-01,-1.189630E-01,-1.307495E-01,-1.392288E-01,-0.145191196,-0.149328616 }
                                          };
            double[] re = new double[] { 1E-2, 1E-2, 1E-2, 1E-2 };
            int[] expected = new int[] { 9, 7, 5, 4 };

            for (int i = 0; i < n.Length; i++)
                Assert.AreEqual(expected[i], (int)Extensions.TestMethod("Fluxes", "nonlin", new object[] { n[i], x[i], y[i], re[i] }));
        }

        /// <summary>
        /// Test method odef.
        /// </summary>
        [Test]
        public void TestOdef()
        {
            int[] n1 = new int[] { 1, 1, 1, 20 };
            int[] n2 = new int[] { 2, 2, 12, 23 };
            MVG.TestParams(103, 9.0, 0.99670220130280185, 9.99999999999998460E-003);
            SoilProps sp = Soil.gensptbl(1.0, new SoilParam(10, 103, 0.4, 2.0, -2.0, -10.0, 1.0 / 3.0, 1.0), true);
            Fluxes.FluxTable(5.0, sp);
            double[][] aK = new double[][] {new double[] { 8.740528E-10,3.148991E-09,1.116638E-08,3.906024E-08,1.350389E-07,4.621461E-07,1.567779E-06,5.278070E-06,1.765091E-05,5.868045E-05,1.940329E-04,6.381824E-04,2.086113E-03,6.757548E-03,2.152482E-02,6.618264E-02,1.887549E-01,4.655217E-01,9.153457E-01,1.393520E+00,1.733586E+00,1.916091084,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
                                            new double[] { 8.740528E-10,3.148991E-09,1.116638E-08,3.906024E-08,1.350389E-07,4.621461E-07,1.567779E-06,5.278070E-06,1.765091E-05,5.868045E-05,1.940329E-04,6.381824E-04,2.086113E-03,6.757548E-03,2.152482E-02,6.618264E-02,1.887549E-01,4.655217E-01,9.153457E-01,1.393520E+00,1.733586E+00,1.916091E+00,2.000000E+00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                            new double[] { 8.740528E-10,3.148991E-09,1.116638E-08,3.906024E-08,1.350389E-07,4.621461E-07,1.567779E-06,5.278070E-06,1.765091E-05,5.868045E-05,1.940329E-04,6.381824E-04,2.086113E-03,6.757548E-03,2.152482E-02,6.618264E-02,1.887549E-01,4.655217E-01,9.153457E-01,1.393520E+00,1.733586E+00,1.916091E+00,2.000000E+00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                            new double[] { 8.740528E-10,3.148991E-09,1.116638E-08,3.906024E-08,1.350389E-07,4.621461E-07,1.567779E-06,5.278070E-06,1.765091E-05,5.868045E-05,1.940329E-04,6.381824E-04,2.086113E-03,6.757548E-03,2.152482E-02,6.618264E-02,1.887549E-01,4.655217E-01,9.153457E-01,1.393520E+00,1.733586E+00,1.916091E+00,2.000000E+00,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
                                            };
            double[][] hpK = new double[][] { new double[] { 1.942348E-09, 6.760092E-09, 2.390674E-08, 8.260039E-08, 2.837631E-07, 9.641152E-07, 3.252644E-06, 1.089420E-05, 3.627295E-05, 1.201039E-04, 3.956002E-04, 1.295509E-03, 4.209049E-03, 1.348672E-02, 4.200805E-02, 1.232292E-01, 3.212703E-01, 6.904247E-01, 1.165940E+00, 1.578200E+00, 1.834723657, 1.963039316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                              new double[] { 1.942348E-09,6.760092E-09,2.390674E-08,8.260039E-08,2.837631E-07,9.641152E-07,3.252644E-06,1.089420E-05,3.627295E-05,1.201039E-04,3.956002E-04,1.295509E-03,4.209049E-03,1.348672E-02,4.200805E-02,1.232292E-01,3.212703E-01,6.904247E-01,1.165940E+00,1.578200E+00,1.834724E+00,1.963039E+00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                              new double[] { 1.942348E-09,6.760092E-09,2.390674E-08,8.260039E-08,2.837631E-07,9.641152E-07,3.252644E-06,1.089420E-05,3.627295E-05,1.201039E-04,3.956002E-04,1.295509E-03,4.209049E-03,1.348672E-02,4.200805E-02,1.232292E-01,3.212703E-01,6.904247E-01,1.165940E+00,1.578200E+00,1.834724E+00,1.963039E+00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                              new double[] { 1.942348E-09,6.760092E-09,2.390674E-08,8.260039E-08,2.837631E-07,9.641152E-07,3.252644E-06,1.089420E-05,3.627295E-05,1.201039E-04,3.956002E-04,1.295509E-03,4.209049E-03,1.348672E-02,4.200805E-02,1.232292E-01,3.212703E-01,6.904247E-01,1.165940E+00,1.578200E+00,1.834724E+00,1.963039E+00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
                                            };
            double[][] u = new double[][] { new double[] { 4.9914082920553025, 4364796.0347727695 },
                                            new double[] { 5.0000148144063985, 4379861.1673235269 },
                                            new double[] { 4.9682912374903765, -570.76826254349544 },
                                            new double[] { -1.8708427784692783, 0.46037822906582598}
                                          };

            for (int i = 0; i < n1.Length; i++)
                Assert.AreEqual(u[i], (double[])Extensions.TestMethod("Fluxes", "odef", new object[] { n1[i], n2[i], aK[i], hpK[i] }));
        }

        /// <summary>
        /// Test method MVG.Params
        /// </summary>
        [Test]
        public void TestMVGParams()
        {
            Assert.AreEqual(true, MVG.TestParams(103, 9.0, 0.99670220130280185, 9.99999999999998460E-003));
            Assert.AreEqual(true, MVG.TestParams(109, 21.0, 0.99990576371017859, 0.25132106297918300));
        }

        /// <summary>
        /// Test method gensptbl
        /// </summary>
        [Test]
        public void TestGensptbl()
        {
            MVG.TestParams(103, 9.0, 0.99670220130280185, 9.99999999999998460E-003);
            SoilProps sp = Soil.gensptbl(1.0, new SoilParam(10, 103, 0.4, 2.0, -2.0, -10.0, 1.0 / 3.0, 1.0), true);
            Assert.AreEqual(103, sp.sid);
            Assert.AreEqual(16, sp.nld);
            Assert.AreEqual(67, sp.n);
            Assert.AreEqual(23, sp.nc);
            Assert.AreEqual(0.4, sp.ths);
            Assert.AreEqual(2.0, sp.ks);
            Assert.AreEqual(-2.0, sp.he);
            Assert.AreEqual(18.137953, sp.phie, 0.0001);

            double[] sd = new double[] { 0, 1.681505E-03, 3.641995E-03, 5.927758E-03, 8.592762E-03, 1.169993E-02, 1.532262E-02, 1.954637E-02, 2.447089E-02, 3.021248E-02, 3.690667E-02, 4.471152E-02, 5.381131E-02, 6.442088E-02, 7.679074E-02, 9.121293E-02 };
            double[] lnh = new double[] { 1.611810E+01, 1.565758E+01, 1.519706E+01, 1.473655E+01, 1.427603E+01, 1.381551E+01, 1.335499E+01, 1.289448E+01, 1.243396E+01, 1.197344E+01, 1.151293E+01, 1.105241E+01, 1.059189E+01, 1.013137E+01, 9.670857E+00, 9.210341E+00 };
            double[] S = new double[] { 9.12129283E-02, 9.56676379E-02, 0.10031816, 0.10517308, 0.11024141, 0.11553251, 0.12105618, 0.12682264, 0.13284256, 0.13912708, 0.14568783, 0.15253696, 0.15968712, 0.16715157, 0.17494409, 0.18307911, 0.19157168, 0.20043752, 0.20969297, 0.21935518, 0.22944199, 0.239972, 0.25096464, 0.26244017, 0.27441967, 0.28692514, 0.29997942, 0.31360632, 0.32783052, 0.34267759, 0.35817391, 0.37434664, 0.39122367, 0.40883315, 0.42720348, 0.44636273, 0.46633807, 0.48715466, 0.50883472, 0.53139526, 0.55484605, 0.57918596, 0.60439837, 0.6304453, 0.65725988, 0.68473697, 0.7127229, 0.74100459, 0.7693013, 0.79726136, 0.82446897, 0.85046542, 0.8747865, 0.89701217, 0.91681963, 0.93402398, 0.94859558, 0.96064913, 0.97040969, 0.97816873, 0.98424155, 0.98893458, 0.99252462, 0.99524909, 0.9973039, 0.99884635, 1 };
            double[] h = new double[] { -10000, -8789.3145, -7725.2046, -6789.9253, -5967.8789, -5245.3564, -4610.3086, -4052.1453, -3561.5579, -3130.3652, -2751.3765, -2418.2712, -2125.4946, -1868.1639, -1641.988, -1443.1949, -1268.4694, -1114.8977, -979.91858, -861.28125, -757.0072, -665.35742, -584.80353, -514.0022, -451.77271, -397.07724, -349.00366, -306.75031, -269.61249, -236.97089, -208.28116, -183.06487, -160.90146, -141.42136, -124.29967, -109.25089, -96.024048, -84.398552, -74.180542, -65.199608, -57.305988, -50.368034, -44.27005, -38.910336, -34.19952, -30.059032, -26.419828, -23.221218, -20.409859, -17.938866, -15.767034, -13.858142, -12.180356, -10.705698, -9.4095745, -8.2703714, -7.2690892, -6.3890309, -5.61552, -4.9356575, -4.3381042, -3.8128963, -3.3512745, -2.9455404, -2.5889282, -2.2754903, -2 };
            double[] phi = new double[] { 3.354302E-06, 4.899393E-06, 6.444484E-06, 9.062281E-06, 1.204212E-05, 1.657599E-05, 2.211101E-05, 3.004768E-05, 4.010838E-05, 5.405671E-05, 7.209357E-05, 9.661269E-05, 1.286441E-04, 1.716715E-04, 2.281573E-04, 3.034657E-04, 4.025267E-04, 5.339402E-04, 7.068768E-04, 9.354911E-04, 1.236225E-03, 1.632747E-03, 2.153942E-03, 2.839742E-03, 3.740277E-03, 4.923224E-03, 6.474925E-03, 8.510290E-03, 1.117724E-02, 1.467093E-02, 1.924374E-02, 2.522673E-02, 3.304893E-02, 4.327070E-02, 5.661828E-02, 7.403654E-02, 9.674788E-02, 1.263353E-01, 1.648382E-01, 2.148795E-01, 2.798114E-01, 3.638957E-01, 4.724994E-01, 6.123074E-01, 7.915112E-01, 1.019938E+00, 1.309025E+00, 1.671536E+00, 2.120870E+00, 2.669820E+00, 3.328741E+00, 4.103255E+00, 4.991914E+00, 5.984547E+00, 7.062010E+00, 8.197802E+00, 9.361253E+00, 1.052146E+01, 1.165079E+01, 1.272727E+01, 1.373546E+01, 1.466618E+01, 1.551554E+01, 1.628369E+01, 1.697354E+01, 1.758975E+01, 1.813795E+01 };
            double[] sc = new double[] { 9.121293E-02, 1.051731E-01, 1.210562E-01, 1.391271E-01, 1.596871E-01, 1.830791E-01, 2.096930E-01, 2.399720E-01, 2.744197E-01, 3.136063E-01, 3.581739E-01, 4.088332E-01, 4.663381E-01, 5.313953E-01, 6.043984E-01, 6.847370E-01, 7.693013E-01, 8.504654E-01, 9.168196E-01, 9.606491E-01, 9.842416E-01, 9.952491E-01, 1.000000E+00 };
            double[] hc = new double[] { -10000, -6789.9253, -4610.3086, -3130.3652, -2125.4946, -1443.1949, -979.91858, -665.35742, -451.77271, -306.75031, -208.28116, -141.42136, -96.024048, -65.199608, -44.27005, -30.059032, -20.409859, -13.858142, -9.4095745, -6.3890309, -4.3381042, -2.9455404, -2 };
            double[] kc = new double[] { 8.740528E-10, 3.148991E-09, 1.116638E-08, 3.906024E-08, 1.350389E-07, 4.621461E-07, 1.567779E-06, 5.278070E-06, 1.765091E-05, 5.868045E-05, 1.940329E-04, 6.381824E-04, 2.086113E-03, 6.757548E-03, 2.152482E-02, 6.618264E-02, 1.887549E-01, 4.655217E-01, 9.153457E-01, 1.393520E+00, 1.733586E+00, 1.916091E+00, 2.000000E+00 };
            double[] phic = new double[] { 3.354302E-06, 9.062281E-06, 2.211101E-05, 5.405671E-05, 1.286441E-04, 3.034657E-04, 7.068768E-04, 1.632747E-03, 3.740277E-03, 8.510290E-03, 1.924374E-02, 4.327070E-02, 9.674788E-02, 2.148795E-01, 4.724994E-01, 1.019938E+00, 2.120870E+00, 4.103255E+00, 7.062010E+00, 1.052146E+01, 1.373546E+01, 1.628369E+01, 1.813795E+01 };
            double[,] kco = new double[,] { {1.7065236E-04,5.8079371E-04,6.4858364E-04,1.0662106E-03,1.4816632E-03,2.2123414E-03,3.2065664E-03,4.7137463E-03,6.8938150E-03,1.0113389E-02,1.4823619E-02,2.1733435E-02,3.1813398E-02,4.6386257E-02,6.6936351E-02,9.4217546E-02,1.2541132E-01,1.4951368E-01,1.4989966E-01,1.2351422E-01,8.7159574E-02,5.6167781E-02},
                                            {1.0279558E+02,-1.0950004E+01,1.1631827E+01,2.4742544E+00,2.8009834E+00,1.4297020E+00,1.0055914E+00,6.1984211E-01,4.0856281E-01,2.6370642E-01,1.7302954E-01,1.1327697E-01,7.4349478E-02,4.8458178E-02,3.0956652E-02,1.8661717E-02,9.5462967E-03,2.5446513E-03,-2.4338358E-03,-5.1836846E-03,-6.1152456E-03,-6.0416404E-03},
                                            {-1.1014180E+07,1.0366468E+06,-1.4404853E+05,6.4776963E+03,-3.2800042E+03,-2.9733185E+02,-1.5195483E+02,-3.3613876E+01,-1.0596748E+01,-2.8950191E+00,-8.5836959E-01,-2.5019225E-01,-7.5391494E-02,-2.3326242E-02,-7.6989252E-03,-2.8280986E-03,-1.2017451E-03,-5.7243282E-04,-2.7216660E-04,-1.0127943E-04,6.7689198E-06,8.3435050E-05}};
            double[,] phico = new double[,] { {4.2191087E-04,4.1490054E-04,1.3055570E-03,2.3527991E-03,5.1783756E-03,1.0292188E-02,2.1083130E-02,4.2141590E-02,8.4298037E-02,1.6711499E-01,3.3009821E-01,6.4871347E-01,1.2700446E+00,2.4763455E+00,4.8074398E+00,9.2763567E+00,1.7721508E+01,3.3268780E+01,6.0792885E+01,1.0763366E+02,1.8568622E+02,3.1537164E+02},
                                              {-2.4310675E-02,3.8141381E-02,6.0423445E-03,5.9675306E-02,6.9302924E-02,1.5162292E-01,2.4482536E-01,4.4526318E-01,7.6159847E-01,1.3289092E+00,2.2842703E+00,3.9328730E+00,6.7402439E+00,1.1553151E+01,1.9836424E+01,3.4366638E+01,6.0912647E+01,1.1351585E+02,2.3255156E+02,5.5494055E+02,1.5991620E+03,5.4331401E+03},
                                              {1.6745514E+00,-7.8944385E-01,1.0811266E+00,1.1368366E-01,1.2318650E+00,1.1724924E+00,2.2706239E+00,3.1186645E+00,4.9380713E+00,7.2972093E+00,1.1092872E+01,1.6658104E+01,2.5343624E+01,3.9240189E+01,6.3999161E+01,1.1694948E+02,2.6701154E+02,8.6063892E+02,4.1353701E+03,2.7854828E+04,2.3281722E+05,2.1759720E+06} };
            double[,] sco = new double[,] { {2.5533308E+03,2.0056914E+03,7.8741882E+02,4.0971344E+02,1.9202237E+02,9.5473686E+01,4.6876476E+01,2.3405447E+01,1.1715723E+01,5.9086218E+00,2.9925590E+00,1.5229950E+00,7.7818018E-01,3.9929438E-01,2.0587862E-01,1.0690963E-01,5.6183353E-02,3.0120693E-02,1.6610587E-02,9.4413562E-03,5.4934365E-03,3.2404163E-03},
                                            {2.9967674E+08,-1.1468523E+08,-7.9083850E+06,-2.7884513E+06,-4.6288494E+05,-1.0656199E+05,-2.1770463E+04,-4.7983735E+03,-1.0442969E+03,-2.3284184E+02,-5.2216114E+01,-1.1861020E+01,-2.7212012E+00,-6.3357753E-01,-1.5097752E-01,-3.7651472E-02,-1.0281163E-02,-3.3105509E-03,-1.3610598E-03,-7.3612464E-04,-4.9844378E-04,-3.8756459E-04},
                                            {-5.5804049E+13,4.1582275E+12,3.0274222E+10,1.3287194E+10,7.4289587E+08,8.2872184E+07,6.9799375E+06,6.8719806E+05,6.5081379E+04,6.4474155E+03,6.4173175E+02,6.5254692E+01,6.7357335E+00,7.1273834E-01,7.8501269E-02,9.3673207E-03,1.3080738E-03,2.3997620E-04,6.4125285E-05,2.5660553E-05,1.4844732E-05,1.1743321E-05} };

            for (int i = 0; i < 16; i++)
            {
                Assert.AreEqual(sd[i], sp.Sd[i], 0.00001);
                Assert.AreEqual(lnh[i], sp.lnh[i], 0.00001);
            }
            for (int i = 0; i < 66; i++)
            {
                Assert.AreEqual(S[i], sp.S[i], 0.00001);
                Assert.AreEqual(h[i], sp.h[i], 0.001);
                Assert.AreEqual(phi[i], sp.phi[i], 0.00001);
            }
            for (int i = 0; i < 23; i++)
            {
                Assert.AreEqual(sc[i], sp.Sc[i], 0.00001);
                Assert.AreEqual(hc[i], sp.hc[i], 0.0001);
                Assert.AreEqual(kc[i], sp.Kc[i], 0.0001);
                Assert.AreEqual(phic[i], sp.phic[i], 0.00001);
            }
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 22; j++)
                {
                    Assert.AreEqual(kco[i, j], sp.Kco[i, j], Math.Abs(sp.Kco[i, j] * (1.0 / 100000.0)));
                    Assert.AreEqual(phico[i, j], sp.phico[i, j], Math.Abs(sp.phico[i, j] * (1.0 / 100000.0)));
                    Assert.AreEqual(sco[i, j], sp.Sco[i, j], Math.Abs(sco[i, j] * (1.0 / 100000.0)));
                }

            MVG.TestParams(109, 21.0, 0.99990576371017859, 0.25132106297918300);
            sp = Soil.gensptbl(1.0, new SoilParam(10, 109, 0.6, 0.2, -2.0, -40.0, 1.0 / 9.0, 1.0), true);
            Assert.AreEqual(109, sp.sid);
            Assert.AreEqual(16, sp.nld);
            Assert.AreEqual(67, sp.n);
            Assert.AreEqual(23, sp.nc);
            Assert.AreEqual(0.6, sp.ths);
            Assert.AreEqual(0.2, sp.ks);
            Assert.AreEqual(-2.0, sp.he);
            Assert.AreEqual(7.4998522, sp.phie, 0.0001);

            sd = new double[] { 0, 1.762584E-02, 3.617703E-02, 5.570216E-02, 7.625236E-02, 9.788146E-02, 1.206461E-01, 1.446059E-01, 1.698235E-01, 1.963652E-01, 2.243003E-01, 2.537019E-01, 2.846472E-01, 3.172170E-01, 3.514968E-01, 3.875760E-01 };
            lnh = new double[] { 1.611810E+01, 1.565758E+01, 1.519706E+01, 1.473655E+01, 1.427603E+01, 1.381551E+01, 1.335499E+01, 1.289448E+01, 1.243396E+01, 1.197344E+01, 1.151293E+01, 1.105241E+01, 1.059189E+01, 1.013137E+01, 9.670857E+00, 9.210341E+00 };
            S = new double[] { 0.38757604, 0.39802191, 0.4086186, 0.41936827, 0.43027312, 0.44133538, 0.4525573, 0.46394116, 0.4754892, 0.48720375, 0.49908715, 0.51114172, 0.52336979, 0.53577358, 0.54835546, 0.56111759, 0.57406211, 0.58719105, 0.60050613, 0.61400896, 0.62770075, 0.64158225, 0.65565348, 0.66991365, 0.68436086, 0.6989916, 0.71380019, 0.72877842, 0.74391448, 0.75919175, 0.77458793, 0.79007274, 0.80560666, 0.82113814, 0.83660144, 0.85191458, 0.86697733, 0.88167113, 0.89586055, 0.90939844, 0.92213374, 0.93392366, 0.94464731, 0.95421922, 0.96259916, 0.96979564, 0.97586316, 0.9808923, 0.98499763, 0.98830467, 0.99093872, 0.99301726, 0.99464488, 0.9959116, 0.99689269, 0.99764961, 0.99823189, 0.99867868, 0.99902099, 0.99928284, 0.99948293, 0.9996357, 0.99975228, 0.99984115, 0.99990898, 0.9999606, 1 };
            h = new double[] { -10000, -8789.3145, -7725.2046, -6789.9253, -5967.8789, -5245.3564, -4610.3086, -4052.1453, -3561.5579, -3130.3652, -2751.3765, -2418.2712, -2125.4946, -1868.1639, -1641.988, -1443.1949, -1268.4694, -1114.8977, -979.91858, -861.28125, -757.0072, -665.35742, -584.80353, -514.0022, -451.77271, -397.07724, -349.00366, -306.75031, -269.61249, -236.97089, -208.28116, -183.06487, -160.90146, -141.42136, -124.29967, -109.25089, -96.024048, -84.398552, -74.180542, -65.199608, -57.305988, -50.368034, -44.27005, -38.910336, -34.19952, -30.059032, -26.419828, -23.221218, -20.409859, -17.938866, -15.767034, -13.858142, -12.180356, -10.705698, -9.4095745, -8.2703714, -7.2690892, -6.3890309, -5.61552, -4.9356575, -4.3381042, -3.8128963, -3.3512745, -2.9455404, -2.5889282, -2.2754903, -2 };
            phi = new double[] { 1.7401640E-06, 2.6657353E-06, 3.5913070E-06, 5.4883117E-06, 7.8675603E-06, 1.1926967E-05, 1.7504462E-05, 2.6268050E-05, 3.8727889E-05, 5.7508729E-05, 8.4476204E-05, 1.2416691E-04, 1.8113150E-04, 2.6366173E-04, 3.8153859E-04, 5.5031001E-04, 7.8978430E-04, 1.1293123E-03, 1.6076304E-03, 2.2799443E-03, 3.2201693E-03, 4.531185E-03, 6.351236E-03, 8.869621E-03, 1.234010E-02, 1.710553E-02, 2.362251E-02, 3.249982E-02, 4.453956E-02, 6.079444E-02, 8.262891E-02, 0.11179515, 0.15050687, 0.20151381, 0.26814798, 0.35432744, 0.46446955, 0.60328245, 0.77538371, 0.98474365, 1.2339785, 1.523618, 1.8515186, 2.2126453, 2.5993474, 3.0021374, 3.4107835, 3.8154471, 4.2075949, 4.5805526, 4.9296689, 5.2521939, 5.5469718, 5.8140793, 6.0544629, 6.2696362, 6.4614353, 6.6318431, 6.7828636, 6.9164438, 7.034421, 7.1384988, 7.2302341, 7.3110371, 7.382174, 7.4447765, 7.4998522 };
            sc = new double[] { 0.38757604, 0.41936827, 0.4525573, 0.48720375, 0.52336979, 0.56111759, 0.60050613, 0.64158225, 0.68436086, 0.72877842, 0.77458793, 0.82113814, 0.86697733, 0.90939844, 0.94464731, 0.96979564, 0.98499763, 0.99301726, 0.99689269, 0.99867868, 0.99948293, 0.99984115, 1 };
            hc = new double[] { -10000, -6789.9253, -4610.3086, -3130.3652, -2125.4946, -1443.1949, -979.91858, -665.35742, -451.77271, -306.75031, -208.28116, -141.42136, -96.024048, -65.199608, -44.27005, -30.059032, -20.409859, -13.858142, -9.4095745, -6.3890309, -4.3381042, -2.9455404, -2 };
            kc = new double[] { 4.5344617E-10, 2.3743072E-09, 1.1753716E-08, 5.5329043E-08, 2.4889215E-07, 1.0743893E-06, 4.4657668E-06, 1.7919621E-05, 6.9505441E-05, 2.6033705E-04, 9.3651534E-04, 3.1898513E-03, 9.9814255E-03, 2.7218757E-02, 6.0491391E-02, 1.0503040E-01, 1.4560257E-01, 1.7263249E-01, 1.8734698E-01, 1.9452323E-01, 1.9783939E-01, 1.9933397E-01, 2.0000000E-01 };
            phic = new double[] { 1.7401640E-06, 5.4883117E-06, 1.7504462E-05, 5.7508729E-05, 1.8113150E-04, 5.5031001E-04, 1.6076304E-03, 4.5311847E-03, 1.2340101E-02, 3.2499816E-02, 8.2628906E-02, 2.0151381E-01, 4.6446955E-01, 9.8474365E-01, 1.8515186E+00, 3.0021374E+00, 4.2075949E+00, 5.2521939E+00, 6.0544629E+00, 6.6318431E+00, 7.0344210E+00, 7.3110371E+00, 7.4998522E+00 };
            kco = new double[,] { {1.5227226E-04,7.3766423E-04,8.3584001E-04,1.2871395E-03,1.7977869E-03,2.5976312E-03,3.7176549E-03,5.3458442E-03,7.6736873E-03,1.0991316E-02,1.5616902E-02,2.1780169E-02,2.9176226E-02,3.6171995E-02,3.9565440E-02,3.6972564E-02,2.9837649E-02,2.1724641E-02,1.4917891E-02,9.9479603E-03,6.5431832E-03,4.2771096E-03},
                                  {2.7579688E+02,-1.3831285E+01,1.0314801E+01,2.4263067E+00,1.5067874E+00,6.8806851E-01,3.6473933E-01,1.9182637E-01,1.0534669E-01,5.8785554E-02,3.3217445E-02,1.8490892E-02,9.5809121E-03,3.8562873E-03,6.8902707E-05,-2.3098458E-03,-3.6002519E-03,-4.1623102E-03,-4.3207356E-03,-4.2876173E-03,-4.1706106E-03,-4.0233247E-03},
                                  {-4.7941888E+07,1.4481920E+06,-9.9484430E+04,-1.3957233E+03,-8.6594836E+02,-1.0521148E+02,-2.1306089E+01,-3.8994749E+00,-8.1557214E-01,-1.7885220E-01,-4.3302950E-02,-1.1781353E-02,-3.8039780E-03,-1.5011667E-03,-7.0697255E-04,-3.6546707E-04,-1.8415794E-04,-6.8739566E-05,1.7346478E-05,9.5562013E-05,1.7682239E-04,2.7953979E-04}};
            phico = new double[,] { {1.1851387E-04,1.3756832E-04,6.8460242E-04,1.8676027E-03,5.6625279E-03,1.5686782E-02,4.2565540E-02,1.1098163E-01,2.8088471E-01,6.8908828E-01,1.6403812E+00,3.7775047E+00,8.3575506E+00,1.7536446E+01,3.4343792E+01,6.2246727E+01,1.0539489E+02,1.7035548E+02,2.6827866E+02,4.1703894E+02,6.4438965E+02,9.9291235E+02},
                                    {-4.2546061E-03,7.7001620E-03,4.5110066E-03,2.9368868E-02,6.5620005E-02,1.8506820E-01,4.5603305E-01,1.1248091E+00,2.6562076E+00,6.1284242E+00,1.3747643E+01,3.0129936E+01,6.4633461E+01,1.3685663E+02,2.9197479E+02,6.5485992E+02,1.6235507E+03,4.5421826E+03,1.4015146E+04,4.5982266E+04,1.5561583E+05,5.3538131E+05},
                                    {1.3321328E-01,-2.8213441E-02,2.6137620E-01,3.7343547E-01,1.1513679E+00,2.4925144E+00,5.8535886E+00,1.2810239E+01,2.7878031E+01,5.9312584E+01,1.2624812E+02,2.7500134E+02,6.4746033E+02,1.7945167E+03,6.4302910E+03,3.0697492E+04,1.8410950E+05,1.2686408E+06,9.3964540E+06,7.2001096E+07,5.6065018E+08,4.3936440E+09}};
            sco = new double[,] { {1.0227699E+04,5.5435820E+03,1.4890962E+03,5.1253589E+02,1.7310504E+02,6.2165543E+01,2.3001612E+01,8.8281174E+00,3.4944146E+00,1.4265225E+00,6.0046798E-01,2.6147828E-01,1.1867946E-01,5.6884490E-02,2.9227737E-02,1.6206026E-02,9.5994761E-03,5.9475303E-03,3.7791419E-03,2.4317987E-03,1.5740349E-03,1.0215811E-03},
                                  {1.6708429E+09,-4.4609238E+08,-2.3408734E+07,-2.9125728E+06,-3.0070969E+05,-3.6891793E+04,-4.7210000E+03,-6.5544958E+02,-9.6757126E+01,-1.5279375E+01,-2.5885923E+00,-4.7877559E-01,-1.0004492E-01,-2.5038252E-02,-8.0549689E-03,-3.4989247E-03,-2.0326169E-03,-1.4759374E-03,-1.2306094E-03,-1.1044876E-03,-1.0269132E-03,-9.7091834E-04},
                                  {-5.7003155E+14,1.7859992E+13,1.9584691E+11,9.1657103E+09,2.9465027E+08,1.2607316E+07,5.6750369E+05,2.9000309E+04,1.6226423E+03,1.0077829E+02,6.9927955E+00,5.6028718E-01,5.5072814E-02,7.3003420E-03,1.4327366E-03,4.2855239E-04,1.8419327E-04,1.0439868E-04,7.3972609E-05,6.4804532E-05,6.7844150E-05,8.2393039E-05}};

            for (int i = 0; i < 16; i++)
            {
                Assert.AreEqual(sd[i], sp.Sd[i], 0.00001);
                Assert.AreEqual(lnh[i], sp.lnh[i], 0.00001);
            }
            for (int i = 0; i < 66; i++)
            {
                Assert.AreEqual(S[i], sp.S[i], 0.00001);
                Assert.AreEqual(h[i], sp.h[i], 0.001);
                Assert.AreEqual(phi[i], sp.phi[i], 0.00001);
            }
            for (int i = 0; i < 23; i++)
            {
                Assert.AreEqual(sc[i], sp.Sc[i], 0.00001);
                Assert.AreEqual(hc[i], sp.hc[i], 0.0001);
                Assert.AreEqual(kc[i], sp.Kc[i], 0.0001);
                Assert.AreEqual(phic[i], sp.phic[i], 0.00001);
            }
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 22; j++)
                {
                    Assert.AreEqual(kco[i, j], sp.Kco[i, j], Math.Abs(sp.Kco[i, j] * (1.0 / 100000.0)));
                    Assert.AreEqual(phico[i, j], sp.phico[i, j], Math.Abs(sp.phico[i, j] * (1.0 / 100000.0)));
                    Assert.AreEqual(sco[i, j], sp.Sco[i, j], Math.Abs(sco[i, j] * (1.0 / 100000.0)));
                }
        }

        [Test]
        public void TestSofh()
        {
            MVG.Params(103, 0.4, 2.0, -2.0, -1E7, 1.0, -10.0, 0.14285714285714285, 2.3333333333333335);
            Assert.AreEqual(0, MVG.Sofh(-1E7));
            Assert.AreEqual(6.83350741435243408E-002, MVG.Sofh(-21544.346900318826), 1E-5);
            Assert.AreEqual(9.12129297498235209E-002, MVG.Sofh(-1E4), 1E-5);
            Assert.AreEqual(0.12076080836067363, MVG.Sofh(-4641.5888336127764), 1E-5);
        }

        [Test]
        public void TestKofh()
        {
            MVG.Params(103, 0.4, 2.0, -2.0, -1E7, 1.0, -10.0, 0.14285714285714285, 2.3333333333333335);
            Assert.AreEqual(0, MVG.Sofh(-1E7));
            Assert.AreEqual(3.43374502028177369E-023, MVG.Kofh(-4641588.8336127782), 1E-5);
            Assert.AreEqual(8.74052752237417620E-010, MVG.Kofh(-1E4), 1E-5);
            Assert.AreEqual(1.09235574984506215E-008, MVG.Kofh(-4641.5888336127764), 1E-5);
        }

        [Test]
        public void TestKofhS()
        {
            MVG.Params(103, 0.4, 2.0, -2.0, -1E7, 1.0, -10.0, 0.14285714285714285, 2.3333333333333335);
            Assert.AreEqual(8.74052752237418757E-010, MVG.KofhS(-10000.0, 9.12129297498235347E-002));
            Assert.AreEqual(2.05800228611534415E-009, MVG.KofhS(-7725.2047680064061, 0.10031815579678077));
            Assert.AreEqual(4.80986339103528703E-009, MVG.KofhS(-5967.8788707628973, 0.11024140753648699));
        }
        [Test]
        public void TestCuco()
        {
            double[] co = new double[] { 8.74052752237418757E-010, 1.70652355927647116E-004, 102.79557553704042, -11014179.913490161 };
            double[] res = (double[])Extensions.TestMethod("Soil", "Cuco", new object[] {new double[] {  3.35430139632049164E-006, 4.89939274080199067E-006, 6.44448408528348971E-006, 9.06228104811576516E-006 },
                                                                                         new double[] { 8.74052752237418757E-010, 1.34250386454775908E-009, 2.05800228611534415E-009, 3.14899124207714114E-009 } });
            for (int i = 0; i < 4; i++)
                Assert.AreEqual(co[i], res[i], 1E-7);

            co = new double[] { 3.35430139632049164E-006, 4.21910871760320619E-004, -2.43106740521981946E-002, 1.6745513940808423 };
            res = (double[])Extensions.TestMethod("Soil", "Cuco", new object[] {new double[] {  9.12129297498235347E-002, 9.56676400855468595E-002, 0.10031815579678077, 0.10517308336649288 },
                                                                                new double[] { 3.35430139632049164E-006, 4.89939274080199067E-006, 6.44448408528348971E-006, 9.06228104811576516E-006 } });
            for (int i = 0; i < 4; i++)
                Assert.AreEqual(co[i], res[i], 1E-7);

            co = new double[] { 6.61826402005915582E-002, 9.42175445640624359E-002, 1.86617174113774507E-002, -2.82809870210848054E-003 };
            res = (double[])Extensions.TestMethod("Soil", "Cuco", new object[] {new double[] { 1.0199380797967188, 1.3090248223018064, 1.6715364927481866, 2.1208697302753805},
                                                                                new double[] { 6.61826402005915582E-002, 9.49109394182188898E-002, 0.13471563346364274, 0.18875488914512453 } });
            for (int i = 0; i < 4; i++)
                Assert.AreEqual(co[i], res[i], 1E-7);
        }

        [Test]
        public void TestFluxTable()
        {
            MVG.TestParams(103, 9.0, 0.99670220130280185, 9.99999999999998460E-003);
            SoilProps sp = Soil.gensptbl(1.0, new SoilParam(10, 103, 0.4, 2.0, -2.0, -10.0, 1.0 / 3.0, 1.0), true);
            Fluxes.FluxTable(5.0, sp);
            FluxTable ft = Fluxes.ft;
        }

        [Test]
        public void TestCurv()
        {
            int[] n = new int[] { 23, 8, 23, 8 };
            double[][] x = new double[][] { new double[] { 3.3543015E-06, 9.0622807E-06, 2.2111013E-05, 5.4056705E-05, 1.2864407E-04, 3.0346573E-04, 7.0687680E-04, 1.6327475E-03, 3.7402771E-03, 8.5102897E-03, 1.9243740E-02, 4.3270700E-02, 9.6747883E-02, 2.1487948E-01, 4.7249940E-01, 1.0199381E+00, 2.1208696E+00, 4.1032548E+00, 7.0620103E+00, 1.0521457E+01, 1.3735456E+01, 1.6283688E+01, 1.8137953E+01 },
                                            new double[] {1.8137953E+01,2.2137953E+01,3.0137953E+01,4.2137953E+01,5.8137953E+01,7.8137953E+01,1.0213795E+02,1.3013795E+02},
                                            new double[] {3.3543015E-06,9.0622807E-06,2.2111013E-05,5.4056705E-05,1.2864407E-04,3.0346573E-04,7.0687680E-04,1.6327475E-03,3.7402771E-03,8.5102897E-03,1.9243740E-02,4.3270700E-02,9.6747883E-02,2.1487948E-01,4.7249940E-01,1.0199381E+00,2.1208696E+00,4.1032548E+00,7.0620103E+00,1.0521457E+01,1.3735456E+01,1.6283688E+01,1.8137953E+01},
                                            new double[] {1.8137953E+01,2.2137953E+01,3.0137953E+01,4.2137953E+01,5.8137953E+01,7.8137953E+01,1.0213795E+02,1.3013795E+02}};
            double[][] y = new double[][] { new double[] { 8.7405277E-10, -1.1396308E-06, -3.7459513E-06, -1.0123181E-05, -2.5000949E-05, -5.9830572E-05, -1.4006159E-04, -3.2372751E-04, -7.4022928E-04, -1.6777156E-03, -3.7702400E-03, -8.3991796E-03, -1.8524867E-02, -4.0336047E-02, -8.6213874E-02, -1.7893964E-01, -3.5378972E-01, -6.4726980E-01, -1.0617878E+00, -1.5373107E+00, -1.9864334E+00, -2.3544193E+00, -2.6310543E+00 },
                                            new double[] {-2.6310543E+00,-3.2629155E+00,-4.6405277E+00,-6.8573999E+00,-9.9317606E+00,-1.3849302E+01,-1.8594527E+01,-2.4157049E+01},
                                            new double[] {8.7405277E-10,-1.1396308E-06,-3.7459513E-06,-1.0123181E-05,-2.5000949E-05,-5.9830572E-05,-1.4006159E-04,-3.2372751E-04,-7.4022928E-04,-1.6777156E-03,-3.7702400E-03,-8.3991796E-03,-1.8524867E-02,-4.0336047E-02,-8.6213874E-02,-1.7893964E-01,-3.5378972E-01,-6.4726980E-01,-1.0617878E+00,-1.5373107E+00,-1.9864334E+00,-2.3544193E+00,-2.6310543E+00},
                                            new double[] {-2.6310543E+00,-3.2629155E+00,-4.6405277E+00,-6.8573999E+00,-9.9317606E+00,-1.3849302E+01,-1.8594527E+01,-2.4157049E+01}};
            double[][] c = new double[][] { new double[] { 2.4892539E-04, 2.7270127E-04, 3.5260584E-04, 4.9843037E-04, 7.0969318E-04, 1.0252491E-03, 1.4834525E-03, 2.1532300E-03, 3.1275355E-03, 4.5415981E-03, 6.5765435E-03, 9.4508242E-03, 1.3329798E-02, 1.8000836E-02, 2.2055247E-02, 2.2035189E-02, 1.4786369E-02, 3.9846750E-03, -2.4683008E-03, -3.3295582E-03, -2.1743061E-03 },
                                            new double[] {-1.1500963E-02,-1.2802653E-02,-7.3534434E-03,-3.3268152E-03,-1.4477492E-03,-6.5551586E-04},
                                            new double[] {2.4892539E-04,2.7270127E-04,3.5260584E-04,4.9843037E-04,7.0969318E-04,1.0252491E-03,1.4834525E-03,2.1532300E-03,3.1275355E-03,4.5415981E-03,6.5765435E-03,9.4508242E-03,1.3329798E-02,1.8000836E-02,2.2055247E-02,2.2035189E-02,1.4786369E-02,3.9846750E-03,-2.4683008E-03,-3.3295582E-03,-2.1743061E-03},
                                            new double[] {-1.1500963E-02,-1.2802653E-02,-7.3534434E-03,-3.3268152E-03,-1.4477492E-03,-6.5551586E-04}};
            for (int i = 0; i < 4; i++)
            {
                double[] res = (double[])Extensions.TestMethod("Fluxes", "curv", new object[] { n[i], x[i], y[i] });
                for (int j = 0; j < c[i].Length; j++)
                {
                    Assert.AreEqual(c[i][j], res[j], 1E-7);
                }
            }
        }

        [Test]
        public void TestIndices()
        {
            // Note that not all of isel is tested. Looking at the results from FORTRAN, it appears that only values up to nsel are used.
            // After this, the rest are orders of magnitude higher (or 0) and in c# are all 0 so it looks like it just hasn't been zeroed.
            int[] n = new int[] { 21, 6, 21, 6 };
            int[] iend = new int[] { 15, 7, 15, 7 };
            double[][] c = new double[][] { new double[] {-2.1743061E-03,-3.3295582E-03,-2.4683008E-03,3.9846750E-03,1.4786369E-02,2.2035189E-02,2.2055247E-02,1.8000836E-02,1.3329798E-02,9.4508242E-03,6.5765435E-03,4.5415981E-03,3.1275355E-03,2.1532300E-03,1.4834525E-03,1.0252491E-03,7.0969318E-04,4.9843037E-04,3.5260584E-04,2.7270127E-04,2.4892539E-04},
                                            new double[] {-1.1500963E-02,-1.2802653E-02,-7.3534434E-03,-3.3268152E-03,-1.4477492E-03,-6.5551586E-04},
                                            new double[] {-2.1743061E-03,-3.3295582E-03,-2.4683008E-03,3.9846750E-03,1.4786369E-02,2.2035189E-02,2.2055247E-02,1.8000836E-02,1.3329798E-02,9.4508242E-03,6.5765435E-03,4.5415981E-03,3.1275355E-03,2.1532300E-03,1.4834525E-03,1.0252491E-03,7.0969318E-04,4.9843037E-04,3.5260584E-04,2.7270127E-04,2.4892539E-04},
                                            new double[] {-1.1500963E-02,-1.2802653E-02,-7.3534434E-03,-3.3268152E-03,-1.4477492E-03,-6.5551586E-04}};
            int[] nsel = new int[] { 9, 5, 9, 5 };
            int[][] isel = new int[][] {new int[] {1,4,7,8,9,11,14,17,23,14090454,14221528,14352602,14483676,14614750,14745824,14876898,15007972,15139046,15270120,15401194,15532268,15663342,15794416},
                                        new int[] {1,2,3,5,8,887401765,0,2692940},
                                        new int[] {1,4,7,8,9,11,14,17,23,24,25,27,30,14614750,14745824,14876898,15007972,15139046,15270120,15401194,15532268,15663342,15794416},
                                        new int[] {1,2,3,5,8,887401765,0,2692940}};
            for (int i = 0; i < 4; i++)
            {
                int[] temp = new int[isel[i].Length]; //using a temp var here since isel is passed by ref.
                Array.Copy(isel[i], temp, isel[i].Length);
                KeyValuePair<int, int[]> res = Fluxes.TestIndices(n[i], c[i], iend[i], 1.2);
                for (int j = 0; j < nsel[i]; j++)
                {
                    Assert.AreEqual(nsel[i], res.Key);
                    Assert.AreEqual(isel[i][j], res.Value[j]);
                }
            }
        }

        [Test]
        public void TestSsflux()
        {
            Fluxes.SetupSsflux(Soil.gensptbl(1.0, new SoilParam(10, 103, 0.4, 2.0, -2.0, -10.0, 1.0 / 3.0, 1.0), true), 23);
            int[] ia = new int[] { 1 };
            int[] ib = new int[] { 2 };
            double[] qin = new double[] { -1.14159583972650572E-006 };
            double[] ssflux = new double[] { -1.13963081216825338E-006 };

            for (int i = 0; i < ia.Length; i++)
            {
                double res = (double)Extensions.TestMethod("Fluxes", "ssflux", new object[] {ia[i], ib[i], 5.0, qin[i], 0.001 });
            }
        }
    }
}