{
  "$type": "Models.Core.Simulations, Models",
  "ExplorerWidth": 300,
  "Version": 69,
  "Name": "Simulations",
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "Children": [],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Name": "AgPastureExample",
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1980-07-01T00:00:00",
          "End": "1985-06-30T00:00:00",
          "Name": "Clock",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Weather, Models",
          "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
          "ExcelWorkSheetName": null,
          "Name": "Weather",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "SoilArbitrator",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "CaptureErrors": true,
          "CaptureWarnings": true,
          "CaptureSummaryText": true,
          "Name": "Summary",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Field",
          "Children": [
            {
              "$type": "Models.Manager, Models",
              "Code": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Xml.Serialization;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.PMF.Interfaces;\r\nusing Models.Soils;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.Interfaces;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Surface;\r\n\r\nnamespace Models\r\n{\r\n\t[Description(\"asdf\")]\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Simulation simulation;\r\n        [Link] Clock clock;  \r\n        [Link] Fertiliser Fertiliser;\r\n\t    [Link] SoilWater SoilWat;  \r\n\t    [Link] Nutrient SoilNitrogen;\r\n\t    [Link] SurfaceOrganicMatter SurfaceOM;\r\n\t    [Link] ISummary summary;\r\n\t    [Link] List<IRemovableBiomass> forages;\r\n\r\n\t\tprivate DateTime NoGrazingStart; \r\n\t\tprivate DateTime NoGrazingEnd; \r\n\t\tprivate double CowBodyWeight = 450.0;           // kg\r\n\t    private string CowDateCalving = \"1-aug\";\r\n\t    private string CowDateInCalf = \"1-nov\";\r\n\t    private string CowDateDryOff = \"30-apr\";\r\n\t    private double CowMSPerDay = 0.0;               // kgMS/day/head\r\n\t    private double CowMSEnergyPerKg = 77.0;         // MJME/kg MS (trying 77 c.f. 80)\r\n\t    private double CowWalkingDist = 3.0;\r\n\t    private double CowWalkingEnergyPerKm = 2.0;     // MJME/km\r\n\t    private double[] CowN2BodyPerc = {30.0, 10.0};  // Percent N in intake to body and product for milking and dry\r\n\t    private double[] CowN2UrinePerc = {42.0, 54.0}; // Percent N in intake to uriney and product for milking and dry\r\n\t    private double[] CowN2DungPerc = {28.0, 36.0};  // Percent N in intake to dung and product for milking and dry\r\n\t    private double[] LactationCurveParam = {20.0, 0.2, -0.04, 0.092}; // Parameters for the lactation curve, last parm 0.113 will give 500 kg MS, 0.092 will give 406 kg MS\r\n\t    private string CowState = \"Dry-Pregnant\";\r\n\t    private double WeeksBeforeCalving = 0.0;\r\n\t    private double LactationWeek = 0.0;\r\n\t    private double CowMEDemand = 0.0;\r\n\t    private double CowDMIntake = 0.0;\r\n\t    private double HerdMEDemand = 0.0;\r\n\t    private double SilageMade = 0.0;\r\n\t    private double SilageFed = 0.0;\r\n\t    private double SilageNFed = 0.0;\r\n\t    private double SilageMEFed = 0.0;\r\n\t    private double[] CowPregnancyParam = {72.154, -0.143}; // multiplier and exponential parameters for pregnancy energy (35 kg calf), time in weeks before\r\n        private double CowMaintME = 54.0;                      // MJME/day https://www.dairynz.co.nz/media/5789573/facts_and_figures_web_chapter4_cow_feed_requirements.pdf page 4 450- kg cow\r\n\t    private int PatchNumForUrine = -1;\r\n\t    private double AmountDungCReturned = 0.0;\r\n\t    private double iniOrgC;\r\n\t    private double iniOrgN;\r\n\t    private double[] UrineDepthPlacement;\r\n\t    private double myResidual;\r\n \t    private bool GrazeNow = false;\r\n\t    private Random rndConstSeed = new Random((int) 666);  // constand-seed random number for the pseudo-random return pattern\r\n\t    private Random rndRandom = new Random();              // random-seed random number generator for the random return pattern\r\n\t    private double[] ArrayLoad;\r\n\t    private double[] ArrayArea;\r\n\t    private double[] ArrayDepth;\r\n\t    private double[] ArrayVol;\r\n\t    private double slopeVolWithLoad;\r\n\t    private double incrWaterContent = 0.05;               // increase in volumetric water content - used ot calculate depth\r\n\r\n\t    // Enums for drop downs\r\n\t    public enum GrazingRotationTypeEnum\r\n\t    {\r\n\t    \tSimpleRotation,\r\n\t    \tTargetMass,\r\n\t    \tTargetMassAndLength\r\n\t    }\r\n\r\n\r\n\t    // Parameters\r\n\r\n\t\t[Description(\"Verbose mode - write many informational statements to the Summary file\")]\r\n        public bool Verbose { get; set; }\r\n   \r\n\t    [Separator(\"Grazing parameters\")]\r\n\t    [Description(\"Use a strict rotation, a target pasture mass, or both?\")]\r\n\t    [Units(\"-\")] \r\n\t    public GrazingRotationTypeEnum GrazingRotationType { get; set; } \r\n\r\n\r\n\t    [Separator(\"Settings for the 'Simple Rotation'\")]\r\n\t    [Description(\"Frequency of grazing (days) (0 will be interpreted as the end of each month)\")]\r\n\t    [Units(\"days\")] \r\n\t    [Display(EnabledCallback=\"IsSimpleGrazingTurnedOn\")]\r\n\t    public int SimpleGrazingFrequency { get; set; } \r\n\r\n\r\n\t    [Description(\"Residual pasture mass after grazing (kg DM /ha)\")]\r\n\t    [Units(\"kgDM/ha\")] \r\n\t    [Display(EnabledCallback=\"IsSimpleGrazingTurnedOn\")]\r\n\t    public double SimpleGrazingResidual { get; set; } \r\n\r\n\t    [Description(\"Minimum grazeable dry matter to trigger grazing (kg DM/ha)\")]\r\n\t    [Units(\"kgDM/ha\")] \r\n\t    [Display(EnabledCallback=\"IsSimpleGrazingTurnedOn\")]\r\n\t    public double SimpleMinGrazable { get; set; }\r\n\r\n\t    [Separator(\"Settings for the 'Target Mass' and 'Maximum Rotation Length' - all values by month from January\")]\r\n\t    [Description(\"Monthly target mass of pasture to trigger grazing event (kg DM/ha)\")]\r\n\t    [Units(\"kgDM/ha\")] \r\n\t    [Display(EnabledCallback=\"IsTargetMassTurnedOn,IsTargetMassAndLengthTurnedOn\")]\r\n\t    public double[] PreGrazeDMArray { get; set; }\r\n\r\n\t    [Description(\"Monthly mass of pasture past grazing (kg DM/ha)\")]\r\n\t    [Units(\"kgDM/ha\")] \r\n\t    [Display(EnabledCallback=\"IsTargetMassTurnedOn,IsTargetMassAndLengthTurnedOn\")]\r\n\t    public double[] PostGrazeDMArray { get; set; }\r\n\r\n\t    [Description(\"Monthly maximum rotation length (days)\")]\r\n\t    [Units(\"days\")] \r\n\t    [Display(EnabledCallback=\"IsTargetMassAndLengthTurnedOn\")]\r\n\t    public double[] RotationLengthArray { get; set; }\r\n\r\n\t    [Separator(\"Optional no-grazing window\")]\r\n\t    [Description(\"Implement the no-grazing window\")]\r\n\t    public string NoGrazingWindow { get; set; }\r\n\r\n  \t    [Description(\"Start of the no-grazing window\")]\r\n\t    public string NoGrazingStartString { get; set; }\r\n\r\n   \t    [Description(\"End of the no-grazing window\")]\r\n\t    public string NoGrazingEndString { get; set; }\r\n\t\r\n\t    //public event AddSoilCNPatchDelegate AddSoilCNPatch;\r\n\r\n\t    // OUTPUTS\r\n\r\n\t    public int DaysSinceGraze { get; set; }\r\n\t    public int GrazingInterval { get; set; }\r\n\t    public string ListOfPatches { get; set; }       // a list (string) of patch numbers that the urine is returned to today using \"|\" as a seperator\r\n\t    public string ListOfDepths { get; set; }  \r\n\t    public string ListOfAmounts { get; set; }\r\n\t    public string DepositionsPerGrid { get; set; }\r\n\t    public int NumPatchesForUrine { get; set; }     // number of patches used for urine return (depends on the amount of herbage grazed)\r\n\r\n\t    [Units(\"kgDM/ha\")] \r\n\t    public double Grazed { get; set; }  // DM grazed\r\n\r\n\t    [Units(\"kgN/ha\")] \r\n\t    public double GrazedN { get; set; }   // N in the DM grazed\r\n\r\n\t    [Units(\"MJME/ha\")] \r\n\t    public double GrazedME { get; set; }   // N in the DM grazed\r\n\r\n\t    [Units(\"-\")] \r\n\t    public double PropIngestedNAsDung { get; set; }\r\n\r\n\t    [Units(\"m2\")] \r\n\t    public double  AreaUrinePatchesToday { get; set; } \r\n\t    \r\n\t    [Units(\"kgN/ha\")] \r\n\t    public double AmountUrineNReturned { get; set; }  // N in urine returned to the paddock\r\n\t    \r\n\t    [Units(\"kgN/ha\")] \r\n\t    public double AmountDungNReturned { get; set; }  // N in dung returned to the paddock\r\n\t    \r\n\t    [Units(\"kgDM/ha\")] \r\n\t    public double HerbageMassPreGraze { get; set; }  // mass of herbage just before greazing\r\n\t    \r\n\t    [Units(\"head/ha\")] \r\n\t    public double StockingDensity { get; set; }\r\n\t    \r\n\t    [Units(\"kgDM/ha\")] \r\n\t    public double StandingBiomass { get; set; }\r\n\t    \r\n\t    [Units(\"kgDM/ha\")] \r\n\t    public double PostGrazeDM { get; set; }\r\n\t    \r\n\t    [Units(\"-\")] \r\n\t    public double LoadAdjustmentPropOverall { get; set; }\r\n\t    \r\n\t    [Units(\"-\")] \r\n\t    public double LoadAdjustmentGrammesIndividual { get; set; }\r\n\t    \r\n\t    [Units(\"mm\")] \r\n\t    public double AverageUrineDepth { get; set; }\r\n\t    \r\n\t    public string GrazedToday { get; set; }\r\n\t    \r\n\t    [Units(\"kgN/ha\")] \r\n\t    public double UrineNReturned { get; set; }  // is this needed?\r\n\r\n\r\n\t    public bool IsSimpleGrazingTurnedOn\r\n\t    {\r\n\t    \tget\r\n\t    \t{\r\n\t    \t\treturn GrazingRotationType == GrazingRotationTypeEnum.SimpleRotation;\r\n\t    \t}\r\n\t    }\r\n\r\n  \t    public bool IsTargetMassTurnedOn\r\n\t    {\r\n\t    \tget\r\n\t    \t{\r\n\t    \t\treturn GrazingRotationType == GrazingRotationTypeEnum.TargetMass;\r\n\t    \t}\r\n\t    }\r\n\r\n  \t    public bool IsTargetMassAndLengthTurnedOn\r\n\t    {\r\n\t    \tget\r\n\t    \t{\r\n\t    \t\treturn GrazingRotationType == GrazingRotationTypeEnum.TargetMassAndLength;\r\n\t    \t}\r\n\t    }\r\n\r\n\r\n\r\n\t    /// <summary>This method is invoked at the beginning of the simulation.</summary>\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n            if (Verbose)\r\n         \t    summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\");\r\n      \r\n\t\t    if (PreGrazeDMArray.Length != 12)\r\n\t\t       throw new Exception(\"There must be 12 values input for the pre-grazing DM\");\r\n\t\t    if (PostGrazeDMArray.Length != 12)\r\n\t\t       throw new Exception(\"There must be 12 values input for the post-grazing DM\");\r\n\t\t    if (RotationLengthArray.Length != 12)\r\n\t\t       throw new Exception(\"There must be 12 values input for rotation length\");\r\n\t\t    \r\n\t\t    if (Verbose)\r\n\t\t       summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\");\r\n\t\t    NoGrazingStart = DateUtilities.GetDate(NoGrazingStartString);\r\n\t\t    NoGrazingEnd = DateUtilities.GetDate(NoGrazingEndString);\r\n        }\r\n        \r\n        /// <summary>This method is invoked at the beginning of each day to perform it's management actions.</summary>\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n\t\t\tDaysSinceGraze += 1;\r\n\t\t\tPostGrazeDM = 0.0;\r\n\t\t\tGrazed = 0.0;\r\n\t\t\tGrazedN = 0.0;\r\n\t\t\tGrazedME = 0.0;\r\n\t\t\tSilageMade = 0.0;\r\n\t\t\tSilageFed = 0.0;\r\n\t\t\tSilageNFed = 0.0;\r\n\t\t\tSilageMEFed = 0.0;\r\n\r\n\t\t\tUrineNReturned = 0.0;\r\n\t\t\tListOfPatches = \"|\";\r\n\t\t\tListOfDepths = \"|\";\r\n\t\t\tListOfAmounts = \"|\";\r\n\t\t\tDepositionsPerGrid = \"|\";\r\n\t\t\tAreaUrinePatchesToday = 0.0;\r\n\t\t\tNumPatchesForUrine = 0;\r\n\t\t\tHerbageMassPreGraze = 0.0;\r\n\t\t\tforeach (var forage in forages)\r\n\t\t\t    HerbageMassPreGraze += forage.Live.Wt + forage.Dead.Wt;\r\n      \r\n\t\t\tGrazeNow = false;\r\n\t\t\tGrazedToday = \"no\";\r\n\t\t\tStockingDensity = 0.0;\r\n\r\n\t\t\tif (GrazingRotationType == GrazingRotationTypeEnum.SimpleRotation)\r\n\t\t\t    SimpleRotation();\r\n\t\t\telse if (GrazingRotationType == GrazingRotationTypeEnum.TargetMass)\r\n\t\t\t    TargetMass();\r\n\t\t\telse if (GrazingRotationType == GrazingRotationTypeEnum.TargetMassAndLength)\r\n\t\t\t   TargetMassAndLength();\r\n\t\t\telse\r\n\t\t\t throw new Exception(\"Grazing rotation type not recognised\");         \r\n\r\n\t\t\tif (clock.Today.DayOfYear >= NoGrazingStart.DayOfYear && clock.Today.DayOfYear <= NoGrazingEnd.DayOfYear && (NoGrazingWindow.StartsWith(\"y\") || NoGrazingWindow.StartsWith(\"Y\")))\r\n\t\t\t{\r\n\t\t\t \tGrazeNow = false;\r\n\t\t\t \tGrazedToday = \"no\";\r\n\t\t\t}\r\n      \r\n\r\n\t\t\tif (GrazeNow)\r\n\t\t\t{\r\n\t\t\t\tif (Verbose)\r\n\t\t\t    \tsummary.WriteMessage(this, \"Doing grazing\");\r\n\t\t\t \tGrazedToday = \"yes\";\r\n\t\t\t \tGrazingInterval = DaysSinceGraze;  // i.e.. yesterday's value\r\n\t\t\t \tDaysSinceGraze = 0;\r\n\r\n\t\t\t \tforeach (var forage in forages)\r\n\t\t\t \t{\r\n\t\t\t\t    // GrazeType GZ = new GrazeType();\r\n\t\t\t\t    // GZ.amount = (float) myResidual;\r\n\t\t\t\t    // GZ.type = \"SetResidueAmount\";\r\n\t\t\t\t    // GZ.sender = \"DoGrazing\";\r\n\t\t\t\t    // AgPasture.Graze(GZ);\r\n\r\n\r\n\t\t\t\t    // Grazed += AgPasture.HarvestedWt;\r\n\t\t\t\t    // GrazedN += AgPasture.HarvestedN;\r\n\t\t\t\t    // GrazedME += AgPasture.HarvestedME * Grazed;\r\n\t\t\t\t    // PostGrazeDM = +AgPasture.AboveGroundWt;\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagementCalculations\")]\r\n        private void OnDoManagementCalculations(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n        private void SimpleRotation()\r\n        {\r\n        \tbool isEndOfMonth = clock.Today.AddDays(1).Day == 1;\r\n\t\t\tif ((SimpleGrazingFrequency == 0 && isEndOfMonth) || (DaysSinceGraze >= SimpleGrazingFrequency && SimpleGrazingFrequency > 0))\r\n\t\t\t{\r\n\t\t\t\t// see if there is enough biomass to do the grazing, can set this to 0 in the UI if needed\r\n\t\t\t\tStandingBiomass = 0.0;\r\n\t\t\t\tforeach (var forage in forages)\r\n\t\t\t\t\tStandingBiomass += forage.Live.Wt + forage.Dead.Wt;\r\n\t\t\t\t\r\n\t\t\t\tif (StandingBiomass > SimpleGrazingResidual + SimpleMinGrazable)  \r\n\t\t\t\t{\r\n\t\t\t\t\tGrazeNow = true;\r\n\t\t\t\t\tGrazedToday = \"yes\";\r\n\t\t\t\t}\r\n\t\t\t\tmyResidual = SimpleGrazingResidual;\r\n\t        }\r\n        }\r\n\r\n        private void TargetMass()\r\n        {\r\n\t\t\t// assess standing biomass and graze if above target\r\n\t\t\tStandingBiomass = 0.0;\r\n\t\t\tforeach (var forage in forages)\r\n\t\t\t    StandingBiomass += forage.Live.Wt + forage.Dead.Wt;\r\n\r\n\t\t\tif (StandingBiomass > PreGrazeDMArray[clock.Today.Month - 1])  \r\n\t\t\t{\r\n\t\t\t    GrazeNow = true;\r\n\t\t\t    GrazedToday = \"yes\";\r\n\t\t\t}\r\n\t\t\tmyResidual = PostGrazeDMArray[clock.Today.Month - 1];\r\n        }\r\n\r\n        private void TargetMassAndLength()\r\n        {\r\n\t\t\t// assess standing biomass and time since the last grazing and graze if above target or longer than rotation length\r\n\t\t\tStandingBiomass = 0.0;\r\n\t\t\tforeach (var forage in forages)\r\n\t\t\t\tStandingBiomass += forage.Live.Wt + forage.Dead.Wt;\r\n\r\n\t\t\tif ((StandingBiomass > PreGrazeDMArray[clock.Today.Month - 1] || DaysSinceGraze > RotationLengthArray[clock.Today.Month - 1]) \r\n\t\t\t     && StandingBiomass > PostGrazeDMArray[clock.Today.Month - 1] && DaysSinceGraze > 14)  // does have to be grazable!\r\n\t\t\t{\r\n\t\t\t\tGrazeNow = true;\r\n\t\t\t\tGrazedToday = \"yes\";\r\n\t\t\t}\r\n\t\t\tmyResidual = PostGrazeDMArray[clock.Today.Month - 1];\r\n        }\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "Verbose",
                  "Value": "False"
                },
                {
                  "Key": "GrazingRotationType",
                  "Value": "TargetMassAndLength"
                },
                {
                  "Key": "SimpleGrazingFrequency",
                  "Value": "0"
                },
                {
                  "Key": "SimpleGrazingResidual",
                  "Value": "0"
                },
                {
                  "Key": "SimpleMinGrazable",
                  "Value": "0"
                },
                {
                  "Key": "PreGrazeDMArray",
                  "Value": ""
                },
                {
                  "Key": "PostGrazeDMArray",
                  "Value": ""
                },
                {
                  "Key": "RotationLengthArray",
                  "Value": ""
                },
                {
                  "Key": "NoGrazingWindow",
                  "Value": ""
                },
                {
                  "Key": "NoGrazingStartString",
                  "Value": ""
                },
                {
                  "Key": "NoGrazingEndString",
                  "Value": ""
                },
                {
                  "Key": "DaysSinceGraze",
                  "Value": "0"
                },
                {
                  "Key": "GrazingInterval",
                  "Value": "0"
                },
                {
                  "Key": "ListOfPatches",
                  "Value": ""
                },
                {
                  "Key": "ListOfDepths",
                  "Value": ""
                },
                {
                  "Key": "ListOfAmounts",
                  "Value": ""
                },
                {
                  "Key": "DepositionsPerGrid",
                  "Value": ""
                },
                {
                  "Key": "NumPatchesForUrine",
                  "Value": "0"
                },
                {
                  "Key": "Grazed",
                  "Value": "0"
                },
                {
                  "Key": "GrazedN",
                  "Value": "0"
                },
                {
                  "Key": "GrazedME",
                  "Value": "0"
                },
                {
                  "Key": "PropIngestedNAsDung",
                  "Value": "0"
                },
                {
                  "Key": "AreaUrinePatchesToday",
                  "Value": "0"
                },
                {
                  "Key": "AmountUrineNReturned",
                  "Value": "0"
                },
                {
                  "Key": "AmountDungNReturned",
                  "Value": "0"
                },
                {
                  "Key": "HerbageMassPreGraze",
                  "Value": "0"
                },
                {
                  "Key": "StockingDensity",
                  "Value": "0"
                },
                {
                  "Key": "StandingBiomass",
                  "Value": "0"
                },
                {
                  "Key": "PostGrazeDM",
                  "Value": "0"
                },
                {
                  "Key": "LoadAdjustmentPropOverall",
                  "Value": "0"
                },
                {
                  "Key": "LoadAdjustmentGrammesIndividual",
                  "Value": "0"
                },
                {
                  "Key": "AverageUrineDepth",
                  "Value": "0"
                },
                {
                  "Key": "GrazedToday",
                  "Value": ""
                },
                {
                  "Key": "UrineNReturned",
                  "Value": "0"
                }
              ],
              "Name": "Defoliate",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using System;\r\nusing Models.Core;\r\nusing Models.Soils;\r\nusing Models.Soils.Nutrients;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Linq;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock clock;\r\n        [Link] Fertiliser fertiliser;\r\n        [Link] ISummary summary;\r\n        [Link] Soil soil;\r\n\r\n        private Nutrient nutrient;\r\n        private SoilNitrogen soilN;\r\n\r\n        [Separator(\"Fertiliser will be applied on the date(s) below\")]\r\n        [Description(\"Apply fertiliser on the same day(s) each year? If no, then must include the year of appliaction below\")]\r\n        public bool EachYear { get; set; }\r\n\r\n        [Description(\"Dates for one or more fertiliser applications (dd-mmm or dd-mmm-yyyy) as a list with a comma between dates\")]\r\n        public string[] Dates { get; set; }\r\n\r\n        [Separator(\"Test for the mineral N in the soil and don't apply the fertiliser if greater than X kgN/ha is stored in the soil above a depth of Y mm\")]\r\n        [Description(\"Use a critical soil mineral N to prevent application above a threshold?\")]\r\n        public bool UseCritNThreshold { get; set; }\r\n\r\n        [Description(\"Don't add fertiliser if N in the soil to the depth below exceeds (kg/ha)\")]\r\n        public double CritNThreshold { get; set; }\r\n\r\n        [Description(\"Depth to which the amount of N in the soil should be calculated (mm)\")]\r\n        public double CritNDepth { get; set; }\r\n\r\n        [Separator(\"Fertiliser application details\")]\r\n        [Description(\"Depth at which to apply the fertiliser (mm)\")]\r\n        public double Depth { get; set; }\r\n\r\n        [Description(\"Amount of fertiliser to apply (kg N /ha) per application\")]\r\n        public double Amount { get; set; }\r\n\r\n        [Description(\"Fertiliser type - select from the list\")]\r\n        public Fertiliser.Types FertiliserType { get; set; }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void FindSoilNOrNutrient(object sender, EventArgs e)\r\n        {\r\n            nutrient = Apsim.Find(this, typeof(Nutrient)) as Nutrient;\r\n            soilN = Apsim.Find(this, typeof(SoilNitrogen)) as SoilNitrogen;\r\n\r\n            if (nutrient == null && soilN == null)\r\n                throw new Exception(string.Format(\"Error in script {0}: Unable to find nutrient or soilN.\", Name));\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            if (OnApplicationDate())\r\n            {\r\n                if (NContentBelowThreshold())\r\n                    fertiliser.Apply(Amount, FertiliserType, Depth);\r\n                else\r\n                    summary.WriteMessage(this, \"Skipping fertiliser application due to soil mineral N content being above critical threshold.\");\r\n            }\r\n        }\r\n\r\n        /// <summary>Checks if today's date is one of the specified fertiliser application dates.</summary>\r\n        private bool OnApplicationDate()\r\n        {\r\n            if (EachYear)\r\n                return Dates.Any(d => DateUtilities.DatesEqual(d, clock.Today));\r\n            \r\n            DateTime[] dates = Dates.Select(d => DateTime.ParseExact(d, \"d-MMM-yyyy\", null)).ToArray();\r\n            return dates.Any(d => SameDate(d, clock.Today));\r\n        }\r\n\r\n        /// <summary>Checks if N content in soil is below critical threshold.</summary>\r\n        private bool NContentBelowThreshold()\r\n        {\r\n            if (!UseCritNThreshold)\r\n                return true;\r\n            \r\n            double[] weights = GetLayerWeights();\r\n            double cumSoilN = 0;\r\n\r\n            for (int i = 0; i < soil.Thickness.Length; i++)\r\n            {\r\n                if (nutrient != null)\r\n                    cumSoilN += weights[i] * nutrient.MineralN[i];\r\n                else if (soilN != null)\r\n                    cumSoilN += weights[i] * soilN.mineral_n[i];\r\n            }\r\n\r\n            return cumSoilN <= CritNThreshold;\r\n        }\r\n\r\n        private double[] GetLayerWeights()\r\n        {\r\n            double[] weights = new double[soil.Thickness.Length];\r\n            double cumDepth = 0;\r\n\r\n            for (int i = 0; i < soil.Thickness.Length; i++)\r\n            {\r\n                cumDepth += soil.Thickness[i];\r\n                if (cumDepth < CritNDepth)\r\n                    weights[i] = 1;\r\n                else if (cumDepth - soil.Thickness[i] <= CritNDepth)\r\n                    weights[i] = (CritNDepth - (cumDepth - soil.Thickness[i])) / soil.Thickness[i];\r\n                else\r\n                    weights[i] = 0;\r\n            }\r\n\r\n            return weights;\r\n        }\r\n\r\n        private bool SameDate(DateTime d1, DateTime d2)\r\n        {\r\n            return d1.Year == d2.Year && d1.DayOfYear == d2.DayOfYear;\r\n        }\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "EachYear",
                  "Value": "True"
                },
                {
                  "Key": "Dates",
                  "Value": "5-jan,5-feb,5-mar,5-apr,5-aug,5-sep,5-oct,5-nov,5-dec"
                },
                {
                  "Key": "UseCritNThreshold",
                  "Value": "False"
                },
                {
                  "Key": "CritNThreshold",
                  "Value": "50"
                },
                {
                  "Key": "CritNDepth",
                  "Value": "75"
                },
                {
                  "Key": "Depth",
                  "Value": "50"
                },
                {
                  "Key": "Amount",
                  "Value": "15"
                },
                {
                  "Key": "FertiliserType",
                  "Value": "UreaN"
                }
              ],
              "Name": "FertiliseFixedDates",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\n\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation Irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil Soil;\r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public bool allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string seasonStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string seasonEnd { get; set; }\r\n        [Description(\"Season allocation (mm)\")]\r\n        public double seasonsAllocation { get; set; }\r\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\r\n        public double triggerDeficit { get; set; }\r\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\r\n        public double targetDeficit { get; set; }\r\n        [Description(\"Minimum days for irrigation to return\")]\r\n        public double returndays { get; set; }\r\n        [Description(\"Maximum irrigation application (mm/day)\")]\r\n        public double maximumAmount { get; set; }\r\n        [Description(\"Depth to calculate PAWC (mm)\")]\r\n        public double depthPAWC { get; set; }\r\n\r\n        //Class members\r\n        [XmlIgnore] public double TopSWdeficit { get; set; }\r\n        [XmlIgnore] public double TopSWC { get; set; }\r\n        [XmlIgnore] public double DaysSinceIrrigation { get; set; }\r\n        [XmlIgnore] public double AmountToApply { get; set; }\r\n        [XmlIgnore] public double SeasonAppliedAmount { get; set; }\r\n        \r\n        private bool IrrigationIsAllowed { get; set; }\r\n        private bool SeasonIsOpen { get; set; }\r\n        private bool CropIsActive { get; set; }\r\n        private bool IrrigatorIsAvailable { get; set; }\r\n        private bool SoilIsDry { get; set; }\r\n\r\n        private DateTime StartDate;\r\n        private DateTime EndDate;\r\n        private double TopDUL;\r\n        private double TopLL;\r\n        private int nLayers;\r\n    \r\n        //Calculate static soil variables\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {   \r\n            //Set the season dates\r\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\r\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\r\n            \r\n            //Can we irrigate at all?\r\n            IrrigationIsAllowed = false; \r\n            if (allowIrrigation)\r\n                IrrigationIsAllowed = true; \r\n\r\n            //Calculate soil water variables\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            nLayers = Soil.Thickness.Length;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.Thickness[layer]);\r\n                TopLL += Soil.LL15mm[layer] * fracLayer;\r\n                TopDUL += Soil.DULmm[layer] * fracLayer;\r\n                depthFromSurface += Soil.Thickness[layer];\r\n                if (depthFromSurface >= depthPAWC)\r\n                    layer = nLayers;\r\n            }\r\n        }\r\n             \r\n        //Determine daily requirement for irrigation\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            //Can we irrigate today?          \r\n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\r\n\r\n            //Is there a crop in the ground that needs irrigation?\r\n            CropIsActive = false;\r\n            if ((existingCrop != null) && (existingCrop.IsAlive))\r\n                CropIsActive = true;\r\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\r\n          \r\n            //Is the irrigator available?\r\n            IrrigatorIsAvailable = false;\r\n            DaysSinceIrrigation += 1;\r\n            if (DaysSinceIrrigation >= returndays)\r\n                IrrigatorIsAvailable = true;\r\n          \r\n            //Is the soil dry enough to require irrigation?\r\n            SoilIsDry = false;\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            TopSWC = 0.0;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            //for (int layer = 0; depthFromSurface < depthPAWC + Soil.Thickness[layer]; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.Thickness[layer]);\r\n                TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;\r\n                depthFromSurface += Soil.Thickness[layer];\r\n                if (depthFromSurface >= depthPAWC)\r\n                    layer = nLayers;\r\n            }\r\n            \r\n            TopSWdeficit = TopSWC - TopDUL;\r\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\r\n                SoilIsDry = true;\r\n                \r\n            //Are all the conditions ratifying irrigation\r\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\r\n            {\r\n                //Lets bloody well irrigate then!!!!\r\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\r\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\r\n                Irrigation.Apply(AmountToApply);\r\n                DaysSinceIrrigation = 0;\r\n                SeasonAppliedAmount += AmountToApply;\r\n            }\r\n        }\r\n        \r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "allowIrrigation",
                  "Value": "True"
                },
                {
                  "Key": "seasonStart",
                  "Value": "1-sep"
                },
                {
                  "Key": "seasonEnd",
                  "Value": "30-apr"
                },
                {
                  "Key": "seasonsAllocation",
                  "Value": "10000"
                },
                {
                  "Key": "triggerDeficit",
                  "Value": "75"
                },
                {
                  "Key": "targetDeficit",
                  "Value": "95"
                },
                {
                  "Key": "returndays",
                  "Value": "3"
                },
                {
                  "Key": "maximumAmount",
                  "Value": "30"
                },
                {
                  "Key": "depthPAWC",
                  "Value": "300"
                }
              ],
              "Name": "AutomaticIrrigation",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "soil_albedo": 0.23,
              "SoilHeatFluxFraction": 0.4,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "Canopies": [],
              "InitialResidueName": "Sward",
              "InitialResidueType": "grass",
              "InitialResidueMass": 1000.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 15.0,
              "FractionFaecesAdded": 0.5,
              "ResourceName": "SurfaceOrganicMatter",
              "Name": "SurfaceOrganicMatter",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": null,
              "ASCSubOrder": null,
              "SoilType": "NZ_Sedimentary",
              "LocalName": "Lismore",
              "Site": "Winchmore",
              "NearestTown": "Ashburton",
              "Region": "Canterbury",
              "State": null,
              "Country": "New Zealand",
              "NaturalVegetation": null,
              "ApsoilNumber": null,
              "Latitude": -48.48,
              "Longitude": 0.0,
              "LocationAccuracy": null,
              "DataSource": null,
              "Comments": null,
              "Name": "Soil",
              "Children": [
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-50",
                    "50-65",
                    "65-90",
                    "90-120",
                    "120-150"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    150.0,
                    250.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": [
                    5.0,
                    2.5,
                    1.0,
                    0.75,
                    0.5,
                    0.5,
                    0.5
                  ],
                  "NH4N": [
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1
                  ],
                  "PH": [
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0,
                    6.0
                  ],
                  "CL": null,
                  "EC": null,
                  "ESP": null,
                  "Name": "Chemical",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-50",
                    "50-65",
                    "65-90",
                    "90-120",
                    "120-150"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    150.0,
                    250.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeClay": [
                    20.0,
                    15.0,
                    12.0,
                    8.0,
                    6.0,
                    5.0,
                    5.0
                  ],
                  "BD": [
                    1.3,
                    1.35,
                    1.0,
                    0.53,
                    0.31,
                    0.3,
                    0.3
                  ],
                  "AirDry": [
                    0.05,
                    0.12,
                    0.055,
                    0.015,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "LL15": [
                    0.15,
                    0.14,
                    0.055,
                    0.015,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "DUL": [
                    0.36,
                    0.34,
                    0.19,
                    0.065,
                    0.04,
                    0.03,
                    0.03
                  ],
                  "SAT": [
                    0.45,
                    0.43,
                    0.25,
                    0.15,
                    0.11,
                    0.11,
                    0.11
                  ],
                  "KS": [
                    5000.0,
                    2500.0,
                    3000.0,
                    10000.0,
                    17500.0,
                    20000.0,
                    20000.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "Name": "Physical",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.15,
                        0.14,
                        0.06,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.08,
                        0.04,
                        0.01,
                        0.0,
                        0.0
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        0.0,
                        0.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "AGPRyegrassSoil",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.15,
                        0.14,
                        0.06,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "KL": [
                        0.1,
                        0.1,
                        0.08,
                        0.04,
                        0.01,
                        0.0,
                        0.0
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        0.0,
                        0.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "AGPWhiteCloverSoil",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.SoilWater, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 6.0,
                  "SummerCona": 3.5,
                  "WinterDate": "1-apr",
                  "WinterU": 2.0,
                  "WinterCona": 2.0,
                  "DiffusConst": 88.0,
                  "DiffusSlope": 35.0,
                  "Salb": 0.13,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "slope": 0.0,
                  "discharge_width": 0.0,
                  "catchment_area": 0.0,
                  "max_pond": 0.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    150.0,
                    250.0,
                    300.0,
                    300.0
                  ],
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-50",
                    "50-65",
                    "65-90",
                    "90-120",
                    "120-150"
                  ],
                  "SWCON": [
                    0.5,
                    0.52,
                    0.55,
                    0.6,
                    0.65,
                    0.65,
                    0.65
                  ],
                  "KLAT": [
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "PrecipitationInterception": 0.0,
                  "Name": "SoilWater",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.SoilNitrogen, Models",
                  "fom_types": [
                    "default",
                    "manure",
                    "mucuna",
                    "lablab",
                    "shemp",
                    "stable"
                  ],
                  "fract_carb": [
                    0.2,
                    0.3,
                    0.54,
                    0.57,
                    0.45,
                    0.0
                  ],
                  "fract_cell": [
                    0.7,
                    0.3,
                    0.37,
                    0.37,
                    0.47,
                    0.1
                  ],
                  "fract_lign": [
                    0.1,
                    0.4,
                    0.09,
                    0.06,
                    0.08,
                    0.9
                  ],
                  "Name": "SoilNitrogen",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilNitrogenNO3, Models",
                      "Name": "NO3",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenNH4, Models",
                      "Name": "NH4",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenUrea, Models",
                      "Name": "Urea",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                      "Name": "PlantAvailableNO3",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                      "Name": "PlantAvailableNH4",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-50",
                    "50-65",
                    "65-90",
                    "90-120",
                    "120-150"
                  ],
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    150.0,
                    250.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    3.0,
                    1.0,
                    0.6,
                    0.4,
                    0.25,
                    0.15,
                    0.1
                  ],
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.0,
                    0.0
                  ],
                  "FInert": [
                    0.5,
                    0.7,
                    0.83,
                    0.9,
                    0.95,
                    0.99,
                    0.99
                  ],
                  "FOM": [
                    331.337020409173,
                    245.46050190550559,
                    164.53709493722965,
                    121.89207790753734,
                    73.931282427002344,
                    40.574348067292682,
                    22.267674346259405
                  ],
                  "Name": "Organic",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.InitialWater, Models",
                  "PercentMethod": 1,
                  "FractionFull": 0.95,
                  "DepthWetSoil": "NaN",
                  "RelativeTo": null,
                  "Name": "Initial water",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Sample, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-50",
                    "50-65",
                    "65-90",
                    "90-120",
                    "120-150"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    200.0,
                    150.0,
                    250.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": null,
                  "NH4N": null,
                  "SW": null,
                  "OC": null,
                  "EC": null,
                  "CL": null,
                  "ESP": null,
                  "PH": null,
                  "SWUnits": 0,
                  "OCUnits": 0,
                  "PHUnits": 0,
                  "Name": "Initial nitrogen",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "CERESSoilTemperature",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.AgPasture.PastureSpecies, Models",
              "MaximumNUptake": 10.0,
              "Albedo": 0.26,
              "Gsmax": 0.011,
              "R50": 200.0,
              "SpeciesFamily": 0,
              "PhotosyntheticPathway": 0,
              "InitialShootDM": 1500.0,
              "InitialRootDM": 450.0,
              "InitialRootDepth": 750.0,
              "ReferencePhotosyntheticRate": 1.0,
              "LightExtinctionCoefficient": 0.5,
              "GrowthTminimum": 1.0,
              "GrowthToptimum": 20.0,
              "GrowthTEffectExponent": 1.7,
              "UseHeatStressFactor": 0,
              "HeatOnsetTemperature": 28.0,
              "HeatFullTemperature": 35.0,
              "HeatRecoverySumDD": 30.0,
              "HeatRecoveryTReference": 25.0,
              "UseColdStressFactor": 0,
              "ColdOnsetTemperature": 1.0,
              "ColdFullTemperature": -5.0,
              "ColdRecoverySumDD": 25.0,
              "ColdRecoveryTReference": 0.0,
              "MaintenanceRespirationCoefficient": 0.03,
              "GrowthRespirationCoefficient": 0.25,
              "RespirationTReference": 20.0,
              "RespirationExponent": 1.5,
              "NThresholdsForLeaves": [
                0.04,
                0.012,
                0.05
              ],
              "NThresholdsForStems": [
                0.02,
                0.006,
                0.025
              ],
              "NThresholdsForStolons": [
                0.0,
                0.0,
                0.0
              ],
              "NThresholdsForRoots": [
                0.02,
                0.006,
                0.025
              ],
              "DegreesDayForGermination": 125.0,
              "TargetShootRootRatio": 4.0,
              "MaxRootAllocation": 0.25,
              "ShootRootGlfFactor": 0.5,
              "UseReproSeasonFactor": 0,
              "ReproSeasonReferenceLatitude": 41.0,
              "ReproSeasonTimingCoeff": 0.14,
              "ReproSeasonMaxAllocationIncrease": 0.5,
              "ReproSeasonAllocationCoeff": 0.1,
              "FractionLeafMaximum": 0.7,
              "FractionLeafMinimum": 0.7,
              "FractionLeafDMThreshold": 500.0,
              "FractionLeafDMFactor": 2000.0,
              "FractionLeafExponent": 3.0,
              "FractionToStolon": 0.0,
              "SpecificLeafArea": 20.0,
              "SpecificRootLength": 100.0,
              "StolonEffectOnLAI": 0.0,
              "ShootMaxEffectOnLAI": 1000.0,
              "MaxStemEffectOnLAI": 1.0,
              "LiveLeavesPerTiller": 3.0,
              "TissueTurnoverRateShoot": 0.05,
              "TissueTurnoverRateRoot": 0.02,
              "DetachmentRateShoot": 0.08,
              "TurnoverTemperatureMin": 2.0,
              "TurnoverTemperatureRef": 20.0,
              "TurnoverTemperatureExponent": 1.0,
              "TurnoverDroughtEffectMax": 1.0,
              "TurnoverDroughtThreshold": 0.5,
              "TurnoverDefoliationCoefficient": 0.5,
              "TurnoverDefoliationRootEffect": 0.1,
              "FractionNLuxuryRemobilisable": [
                0.1,
                0.1,
                0.1
              ],
              "MinimumNFixation": 0.0,
              "MaximumNFixation": 0.0,
              "SoilSaturationEffectMax": 0.1,
              "MinimumWaterFreePorosity": -1.0,
              "SoilSaturationRecoveryFactor": 0.25,
              "NDillutionCoefficient": 0.25,
              "GlfGeneric": 1.0,
              "GlfSoilFertility": 1.0,
              "PlantHeightMinimum": 300.0,
              "PlantHeightMaximum": 300.0,
              "PlantHeightMassForMax": 10000.0,
              "PlantHeightExponent": 2.8,
              "RootDepthMinimum": 50.0,
              "RootDepthMaximum": 1000.0,
              "RootElongationRate": 25.0,
              "RootDistributionDepthParam": 250.0,
              "RootDistributionExponent": 3.2,
              "DigestibilitiesCellWall": [
                0.9,
                0.7,
                0.6,
                0.2
              ],
              "MinimumGreenWt": 100.0,
              "FractionStolonStanding": 0.0,
              "PreferenceForGreenOverDead": 1.0,
              "PreferenceForLeafOverStems": 1.0,
              "WaterAvailableMethod": 0,
              "NitrogenAvailableMethod": 0,
              "ResourceName": "AGPRyegrass",
              "Name": "AGPRyegrass",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.AgPasture.PastureSpecies, Models",
              "MaximumNUptake": 10.0,
              "Albedo": 0.26,
              "Gsmax": 0.011,
              "R50": 200.0,
              "SpeciesFamily": 1,
              "PhotosyntheticPathway": 0,
              "InitialShootDM": 500.0,
              "InitialRootDM": 150.0,
              "InitialRootDepth": 350.0,
              "ReferencePhotosyntheticRate": 1.0,
              "LightExtinctionCoefficient": 0.8,
              "GrowthTminimum": 2.0,
              "GrowthToptimum": 22.0,
              "GrowthTEffectExponent": 1.7,
              "UseHeatStressFactor": 0,
              "HeatOnsetTemperature": 30.0,
              "HeatFullTemperature": 36.0,
              "HeatRecoverySumDD": 20.0,
              "HeatRecoveryTReference": 25.0,
              "UseColdStressFactor": 0,
              "ColdOnsetTemperature": 2.0,
              "ColdFullTemperature": -5.0,
              "ColdRecoverySumDD": 20.0,
              "ColdRecoveryTReference": 0.0,
              "MaintenanceRespirationCoefficient": 0.04,
              "GrowthRespirationCoefficient": 0.25,
              "RespirationTReference": 20.0,
              "RespirationExponent": 1.5,
              "NThresholdsForLeaves": [
                0.045,
                0.02,
                0.055
              ],
              "NThresholdsForStems": [
                0.0225,
                0.01,
                0.0275
              ],
              "NThresholdsForStolons": [
                0.0225,
                0.01,
                0.0275
              ],
              "NThresholdsForRoots": [
                0.0225,
                0.01,
                0.0275
              ],
              "DegreesDayForGermination": 125.0,
              "TargetShootRootRatio": 4.0,
              "MaxRootAllocation": 0.25,
              "ShootRootGlfFactor": 0.5,
              "UseReproSeasonFactor": 0,
              "ReproSeasonReferenceLatitude": 41.0,
              "ReproSeasonTimingCoeff": 0.14,
              "ReproSeasonMaxAllocationIncrease": 0.5,
              "ReproSeasonAllocationCoeff": 0.1,
              "FractionLeafMaximum": 0.56,
              "FractionLeafMinimum": 0.28,
              "FractionLeafDMThreshold": 500.0,
              "FractionLeafDMFactor": 2000.0,
              "FractionLeafExponent": 3.0,
              "FractionToStolon": 0.2,
              "SpecificLeafArea": 32.0,
              "SpecificRootLength": 45.0,
              "StolonEffectOnLAI": 0.3,
              "ShootMaxEffectOnLAI": 500.0,
              "MaxStemEffectOnLAI": 0.5,
              "LiveLeavesPerTiller": 3.0,
              "TissueTurnoverRateShoot": 0.05,
              "TissueTurnoverRateRoot": 0.02,
              "DetachmentRateShoot": 0.11,
              "TurnoverTemperatureMin": 2.0,
              "TurnoverTemperatureRef": 20.0,
              "TurnoverTemperatureExponent": 1.0,
              "TurnoverDroughtEffectMax": 1.0,
              "TurnoverDroughtThreshold": 0.5,
              "TurnoverDefoliationCoefficient": 0.5,
              "TurnoverDefoliationRootEffect": 0.1,
              "FractionNLuxuryRemobilisable": [
                0.1,
                0.1,
                0.1
              ],
              "MinimumNFixation": 0.2,
              "MaximumNFixation": 0.6,
              "SoilSaturationEffectMax": 0.1,
              "MinimumWaterFreePorosity": -1.0,
              "SoilSaturationRecoveryFactor": 0.25,
              "NDillutionCoefficient": 1.0,
              "GlfGeneric": 1.0,
              "GlfSoilFertility": 1.0,
              "PlantHeightMinimum": 300.0,
              "PlantHeightMaximum": 300.0,
              "PlantHeightMassForMax": 7500.0,
              "PlantHeightExponent": 2.5,
              "RootDepthMinimum": 30.0,
              "RootDepthMaximum": 350.0,
              "RootElongationRate": 25.0,
              "RootDistributionDepthParam": 70.0,
              "RootDistributionExponent": 2.5,
              "DigestibilitiesCellWall": [
                0.9,
                0.8,
                0.7,
                0.2
              ],
              "MinimumGreenWt": 50.0,
              "FractionStolonStanding": 0.0,
              "PreferenceForGreenOverDead": 1.0,
              "PreferenceForLeafOverStems": 1.0,
              "WaterAvailableMethod": 0,
              "NitrogenAvailableMethod": 0,
              "ResourceName": "AGPWhiteClover",
              "Name": "AGPWhiteClover",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today as Date",
                "// These examples are set up for Ryegrass and WhiteClover so add in any other species as needed for your simulation",
                "// The format of AggregationType (variable) from [Report].DayAfterLastOutput to [Clock].Today is used so that when the reporting frequency is changed the outputs are still sensible",
                "// If the name of the Report component (\"ReportExample\") here is changed in the simulation tree then all the references to that name in the outputs below also need to be changed",
                "",
                "// If all you want is harvested pasture or net herbage growth and/or standing biomass ....",
                "Sum of ([AGPRyegrass].HarvestedWt + [AGPWhiteClover].HarvestedWt) from [ReportExample].DayAfterLastOutput to [Clock].Today as HarvestedWt   //the amount harvested (kg DM /ha)",
                "Sum of ([AGPRyegrass].NetGrowthWt + [AGPWhiteClover].NetGrowthWt) from [ReportExample].DayAfterLastOutput to [Clock].Today as NetGrowthWt   //the amount harvested (kg DM /ha)",
                "Mean of ([AGPRyegrass].AboveGroundWt + [AGPWhiteClover].AboveGroundWt) from [ReportExample].DayAfterLastOutput to [Clock].Today as StandingBiomass   //pasture biomass (could also be reported as Last rather than Mean) (kg DM /ha)",
                "",
                "// outputs that are used more frequently than others",
                "Sum of ([AGPRyegrass].WaterDemand + [AGPWhiteClover].WaterDemand) from [ReportExample].DayAfterLastOutput to [Clock].Today as WaterDemand   //how much soil water the pasture could use (mm)",
                "Sum of (sum([AGPRyegrass].WaterUptake) + Sum([AGPWhiteClover].WaterUptake)) from [ReportExample].DayAfterLastOutput to [Clock].Today as WaterUptake    //the amount of water actuially taken up from the soil (mm)",
                "Sum of ([AGPRyegrass].SoilDemandN + [AGPWhiteClover].SoilDemandN) from [ReportExample].DayAfterLastOutput to [Clock].Today as NDemand                   //N demand (kg N /ha)",
                "Sum of ([AGPRyegrass].SoilUptakeN + [AGPWhiteClover].SoilUptakeN) from [ReportExample].DayAfterLastOutput to [Clock].Today as NitrogenUptake       //N uptake from the soil (kg N /ha)",
                "Sum of ([AGPRyegrass].SoilUptakeN + [AGPWhiteClover].SoilUptakeN) from [ReportExample].DayAfterLastOutput to [Clock].Today as NitrogenUptake       //N uptake from the soil (kg N /ha)",
                "Sum of [AGPWhiteClover].FixedN from [ReportExample].DayAfterLastOutput to [Clock].Today as NitrogenFixed       //N uptake from the soil (kg N /ha)",
                "Mean of ([AGPRyegrass].AboveGroundWt + [AGPWhiteClover].AboveGroundWt) from [ReportExample].DayAfterLastOutput to [Clock].Today as HerbageMass",
                "Mean of ([AGPRyegrass].LAIGreen + [AGPWhiteClover].LAIGreen) from [ReportExample].DayAfterLastOutput to [Clock].Today as LAIGreen",
                "Mean of ([AGPRyegrass].LAIDead + [AGPWhiteClover].LAIDead + [AGPRyegrass].LAIGreen + [AGPWhiteClover].LAIGreen) from [ReportExample].DayAfterLastOutput to [Clock].Today as LAITotal",
                "",
                "// outputs that indicate what conditions are limiting growth - each growth-limiting factor is 0 (full stress) to 1 (no stress) but there are two components and the values are added so 2 indicates no stress",
                "Mean of ([AGPRyegrass].GlfTemperature + [AGPWhiteClover].GlfTemperature) from [ReportExample].DayAfterLastOutput to [Clock].Today as GlfTemp       //stress from non-optimal temperature",
                "Mean of ([AGPRyegrass].GlfWaterSupply + [AGPWhiteClover].GlfWaterSupply) from [ReportExample].DayAfterLastOutput to [Clock].Today as GlfWater       //stress from water limitation",
                "Mean of ([AGPRyegrass].GlfNSupply + [AGPWhiteClover].GlfNSupply) from [ReportExample].DayAfterLastOutput to [Clock].Today as GlfNitrogen       //stress from N limitation",
                "",
                "// photsynthesis-related outputs - all these are in units of C not DM",
                "Sum of ([AGPRyegrass].GPP +[AGPWhiteClover].GPP) from [ReportExample].DayAfterLastOutput to [Clock].Today as GrossPrimaryProduction       //GPP (kg C /ha) ",
                "Sum of ([AGPRyegrass].NPP +[AGPWhiteClover].NPP) from [ReportExample].DayAfterLastOutput to [Clock].Today as NettPrimaryProduction        //NPP (kg C /ha)",
                "",
                "// examples of more detailed tissue-based information - see the list of outputs for many more options",
                "[AGPRyegrass].LeafStage1NConc as RyegrassEmergingLeafNConc ",
                "[AGPRyegrass].LeafStage2NConc as RyegrassDevelopingLeafNConc ",
                "[AGPRyegrass].LeafStage3NConc as RyegrassMatureLeafNConc ",
                "[AGPRyegrass].LeafStage4NConc as RyegrassDeadLeafNConc "
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "Name": "ReportExample",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today as Date",
                "// These examples are set up for Ryegrass and WhiteClover so add in any other species as needed for your simulation",
                "// The format of AggregationType (variable) from [Report].DayAfterLastOutput to [Clock].Today is used so that when the reporting frequency is changed the outputs are still sensible",
                "// If the name of the Report component (\"Report\") here is changed in the simulation tree then all the references to that name in the outputs below also need to be changed",
                "",
                "// If all you want is an annual pattern of harvested pasture based on the production year (July to June)  ....",
                "Sum of ([AGPRyegrass].HarvestedWt + [AGPWhiteClover].HarvestedWt) from 1-Jul to [Clock].Today as HarvestedWt   //the amount harvested (kg DM /ha)"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "Name": "Report",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Graph.Graph, Models",
      "Caption": null,
      "Axis": [
        {
          "$type": "Models.Graph.Axis, Models",
          "Type": 3,
          "Title": null,
          "Inverted": false,
          "Minimum": "NaN",
          "Maximum": "NaN",
          "Interval": "NaN",
          "DateTimeAxis": true,
          "CrossesAtZero": false
        },
        {
          "$type": "Models.Graph.Axis, Models",
          "Type": 0,
          "Title": null,
          "Inverted": false,
          "Minimum": "NaN",
          "Maximum": "NaN",
          "Interval": "NaN",
          "DateTimeAxis": false,
          "CrossesAtZero": false
        }
      ],
      "LegendPosition": 0,
      "LegendOrientation": 0,
      "DisabledSeries": [],
      "LegendOutsideGraph": false,
      "Name": "Harvested Pasture by Production Year",
      "Children": [
        {
          "$type": "Models.Graph.Series, Models",
          "Type": 1,
          "XAxis": 3,
          "YAxis": 0,
          "ColourArgb": 0,
          "FactorToVaryColours": "SimulationName",
          "FactorToVaryMarkers": null,
          "FactorToVaryLines": null,
          "Marker": 11,
          "MarkerSize": 0,
          "Line": 0,
          "LineThickness": 0,
          "Checkpoint": "Current",
          "TableName": "Report",
          "XFieldName": "Date",
          "YFieldName": "HarvestedWt",
          "X2FieldName": null,
          "Y2FieldName": null,
          "ShowInLegend": false,
          "IncludeSeriesNameInLegend": false,
          "Cumulative": false,
          "CumulativeX": false,
          "Filter": null,
          "Name": "Series",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "IncludeInDocumentation": true,
  "Enabled": true,
  "ReadOnly": false
}