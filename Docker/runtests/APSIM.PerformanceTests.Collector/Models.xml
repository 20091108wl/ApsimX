<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Models</name>
    </assembly>
    <members>
        <member name="T:Models.AgPasture.PastureSpecies">
            <summary>
            # [Name]
            Describes a pasture species.
            </summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myClock">
            <summary>Link to APSIM's Clock (provides time information).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myMetData">
            <summary>Link to APSIM's WeatherFile (provides meteorological information).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySummary">
            <summary>Link to APSIM summary (logs the messages raised during model run).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoil">
            <summary>Link to the Soil (provides soil information).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.soilArbitrator">
            <summary>Link to Apsim's Resource Arbitrator module.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.BiomassRemovedDelegate">
            <summary>Invoked for incorporating surface OM.</summary>
            <param name="Data">The data about biomass deposited by this plant onto the soil surface</param>
        </member>
        <member name="E:Models.AgPasture.PastureSpecies.BiomassRemoved">
            <summary>Occurs when plant is detaching dead tissues, litter.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.WaterChangedDelegate">
            <summary>Invoked for changing soil water due to uptake.</summary>
            <param name="Data">The data about changes in the amount of water for each soil layer</param>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myAlbedo">
            <summary>Canopy albedo for this plant (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Albedo">
            <summary>Gets or sets the canopy albedo for this plant (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myGsmax">
            <summary>Maximum stomatal conductance (m/s).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Gsmax">
            <summary>Gets or sets the  maximum stomatal conductance (m/s).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myR50">
            <summary>Solar radiation at which stomatal conductance decreases to 50% (W/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.R50">
            <summary>Gets or sets the R50 factor (W/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LAI">
            <summary>Gets the LAI of live tissues (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LAITotal">
            <summary>Gets the total LAI, live + dead (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CoverGreen">
            <summary>Gets the plant's green cover (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CoverTotal">
            <summary>Gets the total plant cover (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Height">
            <summary>Gets the average canopy height (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Depth">
            <summary>Gets the canopy depth (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FRGR">
            <summary>Plant growth limiting factor, supplied to MicroClimate for calculating potential transpiration.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PotentialEP">
            <summary>Potential evapotranspiration, as calculated by MicroClimate (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myLightProfile">
            <summary>Light profile, energy available for each canopy layer (W/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LightProfile">
            <summary>Gets or sets the light profile for this plant, as calculated by MicroClimate (W/m^2).</summary>
            <remarks>This is the intercepted radiation for each layer of the canopy.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Legumosity">
            <summary>Gets a value indicating how leguminous a plant is</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.IsC4">
            <summary>Gets a value indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CultivarNames">
            <summary>Gets a list of cultivar names (not used by AgPasture).</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sows the plant.</summary>
            <param name="cultivar">The cultivar type</param>
            <param name="population">The number of plants per area</param>
            <param name="depth">The sowing depth</param>
            <param name="rowSpacing">The space between rows</param>
            <param name="maxCover">The maximum ground cover (optional)</param>
            <param name="budNumber">The number of buds (optional)</param>
            <remarks>
            For AgPasture species the sow parameters are not used, the command to sow simply enables the plant to grow. This is done
            by setting the plant status to 'alive'. From this point germination processes takes place and eventually emergence occurs.
            At emergence, plant DM is set to its default minimum value, allocated according to EmergenceFractions and with
            optimum N concentration. Plant height and root depth are set to their minimum values.
            </remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.IsReadyForHarvesting">
            <summary>Flag whether the crop is ready for harvesting.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.Harvest">
            <summary>Harvests the crop.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EndCrop">
            <summary>Ends the crop.</summary>
            <remarks>All plant material is moved on to surfaceOM and soilFOM.</remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Gets the potential plant water uptake for each layer (mm).</summary>
            <remarks>The model can only handle one root zone at present.</remarks>
            <param name="soilstate">The soil state (current water content)</param>
            <returns>The potential water uptake (mm)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Gets the potential plant N uptake for each layer (mm).</summary>
            <remarks>The model can only handle one root zone at present.</remarks>
            <param name="soilstate">The soil state (current N contents)</param>
            <returns>The potential N uptake (kg/ha)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>Sets the amount of water taken up by this plant (mm).</summary>
            <remarks>The model can only handle one root zone at present.</remarks>
            <param name="zones">The water uptake from each layer (mm), by zone</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>Sets the amount of N taken up by this plant (kg/ha).</summary>
            <remarks>The model can only handle one root zone at present.</remarks>
            <param name="zones">The N uptake from each layer (kg/ha), by zone</param>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySpeciesFamily">
            <summary>Family type for this plant species (grass/legume/forb).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SpeciesFamily">
            <summary>Gets or sets the family type for this plant species (grass/legume/forb).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myPhotosyntheticPathway">
            <summary>Species photosynthetic pathway (C3/C4).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PhotosyntheticPathway">
            <summary>Gets or sets the metabolic pathway for C fixation during photosynthesis (C3/C4).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myInitialShootDM">
            <summary>Initial above ground DM weight (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.InitialShootDM">
            <summary>Gets or sets the initial above ground DM weight (kgDM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myInitialRootDM">
            <summary>Initial below ground DM weight (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.InitialRootDM">
            <summary>Gets or sets the initial root DM weight (kgDM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myInitialRootDepth">
            <summary>Initial rooting depth (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.InitialRootDepth">
            <summary>Gets or sets the initial rooting depth (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.initialDMFractionsGrasses">
            <summary>Initial fractions of DM for each plant part in grasses (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.initialDMFractionsLegumes">
            <summary>Initial fractions of DM for each plant part in legumes (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.initialDMFractionsForbs">
            <summary>Initial fractions of DM for each plant part in forbs (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myReferencePhotosyntheticRate">
            <summary>Reference leaf CO2 assimilation rate for photosynthesis (mg CO2/m^2Leaf/s).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReferencePhotosyntheticRate">
            <summary>Gets or sets the reference leaf CO2 assimilation rate for photosynthesis (mg CO2/m^2Leaf/s).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PhotosyntheticEfficiency">
            <summary>Gets or sets the leaf photosynthetic efficiency (mg CO2/J).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PhotosynthesisCurveFactor">
            <summary>Gets or sets the photosynthesis curvature parameter (J/kg/s).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.FractionPAR">
            <summary>Gets or sets the fraction of radiation that is photosynthetically active (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myLightExtinctionCoefficient">
            <summary>Light extinction coefficient (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LightExtinctionCoefficient">
            <summary>Gets or sets the light extinction coefficient (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ReferenceCO2">
            <summary>Gets or sets the reference CO2 concentration for photosynthesis (ppm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.CO2EffectScaleFactor">
            <summary>Gets or sets the scaling parameter for the CO2 effect on photosynthesis (ppm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.CO2EffectOffsetFactor">
            <summary>Gets or sets the scaling parameter for the CO2 effects on N requirements (ppm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.CO2EffectMinimum">
            <summary>Gets or sets the minimum value for the CO2 effect on N requirements (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.CO2EffectExponent">
            <summary>Gets or sets the exponent controlling the CO2 effect on N requirements (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myGrowthTminimum">
            <summary>Minimum temperature for growth (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrowthTminimum">
            <summary>Gets or sets the minimum temperature for growth (oC).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myGrowthToptimum">
            <summary>Optimum temperature for growth (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrowthToptimum">
            <summary>Gets or sets the optimum temperature for growth (oC).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myGrowthTEffectExponent">
            <summary>Curve parameter for growth response to temperature (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrowthTEffectExponent">
            <summary>Gets or sets the curve parameter for growth response to temperature (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.UseHeatStressFactor">
            <summary>Flag whether photosynthesis reduction due to heat damage is enabled (yes/no).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myHeatOnsetTemperature">
            <summary>Onset temperature for heat effects on photosynthesis (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HeatOnsetTemperature">
            <summary>Gets or sets the onset temperature for heat effects on photosynthesis (oC).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myHeatFullTemperature">
            <summary>Temperature for full heat effect on photosynthesis, growth stops (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HeatFullTemperature">
            <summary>Gets or sets the temperature for full heat effect on photosynthesis, growth stops (oC).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myHeatRecoverySumDD">
            <summary>Cumulative degrees-day for recovery from heat stress (oCd).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HeatRecoverySumDD">
            <summary>Gets or sets the cumulative degrees-day for recovery from heat stress (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myHeatRecoveryTReference">
            <summary>Reference temperature for recovery from heat stress (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HeatRecoveryTReference">
            <summary>Gets or sets the reference temperature for recovery from heat stress (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.UseColdStressFactor">
            <summary>Flag whether photosynthesis reduction due to cold damage is enabled (yes/no).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myColdOnsetTemperature">
            <summary>Onset temperature for cold effects on photosynthesis (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ColdOnsetTemperature">
            <summary>Gets or sets the onset temperature for cold effects on photosynthesis (oC).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myColdFullTemperature">
            <summary>Temperature for full cold effect on photosynthesis, growth stops (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ColdFullTemperature">
            <summary>Gets or sets the temperature for full cold effect on photosynthesis, growth stops (oC).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myColdRecoverySumDD">
            <summary>Cumulative degrees for recovery from cold stress (oCd).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ColdRecoverySumDD">
            <summary>Gets or sets the cumulative degrees for recovery from cold stress (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myColdRecoveryTReference">
            <summary>Reference temperature for recovery from cold stress (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ColdRecoveryTReference">
            <summary>Gets or sets the reference temperature for recovery from cold stress (oC).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myMaintenanceRespirationCoefficient">
            <summary>Maintenance respiration coefficient (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MaintenanceRespirationCoefficient">
            <summary>Gets or sets the maintenance respiration coefficient (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myGrowthRespirationCoefficient">
            <summary>Growth respiration coefficient (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrowthRespirationCoefficient">
            <summary>Gets or sets the growth respiration coefficient (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myRespirationTReference">
            <summary>Reference temperature for maintenance respiration (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RespirationTReference">
            <summary>Gets or sets the reference temperature for maintenance respiration (oC).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myRespirationExponent">
            <summary>Exponent controlling the effect of temperature on respiration (>1.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RespirationExponent">
            <summary>Gets or sets the exponent controlling the effect of temperature on respiration (>1.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myNThresholdsForLeaves">
            <summary>N concentration thresholds for leaves, optimum, minimum and maximum (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NThresholdsForLeaves">
            <summary>Gets or sets the N concentration thresholds for leaves, optimum, minimum and maximum (kgN/kgDM).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myNThresholdsForStems">
            <summary>N concentration thresholds for stems, optimum, minimum and maximum (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NThresholdsForStems">
            <summary>Gets or sets the N concentration thresholds for stems, optimum, minimum and maximum (kgN/kgDM).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myNThresholdsForStolons">
            <summary>N concentration thresholds for stolons, optimum, minimum and maximum (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NThresholdsForStolons">
            <summary>Gets or sets the N concentration thresholds for stolons, optimum, minimum and maximum (kgN/kgDM).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myNThresholdsForRoots">
            <summary>N concentration thresholds for roots, optimum, minimum and maximum (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NThresholdsForRoots">
            <summary>Gets or sets the N concentration thresholds for roots, optimum, minimum and maximum (kgN/kgDM).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myDegreesDayForGermination">
            <summary>Cumulative degrees-day needed for seed germination (oCd).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DegreesDayForGermination">
            <summary>Gets or sets the cumulative degrees-day needed for seed germination (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.emergenceDMFractions">
            <summary>The fractions of DM for each plant part at emergence, for all plants (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myTargetShootRootRatio">
            <summary>Target, or ideal, shoot-root ratio (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TargetShootRootRatio">
            <summary>Gets or sets the target, or ideal, shoot-root ratio at vegetative stage (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myMaxRootAllocation">
            <summary>Maximum fraction of DM growth allocated to roots (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MaxRootAllocation">
            <summary>Gets or sets the maximum fraction of DM growth that can be  allocated to roots (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myShootRootGlfFactor">
            <summary>Maximum effect that soil GLFs have on Shoot-Root ratio (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ShootRootGlfFactor">
            <summary>Gets or sets the maximum effect that soil GLFs have on Shoot-Root ratio (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.UseReproSeasonFactor">
            <summary>
            Flag whether Shoot:Root ratio should be adjusted to mimic DM allocation during reproductive season (perennial species).
            </summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myReproSeasonReferenceLatitude">
            <summary>Reference latitude determining timing for reproductive season (degrees).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonReferenceLatitude">
            <summary>Gets or sets the reference latitude determining timing for reproductive season (degrees).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myReproSeasonTimingCoeff">
            <summary>Coefficient controlling the time to start the reproductive season as function of latitude (-).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonTimingCoeff">
            <summary>Gets or sets the coefficient controlling the time to start the reproductive season as function of latitude (-).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ReproSeasonDurationCoeff">
            <summary>Gets or sets the coefficient controlling the duration of the reproductive season as function of latitude (-).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ReproSeasonShouldersLengthFactor">
            <summary>Gets or sets the ratio between the length of shoulders and the period with full reproductive growth effect (-).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ReproSeasonOnsetDurationFactor">
            <summary>Gets or sets the proportion of the onset phase of shoulder period with reproductive growth effect (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myReproSeasonMaxAllocationIncrease">
            <summary>Maximum increase in Shoot-Root ratio during reproductive growth (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonMaxAllocationIncrease">
            <summary>Gets or sets the maximum increase in Shoot-Root ratio during reproductive growth (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myReproSeasonAllocationCoeff">
            <summary>Coefficient controlling the increase in shoot allocation during reproductive growth as function of latitude (-).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ReproSeasonAllocationCoeff">
            <summary>
            Gets or sets the coefficient controlling the increase in shoot allocation during reproductive growth as function of latitude (-).
            </summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myFractionLeafMaximum">
            <summary>Maximum target allocation of new growth to leaves (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionLeafMaximum">
            <summary>Gets or sets the maximum target allocation of new growth to leaves (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myFractionLeafMinimum">
            <summary>Minimum target allocation of new growth to leaves (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionLeafMinimum">
            <summary>Gets or sets the minimum target allocation of new growth to leaves (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myFractionLeafDMThreshold">
            <summary>Shoot DM at which allocation of new growth to leaves start to decrease (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionLeafDMThreshold">
            <summary>Gets or sets the shoot DM at which allocation of new growth to leaves start to decrease (kgDM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myFractionLeafDMFactor">
            <summary>Shoot DM when allocation to leaves is midway maximum and minimum (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionLeafDMFactor">
            <summary>Gets or sets the shoot DM when allocation to leaves is midway maximum and minimum (kgDM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myFractionLeafExponent">
            <summary>Exponent controlling the DM allocation to leaves (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionLeafExponent">
            <summary>Gets or sets the exponent of function describing DM allocation to leaves (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myFractionToStolon">
            <summary>Fraction of new shoot growth to be allocated to stolons (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionToStolon">
            <summary>Gets or sets the fraction of new shoot growth to be allocated to stolons (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySpecificLeafArea">
            <summary>Specific leaf area (m^2/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SpecificLeafArea">
            <summary>Gets or sets the specific leaf area (m^2/kgDM).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySpecificRootLength">
            <summary>Specific root length (m/gDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SpecificRootLength">
            <summary>Gets or sets the specific root length (m/gDM).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myStolonEffectOnLAI">
            <summary>Fraction of stolon tissue used when computing green LAI (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonEffectOnLAI">
            <summary>Gets or sets the fraction of stolon tissue used when computing green LAI (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myShootMaxEffectOnLAI">
            <summary>Maximum aboveground biomass for considering stems when computing LAI (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.ShootMaxEffectOnLAI">
            <summary>Gets or sets the maximum aboveground biomass for considering stems when computing LAI (kgDM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myMaxStemEffectOnLAI">
            <summary>Fraction of stem tissue used when computing green LAI (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MaxStemEffectOnLAI">
            <summary>Gets or sets the fraction of stem tissue used when computing green LAI (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myLiveLeavesPerTiller">
            <summary>Number of live leaves per tiller (-).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LiveLeavesPerTiller">
            <summary>Gets or sets the number of live leaves per tiller (-).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myTissueTurnoverRateShoot">
            <summary>Reference daily DM turnover rate for shoot tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TissueTurnoverRateShoot">
            <summary>Gets or sets the reference daily DM turnover rate for shoot tissues (0-1).</summary>
            <remarks>This is closely related to the leaf appearance rate.</remarks>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myTissueTurnoverRateRoot">
            <summary>Reference daily DM turnover rate for root tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TissueTurnoverRateRoot">
            <summary>Gets or sets the reference daily DM turnover rate for root tissues (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.RelativeTurnoverEmerging">
            <summary>Gets or sets the relative turnover rate for emerging tissues (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myDetachmentRateShoot">
            <summary>Reference daily detachment rate for dead tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DetachmentRateShoot">
            <summary>Gets or sets the reference daily detachment rate for dead tissues (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myTurnoverTemperatureMin">
            <summary>Minimum temperature for tissue turnover (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverTemperatureMin">
            <summary>Gets or sets the minimum temperature for tissue turnover (oC).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myTurnoverTemperatureRef">
            <summary>Reference temperature for tissue turnover (oC).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverTemperatureRef">
            <summary>Gets or sets the reference temperature for tissue turnover (oC).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myTurnoverTemperatureExponent">
            <summary>Exponent of function for temperature effect on tissue turnover (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverTemperatureExponent">
            <summary>Gets or sets the exponent of function for temperature effect on tissue turnover (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myTurnoverDroughtEffectMax">
            <summary>Maximum increase in tissue turnover due to water deficit (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverDroughtEffectMax">
            <summary>Gets or sets the maximum increase in tissue turnover due to water deficit (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myTurnoverDroughtThreshold">
            <summary>Minimum GLFwater without effect on tissue turnover (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverDroughtThreshold">
            <summary>Gets or sets the minimum GLFwater without effect on tissue turnover (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.DetachmentDroughtCoefficient">
            <summary>Gets or sets the coefficient controlling detachment rate as function of moisture (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.DetachmentDroughtEffectMin">
            <summary>Gets or sets the minimum effect of drought on detachment rate (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.TurnoverStockFactor">
            <summary>Gets or sets the factor increasing tissue turnover rate due to stock trampling (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myTurnoverDefoliationCoefficient">
            <summary>Coefficient of function increasing the turnover rate due to defoliation (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverDefoliationCoefficient">
            <summary>Gets or sets the coefficient of function increasing the turnover rate due to defoliation (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.TurnoverDefoliationEffectMin">
            <summary>Gets or sets the minimum significant daily effect of defoliation on tissue turnover rate (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myTurnoverDefoliationRootEffect">
            <summary>Effect of defoliation on root turnover rate relative to stolon (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverDefoliationRootEffect">
            <summary>Gets or sets the effect of defoliation on root turnover rate relative to stolon (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myFractionNLuxuryRemobilisable">
            <summary>Fraction of luxury N remobilisable each day for each tissue age, emerging, developing, mature (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionNLuxuryRemobilisable">
            <summary>Gets or sets the fraction of luxury N remobilisable each day for each tissue age, emerging, developing, mature (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myMinimumNFixation">
            <summary>Minimum fraction of N demand supplied by biologic N fixation (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MinimumNFixation">
            <summary>Gets or sets the minimum fraction of N demand supplied by biologic N fixation (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myMaximumNFixation">
            <summary>Maximum fraction of N demand supplied by biologic N fixation (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MaximumNFixation">
            <summary>Gets or sets the maximum fraction of N demand supplied by biologic N fixation (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySymbiontCostFactor">
            <summary>Respiration cost factor due to the presence of symbiont bacteria (kgC/kgC in roots).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SymbiontCostFactor">
            <summary>Gets or sets the respiration cost factor due to the presence of symbiont bacteria (kgC/kgC in roots).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myNFixingCostFactor">
            <summary>Respiration cost factor due to the activity of symbiont bacteria (kgC/kgN fixed).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NFixingCostFactor">
            <summary>Gets or sets the respiration cost factor due to the activity of symbiont bacteria (kgC/kgN fixed).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilSaturationEffectMax">
            <summary>Maximum reduction in plant growth due to water logging, saturated soil (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilSaturationEffectMax">
            <summary>Gets or sets the maximum reduction in plant growth due to water logging, saturated soil (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myMinimumWaterFreePorosity">
            <summary>Minimum water-free pore space for growth with no limitations (0-1).</summary>
            <remarks>A negative value indicates that porosity at DUL will be used.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MinimumWaterFreePorosity">
            <summary>Gets or sets the minimum water-free pore space for growth with no limitations (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilSaturationRecoveryFactor">
            <summary>Maximum daily recovery rate from water logging (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilSaturationRecoveryFactor">
            <summary>Gets or sets the maximum daily recovery rate from water logging (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myNDillutionCoefficient">
            <summary>Exponent for modifying the effect of N deficiency on plant growth (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NDillutionCoefficient">
            <summary>Gets or sets the exponent for modifying the effect of N deficiency on plant growth (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myGlfGeneric">
            <summary>Generic growth limiting factor, represents an arbitrary limitation to potential growth (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfGeneric">
            <summary>Gets or sets a generic growth factor, represents an arbitrary limitation to potential growth (0-1).</summary>
            <remarks> This factor can be used to describe the effects of drivers such as disease, etc.</remarks>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myGlfSoilFertility">
            <summary>Generic growth limiting factor, represents an arbitrary soil limitation (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfSoilFertility">
            <summary>Gets or sets a generic growth limiting factor, represents an arbitrary soil limitation (0-1).</summary>
            <remarks> This factor can be used to describe the effect of limitation in nutrients other than N.</remarks>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myPlantHeightMinimum">
            <summary>Minimum shoot height (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantHeightMinimum">
            <summary>Gets or sets the minimum plant height (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myPlantHeightMaximum">
            <summary>Maximum shoot height (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantHeightMaximum">
            <summary>Gets or sets the maximum shoot height (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myPlantHeightMassForMax">
            <summary>DM weight above ground for maximum plant height (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantHeightMassForMax">
            <summary>Gets or sets the DM weight above ground for maximum plant height (kgDM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myPlantHeightExponent">
            <summary>Exponent controlling shoot height as function of DM weight (>1.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantHeightExponent">
            <summary>Gets or sets the exponent controlling shoot height as function of DM weight (>1.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myRootDepthMinimum">
            <summary>Minimum rooting depth, at emergence (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootDepthMinimum">
            <summary>Gets or sets the minimum rooting depth, at emergence (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myRootDepthMaximum">
            <summary>Maximum rooting depth (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootDepthMaximum">
            <summary>Gets or sets the maximum rooting depth (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myRootElongationRate">
            <summary>Daily root elongation rate at optimum temperature (mm/day).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootElongationRate">
            <summary>Gets or sets the daily root elongation rate at optimum temperature (mm/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myRootDistributionDepthParam">
            <summary>Depth from surface where root proportion starts to decrease (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootDistributionDepthParam">
            <summary>Gets or sets the depth from surface where root proportion starts to decrease (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myRootDistributionExponent">
            <summary>Exponent controlling the root distribution as function of depth (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootDistributionExponent">
            <summary>Gets or sets the exponent controlling the root distribution as function of depth (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myRootBottomDistributionFactor">
            <summary>Factor to compute root distribution (controls where, below maxRootDepth, the function is zero).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myDigestibilitiesCellWall">
            <summary>Digestibility of cell walls for each tissue age, emerging, developing, mature and dead (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DigestibilitiesCellWall">
            <summary>Gets or sets the digestibility of cell walls for each tissue age, emerging, developing, mature and dead (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.DigestibilitiesProtein">
            <summary>Gets or sets the digestibility of proteins in plant tissues (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.SugarFractionNewGrowth">
            <summary>Gets or sets the fraction of soluble carbohydrates in newly grown tissues (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myMinimumGreenWt">
            <summary>Minimum above ground green DM, leaf and stems (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MinimumGreenWt">
            <summary>Gets or sets the minimum above ground green DM, leaf and stems (kgDM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.MinimumGreenLeafProp">
            <summary>Gets or sets the leaf proportion in the minimum green Wt (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.MinimumGreenRootProp">
            <summary>Gets or sets the minimum root amount relative to minimum green Wt (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myFractionStolonStanding">
            <summary>Proportion of stolon DM standing, available for removal (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionStolonStanding">
            <summary>Gets or sets the proportion of stolon DM standing, available for removal (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myPreferenceForGreenOverDead">
            <summary>Relative preference for live over dead material during graze (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PreferenceForGreenOverDead">
            <summary>Gets or sets the relative preference for live over dead material during graze (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myPreferenceForLeafOverStems">
            <summary>Relative preference for leaf over stem-stolon material during graze (>0.0).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PreferenceForLeafOverStems">
            <summary>Gets or sets the relative preference for leaf over stem-stolon material during graze (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.MyWaterUptakeSource">
            <summary>Flag which module will perform the water uptake process.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myWaterAvailableMethod">
            <summary>Flag which method for computing soil available water will be used.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.WaterAvailableMethod">
            <summary>Flag which method for computing soil available water will be used.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.MyNitrogenUptakeSource">
            <summary>Flag which module will perform the nitrogen uptake process.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myNitrogenAvailableMethod">
            <summary>Flag which method for computing available soil nitrogen will be used.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NitrogenAvailableMethod">
            <summary>Flag which method for computing available soil nitrogen will be used.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.MaximumFractionAvailable">
            <summary>Gets or sets the maximum fraction of water or N in the soil that is available to plants.</summary>
            <remarks>This is used to limit the amount taken up and avoid issues with very small numbers</remarks>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ReferenceRLD">
            <summary>Reference value for root length density for the Water and N availability.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ExponentSoilMoisture">
            <summary>Exponent controlling the effect of soil moisture variations on water extractability.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ReferenceKSuptake">
            <summary>Reference value of Ksat for water availability function.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.NuptakeSWFactor">
            <summary>Exponent of function determining soil extractable N.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.MaximumNUptake">
            <summary>Maximum daily amount of N that can be taken up by the plant (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.KNH4">
            <summary>Ammonium uptake coefficient.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.KNO3">
            <summary>Nitrate uptake coefficient.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.kuNH4">
            <summary>Availability factor for NH4.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.kuNO3">
            <summary>Availability factor for NO3.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.doyGermination">
            <summary>Gets or sets the day of year when seeds are allowed to germinate.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.daysEmergenceToAnthesis">
            <summary>Gets or sets the number of days from emergence to anthesis.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.daysAnthesisToMaturity">
            <summary>Gets or sets the number of days from anthesis to maturity.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.degreesDayForAnthesis">
            <summary>Gets or sets the cumulative degrees-day from emergence to anthesis (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.degreesDayForMaturity">
            <summary>Gets or sets the cumulative degrees-day from anthesis to maturity (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.daysAnnualsFactor">
            <summary>Gets or sets the number of days from emergence with reduced growth.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.FVPDFunction">
            <summary>Describes the FVPD function.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.leaves">
            <summary>Holds info about state of leaves (DM and N).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.stems">
            <summary>Holds info about state of sheath/stems (DM and N).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.stolons">
            <summary>Holds info about state of stolons (DM and N).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.roots">
            <summary>Holds the info about state of roots (DM and N). It is a list of root organs, one for each zone where roots are growing.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.InitialState">
            <summary>Holds the basic state variables for this plant (to be used for reset).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.isAlive">
            <summary>Flag whether this species is alive (actively growing).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.isSwardControlled">
            <summary>Flag whether several routines are ran by species or are controlled by the Sward.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.nLayers">
            <summary>Number of layers in the soil.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.isAnnual">
            <summary>Flag whether this species is annual or perennial.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.isLegume">
            <summary>Flag whether this species is a legume.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.phenologicStage">
            <summary>Phenological stage of plant (0-2).</summary>
            <remarks>0 = germinating, 1 = vegetative, 2 = reproductive, negative for dormant/not sown.</remarks>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.daysSinceEmergence">
            <summary>Number of days since emergence (days).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumulativeDDVegetative">
            <summary>Cumulative degrees day during vegetative phase (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.phenoFactor">
            <summary>Factor describing progress through phenological phases (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumulativeDDGermination">
            <summary>Cumulative degrees-day during germination phase (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.basePhotosynthesis">
            <summary>Base gross photosynthesis rate, before damages (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.grossPhotosynthesis">
            <summary>Gross photosynthesis rate, after considering damages (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.respirationGrowth">
            <summary>Growth respiration rate (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.respirationMaintenance">
            <summary>Maintenance respiration rate (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.costNFixation">
            <summary>N fixation costs (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.remobilisableC">
            <summary>Amount of C remobilisable from senesced tissue (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.remobilisedC">
            <summary>Amount of C remobilised from senesced tissue (kg C/ha/day).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthPot">
            <summary>Daily net growth potential (kg DM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthAfterWaterLimitations">
            <summary>Daily potential growth after water stress (kg DM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthAfterNutrientLimitations">
            <summary>Daily growth after nutrient stress, actual growth (kg DM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthNet">
            <summary>Effective plant growth, actual growth minus senescence (kg DM/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthShootDM">
            <summary>Actual growth of shoot (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthRootDM">
            <summary>Actual growth of roots (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthShootN">
            <summary>Actual N allocation into shoot (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dGrowthRootN">
            <summary>Actual N allocation into roots (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.detachedShootDM">
            <summary>DM amount detached from shoot, added to surface OM (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.detachedShootN">
            <summary>N amount in detached tissues from shoot (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.detachedRootDM">
            <summary>DM amount detached from roots, added to soil FOM (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.detachedRootN">
            <summary>N amount in detached tissues from roots (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.fractionToShoot">
            <summary>Fraction of new growth allocated to shoot (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.fractionToLeaf">
            <summary>Fraction of new shoot growth allocated to leaves (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.usingReproSeasonFactor">
            <summary>Flag whether the factor adjusting Shoot:Root ratio during reproductive season is being used.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.reproSeasonInterval">
            <summary>Intervals defining the three reproductive season phases (onset, main phase, and outset).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.doyIniReproSeason">
            <summary>Day of the year for the start of the reproductive season.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.allocationIncreaseRepro">
            <summary>Relative increase in the shoot-root ratio during reproductive season (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.gama">
            <summary>Daily DM turnover rate for live shoot tissues (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.gamaD">
            <summary>Daily DM turnover rate for dead shoot tissues (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.gamaR">
            <summary>Daily DM turnover rate for roots tissue (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.gamaS">
            <summary>Daily DM turnover rate for stolon tissue (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ttfTemperature">
            <summary>Tissue turnover factor due to variations in temperature (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ttfMoistureShoot">
            <summary>Tissue turnover factor due to variations in moisture (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ttfMoistureRoot">
            <summary>Tissue turnover factor due to variations in moisture (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.ttfLeafNumber">
            <summary>Tissue turnover factor due to variations in moisture (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumDefoliationFactor">
            <summary>Effect of defoliation on stolon turnover (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.greenLAI">
            <summary>LAI of green plant tissues (m^2/m^2).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.deadLAI">
            <summary>LAI of dead plant tissues (m^2/m^2).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.effectiveGreenCover">
            <summary>Effective cover for computing photosynthesis (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dRootDepth">
            <summary>Daily variation in root depth (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.demandLuxuryN">
            <summary>Amount of N demanded for new growth, with luxury uptake (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.demandOptimumN">
            <summary>Amount of N demanded for new growth, at optimum N content (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.fixedN">
            <summary>Amount of N fixation from atmosphere, for legumes (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.senescedNRemobilised">
            <summary>Amount of senesced N actually remobilised (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.luxuryNRemobilised">
            <summary>Amount of luxury N actually remobilised (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.dNewGrowthN">
            <summary>Amount of N used up in new growth (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilNDemand">
            <summary>Amount of N demanded from the soil (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.mySoilNH4Available">
            <summary>Amount of NH4-N in the soil available to the plant (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.mySoilNO3Available">
            <summary>Amount of NO3-N in the soil available to the plant (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilNH4Uptake">
            <summary>Amount of soil NH4-N taken up by the plant (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilNO3Uptake">
            <summary>Amount of soil NO3-N taken up by the plant (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myWaterDemand">
            <summary>Amount of water demanded for new growth (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilWaterAvailable">
            <summary>Amount of plant available water in the soil (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.mySoilWaterUptake">
            <summary>Amount of soil water taken up (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfRadn">
            <summary>Growth factor due to variations in intercepted radiation (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfCO2">
            <summary>Growth factor due to N variations in atmospheric CO2 (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfNc">
            <summary>Growth factor due to variations in plant N concentration (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfTemp">
            <summary>Growth factor due to variations in air temperature (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.usingHeatStressFactor">
            <summary>Flag whether the factor reducing photosynthesis due to heat damage is being used.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.usingColdStressFactor">
            <summary>Flag whether the factor reducing photosynthesis due to cold damage is being used.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfHeat">
            <summary>Growth factor due to heat stress (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.highTempStress">
            <summary>Auxiliary growth reduction factor due to high temperatures (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumulativeDDHeat">
            <summary>Cumulative degrees of temperature for recovery from heat damage (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfCold">
            <summary>Growth factor due to cold stress (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.lowTempStress">
            <summary>Auxiliary growth reduction factor due to low temperatures (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumulativeDDCold">
            <summary>Cumulative degrees of temperature for recovery from cold damage (oCd).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfWaterSupply">
            <summary>Growth limiting factor due to water stress (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.cumWaterLogging">
            <summary>Cumulative water logging factor (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfWaterLogging">
            <summary>Growth limiting factor due to water logging (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.glfNSupply">
            <summary>Growth limiting factor due to N stress (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.tempEffectOnRespiration">
            <summary>Temperature effects on respiration (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.defoliatedDM">
            <summary>Dry matter weight harvested (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.defoliatedFraction">
            <summary>Fraction of standing DM harvested (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.myDefoliatedFraction">
            <summary>Fraction of standing DM harvested (0-1), used on tissue turnover.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.defoliatedN">
            <summary>Amount of N in the harvested material (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.defoliatedDigestibility">
            <summary>Digestibility of defoliated material (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.CarbonFractionInDM">
            <summary>Average carbon content in plant dry matter (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PotentialMEOfHerbage">
            <summary>Average potential ME concentration in herbage material (MJ/kg)</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.NitrogenToProteinFactor">
            <summary>Factor for converting nitrogen to protein (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.CNratioProtein">
            <summary>Carbon to nitrogen ratio of proteins (-).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.CNratioCellWall">
            <summary>Carbon to nitrogen ratio of cell walls (-).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.Epsilon">
            <summary>Minimum significant difference between two values.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.YesNoAnswer">
            <summary>A yes or no answer.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.YesNoAnswer.yes">
            <summary>A positive answer.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.YesNoAnswer.no">
            <summary>A negative answer.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.PlantFamilyType">
            <summary>List of valid species family names.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantFamilyType.Grass">
            <summary>A grass species, Poaceae.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantFamilyType.Legume">
            <summary>A legume species, Fabaceae.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantFamilyType.Forb">
            <summary>A non grass or legume species.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.PhotosynthesisPathwayType">
            <summary>List of valid photosynthesis pathways.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PhotosynthesisPathwayType.C3">
            <summary>A C3 plant.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PhotosynthesisPathwayType.C4">
            <summary>A C4 plant.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.PlantAvailableWaterMethod">
            <summary>List of valid methods to compute plant available water.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantAvailableWaterMethod.DefaultAPSIM">
            <summary>APSIM default method, using kL.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantAvailableWaterMethod.AlternativeKL">
            <summary>Alternative method, using root length and modified kL.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantAvailableWaterMethod.AlternativeKS">
            <summary>Alternative method, using root length and relative Ksat.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.PlantAvailableNitrogenMethod">
            <summary>List of valid methods to compute plant available water.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantAvailableNitrogenMethod.BasicAgPasture">
            <summary>AgPasture old default method, all N available.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantAvailableNitrogenMethod.DefaultAPSIM">
            <summary>APSIM default method, using soil water status.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantAvailableNitrogenMethod.AlternativeRLD">
            <summary>Alternative method, using root length and water status.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.PlantAvailableNitrogenMethod.AlternativeWup">
            <summary>Alternative method, using water uptake.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.IsAlive">
            <summary>Gets the flag signalling whether plant is alive (true/false).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.PlantStatus">
            <summary>Gets the plant status (dead, alive, etc.).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.Stage">
            <summary>Gets the index for the plant development stage.</summary>
            <remarks>0 = germinating, 1 = vegetative, 2 = reproductive, negative for dormant/not sown.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.InterceptedRadn">
            <summary>Gets or sets the solar radiation intercepted by the plant's canopy (MJ/m^2/day).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RadiationTopOfCanopy">
            <summary>Gets or sets the radiance on top of the plant's canopy (MJ/m^2/day).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TotalC">
            <summary>Gets the total amount of C in the plant (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TotalWt">
            <summary>Gets the total dry matter weight of plant (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundWt">
            <summary>Gets the dry matter weight of the plant above ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundLiveWt">
            <summary>Gets the dry matter weight of live tissues above ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundDeadWt">
            <summary>Gets the dry matter weight of dead tissues above ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.BelowGroundWt">
            <summary>Gets the dry matter weight of the plant below ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.BelowGroundLiveWt">
            <summary>Gets the dry matter weight of live tissues below ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StandingHerbageWt">
            <summary>Gets the dry matter weight of standing herbage (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StandingLiveHerbageWt">
            <summary>Gets the dry matter weight of live standing herbage (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StandingDeadHerbageWt">
            <summary>Gets the dry matter weight of dead standing herbage (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafWt">
            <summary>Gets the dry matter weight of plant's leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafLiveWt">
            <summary>Gets the dry matter weight of live leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafDeadWt">
            <summary>Gets the dry matter weight of dead leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemWt">
            <summary>Gets the dry matter weight of plant's stems and sheath (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemLiveWt">
            <summary>Gets the dry matter weight of alive stems and sheath (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemDeadWt">
            <summary>Gets the dry matter weight of dead stems and sheath (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonWt">
            <summary>Gets the dry matter weight of plant's stolons (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootWt">
            <summary>Gets the dry matter weight of plant's roots (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootLayerWt">
            <summary>Gets the dry matter weight of roots in each soil layer ().</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TotalN">
            <summary>Gets the total amount of N in the plant (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundN">
            <summary>Gets the amount of N in the plant above ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundLiveN">
            <summary>Gets the amount of N in live tissues above ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundDeadN">
            <summary>Gets the amount of N in dead tissues above ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.BelowGroundN">
            <summary>Gets the amount of N in the plant below ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.BelowGroundLiveN">
            <summary>Gets the amount of N in live tissues below ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StandingHerbageN">
            <summary>Gets the amount of N in standing herbage (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StandingLiveHerbageN">
            <summary>Gets the amount of N in live standing herbage (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StandingDeadHerbageN">
            <summary>Gets the N content  of standing dead plant material (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafN">
            <summary>Gets the amount of N in the plant's leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafLiveN">
            <summary>Gets the amount of N in live leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafDeadN">
            <summary>Gets the amount of N in dead leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemN">
            <summary>Gets the amount of N in the plant's stems and sheath (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemLiveN">
            <summary>Gets the amount of N in live stems and sheath (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemDeadN">
            <summary>Gets the amount of N in dead stems and sheath (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonN">
            <summary>Gets the amount of N in the plant's stolons (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootN">
            <summary>Gets the amount of N in the plant's roots (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGroundNConc">
            <summary>Gets the average N concentration in the plant above ground (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StandingHerbageNConc">
            <summary>Gets the average N concentration in standing herbage (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafNConc">
            <summary>Gets the average N concentration in plant's leaves (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemNConc">
            <summary>Gets the average N concentration in plant's stems (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonNConc">
            <summary>Gets the average N concentration in plant's stolons (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootNConc">
            <summary>Gets the average N concentration in plant's roots (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.BasePotentialPhotosynthesisC">
            <summary>Gets the base potential photosynthetic rate, before damages, in carbon equivalent (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrossPotentialPhotosynthesisC">
            <summary>Gets the gross potential photosynthetic rate, after considering damages, in carbon equivalent (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RespirationLossC">
            <summary>Gets the respiration costs expressed in carbon equivalent (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NFixationCostC">
            <summary>Gets the n fixation costs expressed in carbon equivalent (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RemobilisedSenescedC">
            <summary>Gets the remobilised carbon from senesced tissues (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GrossPotentialGrowthWt">
            <summary>Gets the gross potential growth rate (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NetPotentialGrowthWt">
            <summary>Gets the net potential growth rate, after respiration (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NetPotentialGrowthAfterWaterWt">
            <summary>Gets the net potential growth rate after water stress (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NetPotentialGrowthAfterNutrientWt">
            <summary>Gets the net potential growth rate after nutrient stress (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NetGrowthWt">
            <summary>Gets the net, or actual, plant growth rate (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HerbageGrowthWt">
            <summary>Gets the net herbage growth rate (above ground) (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootGrowthWt">
            <summary>Gets the net root growth rate (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LitterDepositionWt">
            <summary>Gets the dry matter weight of detached dead material deposited onto soil surface (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootDetachedWt">
            <summary>Gets the dry matter weight of detached dead roots added to soil FOM (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GPP">
            <summary>Gets the gross primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NPP">
            <summary>Gets the net primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NAPP">
            <summary>Gets the net above-ground primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NBPP">
            <summary>Gets the net below-ground primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RemobilisableSenescedN">
            <summary>Gets the amount of senesced N potentially remobilisable (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RemobilisedSenescedN">
            <summary>Gets the amount of senesced N actually remobilised (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RemobilisableLuxuryN">
            <summary>Gets the amount of luxury N potentially remobilisable (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RemobilisedLuxuryN">
            <summary>Gets the amount of luxury N actually remobilised (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FixedN">
            <summary>Gets the amount of atmospheric N fixed by symbiosis (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DemandAtLuxuryN">
            <summary>Gets the amount of N required with luxury uptake (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DemandAtOptimumN">
            <summary>Gets the amount of N required for optimum growth (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilDemandN">
            <summary>Gets the amount of N demanded from the soil (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilAvailableN">
            <summary>Gets the amount of plant available N in the soil (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilUptakeN">
            <summary>Gets the amount of N taken up from the soil (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LitterDepositionN">
            <summary>Gets the amount of N in detached dead material deposited onto soil surface (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootDetachedN">
            <summary>Gets the amount of N in detached dead roots added to soil FOM (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.NetGrowthN">
            <summary>Gets the amount of N in new growth (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilNH4Available">
            <summary>Gets the amount of plant available NH4-N in each soil layer (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilNO3Available">
            <summary>Gets the amount of plant available NO3-N in each soil layer (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilNH4Uptake">
            <summary>Gets the amount of NH4-N taken up from each soil layer (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.SoilNO3Uptake">
            <summary>Gets the amount of NO3-N taken up from each soil layer (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LL">
            <summary>Gets the soil water content at lower limit for plant uptake ().</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.WaterDemand">
            <summary>Gets or sets the amount of water demanded by the plant (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.WaterAvailable">
            <summary>Gets the amount of plant available water in each soil layer (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.WaterUptake">
            <summary>Gets the amount of water taken up from each soil layer (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfRadnIntercept">
            <summary>Gets the growth factor due to variations in intercepted radiation (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfCO2">
            <summary>Gets the growth factor due to variations in atmospheric CO2 (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfNContent">
            <summary>Gets the growth factor due to variations in plant N concentration (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfTemperature">
            <summary>Gets the growth factor due to variations in air temperature (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfHeatDamage">
            <summary>Gets the growth factor due to heat damage stress (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfColdDamage">
            <summary>Gets the growth factor due to cold damage stress (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfWaterSupply">
            <summary>Gets the growth limiting factor due to water deficit (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfWaterLogging">
            <summary>Gets the growth limiting factor due to water logging (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.GlfNSupply">
            <summary>Gets the growth limiting factor due to soil N availability (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FVPD">
            <summary>Gets the effect of vapour pressure on growth (used by micromet) (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TemperatureFactorRespiration">
            <summary>Gets the temperature factor for respiration (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionGrowthToShoot">
            <summary>Gets the fraction of new growth allocated to shoot (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionGrowthToRoot">
            <summary>Gets the fraction of new growth allocated to roots (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.FractionGrowthToLeaf">
            <summary>Gets the fraction of new shoot growth allocated to leaves (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverRateLiveShoot">
            <summary>Gets the turnover rate for live shoot tissues (leaves and stem) (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverRateDeadShoot">
            <summary>Gets the turnover rate for dead shoot tissues (leaves and stem) (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverRateStolons">
            <summary>Gets the turnover rate for stolon tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TurnoverRateRoots">
            <summary>Gets the turnover rate for roots tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.TemperatureFactorTurnover">
            <summary>Gets the temperature factor for tissue turnover (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MoistureFactorTurnover">
            <summary>Gets the moisture factor for tissue turnover (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LAIGreen">
            <summary>Gets the leaf area index of green tissues (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LAIDead">
            <summary>Gets the leaf area index of dead tissues (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.CoverDead">
            <summary>Gets the fraction of soil covered by dead tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootDepth">
            <summary>Gets the average depth of root zone (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootFrontier">
            <summary>Gets the layer at bottom of root zone ().</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootWtFraction">
            <summary>Gets the fraction of root dry matter for each soil layer (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.RootLengthDensity">
            <summary>Gets the root length density by volume (mm/mm^3).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.AboveGround">
            <summary>Get above ground biomass</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestableWt">
            <summary>Gets the dry matter weight available for harvesting (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedWt">
            <summary>Gets the amount of plant dry matter removed by harvest (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedFraction">
            <summary>Gets the fraction of available dry matter actually harvested ().</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedN">
            <summary>Gets the amount of plant N removed by harvest (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedNConc">
            <summary>Gets the average N concentration in harvested material (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedDigestibility">
            <summary>Gets the average digestibility of harvested material (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HarvestedME">
            <summary>Gets the average metabolisable energy concentration of harvested material (MJ/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HerbageDigestibility">
            <summary>Gets the average digestibility of standing herbage (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.HerbageME">
            <summary>Gets the average metabolisable energy concentration of standing herbage (MJ/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.EmergingTissuesWt">
            <summary>Gets the dry matter weight of emerging tissues from all above ground organs (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DevelopingTissuesWt">
            <summary>Gets the dry matter weight of developing tissues from all above ground organs (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MatureTissuesWt">
            <summary>Gets the dry matter weight of mature tissues from all above ground organs (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DeadTissuesWt">
            <summary>Gets the dry matter weight of dead tissues from all above ground organs (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage1Wt">
            <summary>Gets the dry matter weight of emerging tissues of plant's leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage2Wt">
            <summary>Gets the dry matter weight of developing tissues of plant's leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage3Wt">
            <summary>Gets the dry matter weight of mature tissues of plant's leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage4Wt">
            <summary>Gets the dry matter weight of dead tissues of plant's leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage1Wt">
            <summary>Gets the dry matter weight of emerging tissues of plant's stems (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage2Wt">
            <summary>Gets the dry matter weight of developing tissues of plant's stems (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage3Wt">
            <summary>Gets the dry matter weight of mature tissues of plant's stems (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage4Wt">
            <summary>Gets the dry matter weight of dead tissues of plant's stems (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonStage1Wt">
            <summary>Gets the dry matter weight of emerging tissues of plant's stolons (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonStage2Wt">
            <summary>Gets the dry matter weight of developing tissues of plant's stolons (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonStage3Wt">
            <summary>Gets the dry matter weight of mature tissues of plant's stolons (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.EmergingTissuesN">
            <summary>Gets the amount of N in emerging tissues from all above ground organs (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DevelopingTissuesN">
            <summary>Gets the amount of N in developing tissues from all above ground organs (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.MatureTissuesN">
            <summary>Gets the amount of N in mature tissues from all above ground organs (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.DeadTissuesN">
            <summary>Gets the amount of N in dead tissues from all above ground organs (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage1N">
            <summary>Gets the amount of N in emerging tissues of plant's leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage2N">
            <summary>Gets the amount of N in developing tissues of plant's leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage3N">
            <summary>Gets the amount of N in mature tissues of plant's leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage4N">
            <summary>Gets the amount of N in dead tissues of plant's leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage1N">
            <summary>Gets the amount of N in emerging tissues of plant's stems (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage2N">
            <summary>Gets the amount of N in developing tissues of plant's stems (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage3N">
            <summary>Gets the amount of N in mature tissues of plant's stems (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage4N">
            <summary>Gets the amount of N in dead tissues of plant's stems (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonStage1N">
            <summary>Gets the amount of N in emerging tissues of plant's stolons (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonStage2N">
            <summary>Gets the amount of N in developing tissues of plant's stolons (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonStage3N">
            <summary>Gets the amount of N in mature tissues of plant's stolons (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage1NConc">
            <summary>Gets the N concentration in emerging tissues of plant's leaves (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage2NConc">
            <summary>Gets the N concentration in developing tissues of plant's leaves (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage3NConc">
            <summary>Gets the N concentration in mature tissues of plant's leaves (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.LeafStage4NConc">
            <summary>Gets the N concentration in dead tissues of plant's leaves (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage1NConc">
            <summary>Gets the N concentration in emerging tissues of plant's stems (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage2NConc">
            <summary>Gets the N concentration in developing tissues of plant's stems (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage3NConc">
            <summary>Gets the N concentration in mature tissues of plant's stems (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StemStage4NConc">
            <summary>Gets the N concentration in dead tissues of plant's stems (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonStage1NConc">
            <summary>Gets the N concentration in emerging tissues of plant's stolons (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonStage2NConc">
            <summary>Gets the N concentration in developing tissues of plant's stolons (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureSpecies.StolonStage3NConc">
            <summary>Gets the N concentration in mature tissues of plant's stolons (kgN/kgDM).</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.AddZone(System.String,System.Double,System.Double)">
            <summary>
            Add a zone where roots are to grow.
            </summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initialisation procedures for this species (set DM, N, LAI, etc.).</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.InitiliaseSoilArrays">
            <summary>Initialises arrays to same length as soil layers.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CheckInitialState">
            <summary>Initialises, checks, and saves the variables representing the initial plant state.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SetInitialState">
            <summary>
            Sets the initial parameters for this plant, including DM and N content of various pools plus plant height and root depth.
            </summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SetEmergenceState">
            <summary>Set the plant state at germination.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.InitReproductiveGrowthFactor">
            <summary>Initialises the parameters to compute factor increasing shoot allocation during reproductive growth.</summary>
            <remarks>
            Reproductive phase of perennial is not simulated by the model, the ReproductiveGrowthFactor attempts to mimic the main
             effect, which is a higher allocation of DM to shoot during this period. The beginning and length of the reproductive
             phase is computed as function of latitude (it occurs later in spring and is shorter the further the location is from
             the equator). The extent at which allocation to shoot increases is also a function of latitude, maximum allocation is
             greater for higher latitudes. Shoulder periods occur before and after the main phase, in these allocation transitions
             between default allocation and that of the main phase.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.InitBiomassRemovals">
            <summary>Initialises the default biomass removal fractions.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>EventHandler - preparation before the main daily processes.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RefreshVariables">
            <summary>Zeroes out the value of several variables.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Performs the calculations for potential growth.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Performs the calculations for actual growth.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DailyGerminationProgress">
            <summary>Computes the daily progress through germination.</summary>
            <returns>The fraction of the germination phase completed (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CalcDailyPotentialGrowth">
            <summary>Calculates the daily potential plant growth.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CalcGrowthAfterWaterLimitations">
            <summary>Calculates the growth after water limitations.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CalcGrowthAfterNutrientLimitations">
            <summary>Calculates the actual plant growth (after all growth limitations, before senescence).</summary>
            <remarks>
            Here the limitation due to soil fertility are considered, the model simulates N deficiency only, but a generic user-settable
             limitation factor (GlfSFertility) can be used to mimic limitation due to other soil related factors (e.g. phosphorus)
            The GLF due to N stress is modified here to account for N dilution effects:
            Many plants, especially grasses, can keep growth even when N supply is below optimum; the N concentration is reduced
             in the plant tissues. This is represented hereby adjusting the effect of N deficiency using a power function. When the exponent
             is 1.0, the reduction in growth is linearly proportional to N deficiency, a greater value results in less reduction in growth.
            For many plants the value should be smaller than 1.0. For grasses, the exponent is typically around 0.5.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DailyPotentialPhotosynthesis">
            <summary>Computes the plant's gross potential growth rate.</summary>
            <returns>The potential amount of C assimilated via photosynthesis (kgC/ha)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SingleLeafPhotosynthesis(System.Double,System.Double)">
            <summary>Compute the photosynthetic rate for a single leaf.</summary>
            <param name="IL">The instantaneous intercepted radiation (J/m2 leaf/s)</param>
            <param name="Pmax">The maximum photosynthetic rate (mg CO2/m^2 leaf/s)</param>
            <returns>The potential photosynthetic rate (mgCO2/m^2 leaf/s)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DailyMaintenanceRespiration">
            <summary>Computes the plant's loss of C due to maintenance respiration.</summary>
            <returns>The amount of C lost to atmosphere (kgC/ha)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DailyGrowthRespiration">
            <summary>Computes the plant's loss of C due to growth respiration.</summary>
            <returns>The amount of C lost to atmosphere (kgC/ha)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateTissueTurnoverRates">
            <summary>Computes the turnover rates for each tissue pool of all plant organs.</summary>
            <remarks>
            The rates are passed on to each organ and the amounts potentially turned over are computed for each tissue.
            The turnover rates are affected by variations in soil water and air temperature. For leaves the number of leaves
             per tiller (LiveLeavesPerTiller, a parameter specific for each species) also influences the turnover rate.
            The C and N amounts potentially available for remobilisation are also computed in here.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateNewGrowthAllocation">
            <summary>Computes the allocation of new growth to all tissues in each organ.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DoActualGrowthAndAllocation">
            <summary>Calculates the plant actual growth and update DM, N, LAI and digestibility.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DoRootGrowthAllocation">
            <summary>Computes the allocation of new growth to roots for each layer.</summary>
            <remarks>
            The current target distribution for roots changes whenever then root depth changes, this is then used to allocate 
             new growth to each layer within the root zone. The existing distribution is used on any DM removal, so it may
             take some time for the actual distribution to evolve to be equal to the target.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluatePhenologyOfAnnuals">
            <summary>Evaluates the phenological stage of annual plants.</summary>
            <remarks>
            This method keeps track of days after emergence as well as cumulative degrees days, it uses both to evaluate the progress
             through each phase. The two approaches are used concomitantly to enable some basic sensitivity to environmental factors,
             but also to ensure that plants will complete their cycle (as the controls used here are rudimentary).
            This method also update the value of phenoFactor, using the estimated progress through the current phenological stage.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateSoilWaterUptake">
            <summary>Computes the potential plant water uptake.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.OnWaterUptakesCalculated(Models.PMF.WaterUptakesCalculatedType)">
            <summary>Gets the water uptake for each layer as calculated by an external module (SWIM).</summary>
            <param name="SoilWater">The soil water uptake data</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DoNitrogenCalculations">
            <summary>Performs the nitrogen uptake calculations.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateNitrogenDemand">
            <summary>Computes the amount of nitrogen demand for optimum N content as well as luxury uptake.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateNitrogenFixation">
            <summary>Computes the amount of atmospheric nitrogen fixed through symbiosis.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DailyNFixationCosts">
            <summary>Calculates the costs of N fixation</summary>
            <remarks>
            This approach separates maintenance and activity costs, based roughly on results from:
              Rainbird RM, Hitz WD, Hardy RWF 1984. Experimental determination of the respiration associated with soybean/rhizobium 
                nitrogenase function, nodule maintenance, and total nodule nitrogen fixation. Plant Physiology 75(1): 49-53.
              Voisin AS, Salon C, Jeudy C, Warembourg FR 2003. Symbiotic N2 fixation activity in relation to C economy of Pisum sativum L.
                as a function of plant phenology. Journal of Experimental Botany 54(393): 2733-2744.
              Minchin FR, Witty JF 2005. Respiratory/carbon costs of symbiotic nitrogen fixation in legumes. In: Lambers H, Ribas-Carbo 
                M eds. Plant Respiration. Advances in Photosynthesis and Respiration, Springer Netherlands. Pp. 195-205.
            NOTE: This procedure will use today's DM for maintenance costs, but yesterday's fixedN for activity (as today's fixation has 
             not been calculated yet).
            </remarks>
            <returns>The amount of carbon spent on N fixation (kg/ha)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateSoilNitrogenDemand">
            <summary>Evaluates the use of remobilised nitrogen and computes soil nitrogen demand.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateLuxuryNRemobilisation">
            <summary>Computes the amount of luxury nitrogen remobilised into new growth.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DoAddDetachedShootToSurfaceOM(System.Double,System.Double)">
            <summary>Adds a given amount of detached plant material (DM and N) to the surface organic matter.</summary>
            <param name="amountDM">The DM amount to send (kg/ha)</param>
            <param name="amountN">The N amount to send (kg/ha)</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.GetAllocationFractions">
            <summary>Gets the allocations into shoot and leaves of today's growth.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateAllocationToShoot">
            <summary>Calculates the fraction of new growth allocated to shoot.</summary>
            <remarks>
            Allocation of new growth to shoot is a function of the current and a target (ideal) Shoot-Root ratio; it is further
             modified according to soil's growth limiting factors (plants favour root growth when water or N are limiting).
            The target Shoot-Root ratio will be adjusted (increased) during spring for mimicking changes in DM allocation during
             the reproductive season if usingReproSeasonFactor.
            The allocation to shoot may be further modified to ensure a minimum allocation (= 1.0 - MaxRootAllocation).
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateAllocationToLeaf">
            <summary>Computes the fraction of new shoot DM that is allocated to leaves.</summary>
            <remarks>
            This method is used to reduce the proportion of leaves as plants grow, this is used for species that 
             allocate proportionally more DM to stolon/stems when the whole plant's DM is high.
            To avoid too little allocation to leaves in case of grazing the current leaf:stem ratio is evaluated
             and used to modify the targeted value in a similar way as shoot:root ratio.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateRootElongation">
            <summary>Computes the variations in root depth.</summary>
            <remarks>
            Root depth will increase if it is smaller than maximumRootDepth and there is a positive net DM accumulation.
            The depth increase rate is of zero-order type, given by the RootElongationRate, but it is adjusted for temperature
             in a similar fashion as plant DM growth. Note that currently root depth never decreases.
            </remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.HeightfromDM">
            <summary>Calculates the plant height as function of DM.</summary>
            <returns>The plant height (mm)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateLAI">
            <summary>Computes the values of LAI (leaf area index) for green and dead plant material.</summary>
            <remarks>This method considers leaves plus an additional effect of stems and stolons</remarks>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.KillCrop(System.Double)">
            <summary>Kills a fraction of this plant.</summary>
            <param name="fractionToKill">The fraction of crop to be killed (0-1)</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.Reset">
            <summary>Resets this plant state to its initial values.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.Harvest(Models.PMF.RemovalFractions)">
            <summary>Harvests the crop.</summary>
            <param name="removalData">The type and fractions to remove</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.Graze(System.String,System.Double)">
            <summary>Removes plant material simulating a graze event.</summary>
            <param name="type">The type of amount being defined (SetResidueAmount or SetRemoveAmount)</param>
            <param name="amount">The DM amount (kg/ha)</param>
            <exception cref="T:System.Exception"> Type of amount to remove on graze not recognized (use 'SetResidueAmount' or 'SetRemoveAmount'</exception>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RemoveDMold(System.Double)">
            <summary>Removes a given amount of DM (and N) from this plant.</summary>
            <remarks>
            This method uses preferences for green/dead material to partition the amount to remove between plant parts.
            NOTE: This method should only be called after testing the HarvestableWt is greater than zero.
            </remarks>
            <param name="amountToRemove">The amount to remove (kg/ha)</param>
            <exception cref="T:System.Exception">Removal of DM resulted in loss of mass balance</exception>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RemoveDM(System.Double)">
            <summary>Removes a given amount of DM (and N) from this plant.</summary>
            <param name="amountToRemove">The DM amount to remove (kg/ha)</param>
            <returns>The DM amount actually removed (kg/ha)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RemoveBiomass(System.String,Models.PMF.RemovalFractions)">
            <summary>Removes part of the crop biomass.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DoRemoveBiomass(System.Double[][])">
            <summary>Removes given fractions of biomass from each organ.</summary>
            <param name="fractionToRemove">The fractions to remove (0-1)</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.BiomassRemovalComplete(System.Double)">
            <summary>Biomass has been removed from the plant by animals.</summary>
            <param name="fractionRemoved">The fraction of biomass removed</param>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.AnnualSpeciesGrowthFactor">
            <summary>Computes a growth factor for annual species, related to phenology/population.</summary>
            <returns>A growth factor (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CO2EffectOnPhotosynthesis">
            <summary>Computes the relative effect of atmospheric CO2 on photosynthesis.</summary>
            <returns>A factor to adjust photosynthesis (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.NConcEffectOnPhotosynthesis">
            <summary>Computes the relative effect of leaf N concentration on photosynthesis.</summary>
            <remarks>
            This mimics the effect that N concentration have on the amount of chlorophyll (assumed directly proportional to N conc.).
            The effect is itself adjusted by a factor function of atmospheric CO2 (plants need less N at high CO2).
            </remarks>
            <returns>A factor to adjust photosynthesis (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.NOptimumVariationDueToCO2">
            <summary>Computes the variation in optimum N in leaves due to atmospheric CO2.</summary>
            <returns>A factor to adjust optimum N in leaves (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CO2EffectOnConductance">
            <summary>Computes the variation in stomata conductance due to variation in atmospheric CO2.</summary>
            <returns>The stomata conductance (m/s)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.Tmean(System.Double)">
            <summary>Today's weighted average temperature.</summary>
            <param name="wTmax">The weight of Tmax with respect to Tmin</param>
            <returns>The average Temperature (oC)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.HeatStress">
            <summary>Computes the reduction factor for photosynthesis due to heat damage.</summary>
            <remarks>Stress computed as function of daily maximum temperature, recovery based on average temperature</remarks>
            <returns>A factor to adjust photosynthesis (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.ColdStress">
            <summary>Computes the reduction factor for photosynthesis due to cold damage (frost).</summary>
            <remarks>Stress computed as function of daily minimum temperature, recovery based on average temperature</remarks>
            <returns>A factor to adjust photosynthesis (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.TemperatureLimitingFactor(System.Double)">
            <summary>Growth limiting factor due to temperature.</summary>
            <param name="temperature">The temperature</param>
            <returns>A factor to adjust photosynthesis (0-1)</returns>
            <exception cref="T:System.Exception">Photosynthesis pathway is not valid</exception>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.TemperatureEffectOnRespiration(System.Double)">
            <summary>Computes the effects of temperature on respiration.</summary>
            <param name="temperature">The temperature</param>
            <returns>A factor to adjust plant respiration (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.TempFactorForTissueTurnover(System.Double)">
            <summary>Effect of temperature on tissue turnover.</summary>
            <param name="temperature">The temperature</param>
            <returns>A factor to adjust tissue turnover (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.WaterDeficitFactor">
            <summary>Computes the growth limiting factor due to soil moisture deficit.</summary>
            <returns>A limiting factor for plant growth (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.WaterLoggingFactor">
            <summary>Computes the growth limiting factor due to excess of water in the soil (water logging/lack of aeration).</summary>
            <remarks>
            Growth is limited if soil water content is above a given threshold (defined by MinimumWaterFreePorosity), which
             will be the soil DUL is MinimumWaterFreePorosity is set to a negative value. When water content is greater than
             this water-free porosity growth will be limited. The function is based on the cumulative water logging, which means
             that limitation are more severe if water logging conditions are persistent. Maximum increment in one day equals the 
             SoilWaterSaturationFactor and cannot be greater than one. Recovery happens every if water content is below the full
             saturation, and is proportional to the water-free porosity.
            </remarks>
            <returns>A limiting factor for plant growth (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.MoistureEffectOnTissueTurnover">
            <summary>Computes the effect of water stress on tissue turnover.</summary>
            <remarks>Tissue turnover is higher under water stress, GLFwater is used to mimic that effect.</remarks>
            <returns>A factor for adjusting tissue turnover (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.DefoliationEffectOnTissueTurnover">
            <summary>Computes the effect of defoliation on stolon/root turnover rate.</summary>
            <remarks>
            This approach spreads the effect over a few days after a defoliation, starting large and decreasing with time.
            It is assumed that a defoliation of 100% of harvestable material will result in a full decay of stolons.
            </remarks>
            <returns>A factor for adjusting tissue turnover (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.MoistureEffectOnDetachment">
            <summary>Compute the effect of drought on detachment rate.</summary>
            <remarks>Drought will decrease the rate of littering.</remarks>
            <returns>A factor for adjusting the detachment rate(0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CalcReproductiveGrowthFactor">
            <summary>Calculates the factor increasing shoot allocation during reproductive growth.</summary>
            <remarks>
            This mimics the changes in DM allocation during reproductive season; allocation to shoot increases up to a maximum
             value (defined by allocationIncreaseRepro). This value is used during the main phase, two shoulder periods are
             defined on either side of the main phase (duration is given by reproSeasonInterval, translated into days of year),
             Onset phase goes between doyA and doyB, main phase between doyB and doyC, and outset between doyC and doyD.
            Note: The days have to be set as doubles or the division operations will be rounded and be slightly wrong.
            </remarks>
            <returns>A factor to adjust DM allocation to shoot</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.CalcPlantCover(System.Double)">
            <summary>Computes the ground cover for the plant, or plant part.</summary>
            <param name="givenLAI">The LAI</param>
            <returns>The fraction of light effectively intercepted (MJ/MJ)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.FractionLayerWithRoots(System.Int32)">
            <summary>Computes how much of the layer is actually explored by roots (considering depth only).</summary>
            <param name="layer">The index for the layer being considered</param>
            <returns>The fraction of the layer that is explored by roots (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.RootZoneBottomLayer">
            <summary>Gets the index of the layer at the bottom of the root zone.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.VPD">
            <summary>Computes the vapour pressure deficit.</summary>
            <returns>The vapour pressure deficit (hPa?)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.svp(System.Double)">
            <summary>Saturate vapour pressure in the air.</summary>
            <param name="temp">The air temperature (oC)</param>
            <returns>The saturated vapour pressure (hPa?)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.EvaluateDigestibility">
            <summary>Computes the average digestibility of above-ground plant material.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.calcHarvestDigestibility(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Compute the average digestibility of harvested plant material.</summary>
            <param name="leafLiveWt">removed DM of live leaves</param>
            <param name="leafDeadWt">removed DM of dead leaves</param>
            <param name="stemLiveWt">removed DM of live stems</param>
            <param name="stemDeadWt">removed DM of dead stems</param>
            <param name="stolonLiveWt">removed DM of live stolons</param>
            <param name="stolonDeadWt">removed DM of dead stolons</param>
            <returns>The digestibility of plant material (0-1)</returns>
        </member>
        <member name="T:Models.AgPasture.PastureSpecies.SpeciesBasicStateSettings">
            <summary>Basic values defining the state of a pasture species.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.SpeciesBasicStateSettings.PhenoStage">
            <summary>Plant phenological stage.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.SpeciesBasicStateSettings.DMWeight">
            <summary>DM weight for each biomass pool (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.SpeciesBasicStateSettings.NAmount">
            <summary>N amount for each biomass pool (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureSpecies.SpeciesBasicStateSettings.RootDepth">
            <summary>Root depth (mm).</summary>
        </member>
        <member name="M:Models.AgPasture.PastureSpecies.SpeciesBasicStateSettings.#ctor">
            <summary>Constructor, initialise the arrays.</summary>
        </member>
        <member name="T:Models.AgPasture.BrokenStick">
            <summary>Defines a broken stick (piecewise) function.</summary>
        </member>
        <member name="F:Models.AgPasture.BrokenStick.X">
            <summary>The values for x.</summary>
        </member>
        <member name="F:Models.AgPasture.BrokenStick.Y">
            <summary>The values for y.</summary>
        </member>
        <member name="M:Models.AgPasture.BrokenStick.Value(System.Double)">
            <summary>Computes the function value at the specified x.</summary>
            <param name="newX">The x value</param>
            <returns>The interpolated value</returns>
        </member>
        <member name="T:Models.AgPasture.PastureAboveGroundOrgan">
            <summary>Describes a generic above ground organ of a pasture species.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureAboveGroundOrgan.Tissue">
            <summary>The collection of tissues for this organ.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            Biomass removal logic for this organ.
            </summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="biomassToRemove">Biomass to remove</param>
        </member>
        <member name="F:Models.AgPasture.PastureAboveGroundOrgan.NConcOptimum">
            <summary>Gets or sets the N concentration for optimum growth (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureAboveGroundOrgan.NConcMaximum">
            <summary>Gets or sets the maximum N concentration, for luxury uptake (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureAboveGroundOrgan.NConcMinimum">
            <summary>Gets or sets the minimum N concentration, structural N (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureAboveGroundOrgan.MinimumLiveDM">
            <summary>Minimum DM amount of live tissues (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureAboveGroundOrgan.FractionStanding">
            <summary>Proportion of organ DM that is standing, available to harvest (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureAboveGroundOrgan.defaultRemovalFractions">
            <summary>List of BiomassRemovalTypes with default biomass removal fractions for given removal types.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.Live">
            <summary>Return live biomass. Used by STOCK (g/m2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.Dead">
            <summary>Return dead biomass. Used by STOCK (g/m2).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMTotal">
            <summary>Gets the total dry matter in this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMLive">
            <summary>Gets the dry matter in the live (green) tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMDead">
            <summary>Gets the dry matter in the dead tissues (kg/ha).</summary>
            <remarks>Last tissues is assumed to represent dead material.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMLiveHarvestable">
            <summary>The dry matter in the live (green) tissues available to harvest (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMDeadHarvestable">
            <summary>The dry matter in the dead tissues available to harvest (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NTotal">
            <summary>The total N amount in this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NLive">
            <summary>Gets the N amount in the live (green) tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NDead">
            <summary>Gets the N amount in the dead tissues (kg/ha).</summary>
            <remarks>Last tissues is assumed to represent dead material.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NconcTotal">
            <summary>Gets the average N concentration in this organ (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NconcLive">
            <summary>Gets the average N concentration in the live tissues (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NconcDead">
            <summary>Gets the average N concentration in dead tissues (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NSenescedRemobilisable">
            <summary>Gets the amount of senesced N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NSenescedRemobilised">
            <summary>Gets the amount of senesced N remobilised into new growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NLuxuryRemobilisable">
            <summary>Gets the amount of luxury N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NLuxuryRemobilised">
            <summary>Gets the amount of luxury N remobilised into new growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMGrowth">
            <summary>Gets the DM amount added to this organ via growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NGrowth">
            <summary>Gets the amount of N added to this organ via growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMSenesced">
            <summary>Gets the DM amount senescing from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NSenesced">
            <summary>Gets the amount of N senescing from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DMDetached">
            <summary>Gets the DM amount detached from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.NDetached">
            <summary>Gets the amount of N detached from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DigestibilityTotal">
            <summary>Gets the average digestibility of all biomass for this organ (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DigestibilityLive">
            <summary>Gets the average digestibility of live biomass for this organ (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureAboveGroundOrgan.DigestibilityDead">
            <summary>Gets the average digestibility of dead biomass for this organ (kg/kg).</summary>
            <remarks>Last tissues is assumed to represent dead material.</remarks>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.DoResetOrgan">
            <summary>Reset all amounts to zero in all tissues of this organ.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.DoCleanTransferAmounts">
            <summary>Reset the transfer amounts in all tissues of this organ.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.DoKillOrgan(System.Double)">
            <summary>Kills part of the organ (transfer DM and N to dead tissue).</summary>
            <param name="fraction">The fraction to kill in each tissue</param>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.DoTissueTurnover(System.Double[])">
            <summary>Computes the DM and N amounts turned over for all tissues.</summary>
            <param name="turnoverRate">The turnover rate for each tissue</param>
            <returns>The DM and N amount detached from this organ</returns>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.DoOrganUpdate">
            <summary>Updates each tissue, make changes in DM and N effective.</summary>
            <returns>A flag whether mass balance was maintained or not</returns>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.SetRemovalFractions(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Adds a removal type to the defaultRemovalFractions.</summary>
            <param name="typeName">The name of the removal type</param>
            <param name="removalFractions">The default removal fractions</param>
        </member>
        <member name="M:Models.AgPasture.PastureAboveGroundOrgan.GetRemovalFractions(System.String)">
            <summary>Gets the default removal fractions for a given removal type.</summary>
            <param name="typeName">The type of removal</param>
            <returns>The default removal fractions</returns>
        </member>
        <member name="F:Models.AgPasture.PastureAboveGroundOrgan.CarbonFractionInDM">
            <summary>Average carbon content in plant dry matter (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureAboveGroundOrgan.Epsilon">
            <summary>Minimum significant difference between two values.</summary>
        </member>
        <member name="T:Models.AgPasture.PastureBelowGroundOrgan">
            <summary>Describes a generic below ground organ of a pasture species.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.mySoil">
            <summary>Soil object where these roots are growing.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.SoilNitrogen">
            <summary>Soil nitrogen model.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.solutes">
            <summary>The solute manager in this zone</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.Tissue">
            <summary>The collection of tissues for this organ.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.#ctor(System.String,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Models.AgPasture.PastureSpecies.PlantAvailableWaterMethod,Models.AgPasture.PastureSpecies.PlantAvailableNitrogenMethod,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Models.Soils.Soil)">
            <summary>Constructor, initialise tissues for the roots.</summary>
            <param name="nameOfSpecies">Name of the pasture species</param>
            <param name="numTissues">Number of tissues in this organ</param>
            <param name="initialDM">Initial dry matter weight</param>
            <param name="initialDepth">Initial root depth</param>
            <param name="optNconc">The optimum N concentration</param>
            <param name="minNconc">The minimum N concentration</param>
            <param name="maxNconc">The maximum N concentration</param>
            <param name="minLiveDM">The minimum biomass for this organ</param>
            <param name="fractionLuxNremobilisable">Fraction of luxury N that can be remobilise in one day</param>
            <param name="specificRootLength">The specific root length (m/g)</param>
            <param name="rootDepthMaximum">The maximum root depth</param>
            <param name="rootDistributionDepthParam">Parameter to compute root distribution, depth with constant root</param>
            <param name="rootBottomDistributionFactor">Parameter to compute root distribution, </param>
            <param name="rootDistributionExponent">Parameter to compute root distribution, exponent for root decrease</param>
            <param name="waterAvailableMethod">Method to compute water available</param>
            <param name="nitrogenAvailableMethod">Method to compute N available</param>
            <param name="kNH4">Parameter to compute NN4 available, default method</param>
            <param name="kNO3">Parameter to compute NO3 available, default method</param>
            <param name="maxNUptake">Parameter to compute N uptake, default method</param>
            <param name="kuNH4">Parameter to compute NH4 available, alternative method</param>
            <param name="kuNO3">Parameter to compute NO3 available, alternative method</param>
            <param name="referenceKSuptake">Parameter to compute available water, conductivity</param>
            <param name="referenceRLD">Parameter to compute available water, roots</param>
            <param name="exponentSoilMoisture">Parameter to compute available water</param>
            <param name="theSoil">Reference to the soil in the zone these roots are in</param>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.mySpeciesName">
            <summary>Name of pasture species</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.myZoneName">
            <summary>Name of root zone.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.NConcOptimum">
            <summary>Gets or sets the N concentration for optimum growth (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.NConcMaximum">
            <summary>Gets or sets the maximum N concentration, for luxury uptake (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.NConcMinimum">
            <summary>Gets or sets the minimum N concentration, structural N (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.MinimumLiveDM">
            <summary>Minimum DM amount of live tissues (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.mySpecificRootLength">
            <summary>Specific root length (m/gDM).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myRootDepthMaximum">
            <summary>Maximum rooting depth (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myRootDistributionDepthParam">
            <summary>Depth from surface where root proportion starts to decrease (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myRootDistributionExponent">
            <summary>Exponent controlling the root distribution as function of depth (>0.0).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myRootBottomDistributionFactor">
            <summary>Factor to compute root distribution (controls where, below maxRootDepth, the function is zero).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myWaterAvailableMethod">
            <summary>Flag which method for computing soil available water will be used.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myNitrogenAvailableMethod">
            <summary>Flag which method for computing available soil nitrogen will be used.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myKNH4">
            <summary>Ammonium uptake coefficient.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myKNO3">
            <summary>Nitrate uptake coefficient.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myMaximumNUptake">
            <summary>Maximum daily amount of N that can be taken up by the plant (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myKuNH4">
            <summary>Availability factor for NH4.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myKuNO3">
            <summary>Availability factor for NO3.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myReferenceRLD">
            <summary>Reference value for root length density for the Water and N availability.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myExponentSoilMoisture">
            <summary>Exponent controlling the effect of soil moisture variations on water extractability.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.myReferenceKSuptake">
            <summary>Reference value of Ksat for water availability function.</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.nLayers">
            <summary>Number of layers in the soil.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.Depth">
            <summary>Gets or sets the rooting depth (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.BottomLayer">
            <summary>Gets or sets the layer at the bottom of the root zone.</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.TargetDistribution">
            <summary>Gets or sets the target (ideal) DM fractions for each layer (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.DMTotal">
            <summary>Gets the total dry matter in this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.DMLive">
            <summary>Gets the dry matter in the live (green) tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.DMDead">
            <summary>Gets the dry matter in the dead tissues (kg/ha).</summary>
            <remarks>Last tissues is assumed to represent dead material.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NTotal">
            <summary>The total N amount in this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NLive">
            <summary>Gets the N amount in the live (green) tissues (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NDead">
            <summary>Gets the N amount in the dead tissues (kg/ha).</summary>
            <remarks>Last tissues is assumed to represent dead material.</remarks>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NconcTotal">
            <summary>Gets the average N concentration in this organ (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NconcLive">
            <summary>Gets the average N concentration in the live tissues (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NconcDead">
            <summary>Gets the average N concentration in dead tissues (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NSenescedRemobilisable">
            <summary>Gets the amount of senesced N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NSenescedRemobilised">
            <summary>Gets the amount of senesced N remobilised into new growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NLuxuryRemobilisable">
            <summary>Gets the amount of luxury N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NLuxuryRemobilised">
            <summary>Gets the amount of senesced N remobilised into new growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.DMGrowth">
            <summary>Gets the DM amount added to this organ via growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NGrowth">
            <summary>Gets the amount of N added to this organ via growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.DMSenesced">
            <summary>Gets the DM amount senescing from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NSenesced">
            <summary>Gets the amount of N senescing from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.DMDetached">
            <summary>Gets the DM amount detached from this organ (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.NDetached">
            <summary>Gets the amount of N detached from this organ (kg/ha).</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.EvaluateSoilWaterAvailable(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Finds out the amount of plant available water in the soil.</summary>
            <param name="myZone">The soil information</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.PlantAvailableSoilWaterDefault(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Estimates the amount of plant available water in each soil layer of the root zone.</summary>
            <remarks>This is the default APSIM method, with kl representing the daily rate for water extraction</remarks>
            <param name="myZone">The soil information</param>
            <returns>The amount of available water in each layer (mm)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.PlantAvailableSoilWaterAlternativeKL(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Estimates the amount of plant available  water in each soil layer of the root zone.</summary>
            <remarks>
            This is an alternative method, kl representing a soil limiting factor for water extraction (clayey soils have lower values)
             this is further modified by soil water content (a reduction for dry soil). A plant related factor is defined based on root
             length density (limiting conditions when RLD is below ReferenceRLD)
            </remarks>
            <param name="myZone">The soil information</param>
            <returns>The amount of available water in each layer (mm)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.PlantAvailableSoilWaterAlternativeKS(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Estimates the amount of plant available water in each soil layer of the root zone.</summary>
            <remarks>
            This is an alternative method, which does not use kl. A factor based on Ksat is used instead. This is further modified
             by soil water content and a plant related factor, defined based on root length density. All three factors are normalised 
             (using ReferenceKSat and ReferenceRLD for KSat and root and DUL for soil water content). The effect of all factors are
             assumed to vary between zero and one following exponential functions, such that the effect is 90% at the reference value.
            </remarks>
            <param name="myZone">The soil information</param>
            <returns>The amount of available water in each layer (mm)</returns>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.RootLengthDensity">
            <summary>Gets the root length density by volume (mm/mm^3).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.mySoilWaterAvailable">
            <summary>Amount of plant available water in the soil (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.mySoilNH4Available">
            <summary>Amount of NH4-N in the soil available to the plant (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.PastureBelowGroundOrgan.mySoilNO3Available">
            <summary>Amount of NO3-N in the soil available to the plant (kg/ha).</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.DoResetOrgan">
            <summary>Reset all amounts to zero in all tissues of this organ.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.DoCleanTransferAmounts">
            <summary>Reset the transfer amounts in all tissues of this organ.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.DoKillOrgan(System.Double)">
            <summary>Kills part of the organ (transfer DM and N to dead tissue).</summary>
            <param name="fraction">The fraction to kill in each tissue</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.DoDetachBiomass(System.Double,System.Double)">
            <summary>Adds a given amount of detached root material (DM and N) to the soil's FOM pool.</summary>
            <param name="amountDM">The DM amount to send (kg/ha)</param>
            <param name="amountN">The N amount to send (kg/ha)</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.DoTissueTurnover(System.Double[])">
            <summary>Computes the DM and N amounts turned over for all tissues.</summary>
            <param name="turnoverRate">The turnover rate for each tissue</param>
            <returns>The DM and N amount detached from this organ</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.DoOrganUpdate">
            <summary>Updates each tissue, make changes in DM and N effective.</summary>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.EvaluateSoilNitrogenAvailable(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double[])">
            <summary>Finds out the amount of plant available nitrogen (NH4 and NO3) in the soil.</summary>
            <param name="myZone">The soil information</param>
            <param name="mySoilWaterUptake">Soil water uptake</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.PlantAvailableSoilNBasicAgPasture(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Estimates the amount of plant available nitrogen in each soil layer of the root zone.</summary>
            <remarks>This is a basic method, used as default in old AgPasture, all N in the root zone is available</remarks>
            <param name="myZone">The soil information</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.PlantAvailableSoilNDefaultAPSIM(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Estimates the amount of plant available nitrogen in each soil layer of the root zone.</summary>
            <remarks>
            This method approximates the default approach in APSIM plants (method 3 in Plant1 models)
            Soil water status and uptake coefficient control the availability, which is a square function of N content.
            Uptake is capped for a maximum value plants can take in one day.
            </remarks>
            <param name="myZone">The soil information</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.PlantAvailableSoilNAlternativeRLD(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Estimates the amount of plant available nitrogen in each soil layer of the root zone.</summary>
            <remarks>
            This method considers soil water status and root length density to define factors controlling N availability.
            Soil water status is used to define a factor that varies from zero at LL, below which no uptake can happen, 
             to one at DUL, above which no restrictions to uptake exist.
            Root length density is used to define a factor varying from zero if there are no roots to one when root length
             density is equal to a ReferenceRLD, above which there are no restrictions for uptake.
            Factors for each N form can also alter the amount available.
            Uptake is caped for a maximum value plants can take in one day.
            </remarks>
            <param name="myZone">The soil information</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.PlantAvailableSoilNAlternativeWup(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double[])">
            <summary>Estimates the amount of plant available nitrogen in each soil layer of the root zone.</summary>
            <remarks>
            This method considers soil water as the main factor controlling N availability/uptake.
            Availability is given by the proportion of water taken up in each layer, further modified by uptake factors
            Uptake is caped for a maximum value plants can take in one day.
            </remarks>
            <param name="myZone">The soil information</param>
            <param name="mySoilWaterUptake">Soil water uptake</param>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.FractionLayerWithRoots(System.Int32)">
            <summary>Computes how much of the layer is actually explored by roots (considering depth only).</summary>
            <param name="layer">The index for the layer being considered</param>
            <returns>The fraction of the layer that is explored by roots (0-1)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.RootZoneBottomLayer">
            <summary>Gets the index of the layer at the bottom of the root zone.</summary>
            <returns>The index of a layer</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.RootDistributionTarget">
            <summary>Computes the target (or ideal) distribution of roots in the soil profile.</summary>
            <remarks>
            This distribution is solely based on root parameters (maximum depth and distribution parameters)
            These values will be used to allocate initial rootDM as well as any growth over the profile
            </remarks>
            <returns>A weighting factor for each soil layer (mm equivalent)</returns>
        </member>
        <member name="M:Models.AgPasture.PastureBelowGroundOrgan.CurrentRootDistributionTarget">
            <summary>Computes the current target distribution of roots in the soil profile.</summary>
            <remarks>
            This distribution is a correction of the target distribution, taking into account the depth of soil
            as well as the current rooting depth
            </remarks>
            <returns>The proportion of root mass expected in each soil layer (0-1)</returns>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.CarbonFractionInDM">
            <summary>Average carbon content in plant dry matter (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.PastureBelowGroundOrgan.Epsilon">
            <summary>Minimum significant difference between two values.</summary>
        </member>
        <member name="T:Models.AgPasture.GenericTissue">
            <summary>Describes a generic tissue of a pasture species.</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.FractionNLuxuryRemobilisable">
            <summary>Gets or sets the fraction of luxury N remobilisable per day (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.FractionSugarNewGrowth">
            <summary>Gets or sets the sugar fraction on new growth, i.e. soluble carbohydrate (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.DigestibilityCellWall">
            <summary>Gets or sets the digestibility of cell walls (0-1).</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.DigestibilityProtein">
            <summary>Gets or sets the digestibility of proteins (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.DM">
            <summary>Gets or sets the dry matter weight (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.Namount">
            <summary>Gets or sets the nitrogen content (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.Pamount">
            <summary>Gets or sets the phosphorus content (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.DMTransferedIn">
            <summary>Gets or sets the DM amount transferred into this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.DMTransferedOut">
            <summary>Gets or sets the DM amount transferred out of this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.NTransferedIn">
            <summary>Gets or sets the amount of N transferred into this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.NTransferedOut">
            <summary>Gets or sets the amount of N transferred out of this tissue (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.NRemobilisable">
            <summary>Gets or sets the amount of N available for remobilisation (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.NRemobilised">
            <summary>Gets or sets the amount of N remobilised into new growth (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.Nconc">
            <summary>Gets the nitrogen concentration (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.Pconc">
            <summary>Gets the phosphorus concentration (kg/kg).</summary>
        </member>
        <member name="P:Models.AgPasture.GenericTissue.Digestibility">
            <summary>Gets the digestibility of this tissue (kg/kg).</summary>
            <remarks>Digestibility of sugars is assumed to be 100%.</remarks>
        </member>
        <member name="M:Models.AgPasture.GenericTissue.DoRemobiliseN(System.Double)">
            <summary>Removes a fraction of remobilisable N for use into new growth.</summary>
            <param name="fraction">The fraction to remove (0-1)</param>
        </member>
        <member name="M:Models.AgPasture.GenericTissue.DoUpdateTissue">
            <summary>Updates the tissue state, make changes in DM and N effective.</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.CarbonFractionInDM">
            <summary>Average carbon content in plant dry matter (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.CNratioProtein">
            <summary>Carbon to nitrogen ratio of proteins (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.CNratioCellWall">
            <summary>Carbon to nitrogen ratio of cell walls (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.GenericTissue.MyPrecision">
            <summary>Minimum significant difference between two values.</summary>
        </member>
        <member name="T:Models.AgPasture.RootTissue">
            <summary>Describes a root tissue of a pasture species.</summary>
        </member>
        <member name="M:Models.AgPasture.RootTissue.#ctor(System.Int32)">
            <summary>Constructor, initialise array.</summary>
            <param name="numLayers">The number of layers in the soil</param>
        </member>
        <member name="F:Models.AgPasture.RootTissue.nLayers">
            <summary>Number of layers in the soil.</summary>
        </member>
        <member name="P:Models.AgPasture.RootTissue.DM">
            <summary>Gets or sets the dry matter weight (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.DMLayer">
            <summary>Gets or sets the DM amount for each layer (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.RootTissue.Namount">
            <summary>Gets or sets the nitrogen content (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.RootTissue.NamountLayer">
            <summary>Gets or sets the N content for each layer (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.RootTissue.Pamount">
            <summary>Gets or sets the phosphorus content (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.RootTissue.PamountLayer">
            <summary>Gets or sets the P content for each layer (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.RootTissue.DMLayersTransferedIn">
            <summary>Gets or sets the DM amount transferred into this tissue, for each layer (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.RootTissue.NLayersTransferedIn">
            <summary>Gets or sets the amount of N transferred into this tissue, for each layer (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.RootTissue.FractionWt">
            <summary>Gets the dry matter fraction for each layer (0-1).</summary>
        </member>
        <member name="M:Models.AgPasture.RootTissue.DoUpdateTissue">
            <summary>Updates the tissue state, make changes in DM and N effective.</summary>
        </member>
        <member name="T:Models.AgPasture.Sward">
            <summary>
            # [Name]
            A multi-species pasture model.
            </summary>
        </member>
        <member name="F:Models.AgPasture.Sward.mySoil">
            <summary>Link to the Soil (provides the soil information).</summary>
        </member>
        <member name="T:Models.AgPasture.Sward.FOMLayerDelegate">
            <summary>Invoked for incorporating soil FOM.</summary>
            <param name="Data">The data about biomass deposited by this plant into the soil FOM</param>
        </member>
        <member name="E:Models.AgPasture.Sward.IncorpFOM">
            <summary>Occurs when plant is depositing senesced roots.</summary>
        </member>
        <member name="T:Models.AgPasture.Sward.BiomassRemovedDelegate">
            <summary>Invoked for incorporating surface OM.</summary>
            <param name="Data">The data about biomass deposited by this plant onto the soil surface</param>
        </member>
        <member name="E:Models.AgPasture.Sward.BiomassRemoved">
            <summary>Occurs when plant is detaching dead tissues, litter.</summary>
        </member>
        <member name="T:Models.AgPasture.Sward.WaterChangedDelegate">
            <summary>Invoked for changing soil water due to uptake.</summary>
            <param name="Data">The changes in the amount of water for each soil layer</param>
        </member>
        <member name="P:Models.AgPasture.Sward.CultivarNames">
            <summary>Gets a list of cultivar names (not used by AgPasture).</summary>
        </member>
        <member name="M:Models.AgPasture.Sward.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sows the plants.</summary>
            <param name="cultivar">The cultivar type</param>
            <param name="population">The number of plants per area</param>
            <param name="depth">The sowing depth</param>
            <param name="rowSpacing">The space between rows</param>
            <param name="maxCover">The maximum ground cover (optional)</param>
            <param name="budNumber">The number of buds (optional)</param>
        </member>
        <member name="P:Models.AgPasture.Sward.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting.</summary>
        </member>
        <member name="M:Models.AgPasture.Sward.Harvest">
            <summary>Harvests the crop.</summary>
        </member>
        <member name="M:Models.AgPasture.Sward.EndCrop">
            <summary>Ends the crop.</summary>
            <remarks>All plant material is moved on to surfaceOM and soilFOM.</remarks>
        </member>
        <member name="P:Models.AgPasture.Sward.mySpecies">
            <summary>Gets the reference to the species present in the sward.</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.isSwardControlled">
            <summary>Flag whether the sward controls the species routines.</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.ControlledBySward">
            <summary>Gets or sets whether the sward controls the process flow in all species.</summary>
        </member>
        <member name="T:Models.AgPasture.Sward.YesNoAnswerSward">
            <summary>A yes or no answer.</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.YesNoAnswerSward.yes">
            <summary>a positive answer.</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.YesNoAnswerSward.no">
            <summary>a negative answer.</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.myWaterUptakeSource">
            <summary>Flag for the model controlling the water uptake.</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.WaterUptakeSource">
            <summary>Gets or sets the model controlling the water uptake.</summary>
            <remarks>Defaults to 'species' if a resource arbitrator or SWIM3 is present.</remarks>
        </member>
        <member name="F:Models.AgPasture.Sward.myNUptakeSource">
            <summary>Flag for the model controlling the N uptake.</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.NUptakeSource">
            <summary>Gets or sets the model controlling the N uptake.</summary>
            <remarks>Defaults to 'species' if a resource arbitrator or SWIM3 is present.</remarks>
        </member>
        <member name="F:Models.AgPasture.Sward.swardIsAlive">
            <summary>Flag whether there is at least on plant alive in the sward.</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.numSpecies">
            <summary>Number of species in the sward.</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.nLayers">
            <summary>Number of soil layers.</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.swardSoilWaterAvailable">
            <summary>Amount of soil water available to the sward, from each soil layer (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.swardSoilWaterUptake">
            <summary>Soil water uptake for the whole sward, from each soil layer (mm).</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.swardSoilNH4Available">
            <summary>Amount of NH4-N available for uptake to the whole sward (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.swardSoilNO3Available">
            <summary>Amount of NO3-N available for uptake to the whole sward (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.swardSoilNH4Uptake">
            <summary>Amount of NH4-N taken up by the whole sward (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.swardSoilNO3Uptake">
            <summary>Amount of NO3-N taken up by the whole sward (kg/ha).</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.CarbonInDM">
            <summary>Average carbon content in plant dry matter (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.N2Protein">
            <summary>Nitrogen to protein conversion factor (kg/kg).</summary>
        </member>
        <member name="F:Models.AgPasture.Sward.Epsilon">
            <summary>Minimum significant difference between two values.</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.IsAlive">
            <summary>Gets the flag signalling whether plant is alive (true/false).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.PlantStatus">
            <summary>Gets the plant status (dead, alive, etc.).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.NumSpecies">
            <summary>Gets the number of species in the sward.</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.TotalC">
            <summary>Gets the total amount of C in the plant (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.TotalWt">
            <summary>Gets the total dry matter weight of plant (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.AboveGroundWt">
            <summary>Gets the dry matter weight of the plant above ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.AboveGroundLiveWt">
            <summary>Gets the dry matter weight of live tissues above ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.AboveGroundDeadWt">
            <summary>Gets the dry matter weight of dead tissues above ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.BelowGroundWt">
            <summary>Gets the dry matter weight of the plant below ground (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StandingHerbageWt">
            <summary>Gets the dry matter weight of standing herbage (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StandingLiveHerbageWt">
            <summary>Gets the dry matter weight of live standing herbage (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StandingDeadHerbageWt">
            <summary>Gets the dry matter weight of dead standing herbage (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.LeafWt">
            <summary>Gets the dry matter weight of plant's leaves (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StemWt">
            <summary>Gets the dry matter weight of plant's stems and sheath (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StolonWt">
            <summary>Gets the dry matter weight of plant's stolons (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootWt">
            <summary>Gets the dry matter weight of plant's roots (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootLayerWt">
            <summary>Gets the dry matter weight of roots in each soil layer ().</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.TotalN">
            <summary>Gets the total amount of N in the plant (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.AboveGroundN">
            <summary>Gets the amount of N in the plant above ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.AboveGroundLiveN">
            <summary>Gets the amount of N in live tissues above ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.AboveGroundDeadN">
            <summary>Gets the amount of N in dead tissues above ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.BelowGroundN">
            <summary>Gets the amount of N in the plant below ground (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StandingHerbageN">
            <summary>Gets the amount of N in standing herbage (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StandingLiveHerbageN">
            <summary>Gets the amount of N in live standing herbage (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StandingDeadHerbageN">
            <summary>Gets the N content  of standing dead plant material (kg/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.LeafN">
            <summary>Gets the amount of N in the plant's leaves (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StemN">
            <summary>Gets the amount of N in the plant's stems and sheath (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StolonN">
            <summary>Gets the amount of N in the plant's stolons (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootN">
            <summary>Gets the amount of N in the plant's roots (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.AboveGroundNConc">
            <summary>Gets the average N concentration in the plant above ground (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StandingHerbageNConc">
            <summary>Gets the average N concentration in standing herbage (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.LeafNConc">
            <summary>Gets the average N concentration in plant's leaves (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StemNConc">
            <summary>Gets the average N concentration in plant's stems (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.StolonNConc">
            <summary>Gets the average N concentration in plant's stolons (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootNConc">
            <summary>Gets the average N concentration in plant's roots (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GrossPotentialGrowthWt">
            <summary>Gets the gross potential growth rate (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.NetPotentialGrowthWt">
            <summary>Gets the net potential growth rate, after respiration (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.NetPotentialGrowthAfterWaterWt">
            <summary>Gets the net potential growth rate after water stress (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.NetPotentialGrowthAfterNutrientWt">
            <summary>Gets the net potential growth rate after nutrient stress (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.NetGrowthWt">
            <summary>Gets the net, or actual, plant growth rate (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.HerbageGrowthWt">
            <summary>Gets the net herbage growth rate (above ground) (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootGrowthWt">
            <summary>Gets the net root growth rate (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.LitterDepositionWt">
            <summary>Gets the dry matter weight of detached dead material deposited onto soil surface (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootDetachedWt">
            <summary>Gets the dry matter weight of detached dead roots added to soil FOM (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GPP">
            <summary>Gets the gross primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.NPP">
            <summary>Gets the net primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.NAPP">
            <summary>Gets the net above-ground primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.NBPP">
            <summary>Gets the net below-ground primary productivity (kgC/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RemobilisableSenescedN">
            <summary>Gets the amount of senesced N potentially remobilisable (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RemobilisedSenescedN">
            <summary>Gets the amount of senesced N actually remobilised (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RemobilisableLuxuryN">
            <summary>Gets the amount of luxury N potentially remobilisable (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RemobilisedLuxuryN">
            <summary>Gets the amount of luxury N actually remobilised (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.FixedN">
            <summary>Gets the amount of atmospheric N fixed by symbiosis (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.DemandAtLuxuryN">
            <summary>Gets the amount of N required with luxury uptake (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.DemandAtOptimumN">
            <summary>Gets the amount of N required for optimum growth (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.SoilDemandN">
            <summary>Gets the amount of N demanded from the soil (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.SoilAvailableN">
            <summary>Gets the amount of plant available N in the soil (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.SoilUptakeN">
            <summary>Gets the amount of N taken up from the soil (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.LitterDepositionN">
            <summary>Gets the amount of N in detached dead material deposited onto soil surface (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootDetachedN">
            <summary>Gets the amount of N in detached dead roots added to soil FOM (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.NetGrowthN">
            <summary>Gets the amount of N in new growth (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.WaterDemand">
            <summary>Gets the amount of water demanded by the plant (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.WaterAvailable">
            <summary>Gets the amount of plant available water in each soil layer (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.WaterUptake">
            <summary>Gets the amount of water taken up from each soil layer (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfRadnIntercept">
            <summary>Gets the growth factor due to variations in intercepted radiation (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfCO2">
            <summary>Gets the growth factor due to variations in atmospheric CO2 (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfNContent">
            <summary>Gets the growth factor due to variations in plant N concentration (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfTemperature">
            <summary>Gets the growth factor due to variations in air temperature (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfHeatDamage">
            <summary>Gets the growth factor due to heat damage stress (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfColdDamage">
            <summary>Gets the growth factor due to cold damage stress (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfGeneric">
            <summary>Gets the generic factor affecting potential plant growth [0-1]: (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfWaterSupply">
            <summary>Gets the growth limiting factor due to water deficit (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfWaterLogging">
            <summary>Gets the growth limiting factor due to water logging (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfNSupply">
            <summary>Gets the growth limiting factor due to soil N availability (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.GlfSoilFertility">
            <summary>Gets the generic growth limiting factor due to soil fertility [0-1]: (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.LAIGreen">
            <summary>Gets the leaf area index of green tissues (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.LAIDead">
            <summary>Gets the leaf area index of dead tissues (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.LAITotal">
            <summary>Gets the total leaf area index (m^2/m^2).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.CoverGreen">
            <summary>Gets the fraction of soil covered by green tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.CoverDead">
            <summary>Gets the fraction of soil covered by dead tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.CoverTotal">
            <summary>Gets the fraction of soil covered by plant tissues (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.LightExtinctionCoefficient">
            <summary>Gets the light extinction coefficient [0-1] (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.Height">
            <summary>Gets the average canopy height (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootZoneDepth">
            <summary>Gets the average depth of root zone (mm).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootZoneFrontier">
            <summary>Gets the layer at bottom of root zone (-).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootWtFraction">
            <summary>Gets the fraction of root dry matter for each soil layer (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.RootLengthDensity">
            <summary>Gets the root length density by volume (mm/mm^3).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.HarvestableWt">
            <summary>Gets the dry matter weight available for harvesting (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.HarvestedWt">
            <summary>Gets the amount of plant dry matter removed by harvest (kgDM/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.HarvestedN">
            <summary>Gets the amount of plant N removed by harvest (kgN/ha).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.HarvestedNConc">
            <summary>Gets the average N concentration in harvested material (kgN/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.HarvestedDigestibility">
            <summary>Gets the average digestibility of harvested material (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.HarvestedME">
            <summary>Gets the average metabolisable energy concentration of harvested material (MJ/kgDM).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.HerbageDigestibility">
            <summary>Gets the average digestibility of standing herbage (0-1).</summary>
        </member>
        <member name="P:Models.AgPasture.Sward.HerbageME">
            <summary>Gets the average metabolisable energy concentration of standing herbage (MJ/kgDM).</summary>
        </member>
        <member name="M:Models.AgPasture.Sward.OnCreated">
            <summary>Called when model has been created.</summary>
        </member>
        <member name="M:Models.AgPasture.Sward.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when the simulation is commencing.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.Sward.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>EventHandler - preparation before the main daily processes.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/>instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.Sward.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Performs the calculations for potential growth.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/>instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.Sward.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Performs the calculations for actual growth.</summary>
            <param name="sender">The sender model</param>
            <param name="e">The <see cref="T:System.EventArgs"/>instance containing the event data</param>
        </member>
        <member name="M:Models.AgPasture.Sward.DoNitrogenCalculations">
            <summary>Performs the nitrogen uptake calculations.</summary>
        </member>
        <member name="M:Models.AgPasture.Sward.DoAddDetachedShootToSurfaceOM(System.Double,System.Double)">
            <summary>Adds a given amount of detached plant material (DM and N) to the surface organic matter.</summary>
            <param name="amountDM">The DM amount to send (kg/ha)</param>
            <param name="amountN">The N amount to send (kg/ha)</param>
        </member>
        <member name="M:Models.AgPasture.Sward.DoAddDetachedRootToSoilFOM(System.Double,System.Double)">
            <summary>Adds a given amount of detached root material (DM and N) to the soil's FOM pool.</summary>
            <param name="amountDM">The DM amount to send (kg/ha)</param>
            <param name="amountN">The N amount to send (kg/ha)</param>
        </member>
        <member name="M:Models.AgPasture.Sward.KillCrop(System.Double)">
            <summary>Kills a fraction of all plants in the sward.</summary>
            <param name="fractionToKill">The fraction of crop to kill (0-1)</param>
        </member>
        <member name="M:Models.AgPasture.Sward.Graze(System.Double,System.String)">
            <summary>Removes plant material simulating a graze event.</summary>
            <param name="amount">The DM amount (kg/ha)</param>
            <param name="type">How the amount is interpreted (SetResidueAmount or SetRemoveAmount)</param>
        </member>
        <member name="T:Models.Agroforestry.AgroforestrySystem">
            <summary>
            The APSIM AgroforestrySystem model calculates interactions between trees and neighbouring crop or pasture zones.  The model is therefore derived from the Zone class within APSIM and includes child zones to simulate soil and plant processes within the system.  It obtains information from a tree model within its scope (ie a child) and uses information about the tree structure (such as height and canopy dimensions) to calculate microclimate impacts on its child zones.  Below-ground interactions between trees and crops or pastures are calculated by the APSIM SoilArbitrator model.
            
            Windbreaks are simulated using an approach [Huthetal2002] that calculates windspeeds in the lee of windbreaks as a function distance (described in terms of multiples of tree heights) and windbreak optical porosity.
            
            </summary>
        </member>
        <member name="P:Models.Agroforestry.AgroforestrySystem.Urel">
            <summary>
            The reduction in wind as a fraction.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.AgroforestrySystem.ZoneList">
            <summary>
            A list containing forestry information for each zone.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.AgroforestrySystem.RainfallInterceptionFraction">
            <summary>
            Fraction of rainfall intercepted by canopy
            </summary>
        </member>
        <member name="P:Models.Agroforestry.AgroforestrySystem.RainShaddowWidth">
            <summary>
            Width of the tree rain shaddow in terms of tree heights
            </summary>
        </member>
        <member name="P:Models.Agroforestry.AgroforestrySystem.Area">
            <summary>
            Return the area of the zone.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.AgroforestrySystem.tree">
            <summary>
            A pointer to the tree model.
            </summary>
        </member>
        <member name="M:Models.Agroforestry.AgroforestrySystem.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Agroforestry.AgroforestrySystem.GetDistanceFromTrees(Models.Core.Zone)">
            <summary>
            Passthrough for child nodes that need information from the tree.
            Saves having to query the simulation for the node location all the time.
            </summary>
            <param name="z">The zone.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.AgroforestrySystem.GetWindReduction(Models.Core.Zone)">
            <summary>
            Return the %Wind Reduction for a given zone
            </summary>
            <param name="z">Zone</param>
            <returns>%Wind Reduction</returns>
        </member>
        <member name="M:Models.Agroforestry.AgroforestrySystem.GetRadiationReduction(Models.Core.Zone)">
            <summary>
            Return the %Radiation Reduction for a given zone
            </summary>
            <param name="z">Zone</param>
            <returns>%Radiation Reduction</returns>
        </member>
        <member name="M:Models.Agroforestry.AgroforestrySystem.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this cultivar by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Agroforestry.LocalMicroClimate">
            <summary>
            # [Name]
            Class to calculate and communicate local microclimate in agroforestry systems
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.StartDate">
            <summary>Gets the start date of the weather file</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.EndDate">
            <summary>Gets the end date of the weather file</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.MaxT">
            <summary>Gets or sets the maximum temperature (oc)</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.MinT">
            <summary>Gets or sets the minimum temperature (oc)</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.MeanT">
            <summary>
            Daily Mean temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.VPD">
            <summary>
            Daily mean VPD (hPa)
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Rain">
            <summary>Gets or sets the rainfall (mm)</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Radn">
            <summary>Gets or sets the solar radiation. MJ/m2/day</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.VP">
            <summary>Gets or sets the vapor pressure</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Wind">
            <summary>
            Gets or sets the wind value found in weather file or zero if not specified.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.CO2">
            <summary>
            Gets or sets the CO2 level. If not specified in the weather file the default is 350.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.AirPressure">
            <summary>
            Gets or sets the atmospheric air pressure. If not specified in the weather file the default is 1010 hPa.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Latitude">
            <summary>Gets the latitude</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Tav">
            <summary>Gets the average temperature</summary>
        </member>
        <member name="P:Models.Agroforestry.LocalMicroClimate.Amp">
            <summary>Gets the temperature amplitude.</summary>
        </member>
        <member name="M:Models.Agroforestry.LocalMicroClimate.CalculateDayLength(System.Double)">
            <summary>Gets the duration of the day in hours.</summary>
        </member>
        <member name="T:Models.Agroforestry.TreeProxy">
            <summary>
            # [Name]
            A simple proxy for a full tree model is provided for use in agroforestry simulations.  It allows the user to directly specify the size and structural data for trees within the simulation rather than having to simulate complex tree development (e.g. tree canopy structure under specific pruning regimes).
            
            Several parameters are required of the user to specify the state of trees within the simulation.  These include:
            
            * Tree height (m)
            * Tree canopy width (m)
            * Tree leaf area (m<sup>2</sup>/tree)
            * Tree root radius (cm)
            * Shade at a range of distances from the trees (%)
            * Tree root length density at various depths and distances from the trees (cm/cm<sup>3</sup>)
            * Tree daily nitrogen demand (g/tree/day)
            
            The model calculates diffusive nutrient uptake using the equations of [DeWilligen1994] as formulated in the model WANULCAS [WANULCAS2011] and modified to better represent nutrient buffering [smethurst1997paste;smethurst1999phase;van1990defining].
            Water uptake is calculated using an adaptation of the approach of [Meinkeetal1993] where the extraction coefficient is assumed to be proportional to root length density [Peakeetal2013].  The user specifies a value of the uptake coefficient at a base root length density of 1 cm/cm<sup>3</sup> and spatial water uptake is scales using this value and the user-input of tree root length density.
            
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.Table">
            <summary>
            Gets or sets the table data.
            Be careful when working with this property!
            The first list contains the column headers (e.g. 1 row of data).
            The subsequent lists all contain columns of data(?!).
            </summary>
            <value>The table.</value>
        </member>
        <member name="F:Models.Agroforestry.TreeProxy.AFsystem">
            <summary>
            Reference to the parent agroforestry system.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.H">
            <summary>
            Distance from zone in tree heights
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.heightToday">
            <summary>
            Height of the tree.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.CanopyWidthToday">
            <summary>
            CanopyWidth
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.LeafAreaToday">
            <summary>
            Leaf Area
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.WaterUptake">
            <summary>
            The trees water uptake per layer in a single zone
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.NUptake">
            <summary>
            The trees N uptake per layer in a single zone
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.SWDemand">
            <summary>
            The trees water demand across all zones.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.RootRadius">
            <summary>The root radius.</summary>
            <value>The root radius.</value>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.NumberOfTrees">
            <summary>Number of Trees in the System</summary>
            <value>The number of trees</value>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.Kd">
            <summary>Adsoption Cofficient for NO3</summary>
            <value>Adsoption Cofficient for NO3</value>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.BaseKL">
            <summary>The uptake coefficient.</summary>
            <value>KL Value at RLD of 1 cm/cm3.</value>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.KValue">
            <summary>Extinction Coefficient.</summary>
            <value>Light Extinction Coefficient.</value>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.WaterStress">
            <summary>
            Water stress factor.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.NStress">
            <summary>
            N stress factor.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.TreeProxy.ZoneList">
            <summary>
            A list containing forestry information for each zone.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.Shade">
            <summary>
            Return an array of shade values.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.Dates">
            <summary>
            Date list for tree heights over lime
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.Heights">
            <summary>
            Tree heights
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.NDemands">
            <summary>
            Tree N demands
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.CanopyWidths">
            <summary>
            Tree canopy widths
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.TreeLeafAreas">
            <summary>
            Tree leaf areas
            </summary>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetDistanceFromTrees(Models.Core.Zone)">
            <summary>
            Return the distance from the tree for a given zone. The tree is assumed to be in the first Zone.
            </summary>
            <param name="z">Zone</param>
            <returns>Distance from a static tree</returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetZoneWidth(Models.Core.Zone)">
            <summary>
            Return the width of the given zone.
            </summary>
            <param name="z">The width.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.ZoneDistanceInTreeHeights(Models.Core.Zone)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetShade(Models.Core.Zone)">
            <summary>
            Return the %Shade for a given zone
            </summary>
            <param name="z"></param>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetRLD(Models.Core.Zone)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.SetupTreeProperties">
            <summary>
            Setup the tree properties so they can be mapped to a zone.
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.InterceptedRadiation">
            <summary>
            Calculate the total intercepted radiation by the tree canopy (MJ)
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.TreeWaterUptake">
            <summary>
            Calculate water use from each zone (mm)
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.IndividualTreeWaterUptake">
            <summary>
            Calculate water use on a per tree basis (L)
            </summary>
        </member>
        <member name="P:Models.Agroforestry.TreeProxy.IndividualTreeWaterDemand">
            <summary>
            Calculate water use on a per tree basis (L)
            </summary>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Returns soil water uptake from each zone by the static tree model
            </summary>
            <param name="soilstate"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Returns soil Nitrogen uptake from each zone by the static tree model
            </summary>
            <param name="soilstate"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
             Accepts the actual soil water uptake from the soil arbitrator.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Models.Agroforestry.TreeProxy.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Accepts the actual soil Nitrogen uptake from the soil arbitrator.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Models.Agroforestry.ZoneInfo">
            <summary>
            A structure holding forestry information for a single zone.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.ZoneInfo.zone">
            <summary>
            The name of the zone.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.ZoneInfo.Shade">
            <summary>
            Shade value.
            </summary>
        </member>
        <member name="F:Models.Agroforestry.ZoneInfo.RLD">
            <summary>
            Root Length Density information for each soil layer in a zone.
            </summary>
        </member>
        <member name="T:Models.Aqua.FoodInPond">
            <summary>
             Aquaculture Food in the Pond. 
             Stores the different feeds that are in the pond.
            </summary> 
        </member>
        <member name="P:Models.Aqua.FoodInPond.Food">
            <summary>
             Data Structure that stores the different feeds that are in the pond.
            </summary>
        </member>
        <member name="T:Models.Aqua.Food">
            <summary>
            Data Structure that stores the different feeds that are in the pond.
            </summary>
        </member>
        <member name="M:Models.Aqua.Food.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.Aqua.Food.GetEnumerator">
            <summary>
            Default Iterator
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Models.Aqua.Food.AddToExisting(Models.Aqua.Food)">
            <summary>
            Add some food to this food.
            If a feed (in the food to add) already exist then add it to the exsting feed.
            otherwise just add it as a new feed.
            </summary>
            <param name="FoodToAdd">Food to add to this food</param>
        </member>
        <member name="M:Models.Aqua.Food.RemoveFromExisting(Models.Aqua.Food)">
            <summary>
            Remove some food from this food.
            If a feed (in the food to remove) already exists then remove it from the existing feed.
            otherwise just ignore that feed.
            </summary>
            <param name="FoodToRemove">Food to remove from this food</param>
        </member>
        <member name="M:Models.Aqua.Food.IsThisFeedInFood(System.String)">
            <summary>
            Check to see if this feed is already in the food
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Aqua.Food.GetFeed(System.String)">
            <summary>
            Get the Feed with the specified Name
            </summary>
            <param name="Name">Name of the Feed (case insensitive)</param>
            <returns>
            The Feed with the specified Name. 
            If not found returns null.
            </returns>
        </member>
        <member name="M:Models.Aqua.Food.AddFeed(Models.Aqua.Feed)">
            <summary>
            Add a Feed to the Food
            If it is not already present in this food then add it
            If it is already present then add it to the existing feed.
            </summary>
            <param name="NewFeed">The new feed to add to the food</param>
        </member>
        <member name="M:Models.Aqua.Food.RemoveAllFeedFromFood">
            <summary>
            Remove ALL the feeds from the Food.
            </summary>
        </member>
        <member name="P:Models.Aqua.Food.TotalDM">
            <summary>
            Total Dry Matter in the food (kg)
            </summary>
            <value>
            Summation of every type of feed in the food. 
            </value>
        </member>
        <member name="P:Models.Aqua.Food.TotalN">
            <summary>
            Total Nitrogen in the food(kg)
            </summary>
            <value>
             Summation of every type of feed in the food.
            </value>
        </member>
        <member name="P:Models.Aqua.Food.TotalDE">
            <summary>
            Total Digestible Energy in the food (MJ)
            </summary>
            <value>
             Summation of every type of feed in the food. 
            </value>
        </member>
        <member name="P:Models.Aqua.Food.NumFeeds">
            <summary>
            Gets the Number of feeds in the pond
            </summary>
        </member>
        <member name="P:Models.Aqua.Food.FeedNames">
            <summary>
            Names for each feed type in the pond
            (This is for output only. You can not change these values) 
            </summary>
            <value>
            returns an Array where each element is the name for a different feed in the pond.
            </value>
        </member>
        <member name="P:Models.Aqua.Food.FeedDMs">
            <summary>
            Dry Matter for each feed type in the pond (kg)
            (This is for output only. You can not change these values)
            </summary>
            <value>
            returns an Array where each element is a dry matter for a different feed in the pond.
            </value>
        </member>
        <member name="P:Models.Aqua.Food.FeedNs">
            <summary>
            Nitrogen for each feed type in the pond (kg)
            (This is for output only. You can not change these values)
            </summary>
            <value>
            returns an Array where each element is the nitrogen content for a different feed in the pond.
            </value>
        </member>
        <member name="P:Models.Aqua.Food.FeedDEs">
            <summary>
            Digestible Energy for each feed type in the pond (MJ)
            (This is for output only. You can not change these values)
            </summary>
            <value>
            returns an Array where each element is the digestible energy content for a different feed in the pond.
            </value>
        </member>
        <member name="T:Models.Aqua.Feed">
            <summary>
            This is an individual Feed Type that is currently in the Pond
            </summary>
        </member>
        <member name="F:Models.Aqua.Feed.FeedName">
            <summary>
            Name of this Feed
            </summary>
        </member>
        <member name="F:Models.Aqua.Feed.DryMatter">
            <summary>
            Mass of this Feed (on a Dry Matter basis) in the pond
            (kg)
            </summary>
        </member>
        <member name="F:Models.Aqua.Feed.Nitrogen">
            <summary>
            Nitrogen in all of this feeds Dry Matter.
            (kg)
            </summary>
        </member>
        <member name="F:Models.Aqua.Feed.DigestibleEnergy">
            <summary>
            Digestible Energy in all of this feeds Dry Matter.
            (MJ)
            </summary>
        </member>
        <member name="P:Models.Aqua.Feed.NperKgOfDM">
            <summary>
            Nitrogen Per Kilogram of Dry Matter.
            (kg)
            </summary>
        </member>
        <member name="P:Models.Aqua.Feed.DEperKgOfDM">
            <summary>
            Digestible Energy Per Kilogram of Dry Matter.
            (MJ)
            </summary>
        </member>
        <member name="M:Models.Aqua.Feed.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="FeedName">Name of this Feed</param>
            <param name="DryMatter">Mass of this Feed (on a Dry Matter basis) in the pond (kg)</param>
            <param name="Nitrogen">Nitrogen in all of this feeds Dry Matter (kg)</param>
            <param name="DigestibleEnergy">Digestible Energy in all of this feeds Dry Matter (MJ)</param>
        </member>
        <member name="M:Models.Aqua.Feed.AddToExisting(Models.Aqua.Feed)">
            <summary>
            Add some feed to the existing feed.
            </summary>
            <param name="AddThis"></param>
        </member>
        <member name="M:Models.Aqua.Feed.RemoveFromExisting(Models.Aqua.Feed)">
            <summary>
            Remove some feed from the existing feed.
            If you are trying to remove more feed than exists
            then it will only remove whatever feed is there.
            </summary>
            <param name="RemoveThis">Amounts in this feed (to remove) should be positive values</param>
        </member>
        <member name="T:Models.Aqua.PondWater">
            <summary>
             Aquaculture Pond Water. 
             Maintains a water balance in the Pond.
            </summary> 
        </member>
        <member name="F:Models.Aqua.PondWater.Weather">
            <summary>The weather</summary>
        </member>
        <member name="F:Models.Aqua.PondWater.Summary">
            <summary>The summary</summary>
        </member>
        <member name="P:Models.Aqua.PondWater.SurfaceArea">
            <summary>
            Suface Area of the Pond (m^2)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.MaxPondDepth">
            <summary>
            Maximum Pond Depth (m)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.Kpan">
            <summary>
            Kpan - Coefficient applied to PanEvap to give PondEvap
            </summary>
        </member>
        <member name="M:Models.Aqua.PondWater.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.PondEvap">
            <summary>
            Evaporation from the Pond (mm)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.PondDepth">
            <summary>
            Current Depth Water in the Pond (m)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.PondProps">
            <summary>
            Current Properties of any given volume/amount of water in the Pond.
            Used when mixing water together or evaporating water.
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.PondTemp">
            <summary>
            Temperature of the water in the Pond (oC)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.Salinity">
            <summary>
            Salinity of the water in the Pond (kg/m^3)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.PH">
            <summary>
            PH of the water in the Pond 
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.N">
            <summary>
            Nitrogen in the water in the Pond (kg/m^3)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.P">
            <summary>
            Phosphorus in the water in the Pond (kg/m^3)
            </summary>
        </member>
        <member name="P:Models.Aqua.PondWater.TSS">
            <summary>
            Total Suspended Soild in the water in the Pond (kg/m^3)
            </summary>
        </member>
        <member name="M:Models.Aqua.PondWater.WeightedAverage(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Do a weighted average.
            Useful when mixing two different volumes of water, and you want to know the resulting concentrations of water solutes. 
            </summary>
        </member>
        <member name="M:Models.Aqua.PondWater.RemoveWater(System.Double)">
             <summary>
            Remove water from the Pond.
            nb. There is no change in Temperature, Salinity, etc. as a consequence of removing water.
            Only the volume of water is changed. None of the Water's properties are affected.
             </summary>
             <param name="Volume"></param>
        </member>
        <member name="M:Models.Aqua.PondWater.ReflectionWaterSurface(System.DateTime,System.Double,System.Double)">
            <summary>
            Fraction of sunlight reflected from the water surface.
            </summary>
            <param name="Today">DateTime for today</param>
            <param name="Latitude">(Not used at present but should use it to calculate Solar Altitude Angle)</param>
            <param name="WindSpeed">(m/s)</param>
            <returns>(0-1)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatIn_SN_SolarRadiation(System.Double,System.Double)">
            <summary>
            Heat Flux due to incomming solar radiation penetrating the surface of the water
            </summary>
            <param name="Heat_S_Radn">Solar Radiation (taken from APSIM met file) (MJ/m^2/day)</param>
            <param name="Reflection">Fraction Reflected from the water surface (0-1)</param>
            <returns>(kJ/m^2/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatIn_AT_AtmosphericLongWaveRadn(System.Double,System.Double)">
            <summary>
            Heat Flux due to incomming atmospheric radiation
            (Long-wave, sensible heat transfer from the atmospheric air)
            This still occurs at night unlike the solar radiation. 
            </summary>
            <param name="MaxT">Maximum Temperature of the Atmosphere (oC)</param>
            <param name="MinT">Minimum Temperature of the Atmosphere (oC)</param>
            <returns>(kJ/m^2/hr)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatOut_WS_FromWaterSurface(System.Double)">
            <summary>
            Heat Flux radiated from the water surface to the atmosphere.
            </summary>
            <param name="PondTemp">Temperature of the Pond Water (oC)</param>
            <returns>(kJ/m^2/hr)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatOut_E_EvaporationLatentHeat(System.Double,System.Double,System.Double)">
            <summary>
            Heat Flux caused by evaporation from the pond.
            When water evaporates it takes away the latent heat required to go from liquid to vapour.
            </summary>
            <param name="PondTemp">Temperature of the Pond Water (oC)</param>
            <param name="MinT">Minimum Temperature of the Atmosphere (oC)</param>
            <param name="WindSpeed">Wind Speed (m/s)</param>
            <returns>(kJ/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatOut_E_EvaporationLatentHeat(System.Double)">
            <summary>
            Heat Flux caused by evaporation from the pond.
            When water evaporates it takes away the latent heat required to go from liquid to vapour.
            </summary>
            <param name="Evaporation_mm">Amount of water evaporated from the pond (mm)</param>
            <returns>(kJ/m^2/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatFlux_C_SensibleHeatTransferBetweenAirAndPond(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Heat Flux caused by transfer of heat from the atmosphere to the pond AND vice versa.
            Basically this is via the Conduction of Heat when two bodies are in contact.
            </summary>
            <param name="PondTemp">Temperature of the Pond Water (oC)</param>
            <param name="MaxT">Maximum Temperature of the Atmosphere (oC)</param>
            <param name="MinT">Minimum Temperature of the Atmosphere (oC)</param>
            <param name="WindSpeed">(m/s)</param>
            <returns>(kJ/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatOut_SNZ_SolarRadiationReachingBottomOfPond(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Heat from solar radiation that passed through the pond and reached the bottom.
            This has to be removed from what entered the pond to give the net amount absorbed in the pond.
            </summary>
            <param name="HeatIn_SN">Radiation that entered the pond (kJ/m^2/day)</param>
            <param name="Reflection">Fraction of light reflected from the surface of the pond (0-1)</param>
            <param name="SDD">Secchi Disk Depth (m)</param>
            <param name="PondDepth">Current Depth of the Pond Water (oC)</param>
            <returns>(kJ/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatFlux_SED_HeatTransferBetweenWaterAndBottomOfPond(System.Double,System.Double,System.Double)">
            <summary>
            Heat Flux caused by transfer of heat from pond water and bottom of the pond.
            Basically this is via the Conduction of Heat when two bodies are in contact.
            </summary>
            <param name="PondTemp">Temperature of the Pond Water (oC)</param>
            <param name="SedimentTemp">Temperature of the Sediment at the bottom of the pond (oC)</param>
            <param name="PondDepth">Current Depth of the Pond Water (oC)</param>
            <returns>(kJ/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.HeatOut_GW_HeatLostFromSedimentToGroundWater(System.Double)">
            <summary>
            Heat Lost from the Sediment to the Ground Water
            Basically this is via the Conduction of Heat when two bodies are in contact.
            </summary>
            <param name="SedimentTemp">Temperature of the Sediment at the bottom of the pond (oC)</param>
            <returns>(kJ/day)</returns>
        </member>
        <member name="M:Models.Aqua.PondWater.Fill(System.Double,Models.Aqua.WaterProperties)">
            <summary>
            Fill the Pond with a given volume of water.
            Must specifiy the properties of the water you are adding as well.
            </summary>
            <param name="Volume">Volume of water to add (m^3)</param>
            <param name="WaterProperties">Properties of the water you are adding</param>
        </member>
        <member name="M:Models.Aqua.PondWater.Fill(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fill the Pond with a given volume of water.
            Must specifiy the properties of the water you are adding as well.
            </summary>
            <param name="Volume">Volume of water to add (m^3)</param>
            <param name="WaterTemp">Temperature of the water (oC)</param>
            <param name="Salinity">Salinity (kg/m^3)</param>
            <param name="PH">PH</param>
            <param name="N">Nitrogen (kg/m^3)</param>
            <param name="P">Phosporus (kg/m^3)</param>
            <param name="TSS">Total Suspended Solids (kg/m^3)</param>
        </member>
        <member name="M:Models.Aqua.PondWater.Empty(System.Double)">
            <summary>
            Remove a given volume of water from the Pond.
            </summary>
            <param name="Volume">Volume of water to remove from the pond (m^3)</param>
        </member>
        <member name="T:Models.Aqua.Prawns">
            <summary>
             Aquaculture Prawns. 
             Simple prawn growth model.
            </summary> 
        </member>
        <member name="F:Models.Aqua.Prawns.Summary">
            <summary>The summary</summary>
        </member>
        <member name="P:Models.Aqua.Prawns.PrawnSpecies">
            <summary>
            Name of the prawn species
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki1">
            <summary>
            Dry matter intake rate of prawns weighing 1g under optimal conditions
            (g DM/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki2">
            <summary>
            Allometric exponent for consumption-weight relationship
            (unitless)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki3">
            <summary>
            Stocking density at which consumption rate notionally declines to zero
            (g/m^2)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki4">
            <summary>
            Consumption efficiency of prawns
            (0-1)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki5">
            <summary>
            DM digestibility: constant 
            (g/g)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki6">
            <summary>
            DM digestibility: DE/DM coefficient
            (g/kJ) nb. DE/DM ratio is same, whether expressed as kJ/g or MJ/kg 
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki7">
            <summary>
            N digestibility: constant 
            (g/g)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ki8">
            <summary>
            N digestibility: DE/DM coefficient
            (g/kJ) nb. DE/DM ratio is same, whether expressed as kJ/g or MJ/kg 
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kt1">
            <summary>
            Optimum temperature for prawn function
            (oC)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kt2">
            <summary>
            Temperature below which prawns cease to function
            (oC)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kt3">
            <summary>
            Curvature of temperature response function
            (unitless)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Km1">
            <summary>
            Maintenance energy requirement in kJ for a 1g prawn.
            (kJ/g^0.8)
            This value is for a G8 prawn in Glencross et al. 2013;
            (for the Jackson and Yang (1998) dataset, the value is 0.19) 
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Km2">
            <summary>
            Allometric exponent for maintenance energy requirement
            (unitless)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Ks1">
            <summary>
            Relative rate of change in maintenance energy requirement with salinity
            (ppt)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kg1">
            <summary>
            Efficiency of energy use for growth
            (kJ/kJ)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kg4">
            <summary>
            Efficiency of nitrogen use for growth
            (g/g)
            Estimated very approximately by assuming 
            a diet below 0.030 g CP/g DM will limit early prawn growth (at a typical DE:DM ratio of 16)
            and back calculating the corresponding efficiency.
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kd1">
            <summary>
            Background mortaility rate of prawns
            (/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kd2">
            <summary>
            Coefficient for additional mortality
            (/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kd3">
            <summary>
            Threshold salinity above which no extra mortality takes place
            (ppt)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kd4">
            <summary>
            Threshold ammonium-N concentration below which no extra mortality takes place
            (mg/litre)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Kd5">
            <summary>
            Exponent for ammonium-N vs mortality relationship
            (unitless)
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.kg2g">
            <summary>
            Convert from kg to grams
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.g2kg">
            <summary>
            Convert from grams to kg
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.consumedFoodPP">
            <summary>
            Food destroyed during the process of eating
            (Prawns are careless and wasteful feeders)
            (Per Prawn)
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.intakeFoodPP">
            <summary>
            Of the Food Consumed this is the food actually ingested by the prawn.
            (Per Prawn)
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.digestedFoodPP">
            <summary>
            Of the food ingested by the prawn this is the food actually digested by the prawn.
            (Per Prawn)
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.PrawnCohort.LiveWeight">
            <summary>
            Live weight of a single prawn
            (g/prawn)
            </summary>
        </member>
        <member name="F:Models.Aqua.Prawns.PrawnCohort.NitrogenMass">
            <summary>
            Masss of nitrogen in the body of a single prawn
            (g N/prawn)
            </summary>
        </member>
        <member name="M:Models.Aqua.Prawns.PrawnCohort.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="NumberOfPrawns"></param>
            <param name="LiveWeight"></param>
            <param name="NitrogenMass"></param>
        </member>
        <member name="M:Models.Aqua.Prawns.PrawnCohort.StockingDensity(System.Double)">
            <summary>
            Stocking Density
            </summary>
            <param name="AreaPondFloor">(m^2)</param>
            <returns>(g/m^2)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.Stress_Stock(System.Double)">
            <summary>
             Reduction in Food Consumption due to high stocking density
             aka. Zsd
            </summary>
            <param name="StockingDensity">(g/m^2)</param>
            <returns>(0-1)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.Stress_Temp(System.Double)">
            <summary>
            Temperature Response Function
            (Prawn Stress due to Temperature)
            aka. Zt
            </summary>
            <param name="TempPondFloor">(oC)</param>
            <returns>(0-1)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.Stress_Salinity(System.Double)">
            <summary>
            Salinity effect on maintenance energy requirement
            aka. Zs
            </summary>
            <param name="Salinity">(ppt)</param>
            <returns>(0-1)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.PotentialDMConsumedPerPrawn(Models.Aqua.Prawns.PrawnCohort,System.Double,System.Double)">
            <summary>
            Calculate todays potential total consumption of Dry Matter (per prawn).
            Function was derived by reverse-engineering the prawn growth rate equation of Jackson and Yang (1998).
            Which is why we first calculate intake, then work out what the consumption must have been.
            </summary>
            <param name="Prawns"></param>
            <param name="StressStock"></param>
            <param name="StressTemp"></param>
            <returns>(g DM/prawn/d</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.CheckEnoughFoodToConsumeToday(Models.Aqua.Food,Models.Aqua.Prawns.PrawnCohort,System.Double)">
            <summary>
            Restricts the Potential total amount of DM Consumed (per prawn) by what is actually available in the pond to be consumed. 
            </summary>
            <param name="FoodAvailable">Food that is currently in the pond</param>
            <param name="Prawns">Prawns that are currently in the pond</param>
            <param name="PotentialDMConsumedPP">Amount of DM each prawn would like to eat</param>
            <returns>Amount of DM each prawn will actually get to eat. (g DM/prawn)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.FeedConsumedPerPrawn(Models.Aqua.Food,Models.Aqua.Feed,System.Double)">
            <summary>
            Returns the feed that was destroyed by a single prawn in the process of feeding today.
            Prawns are messy feeders and don't intake everything that they consume. 
            </summary>
            <param name="FoodInPond">Food currently in the pond</param>
            <param name="CurrentFeed">A feed that is currently available for eating today</param>
            <param name="TotalDMConsumed"></param>
            <returns>(/prawn/d)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.FeedIntakePerPrawn(Models.Aqua.Feed)">
            <summary>
            Returns the feed actually ingested by the prawn today (given the feed that was consumed by that prawn today).
            Prawns are messy feeders and don't intake everything that they consume. 
            </summary>
            <param name="ConsumedFeedPP">Feed that the prawn has consumed today</param>
            <returns>(/prawn/d)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.FeedDigestedPerPrawn(Models.Aqua.Feed)">
            <summary>
            Returns the feed actually digested by the prawn today (given the feed that was ingested by that prawn today).
            </summary>
            <param name="IntakeFeedPP">Feed that the prawn has ingested today</param>
            <returns>(/prawn/d)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.EnergyMaintenance(Models.Aqua.Prawns.PrawnCohort,System.Double,System.Double)">
            <summary>
            Maintenance energy requirement.
            Energy required to maintain this prawns weight
            </summary>
            <param name="Prawns"></param>
            <param name="StressTemp"></param>
            <param name="StressSalinity"></param>
            <returns>(kJ/prawn/d)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.EnergyLimitedWeightGain(Models.Aqua.Food,System.Double)">
            <summary>
            Returns the Potential Live Weight gain in a prawn (only restricted by the energy it has digested).
            </summary>
            <param name="DigestedFoodPP">Food the prawn digested</param>
            <param name="EnergyMaintenance">Energy required to maintain this prawns weight</param>
            <returns>g Live Weight/prawn</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.NitrogenLimitedWeightGain(Models.Aqua.Food)">
            <summary>
            Returns the Potential Live Weight gain in a prawn (only restricted by the nitrogen it has digested).
            </summary>
            <param name="DigestedFoodPP">Food the prawn has digested</param>
            <returns>g Live Weight/prawn</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.WeightGainPerPrawn(Models.Aqua.Food,System.Double)">
            <summary>
            Actual weight gain of an individual prawn based on the food it has digested.
            Assumed to be the lesser of the Energy Limited and Nitrogen Limited growth. 
            </summary>
            <param name="DigestedFoodPP">Food the prawn has digested</param>
            <param name="EnergyMaintenance">Energy required to maintain this prawns weight</param>
            <returns>g Live Weight/prawn</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.NitrogenGainPerPrawn(System.Double)">
            <summary>
            Actual nitrogen gain of an individual prawn based on the weight it has gained.
            </summary>
            <param name="WeightGainPerPrawn">Weight the prawn has gained</param>
            <returns>g N/prawn</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.Mortality(Models.Aqua.Prawns.PrawnCohort,System.Double,System.Double)">
            <summary>
            Number of prawns that died today. 
            Background deaths (approximately equivalent to 20% per year)
            plus additional deaths due low salinity and high ammonium.
            (using an equation fitted to the data of Li et al 2007)
            </summary>
            <param name="Prawns">Current Prawns</param>
            <param name="Salinity">Salinity (ppt)</param>
            <param name="Ammonium">Ammonium (mg/litre)</param>
            <returns>(prawns/d)</returns>
        </member>
        <member name="M:Models.Aqua.Prawns.DeadPrawnsAsFeed(System.Int32,Models.Aqua.Prawns.PrawnCohort)">
            <summary>
            Return the prawns that died today as a feed type to add back into the pond.
            </summary>
            <param name="Deaths">Number of prawns that died today</param>
            <param name="Prawns">Current Prawns that are in the pond</param>
            <returns>Feed to be added to the pond</returns>
        </member>
        <member name="P:Models.Aqua.Prawns.NumOfPrawns">
            <summary>
            Number of prawns currently in the pond.
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.LiveWeight">
            <summary>
            Average live weight of a single prawn
            (g /prawn)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Nitrogen">
            <summary>
            Average mass of nitrogen in a single prawn
            (g N/prawn)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.StressStock">
            <summary>
            Stocking Density Feeding Stress
            (0-1)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.StressTemp">
            <summary>
            Temperature Stress
            (0-1)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.StressSalinity">
            <summary>
            Salinity Stress on energy required for a prawn to maintain it's weight.
            (0-1)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.ConsumedDM">
            <summary>
            Dry Matter consumed by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.ConsumedN">
            <summary>
            Nitrogen consumed by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.ConsumedDE">
            <summary>
            Digestible Energy consumed by the prawns
            (MJ/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.IntakeDM">
            <summary>
            Dry Matter ingested by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.IntakeN">
            <summary>
            Nitrogen ingested by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.IntakeDE">
            <summary>
            Digestible Energy ingested by the prawns
            (MJ/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.DigestedDM">
            <summary>
            Dry Matter digested by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.DigestedN">
            <summary>
            Nitrogen digested by the prawns
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.DigestedDE">
            <summary>
            Digestible Energy digested by the prawns
            (MJ/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.FaecesDM">
            <summary>
            Dry Matter that was excreted as faeces
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.FaecesN">
            <summary>
            Mass of Nitrogen that was excreted as faeces
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.ExcretedNH4">
            <summary>
            Ammonium-N that was excreted
            (kg/d)
            </summary>
        </member>
        <member name="P:Models.Aqua.Prawns.Deaths">
            <summary>
            Number of prawns that died today.
            </summary>
        </member>
        <member name="M:Models.Aqua.Prawns.AddPrawnsToPond(System.Int32,System.Double,System.Double)">
            <summary>
            Add Prawns to the Pond.
            Any existing prawns in the pond are removed first.
            </summary>
            <param name="NumberOfPrawns"></param>
            <param name="LiveWeight">(g/prawn)</param>
            <param name="NitrogenMass">(g N/prawn)</param>
        </member>
        <member name="M:Models.Aqua.Prawns.HarvestPond">
            <summary>
            Harvest the Pond of Prawns.
            All prawns are removed from the pond.
            </summary>
        </member>
        <member name="T:Models.Aqua.WaterProperties">
            <summary>
            Stores the information about the water but not the volume of it.
            Applies to any given volume/amount of this water.
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.Temperature">
            <summary>
            Temperature of the water (oC)
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.Salinity">
            <summary>
            Salinity (kg/m^3)
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.PH">
            <summary>
            PH 
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.N">
            <summary>
            Nitrogen (kg/m^3)
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.P">
            <summary>
            Phosphorus (kg/m^3)
            </summary>
        </member>
        <member name="F:Models.Aqua.WaterProperties.TSS">
            <summary>
            Total Suspended Solids (kg/m^3)
            </summary>
        </member>
        <member name="M:Models.Aqua.WaterProperties.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="Temperature">Temperature (oC)</param>
            <param name="Salinity">Salinity (kg/m^3)</param>
            <param name="PH">PH</param>
            <param name="N">Nitrogen (kg/m^3)</param>
            <param name="P">Phosporus (kg/m^3)</param>
            <param name="TSS">Total Suspended Solids (kg/m^3)</param>
        </member>
        <member name="M:Models.Aqua.WaterProperties.ZeroProperties">
            <summary>
            Zero all the water properties
            </summary>
        </member>
        <member name="T:Models.Core.ApsimFile.ConverterReturnType">
            <summary>A class for holding return values from Converter.DoConvert method.</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ConverterReturnType.Root">
            <summary>The JSON root node ready to be deserialised.</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ConverterReturnType.RootXml">
            <summary>The XML root node ready to be deserialised.</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.ConverterReturnType.DidConvert">
            <summary>Set to true the converter did something.</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.Structure">
            <summary>
            A collection of methods for manipulating the structure of an .apsimx file.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.Add(Models.Core.IModel,Models.Core.IModel)">
            <summary>
            Adds a model as a child to a parent model. Will throw if not allowed.
            </summary>
            <param name="modelToAdd">The model to add.</param>
            <param name="parent">The parent model to add it to.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.Add(System.String,Models.Core.IModel)">
            <summary>Adds a new model (as specified by the string argument) to the specified parent.</summary>
            <param name="parent">The parent to add the model to</param>
            <param name="st">The string representing the new model</param>
            <returns>The newly created model.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.Rename(Models.Core.IModel,System.String)">
            <summary>Renames a new model.</summary>
            <param name="model">The model to rename.</param>
            <param name="newName">The new name for the model.</param>
            <returns>The newly created model.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.Move(Models.Core.IModel,Models.Core.IModel)">
            <summary>Move a model from one parent to another.</summary>
            <param name="model">The model to move.</param>
            <param name="newParent">The new parente for the model.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Structure.EnsureNameIsUnique(Models.Core.IModel)">
            <summary>
            Give the specified model a unique name
            </summary>
            <param name="modelToCheck">The model to check the name of</param>
        </member>
        <member name="T:Models.Core.ApsimFile.XmlConverters">
            <summary>
            Contains all converters that convert from one XML version to another.
            </summary>
        </member>
        <member name="F:Models.Core.ApsimFile.XmlConverters.LastVersion">
            <summary>
            The last XML file version.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.DoConvert(System.String@,System.Int32,System.String)">
            <summary>Converts a .apsimx string to the latest version.</summary>
            <param name="st">XML or JSON string to convert.</param>
            <param name="toVersion">The optional version to convert to.</param>
            <param name="fileName">The optional filename where the string came from.</param>
            <returns>Returns true if something was changed.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion1(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 1. Change xml structure of graph series</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion2(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 2. Change xml structure for cultivar aliases</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion3(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 3. Make sure all area elements are greater than zero.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion4(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 4. Make sure all zones have a SoluteManager model.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion5(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 5. Make sure all zones have a CERESSoilTemperature model.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion6(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 6. Make sure all KLModifier, KNO3, KNH4 nodes have value XProperty values. </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion7(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 7. Find all occurrences of ESW XProperty values. </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion8(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 8. Create ApexStandard node. </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion9(System.Xml.XmlNode,System.String)">
            <summary> Add a DMDemandFunction constant function to all Root nodes that don't have one</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion10(System.Xml.XmlNode,System.String)">
            <summary>Add default values for generic organ parameters that were previously optional</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion11(System.Xml.XmlNode,System.String)">
            <summary> Rename NonStructural to Storage in Biomass organs</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion12(System.Xml.XmlNode,System.String)">
            <summary> Rename MainStemNodeAppearanceRate to Phyllochron AND 
                   MainStemFinalNodeNumber to FinalLeafNumber in Structure </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion13(System.Xml.XmlNode,System.String)">
            <summary> Rename Plant15 to Plant.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion14(System.Xml.XmlNode,System.String)">
            <summary> Rename the "Simulations", "Messages", "InitialConditions" .db tables to be prefixed with an underscore. </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion15(System.Xml.XmlNode,System.String)">
            <summary> Ensure report variables have a square bracket around the first word.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion16(System.Xml.XmlNode,System.String)">
            <summary>Add nodes for new leaf tiller model </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion17(System.Xml.XmlNode,System.String)">
            <summary>Rename CohortLive. to Live.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion18(System.Xml.XmlNode,System.String)">
            <summary> Rename CohortLive. to Live.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion19(System.Xml.XmlNode,System.String)">
            <summary> Add DMConversionEfficiency node</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion21(System.Xml.XmlNode,System.String)">
            <summary>Add RemobilisationCost to all organs </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion22(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 22. Alter MovingAverage Function XProperty values.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion23(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 23. Add CarbonConcentration property to all organs. </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion24(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 24. Add second argument to SoluteManager.Add method</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion25(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 25. Add checkpoint fields and table to .db</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion26(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 26. Add leaf development rate constant to perrenial leaf </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion27(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 27. Some variables in Leaf became ints rather than doubles. Need to add convert.ToDouble(); </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion28(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 28. Change ICrop to IPlant</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion29(System.Xml.XmlNode,System.String)">
            <summary>Upgrades to version 29. Change AgPasture to have leaves, stems, stolons included as child model nodes </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion30(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 30. Change DisplayAttribute </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion31(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 31. Change DisplayAttribute </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion32(System.Xml.XmlNode,System.String)">
            <summary> Change the VaryByIndex in series from an integer index to a name of a factor.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.GetFactorNames(System.Xml.XmlNode)">
            <summary> Create graph definitions for the specified model</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.BuildListFromExperiment(System.Xml.XmlNode)">
            <summary>Build a list of simulation / zone pairs from the specified experiment</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.BuildListFromSimulation(System.Xml.XmlNode)">
            <summary>Build a list of simulation / zone pairs from the specified simulation</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.CalculateDistinctFactorNames(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary> Go through all factors and determine which are distict.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion33(System.Xml.XmlNode,System.String)">
            <summary>Change the stores object array in Supplement components to Stores</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion34(System.Xml.XmlNode,System.String)">
            <summary> Upgrades to version 34. Change DisplayAttribute</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion35(System.Xml.XmlNode,System.String)">
            <summary> Change the stores object array in Supplement components to Stores</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion36(System.Xml.XmlNode,System.String)">
            <summary> Change the stores object array in Supplement components to Stores</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion37(System.Xml.XmlNode,System.String)">
            <summary> Remove apex nodes from leaf objects </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion38(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 38. Change SurfaceOrganicMatter.AddFaecesType to AddFaecesType.
            </summary>
            <param name="node">The node to upgrade.</param>
            <param name="fileName">The name of the .apsimx file</param>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion39(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 39. Replaces TreeProxy.dates and TreeProxy.heights
            with TreeProxy.Dates and TreeProxy.Heights.
            </summary>
            <param name="node">The node to upgrade.</param>
            <param name="fileName">The name of the .apsimx file</param>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion40(System.Xml.XmlNode,System.String)">
            <summary> Rename ThermalTime functions on phases to Progression </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion41(System.Xml.XmlNode,System.String)">
            <summary>Rename CohortArrayLive functions which dont do anything and cause problems for checkpointing</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion42(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 41. Upgrades parameterisation of DM demands.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion43(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 43. Upgrades SimpleLeaf to allow SLN calculations for N Demands.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion44(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 44, renaming StorageDemandFunction to StorageDMDemandFunction
             </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion45(System.Xml.XmlNode,System.String)">
            <summary>
            Upgrades to version 41. Upgrades parameterisation of DM demands.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlConverters.UpgradeToVersion46(System.Xml.XmlNode,System.String)">
            <summary>Remove slnDemandFunction in SimpleLeaf as it has been made redundant</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.XmlToJson">
            <summary>
            XML to JSON converter
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlToJson.Convert(System.String)">
            <summary>
            Convert APSIM Next Generation xml to json.
            </summary>
            <param name="xml">XML string to convert.</param>
            <returns>The equivalent JSON.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlToJson.CreateObject(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create an object (or an array)
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.ApsimFile.XmlToJson.ReorderChildren(Newtonsoft.Json.Linq.JToken,System.Xml.XmlNode)">
            <summary>
            Make sure the child nodes of JToken are the same as for the original XML document.
            Do this recursively.
            </summary>
            <param name="jsonNode">The JSON node.</param>
            <param name="xmlNode">The XML node.</param>
        </member>
        <member name="T:Models.Core.ApsimFile.ManagerConverter">
            <summary>
            Provides helper methods to read and manipulate manager scripts.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.Read(System.String)">
            <summary>Load script</summary>
            <param name="script">The manager script to work on</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.Read(System.Xml.XmlNode)">
            <summary>Load script</summary>
            <param name="node">The manager node to read from</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.Write(System.Xml.XmlNode)">
            <summary>Write script</summary>
            <param name="node">The manager node to write to</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.ToString">
            <summary>Write script</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.GetUsingStatements">
            <summary>Get all using statements.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.SetUsingStatements(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Set using statements.</summary>
            <param name="usings">Using statements to write</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.FindDeclaration(System.String)">
            <summary>
            Find a declaration
            </summary>
            <param name="instanceName"></param>
            <returns>The declaration or null if not found</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.FindMethodCalls(System.String,System.String)">
            <summary>
            Find 0 or more method calls that match the instanceType/methodName
            </summary>
            <param name="instanceType">The instance type (from manager field declaration)</param>
            <returns></returns>
            <param name="methodName">The name of the method</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.SetMethodCall(Models.Core.ApsimFile.MethodCall)">
            <summary>
            Store the the specified method call, replacing the line. 
            </summary>
            <param name="method">Details of the method call</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.FindString(System.String,System.Int32)">
            <summary>
            Find a line with the matching string
            </summary>
            <param name="stringToFind"></param>
            <param name="startIndex">Index to start search from</param>
            <returns>The index of the line of the match or -1 if not found</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.FindUsingBlock(System.Int32@,System.Int32@)">
            <summary>
            Find the Using block of statements.
            </summary>
            <param name="startIndex">The starting index of using block. -1 if not found</param>
            <param name="endIndex">The ending index of using block. -1 if not found</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ManagerConverter.Clean(System.String)">
            <summary>Trim the line of spaces and remove comments.</summary>
            <param name="line">Line to clean</param>
            <returns>A new string without leading / trailing spaces and comments</returns>
        </member>
        <member name="T:Models.Core.ApsimFile.Declaration">
            <summary>A manager declaration</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.LineIndex">
            <summary>The index of the line starting the declaration</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.Attributes">
            <summary>The attributes of the declaration</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.TypeName">
            <summary>The type name of the declaration</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Declaration.InstanceName">
            <summary>The instance name of the declaration</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.MethodCall">
            <summary>Encapsulates a manager method call</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.MethodCall.LineIndex">
            <summary>The index of the line with the method</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.MethodCall.InstanceName">
            <summary>The instance name that the method is being called on</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.MethodCall.MethodName">
            <summary>The name of the method</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.MethodCall.Arguments">
            <summary>The method arguments</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.ConverterUtilities">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceManagerCodeUsingRegEx(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Perform a search and replace in manager script. Also optionally insert a using statement.
            </summary>
            <param name="manager">The manager model.</param>
            <param name="searchPattern">The pattern to search for</param>
            <param name="replacePattern">The string to replace</param>
            <param name="usingStatement">An optional using statement to insert at top of the script.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceReportCodeUsingRegEx(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Perform a search and replace in report variables.
            </summary>
            <param name="report">The reportr model.</param>
            <param name="searchPattern">The pattern to search for</param>
            <param name="replacePattern">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceReportCode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Perform a search and replace in report variables.
            </summary>
            <param name="report">The reportr model.</param>
            <param name="searchPattern">The pattern to search for</param>
            <param name="replacePattern">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.InsertUsingStatementInManagerCode(System.String,System.String)">
            <summary>
            Add the specified 'using' statement to the specified code.
            </summary>
            <param name="code">The code to modifiy</param>
            <param name="usingStatement">The using statement to insert at the correct location</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.InsertLink(System.Xml.XmlNode,System.String)">
            <summary>
            Add the specified 'using' statement to the specified code.
            </summary>
            <param name="manager">The manager to modifiy</param>
            <param name="linkStatement">The link statement to insert at the correct location</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.FindModelNode(System.Xml.XmlNode,System.String)">
            <summary>
            Find a PMF node, as a direct child under the specified node, that has the specified name element.
            </summary>
            <param name="node">The XML Nnde to search</param>
            <param name="name">The name of the element to search for</param>
            <returns>The node or null if not found</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.FindModelNodes(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Find model nodes of the specified type and name
            </summary>
            <param name="node">The node to search under</param>
            <param name="modelType">The type name of the model to look for</param>
            <param name="modelName">The name of the model to look for</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.RenameVariable(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Rename a variable or fragment.
            </summary>
            <param name="node">The node to modifiy</param>
            <param name="searchFor">The pattern to search for</param>
            <param name="replaceWith">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceCultivarOverrides(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Perform a search and replace in cultivar commands
            </summary>
            <param name="cultivar">Cultivar node</param>
            <param name="searchFor">The pattern to search for</param>
            <param name="replaceWith">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceManagerCode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Perform a search and replace in manager script. 
            </summary>
            <param name="manager">The manager model.</param>
            <param name="searchFor">The pattern to search for</param>
            <param name="replaceWith">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.SearchReplaceGraphCode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Perform a search and replace in graph x/y variables.
            </summary>
            <param name="graph">The graph model.</param>
            <param name="searchFor">The pattern to search for</param>
            <param name="replaceWith">The string to replace</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.AddConstantFuntionIfNotExists(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Add a constant function to the specified xml node.
            </summary>
            <param name="node">The xml node to add constant to</param>
            <param name="name">The name of the constant function</param>
            <param name="fixedValue">The fixed value of the constant function</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.AddVariableReferenceFuntionIfNotExists(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Add a variable reference function to the specified xml node.
            </summary>
            <param name="node">The xml node to add constant to</param>
            <param name="name">The name of the constant function</param>
            <param name="reference">The reference to put into the function</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.RenameNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Rename a XML node.
            </summary>
            <param name="node">The xml node to add constant to</param>
            <param name="oldName">The name to look for</param>
            <param name="newName">The new name</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.RenamePMFFunction(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Rename a PMF function
            </summary>
            <param name="node">The node to search under</param>
            <param name="parentName">The name of the parent node to look for</param>
            <param name="oldName">The old name of the function to replace</param>
            <param name="newName">The new replacement name</param>
        </member>
        <member name="M:Models.Core.ApsimFile.ConverterUtilities.GetAllModelNames(System.Xml.XmlNode)">
            <summary>Get a list of model names under the specified node</summary>
            <param name="node">Root node</param>
        </member>
        <member name="T:Models.Core.ApsimFile.Converter">
            <summary>
            Converts the .apsim file from one version to the next
            </summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Converter.LatestVersion">
            <summary>Gets the latest .apsimx file format version.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.DoConvert(System.String,System.Int32,System.String)">
            <summary>Converts a .apsimx string to the latest version.</summary>
            <param name="st">XML or JSON string to convert.</param>
            <param name="toVersion">The optional version to convert to.</param>
            <param name="fileName">The optional filename where the string came from.</param>
            <returns>Returns true if something was changed.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.EnsureSoilHasInitWaterAndSample(Newtonsoft.Json.Linq.JObject)">
            <summary>
            If root is a soil then make sure it has a sample or init water.
            </summary>
            <param name="root">The root node of the JSON to look at.</param>
            <returns>True if model was changed.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Converter.ConvertToJSON(System.String,System.String)">
            <summary>Upgrades to version 47 - the first JSON version.</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.Reader">
            <summary>
            This class is a reader for a .apsimx file format into something that the XmlSerializer can read.
            It uses a state machine to parse the XML on the reader passed into the constructor and presents
            XML elements to whatever consumes an instance of this class. In essence it translates the XML
            into something that the .NET serialisation engine can work with.
            </summary>
            <remarks>
            Converts:
               
               <Simulations xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                 <ExplorerWidth>10</ExplorerWidth>
                 <Simulation>
                   <Clock>
                     <StartDate>0001-01-01T00:00:00</StartDate>
                     <EndDate>0001-01-01T00:00:00</EndDate>
                   </Clock>
                 </Simulation>
               </Simulations>
            to this:
               <ModelWrapper xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <Model xsi:type="Simulations">
                      <ExplorerWidth>10</ExplorerWidth>
                  </Model>
                  <Child xsi:type="ModelWrapper">
                      <Model xsi:type="Simulation">
                      </Model>
                      <Child xsi:type="ModelWrapper">
                          <Model xsi:type="Clock">
                              <StartDate>0001-01-01T00:00:00</StartDate>
                              <EndDate>0001-01-01T00:00:00</EndDate>
                          </Model>
                      </Child>
                  </Child>
               </ModelWrapper>
            </remarks>
        </member>
        <member name="T:Models.Core.ApsimFile.Reader.States">
            <summary>The possible parsing states</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.currentState">
            <summary>The current state.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.validModelTypes">
            <summary>An list of valid model types.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.openElements">
            <summary>A stack of open xml elements.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.modelTypesFound">
            <summary>A stack of model types that we have encourntered so far.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.reader">
            <summary>The reader we're to read from.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.structureCounter">
            <summary>A counter of the number of open structures.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.#ctor(System.Xml.XmlNode)">
            <summary>Constructor.</summary>
            <param name="node">Node to parse</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.#ctor(System.IO.Stream)">
            <summary>Constructor.</summary>
            <param name="s">Stream to parse</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.AddElements(System.Collections.Generic.List{APSIM.Shared.Utilities.XmlReaderCustom.CustomElement})">
            <summary>
            Add elements to the specified list. If no elements are added, it is assumed that
            there are no more elements left and parsing is finished.
            </summary>
            <param name="elements">A list of elements to add to.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ElementIsModel(APSIM.Shared.Utilities.XmlReaderCustom.CustomElement)">
            <summary>Is the specified element a known model?</summary>
            <param name="element">The element to inspect.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadInName(System.Collections.Generic.List{APSIM.Shared.Utilities.XmlReaderCustom.CustomElement})">
            <summary>Read in a name parameter e.g. <Name>xxx</Name></summary>
            <param name="elements"></param>
        </member>
        <member name="P:Models.Core.ApsimFile.Reader.Prefix">
            <summary>Gets the prefix of the current element.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.LookupNamespace(System.String)">
            <summary>Resolves a namespace prefix in the current element's scope.</summary>
            <param name="prefix">The Prefix</param>
            <returns></returns>
        </member>
        <member name="P:Models.Core.ApsimFile.Reader.NamespaceURI">
            <summary>Gets the namespace URI</summary>
        </member>
        <member name="P:Models.Core.ApsimFile.Reader.NameTable">
            <summary>Returns the name table.</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.Reader.ReadWithLookAhead">
            <summary>
            Encapsulates a XmlReader that has the ability to look ahead one or more reads.
            </summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.ReadWithLookAhead.lookAheadReads">
            <summary>A list of elements that have already been read (looked ahead).</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.ReadWithLookAhead.reader">
            <summary>The reader being encapsulated.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.ReadWithLookAhead.currentLookAheadIndex">
            <summary>The next index into lookAheadReads to return.</summary>
        </member>
        <member name="F:Models.Core.ApsimFile.Reader.ReadWithLookAhead.lastRead">
            <summary>The last element read.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.#ctor(System.Xml.XmlReader)">
            <summary>Constructor</summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.Read">
            <summary>Read the next element.</summary>
            <returns>A CustomElement or null if nothing left to read.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.UndoRead">
            <summary>Undo the last read.</summary>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.LookAhead">
            <summary>
            Look ahead the next element.
            </summary>
            <returns>A CustomElement or null if nothing left to read.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.ReadFromReader">
            <summary>
            Read from the XmlReader instance.
            </summary>
            <returns>A CustomElement or null if nothing left to read.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.Reader.ReadWithLookAhead.LookupNamespace(System.String)">
            <summary>Resolves a namespace prefix in the current element's scope.</summary>
            <param name="prefix">The Prefix</param>
            <returns></returns>
        </member>
        <member name="P:Models.Core.ApsimFile.Reader.ReadWithLookAhead.NameTable">
            <summary>Returns the name table.</summary>
        </member>
        <member name="T:Models.Core.ApsimFile.FileFormat">
            <summary>
            A class for reading and writing the .apsimx file format.
            </summary>
            <remarks>
            Features:
            * Can WRITE a model in memory to an APSIM Next Generation .json string.
                - Only writes public, settable, properties of a model.
                - If a model implements IDontSerialiseChildren then no child models will be serialised.
                - Won't serialise any property with XmlIgnore attribute.
            * Can READ an APSIM Next Generation JSON or XML string to models in memory.
                - Calls converter on the string before deserialisation.
                - Sets fileName property in all simulation models read in.
                - Correctly parents all models.
                - Calls IModel.OnCreated() for all newly created models. If models throw in the
                  OnCreated() method, exceptions will be captured and returned to caller along
                  with the model tree.
            </remarks>
        </member>
        <member name="M:Models.Core.ApsimFile.FileFormat.WriteToString(Models.Core.IModel)">
            <summary>Convert a model to a string (json).</summary>
            <param name="model">The model to serialise.</param>
            <returns>The json string.</returns>
        </member>
        <member name="M:Models.Core.ApsimFile.FileFormat.ReadFromFile``1(System.String,System.Collections.Generic.List{System.Exception}@)">
            <summary>Create a simulations object by reading the specified filename</summary>
            <param name="fileName">Name of the file.</param>
            <param name="creationExceptions">A list of exceptions created during creation of the models.</param>
        </member>
        <member name="M:Models.Core.ApsimFile.FileFormat.ReadFromString``1(System.String,System.Collections.Generic.List{System.Exception}@,System.String)">
            <summary>Convert a string (json or xml) to a model.</summary>
            <param name="st">The string to convert.</param>
            <param name="creationExceptions">A list of exceptions created during creation of the models.</param>
            <param name="fileName">The optional filename where the string came from.</param>
        </member>
        <member name="T:Models.Core.ApsimFile.FileFormat.WritablePropertiesOnlyResolver">
            <summary>A contract resolver class to only write settable properties.</summary>
        </member>
        <member name="T:Models.Core.Checkpoints">
            <summary>B
            Saves state of objects and has options to write to a file.
            </summary>
        </member>
        <member name="M:Models.Core.Checkpoints.#ctor(Models.Core.Simulations)">
            <summary>
            Constructor
            </summary>
            <param name="sims"></param>
        </member>
        <member name="M:Models.Core.Checkpoints.SaveStateOfObject(System.String,System.Object)">
            <summary>
            Save the state of an object under the specified name.
            </summary>
            <param name="name"></param>
            <param name="o"></param>
        </member>
        <member name="M:Models.Core.Checkpoints.WriteMessageLine(System.String,System.String)">
            <summary>
            Write a message line into checkpoint file
            </summary>
            <param name="message"></param>
            <param name="name"></param>
        </member>
        <member name="M:Models.Core.Checkpoints.AddToCheckpointFile(System.String,System.Object)">
            <summary>
            Adds the status of the model to the CheckPointFile
            </summary>
            <param name="name"></param>
            <param name="o"></param>
        </member>
        <member name="M:Models.Core.Checkpoints.MakeCheckPointFile(System.String)">
            <summary> Makes a checkpoint file instance to write to </summary>
        </member>
        <member name="M:Models.Core.Checkpoints.AppendToFile(System.Object)">
            <summary> Appends current checkpoint to checkpoint file </summary>
        </member>
        <member name="T:Models.Core.Checkpoints.DynamicContractResolver">
            <summary> Custom Contract resolver to stop deseralization of Parent properties </summary>
        </member>
        <member name="T:Models.Core.CaptionAttribute">
            <summary>
            Attribute to hold a short description string for a property
            This is almost identical to the DescriptionAttribute, but is intended
            to allow for a "brief" as well as a "lengthy" description. 
            </summary>
        </member>
        <member name="F:Models.Core.CaptionAttribute.description">
            <summary>
            The name of the view class
            </summary>
        </member>
        <member name="M:Models.Core.CaptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.CaptionAttribute" /> class.
            </summary>
            <param name="description">Description text</param>
        </member>
        <member name="M:Models.Core.CaptionAttribute.ToString">
            <summary>
            Gets the description
            </summary>
            <returns>The description</returns>
        </member>
        <member name="T:Models.Core.SeparatorAttribute">
            <summary>
            Specifies that the related class should use the user interface view
            that has the specified name.
            </summary>
        </member>
        <member name="F:Models.Core.SeparatorAttribute.description">
            <summary>
            The name of the view class
            </summary>
        </member>
        <member name="M:Models.Core.SeparatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.SeparatorAttribute" /> class.
            </summary>
            <param name="description">Description text</param>
        </member>
        <member name="M:Models.Core.SeparatorAttribute.ToString">
            <summary>
            Gets the description
            </summary>
            <returns>The description</returns>
        </member>
        <member name="T:Models.Core.DoNotDocumentAttribute">
            <summary>
            Specifies that the related field/property/link should not be documented.
            </summary>
        </member>
        <member name="T:Models.Core.HelpUriAttribute">
            <summary>
            Specifies a Uri for the help link in ModelDetailsWrapperView
            </summary>
        </member>
        <member name="F:Models.Core.HelpUriAttribute.helpUri">
            <summary>
            The name of the view class
            </summary>
        </member>
        <member name="M:Models.Core.HelpUriAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.HelpUriAttribute" /> class.
            </summary>
            <param name="uri">Description text</param>
        </member>
        <member name="M:Models.Core.HelpUriAttribute.ToString">
            <summary>
            Gets the uri
            </summary>
            <returns>help link uri</returns>
        </member>
        <member name="T:Models.Core.ScopedModelAttribute">
            <summary>
            When applied to a class, denotes an instance of the class and all
            child instances make up a scoped unit. e.g. events published in
            a child model will propagate to all models within the scoped unit
            before going up to parent models.
            </summary>
        </member>
        <member name="T:Models.Core.SoluteAttribute">
            <summary>
            Specifies that the associated property is a solute.
            </summary>
        </member>
        <member name="T:Models.Core.AutoDocumentation">
            <summary>
            A class of auto-documentation methods and HTML building widgets.
            </summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetUnits(Models.Core.IModel,System.String)">
            <summary>Gets the units from a declaraion.</summary>
            <param name="model">The model containing the declaration field.</param>
            <param name="fieldName">The declaration field name.</param>
            <returns>The units (no brackets) or any empty string.</returns>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetDescription(Models.Core.IModel,System.String)">
            <summary>Gets the description from a declaraion.</summary>
            <param name="model">The model containing the declaration field.</param>
            <param name="fieldName">The declaration field name.</param>
            <returns>The description or any empty string.</returns>
        </member>
        <member name="M:Models.Core.AutoDocumentation.DocumentModel(Models.Core.IModel,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Writes the description of a class to the tags.</summary>
            <param name="model">The model to get documentation for.</param>
            <param name="tags">The tags to add to.</param>
            <param name="headingLevel">The heading level to use.</param>
            <param name="indent">The indentation level.</param>
            <param name="documentAllChildren">Document all children?</param>
            <param name="force">
            Whether or not to force the generation of documentation, 
            regardless of the model's IncludeInDocumentation status.
            </param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.DocumentModelSummary(Models.Core.IModel,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Document the summary description of a model.
            </summary>
            <param name="model">The model to get documentation for.</param>
            <param name="tags">The tags to add to.</param>
            <param name="headingLevel">The heading level to use.</param>
            <param name="indent">The indentation level.</param>
            <param name="documentAllChildren">Document all children?</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.ParseTextForTags(System.String,Models.Core.IModel,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Parse a string into documentation tags
            </summary>
            <param name="stringToParse">The string to parse</param>
            <param name="model">The associated model where the string came from</param>
            <param name="tags">The list of tags to add to</param>
            <param name="headingLevel">The current heading level</param>
            <param name="indent">The current indent level</param>
            <param name="doNotTrim">If true, don't trim the lines</param>
            <param name="documentAllChildren">Ensure all children are documented?</param>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GetHeadingFromLine(System.String,System.String@,System.Int32@)">
            <summary>Look at a string and return true if it is a heading.</summary>
            <param name="st">The string to look at.</param>
            <param name="heading">The returned heading.</param>
            <param name="headingLevel">The returned heading level.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.AutoDocumentation.DocumentChildren(Models.Core.IModel,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32,System.Type[])">
            <summary>
            Document all child members of the specified model.
            </summary>
            <param name="model">The parent model</param>
            <param name="tags">Documentation elements</param>
            <param name="headingLevel">Heading level</param>
            <param name="indent">Indent level</param>
            <param name="childTypesToExclude">An optional list of Types to exclude from documentation.</param>
        </member>
        <member name="T:Models.Core.AutoDocumentation.ITag">
            <summary>
            Describes an interface for a auto-doc command.
            </summary>
        </member>
        <member name="T:Models.Core.AutoDocumentation.Heading">
            <summary>
            Describes an auto-doc heading command.
            </summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Heading.text">
            <summary>The heading text</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Heading.headingLevel">
            <summary>The heading level</summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.Heading.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.AutoDocumentation.Heading"/> class.
            </summary>
            <param name="text">The heading text.</param>
            <param name="headingLevel">The heading level.</param>
        </member>
        <member name="T:Models.Core.AutoDocumentation.Paragraph">
            <summary>
            Describes an auto-doc paragraph command.
            </summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Paragraph.text">
            <summary>The paragraph text.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Paragraph.indent">
            <summary>The indent level.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Paragraph.bookmarkName">
            <summary>The bookmark name (optional)</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Paragraph.handingIndent">
            <summary>Should the paragraph indent all lines except the first?</summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.Paragraph.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.AutoDocumentation.Paragraph"/> class.
            </summary>
            <param name="text">The paragraph text.</param>
            <param name="indent">The paragraph indent.</param>
        </member>
        <member name="T:Models.Core.AutoDocumentation.GraphAndTable">
            <summary>Describes an auto-doc graph and table command.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.GraphAndTable.xyPairs">
            <summary>The data to show in graph and table.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.GraphAndTable.title">
            <summary>The graph title</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.GraphAndTable.xName">
            <summary>The x axis title.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.GraphAndTable.yName">
            <summary>The y axis title</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.GraphAndTable.indent">
            <summary>The indent level.</summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.GraphAndTable.#ctor(Models.Functions.XYPairs,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.AutoDocumentation.GraphAndTable"/> class.
            </summary>
            <param name="xyPairs">The xy pairs.</param>
            <param name="title">Graph title.</param>
            <param name="xName">The x axis title.</param>
            <param name="yName">The y axis title.</param>
            <param name="indent">The indentation.</param>
        </member>
        <member name="T:Models.Core.AutoDocumentation.Table">
            <summary>Describes an auto-doc table command.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Table.data">
            <summary>The data to show in the table.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Table.indent">
            <summary>The indent level.</summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.Table.#ctor(System.Data.DataTable,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.AutoDocumentation.Table"/> class.
            </summary>
            <param name="data">The column / row data.</param>
            <param name="indent">The indentation.</param>
        </member>
        <member name="T:Models.Core.AutoDocumentation.Image">
            <summary>Descibes an image for the tags system.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Image.image">
            <summary>The image to put into the doc.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.Image.name">
            <summary>Unique name for image. Used to save image to temp folder.</summary>
        </member>
        <member name="T:Models.Core.AutoDocumentation.NewPage">
            <summary>Describes a new page for the tags system.</summary>
        </member>
        <member name="T:Models.Core.AutoDocumentation.ModelView">
            <summary>Describes a model view for the tags system.</summary>
        </member>
        <member name="F:Models.Core.AutoDocumentation.ModelView.model">
            <summary>Model</summary>
        </member>
        <member name="M:Models.Core.AutoDocumentation.ModelView.#ctor(Models.Core.IModel)">
            <summary>Constructor</summary>
            <param name="modelToDocument">The model to document</param>
        </member>
        <member name="T:Models.Core.Alias">
            <summary>
            An alias model
            </summary>
        </member>
        <member name="T:Models.Core.LoadedEventArgs">
            <summary>An EventArgs class for 'Loaded' events</summary>
        </member>
        <member name="F:Models.Core.LoadedEventArgs.errors">
            <summary>List of errors that occurred during 'Loaded' events</summary>
        </member>
        <member name="T:Models.Core.Events">
            <summary>
            An event handling class
            </summary>
        </member>
        <member name="M:Models.Core.Events.#ctor(Models.Core.IModel)">
            <summary>Constructor</summary>
            <param name="relativeTo">The model this events instance is relative to</param>
        </member>
        <member name="M:Models.Core.Events.ConnectEvents">
            <summary>Connect all events in the specified simulation.</summary>
        </member>
        <member name="M:Models.Core.Events.DisconnectEvents">
            <summary>Connect all events in the specified simulation.</summary>
        </member>
        <member name="M:Models.Core.Events.Subscribe(System.String,System.EventHandler)">
            <summary>
            Subscribe to an event. Will throw if namePath doesn't point to a event publisher.
            </summary>
            <param name="eventNameAndPath">The name of the event to subscribe to</param>
            <param name="handler">The event handler</param>
        </member>
        <member name="M:Models.Core.Events.Unsubscribe(System.String,System.EventHandler)">
            <summary>
            Unsubscribe an event. Throws if not found.
            </summary>
            <param name="eventNameAndPath">The name of the event to subscribe to</param>
            <param name="handler">The event handler</param>
        </member>
        <member name="M:Models.Core.Events.Publish(System.String,System.Object[])">
            <summary>
            Call the specified event on the specified model and all child models.
            </summary>
            <param name="eventName">The name of the event</param>
            <param name="args">The event arguments. Can be null</param>
        </member>
        <member name="T:Models.Core.Events.Subscriber">
            <summary>A wrapper around an event subscriber MethodInfo.</summary>
        </member>
        <member name="P:Models.Core.Events.Subscriber.Model">
            <summary>The model instance containing the event hander.</summary>
        </member>
        <member name="P:Models.Core.Events.Subscriber.methodInfo">
            <summary>The method info for the event handler.</summary>
        </member>
        <member name="P:Models.Core.Events.Subscriber.Name">
            <summary>Gets or sets the name of the event.</summary>
        </member>
        <member name="M:Models.Core.Events.Subscriber.FindAll(System.String,Models.Core.IModel,Models.Core.ScopingRules)">
            <summary>Find all event subscribers in the specified models.</summary>
            <param name="name">The name of the event to look for</param>
            <param name="relativeTo">The model to use in scoping lookup</param>
            <param name="scope">Scoping rules</param>
            <returns>The list of event subscribers</returns>
        </member>
        <member name="M:Models.Core.Events.Subscriber.CreateDelegate(System.Type)">
            <summary>Creates and returns a delegate for the event handler.</summary>
            <param name="handlerType">The corresponding event publisher event handler type.</param>
            <returns>The delegate. Never returns null.</returns>
        </member>
        <member name="M:Models.Core.Events.Subscriber.Invoke(System.Object[])">
            <summary>
            Call the event handler.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Models.Core.Events.Publisher">
            <summary>
            A wrapper around an event publisher EventInfo.
            </summary>
        </member>
        <member name="P:Models.Core.Events.Publisher.Model">
            <summary>The model instance containing the event hander.</summary>
        </member>
        <member name="F:Models.Core.Events.Publisher.eventInfo">
            <summary>The reflection event info instance.</summary>
        </member>
        <member name="P:Models.Core.Events.Publisher.Name">
            <summary>Return the event name.</summary>
        </member>
        <member name="M:Models.Core.Events.Publisher.FindAll(System.Collections.Generic.List{Models.Core.IModel})">
            <summary>Find all event publishers in the specified models.</summary>
            <param name="models">The models to scan for event publishers</param>
            <returns>The list of event publishers</returns>
        </member>
        <member name="T:Models.Core.ICustomDocumentation">
            <summary>
            This interface provides a custom documentation method called by the auto
            documentation process
            </summary>
        </member>
        <member name="M:Models.Core.ICustomDocumentation.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Core.Interfaces.IOptionallySerialiseChildren">
            <summary>
            Any class that implements this interface can optionally have its children serialised.
            </summary>
        </member>
        <member name="P:Models.Core.Interfaces.IOptionallySerialiseChildren.DoSerialiseChildren">
            <summary>Allow children to be serialised?</summary>
        </member>
        <member name="T:Models.Core.Interfaces.ISimulationEngine">
            <summary>
            An interface for the APSIM simulation engine
            </summary>
        </member>
        <member name="P:Models.Core.Interfaces.ISimulationEngine.Links">
            <summary>Return link service</summary>
        </member>
        <member name="M:Models.Core.Interfaces.ISimulationEngine.GetEventService(Models.Core.IModel)">
            <summary>Returns an instance of an events service</summary>
            <param name="model">The model the service is for</param>
        </member>
        <member name="P:Models.Core.Interfaces.ISimulationEngine.FileName">
            <summary>Return filename</summary>
        </member>
        <member name="M:Models.Core.Interfaces.ISimulationEngine.MakeSubsAndLoad(Models.Core.Simulation)">
            <summary>
            Perform model substitutions
            </summary>
        </member>
        <member name="M:Models.Core.Interfaces.ISimulationEngine.Run(Models.Core.Simulation,System.Boolean)">
            <summary>Run a simulation</summary>
            <param name="simulation">The simulation to run</param>
            <param name="doClone">Clone the simulation before running?</param>
        </member>
        <member name="T:Models.Core.ITest">
            <summary>
            An interface for a model which is a test.
            </summary>
        </member>
        <member name="M:Models.Core.ITest.Run">
            <summary>
            Runs the test. Throws an exception on failure.
            </summary>
        </member>
        <member name="T:Models.Core.SimulationGeneratorFactors">
            <summary>Represents a factor that can be varied on a graph</summary>
        </member>
        <member name="P:Models.Core.SimulationGeneratorFactors.Factors">
            <summary>Name of factor</summary>
        </member>
        <member name="P:Models.Core.SimulationGeneratorFactors.Columns">
            <summary>The column name/value pairs that our filter is based on.</summary>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.#ctor(System.String,System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.#ctor(System.String[],System.String[],System.String,System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.AddFactor(System.String,System.String)">
            <summary>
            Add a factor name/value pair to this factor
            </summary>
            <param name="factorName"></param>
            <param name="factorValue"></param>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.AddFactorIfNotExist(System.String,System.String)">
            <summary>
            Add a factor name/value pair to this factor if it doesn't already exist
            </summary>
            <param name="factorName"></param>
            <param name="factorValue"></param>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.RemoveFactor(System.String)">
            <summary>
            Remove the specified factor
            </summary>
            <param name="name">The name of factor to remove</param>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.GetFactorValue(System.String)">
            <summary>
            Get the value of a factor
            </summary>
            <param name="name">The name of the factor</param>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.GetColumnValue(System.String)">
            <summary>
            Get the value of a factor
            </summary>
            <param name="name">The name of the factor</param>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.RemoveColumn(System.String)">
            <summary>
            Remove the specified column
            </summary>
            <param name="name">The name of column to remove</param>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.Equals(Models.Core.ISimulationGeneratorFactors)">
            <summary>Returns true if this object is equal to rhs</summary>
            <param name="compareTo">The object to compare to</param>
        </member>
        <member name="M:Models.Core.SimulationGeneratorFactors.Merge(Models.Core.ISimulationGeneratorFactors)">
            <summary>
            Merge the specified object into this object
            </summary>
            <param name="from">The object to copy values from</param>
        </member>
        <member name="T:Models.Core.ISimulationGenerator">
            <summary>An interface for something that can generate simulations to run</summary>
        </member>
        <member name="M:Models.Core.ISimulationGenerator.NextSimulationToRun(System.Boolean)">
            <summary>Gets the next simulation to run</summary>
        </member>
        <member name="M:Models.Core.ISimulationGenerator.GetSimulationNames(System.Boolean)">
            <summary>Gets a list of simulation names</summary>
        </member>
        <member name="M:Models.Core.ISimulationGenerator.GetFactors">
            <summary>Gets a list of factors</summary>
        </member>
        <member name="M:Models.Core.ISimulationGenerator.GenerateApsimXFile(System.String)">
            <summary>Generates an .apsimx file for each simulation.</summary>
            <param name="path">Directory to save the file to.</param>
        </member>
        <member name="T:Models.Core.ISimulationGeneratorFactors">
            <summary>Represents the factors coming from a ISimulationGenerator</summary>
        </member>
        <member name="P:Models.Core.ISimulationGeneratorFactors.Factors">
            <summary>Name of factor</summary>
        </member>
        <member name="P:Models.Core.ISimulationGeneratorFactors.Columns">
            <summary>The column name/value pairs that our filter is based on.</summary>
        </member>
        <member name="M:Models.Core.ISimulationGeneratorFactors.Equals(Models.Core.ISimulationGeneratorFactors)">
            <summary>Returns true if this object is equal to rhs</summary>
        </member>
        <member name="M:Models.Core.ISimulationGeneratorFactors.GetFactorValue(System.String)">
            <summary>
            Get the value of a factor
            </summary>
            <param name="name">The name of the factor</param>
        </member>
        <member name="M:Models.Core.ISimulationGeneratorFactors.AddFactor(System.String,System.String)">
            <summary>
            Add a factor name/value pair to this factor
            </summary>
            <param name="factorName"></param>
            <param name="factorValue"></param>
        </member>
        <member name="M:Models.Core.ISimulationGeneratorFactors.AddFactorIfNotExist(System.String,System.String)">
            <summary>
            Add a factor name/value pair to this factor if it doesn't already exist
            </summary>
            <param name="factorName"></param>
            <param name="factorValue"></param>
        </member>
        <member name="M:Models.Core.ISimulationGeneratorFactors.RemoveFactor(System.String)">
            <summary>
            Remove the specified factor
            </summary>
            <param name="name">The name of factor to remove</param>
        </member>
        <member name="M:Models.Core.ISimulationGeneratorFactors.GetColumnValue(System.String)">
            <summary>
            Get the value of a factor
            </summary>
            <param name="name">The name of the factor</param>
        </member>
        <member name="M:Models.Core.ISimulationGeneratorFactors.RemoveColumn(System.String)">
            <summary>
            Remove the specified column
            </summary>
            <param name="name">The name of column to remove</param>
        </member>
        <member name="M:Models.Core.ISimulationGeneratorFactors.Merge(Models.Core.ISimulationGeneratorFactors)">
            <summary>
            Merge the specified object into this object
            </summary>
            <param name="from">The object to copy values from</param>
        </member>
        <member name="T:Models.Core.IStorageWriter">
            <summary>
            Interface for reading and writing data to/from permanent storage.
            </summary>
        </member>
        <member name="M:Models.Core.IStorageWriter.WriteRow(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Write to permanent storage.</summary>
            <param name="simulationName">Name of simulation</param>
            <param name="tableName">Name of table</param>
            <param name="columnNames">Column names</param>
            <param name="columnUnits">Column units</param>
            <param name="valuesToWrite">Values of row to write</param>
        </member>
        <member name="T:Models.Core.IReferenceExternalFiles">
            <summary>An interface for a model that references external files</summary>
        </member>
        <member name="M:Models.Core.IReferenceExternalFiles.GetReferencedFileNames">
            <summary>Run tests. Should throw an exception if the test fails.</summary>
        </member>
        <member name="T:Models.Core.Locator">
            <summary>
            This class is responsible for the location and retrieval of variables or models 
            given a path.
            Path example syntax:
               .Clock.Start                         ABSOLUTE PATH
               [PotatoSowingRule].Script.SowDate    RELATIVE TO A MODEL IN SCOPE
               Leaf.LAI                             RELATIVE CHILD MODEL.
            </summary>
        </member>
        <member name="F:Models.Core.Locator.relativeToModel">
            <summary>The model this locator is relative to</summary>
        </member>
        <member name="F:Models.Core.Locator.cache">
            <summary>
            A cache for speeding up look ups. The object can be either 
            Model[] or an IVariable.
            </summary>
        </member>
        <member name="M:Models.Core.Locator.#ctor(Models.Core.IModel)">
            <summary>Constructor</summary>
            <param name="relativeTo">Model locator is relative to</param>
        </member>
        <member name="M:Models.Core.Locator.Clear">
            <summary>Clear the cache</summary>
        </member>
        <member name="M:Models.Core.Locator.Get(System.String)">
            <summary>
            Get the value of a variable or model.
            </summary>
            <param name="namePath">The name of the object to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Locator.Get(System.Type)">
            <summary>Gets a model in scope of the specified type</summary>
            <param name="typeToMatch">The type of the model to return</param>
            <returns>The found model or null if not found</returns>
        </member>
        <member name="M:Models.Core.Locator.GetObject(System.String)">
            <summary>
            
            </summary>
            <param name="namePath"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.Locator.Set(System.String,System.Object)">
            <summary>
            Set the value of a variable. Will throw if variable doesn't exist.
            </summary>
            <param name="namePath">The name of the object to set</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Models.Core.Locator.GetInternal(System.String,System.Boolean)">
            <summary>
            Get the value of a variable or model.
            </summary>
            <param name="namePath">The name of the object to return</param>
            <param name="ignoreCase">If true, ignore case when searching for the object or property</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Locator.GetTypeWithoutNameSpace(System.String)">
            <summary>
            Gets all Type instances matching the specified class name with no namespace qualified class name.
            Will not throw. May return empty array.
            </summary>
        </member>
        <member name="T:Models.Core.Runners.JobRunnerMultiProcess">
            <summary>A class for managing asynchronous running of jobs transferred via a socket connection</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.cancelToken">
            <summary>A token for cancelling running of jobs</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.verbose">
            <summary>Write child process' output to standard output?</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.errors">
            <summary>Non simulation errors thrown by runners or this class on socket threads</summary>
        </member>
        <member name="E:Models.Core.Runners.JobRunnerMultiProcess.AllJobsCompleted">
            <summary>Occurs when all jobs completed.</summary>
        </member>
        <member name="E:Models.Core.Runners.JobRunnerMultiProcess.JobCompleted">
            <summary>Invoked when a job is completed.</summary>
        </member>
        <member name="M:Models.Core.Runners.JobRunnerMultiProcess.#ctor(System.Boolean)">
            <summary>Constructor</summary>
            <param name="verbose">Write child process' output to standard output?</param>
        </member>
        <member name="M:Models.Core.Runners.JobRunnerMultiProcess.Run(APSIM.Shared.Utilities.IJobManager,System.Boolean,System.Int32)">
            <summary>Run the specified jobs</summary>
            <param name="jobManager">An instance of a class that manages all jobs.</param>
            <param name="wait">Wait until all jobs finished before returning?</param>
            <param name="numberOfProcessors">The maximum number of cores to use.</param>
        </member>
        <member name="M:Models.Core.Runners.JobRunnerMultiProcess.Stop">
            <summary>Stop all jobs currently running</summary>
        </member>
        <member name="M:Models.Core.Runners.JobRunnerMultiProcess.CreateRunners(System.Int32)">
            <summary>Create one job runner process for each CPU</summary>
            <param name="numberOfProcessors">The maximum number of cores to use</param>
        </member>
        <member name="M:Models.Core.Runners.JobRunnerMultiProcess.DeleteRunners">
            <summary>Delete any runners that may exist.</summary>
        </member>
        <member name="M:Models.Core.Runners.JobRunnerMultiProcess.OnExited(System.Object,System.EventArgs)">
            <summary>A runner process has exited. Check for errors</summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Models.Core.Runners.JobRunnerMultiProcess.OnGetJob(System.Object,APSIM.Shared.Utilities.SocketServer.CommandArgs)">
            <summary>Called by a runner process to get the next job to run.</summary>
            <param name="sender">The sender</param>
            <param name="args">The command arguments</param>
        </member>
        <member name="M:Models.Core.Runners.JobRunnerMultiProcess.OnTransferData(System.Object,APSIM.Shared.Utilities.SocketServer.CommandArgs)">
            <summary>Called by a runner process to send its output data.</summary>
            <param name="sender">The sender</param>
            <param name="args">The command arguments</param>
        </member>
        <member name="M:Models.Core.Runners.JobRunnerMultiProcess.OnEndJob(System.Object,APSIM.Shared.Utilities.SocketServer.CommandArgs)">
            <summary>Called by a runner process to signal end of job</summary>
            <param name="sender">The sender</param>
            <param name="args">The command arguments</param>
        </member>
        <member name="T:Models.Core.Runners.JobRunnerMultiProcess.GetJobReturnData">
            <summary>An class for encapsulating a response to a GetJob command</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.GetJobReturnData.key">
            <summary>Simulation name</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.GetJobReturnData.job">
            <summary>Table name</summary>
        </member>
        <member name="T:Models.Core.Runners.JobRunnerMultiProcess.EndJobArguments">
            <summary>An class for encapsulating arguments to an EndJob command</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.EndJobArguments.key">
            <summary>Job Key</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.EndJobArguments.errorMessage">
            <summary>Error message</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.EndJobArguments.simulationName">
            <summary>Simulation name of job completed</summary>
        </member>
        <member name="T:Models.Core.Runners.JobRunnerMultiProcess.TransferRowInTable">
            <summary>An class for encapsulating a row in a table</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.TransferRowInTable.simulationName">
            <summary>Simulation name</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.TransferRowInTable.tableName">
            <summary>Table name</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.TransferRowInTable.columnNames">
            <summary>Column names</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.TransferRowInTable.columnUnits">
            <summary>Column units</summary>
        </member>
        <member name="F:Models.Core.Runners.JobRunnerMultiProcess.TransferRowInTable.values">
            <summary>Row values for each column</summary>
        </member>
        <member name="T:Models.Core.Runners.RunDirectoryOfApsimFiles">
            <summary>
            This runnable class finds .apsimx files on the 'fileSpec' passed into
            the constructor. If 'recurse' is true then it will also recursively
            look for files in sub directories.
            </summary>
        </member>
        <member name="F:Models.Core.Runners.RunDirectoryOfApsimFiles.fileSpec">
            <summary>Gets or sets the filespec that we will look for.</summary>
        </member>
        <member name="F:Models.Core.Runners.RunDirectoryOfApsimFiles.runTests">
            <summary>Run the test nodes?</summary>
        </member>
        <member name="F:Models.Core.Runners.RunDirectoryOfApsimFiles.recurse">
            <summary>Search recursively for files?</summary>
        </member>
        <member name="F:Models.Core.Runners.RunDirectoryOfApsimFiles.verbose">
            <summary>Should the child process' output be redirected?</summary>
        </member>
        <member name="F:Models.Core.Runners.RunDirectoryOfApsimFiles.multiProcess">
            <summary>Should the child processes be run in multi-process mode?</summary>
        </member>
        <member name="F:Models.Core.Runners.RunDirectoryOfApsimFiles.files">
            <summary>List of files found that need running</summary>
        </member>
        <member name="M:Models.Core.Runners.RunDirectoryOfApsimFiles.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Constructor</summary>
            <param name="fileSpec">The filespec to search for simulations.</param>
            <param name="recurse">True if need to recurse through folder structure.</param>
            <param name="runTests">Run the test nodes?</param>
            <param name="verbose">Should the child process' output be redirected?</param>
            <param name="multiProcess">Should the child processes be run in multi-process mode?</param>
        </member>
        <member name="M:Models.Core.Runners.RunDirectoryOfApsimFiles.GetNextJobToRun">
            <summary>Return the index of next job to run or -1 if nothing to run.</summary>
            <returns>Job to run or null if no more</returns>
        </member>
        <member name="M:Models.Core.Runners.RunDirectoryOfApsimFiles.Completed">
            <summary>Called by the job runner when all jobs completed</summary>
        </member>
        <member name="T:Models.Core.Runners.RunSimulation">
            <summary>
            This runnable class clones a simulation and then runs it.
            </summary>
        </member>
        <member name="T:Models.Core.Runners.RunSimulation.CommenceArgs">
            <summary>The arguments for a commence event.</summary>
        </member>
        <member name="F:Models.Core.Runners.RunSimulation.CommenceArgs.CancelToken">
            <summary>The token to check for a job cancellation</summary>
        </member>
        <member name="P:Models.Core.Runners.RunSimulation.simulationToRun">
            <summary>The simulation to run.</summary>
        </member>
        <member name="F:Models.Core.Runners.RunSimulation.fileName">
            <summary>The .apsimx filename where this simulation resides</summary>
        </member>
        <member name="F:Models.Core.Runners.RunSimulation.simulationEngine">
            <summary>The engine</summary>
        </member>
        <member name="F:Models.Core.Runners.RunSimulation.cloneSimulationBeforeRun">
            <summary>The simulation to run.</summary>
        </member>
        <member name="P:Models.Core.Runners.RunSimulation.Services">
            <summary>An array of services that can be used to resolve links in the simulation</summary>
        </member>
        <member name="F:Models.Core.Runners.RunSimulation.timer">
            <summary>A timer to record how long it takes to run</summary>
        </member>
        <member name="M:Models.Core.Runners.RunSimulation.#ctor(Models.Core.Interfaces.ISimulationEngine,Models.Core.Simulation,System.Boolean)">
            <summary>Constructor</summary>
            <param name="simEngine">Simulation engine</param>
            <param name="simulation">The simulation to clone and run.</param>
            <param name="doClone">Clone the simulation before running?</param>
        </member>
        <member name="M:Models.Core.Runners.RunSimulation.SetParentOfSimulation(Models.Core.IModel)">
            <summary>
            Set the parent of the simulation. Sometimes the parent of the sim can be an
            instance of Simulations. When this is deserialised to pass through socket,
            this is not what we want.
            </summary>
            <returns>The former parent of the simulation before its reset</returns>
        </member>
        <member name="M:Models.Core.Runners.RunSimulation.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to start the job.</summary>
            <param name="cancelToken">The token to check if job has been cancelled</param>
        </member>
        <member name="T:Models.Core.Runners.RunExternalException">
            <summary>
            An exception class for external exceptions.
            </summary>
        </member>
        <member name="T:Models.Core.Runners.RunExternal">
            <summary>
            This runnable class runs an external process.
            </summary>
        </member>
        <member name="F:Models.Core.Runners.RunExternal.executable">
            <summary>Gets or sets the executable file.</summary>
        </member>
        <member name="F:Models.Core.Runners.RunExternal.workingDirectory">
            <summary>Gets or sets the working directory.</summary>
        </member>
        <member name="F:Models.Core.Runners.RunExternal.arguments">
            <summary>The arguments.</summary>
        </member>
        <member name="F:Models.Core.Runners.RunExternal.verbose">
            <summary>Should the child process' output be redirected?</summary>
        </member>
        <member name="F:Models.Core.Runners.RunExternal.error">
            <summary>
            Standard error from the process which is being run.
            </summary>
            <remarks>
            See <see cref="F:Models.Core.Runners.RunExternal.output"/> for more info on why this is needed.
            </remarks>
        </member>
        <member name="F:Models.Core.Runners.RunExternal.output">
            <summary>Standard output from the process which is being run.</summary>
            <remarks>
            If we wait for the process to exit before reading StandardOutput, 
            the process can block trying to write to it, so the process never ends.
            
            If we read from StandardOutput using ReadToEnd then this process can 
            block if the process never closes StandardOutput (for example if it 
            never terminates, or if it is blocked writing to StandardError).
            </remarks>
        </member>
        <member name="M:Models.Core.Runners.RunExternal.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Models.Core.Runners.RunExternal"/> class.</summary>
            <param name="executable">Name of the executable file.</param>
            <param name="arguments">The arguments.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="verbose">Should the child process' output be redirected?</param>
        </member>
        <member name="M:Models.Core.Runners.RunExternal.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to start the job.</summary>
            <param name="cancelToken">The thread this job is running on.</param>
        </member>
        <member name="M:Models.Core.Runners.RunExternal.OnOutputDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Invoked whenever the child process writes to standard output or standard error.
            Writes the data to standard output.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Models.Core.Runners.RunExternal.OnErrorDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Invoked whenever the child process writes to standard output or standard error.
            Writes the data to standard error.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:Models.Core.Runners.RunOrganiser">
            <summary>A job manager that looks after running all simulations</summary>
        </member>
        <member name="P:Models.Core.Runners.RunOrganiser.SimulationNamesBeingRun">
            <summary>Simulation names being run</summary>
        </member>
        <member name="P:Models.Core.Runners.RunOrganiser.SimClocks">
            <summary>
            Clocks of simulations that have begun running
            </summary>
        </member>
        <member name="P:Models.Core.Runners.RunOrganiser.AllSimulationNames">
            <summary>All known simulation names</summary>
        </member>
        <member name="P:Models.Core.Runners.RunOrganiser.Storage">
            <summary>
            The object used to write data for the simulations.
            </summary>
        </member>
        <member name="M:Models.Core.Runners.RunOrganiser.#ctor(Models.Core.Simulations,Models.Core.IModel,System.Boolean)">
            <summary>Constructor</summary>
            <param name="model">The model to run.</param>
            <param name="simulations">simulations object.</param>
            <param name="runTests">Run the test nodes?</param>
        </member>
        <member name="M:Models.Core.Runners.RunOrganiser.GetNextJobToRun">
            <summary>Return the index of next job to run or -1 if nothing to run.</summary>
            <returns>Job to run or null if no more jobs to run</returns>
        </member>
        <member name="M:Models.Core.Runners.RunOrganiser.Completed">
            <summary>Called by the job runner when all jobs completed</summary>
        </member>
        <member name="T:Models.Core.Links">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Core.Links.services">
            <summary>A collection of services that can be linked to</summary>
        </member>
        <member name="M:Models.Core.Links.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Constructor</summary>
            <param name="linkableServices">A collection of services that can be linked to</param>
        </member>
        <member name="M:Models.Core.Links.Resolve(Models.Core.IModel,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rootNode"></param>
            <param name="recurse">Recurse through all child models?</param>
            <param name="allLinks">Unresolve all links or just the non child links?</param>
        </member>
        <member name="M:Models.Core.Links.Resolve(Models.Core.ModelWrapper)">
            <summary>
            
            </summary>
            <param name="rootNode"></param>
        </member>
        <member name="M:Models.Core.Links.Resolve(System.Object)">
            <summary>
            Resolve links in an unknown object e.g. user interface presenter
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Models.Core.Links.Unresolve(Models.Core.IModel,System.Boolean)">
            <summary>
            Set to null all link fields in the specified model.
            </summary>
            <param name="model">The model to look through for links</param>
            <param name="allLinks">Unresolve all links or just the non child links?</param>
        </member>
        <member name="M:Models.Core.Links.ResolveInternal(System.Object,System.Collections.Generic.List{Models.Core.ModelWrapper})">
            <summary>
            Internal [link] resolution algorithm.
            </summary>
            <param name="obj"></param>
            <param name="allModels">A collection of all model wrappers</param>
        </member>
        <member name="M:Models.Core.Links.GetModel(System.Object)">
            <summary>
            Determine the type of an object and return its model.
            </summary>
            <param name="obj">obj can be either a ModelWrapper or an IModel.</param>
            <returns>The model</returns>
        </member>
        <member name="M:Models.Core.Links.GetName(System.Object)">
            <summary>
            Determine the type of an object and return its name.
            </summary>
            <param name="obj">obj can be either a ModelWrapper or an IModel.</param>
            <returns>The name</returns>
        </member>
        <member name="M:Models.Core.Links.GetParent(System.Object,System.Type)">
            <summary>
            Determine the type of an object and return its parent of the specified type.
            </summary>
            <param name="obj">obj can be either a ModelWrapper or an IModel.</param>
            <param name="type">The type of parent to find.</param>
            <returns>The matching parent</returns>
        </member>
        <member name="M:Models.Core.Links.GetFullName(System.Object)">
            <summary>
            Determine the type of an object and return its name.
            </summary>
            <param name="obj">obj can be either a ModelWrapper or an IModel.</param>
            <returns>The name</returns>
        </member>
        <member name="M:Models.Core.Links.GetModelsInScope(System.Object,System.Collections.Generic.List{Models.Core.ModelWrapper})">
            <summary>
            Determine the type of an object and return all models that are in scope.
            </summary>
            <param name="obj">obj can be either a ModelWrapper or an IModel.</param>
            <param name="allModels">A collection of all models</param>
            <returns>The models that are in scope of obj.</returns>
        </member>
        <member name="M:Models.Core.Links.GetChildren(System.Object)">
            <summary>
            Determine the type of an object and return all direct child models
            </summary>
            <param name="obj">obj can be either a ModelWrapper or an IModel.</param>
            <returns>The child models.</returns>
        </member>
        <member name="M:Models.Core.Links.GetAllDeclarations(System.Object,System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Return all fields. The normal .NET reflection doesn't return private fields in base classes.
            This function does.
            </summary>
        </member>
        <member name="T:Models.Core.ModelWrapper">
            <summary>
            Wrapper class for a 'model'
            </summary>
        </member>
        <member name="P:Models.Core.ModelWrapper.Name">
            <summary>Name</summary>
        </member>
        <member name="P:Models.Core.ModelWrapper.Model">
            <summary>Associated model.</summary>
        </member>
        <member name="P:Models.Core.ModelWrapper.Children">
            <summary>The children.</summary>
        </member>
        <member name="P:Models.Core.ModelWrapper.ChildrenRecursively">
            <summary>Gets a list of all children recursively.</summary>
        </member>
        <member name="P:Models.Core.ModelWrapper.Models">
            <summary>Gets a list of all child models AND this model.</summary>
        </member>
        <member name="M:Models.Core.ModelWrapper.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Core.ModelWrapper.#ctor(System.Object,System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Core.ModelWrapper.Add(System.Object)">
            <summary>A method for adding a model.</summary>
        </member>
        <member name="M:Models.Core.ModelWrapper.Remove(System.Object)">
            <summary>A method for removing a model.</summary>
        </member>
        <member name="M:Models.Core.ModelWrapper.FindModelsInScope(System.Collections.Generic.List{Models.Core.ModelWrapper})">
            <summary>Return a list of all models in scope.</summary>
            <param name="allModels"></param>
        </member>
        <member name="M:Models.Core.ModelWrapper.Get(System.String,System.Boolean)">
            <summary>Get a property as specified by the path.</summary>
            <param name="namePath">The path to the property</param>
            <param name="ignoreCase">If true, then name comparison will ignore case sensitivity.</param>
            <returns>The property or null if not found.</returns>
        </member>
        <member name="M:Models.Core.ModelWrapper.Set(System.String,System.Object)">
            <summary>Set a property value.</summary>
            <param name="namePath">The path to the property</param>
            <param name="value">The value of the property.</param>
            <returns>Return true if value was set.</returns>
        </member>
        <member name="M:Models.Core.ModelWrapper.GetProperty(System.String,System.Boolean)">
            <summary>Get a property or model as specified by the path.</summary>
            <param name="namePath">The path to the property</param>
            <param name="ignoreCase">If true, then name comparison will ignore case sensitivity.</param>
            <returns>The property or null if not found.</returns>
        </member>
        <member name="M:Models.Core.ModelWrapper.ParentAllModels">
            <summary>Set the Parent field of all iModels</summary>
        </member>
        <member name="M:Models.Core.ModelWrapper.ParentAllModelsInternal(Models.Core.IModel)">
            <summary>Internal routine to parent all models. Uses recursion.</summary>
            <param name="parent">The parent of all child models.</param>
        </member>
        <member name="T:Models.Core.ModelTypes">
            <summary>
            Encapsulates a static list of models that have been discovered.
            </summary>
        </member>
        <member name="F:Models.Core.ModelTypes.modelTypes">
            <summary>Known model types</summary>
        </member>
        <member name="M:Models.Core.ModelTypes.GetModelTypes">
            <summary>Get a list of known model types.</summary>
        </member>
        <member name="T:Models.Core.Property">
            <summary>
            Encapsulates either a ModelNode or a object/ property combination. The GetProperty method
            returns one of these.
            </summary>
        </member>
        <member name="F:Models.Core.Property.model">
            <summary></summary>
        </member>
        <member name="M:Models.Core.Property.#ctor(Models.Core.ModelWrapper)">
            <summary>Constructor</summary>
            <param name="model">A ModelNode starting node</param>
        </member>
        <member name="M:Models.Core.Property.SetToChildModel(System.String,System.StringComparison)">
            <summary>
            Try assuming that model is a ModelNode and look for a child model of the specified name.
            If found, the this property will be set to the child model.
            </summary>
            <param name="childName">The child name to look for.</param>
            <param name="compareType">The type of comparison to perform.</param>
            <returns>Returns true if the property was set to a child model.</returns>
        </member>
        <member name="M:Models.Core.Property.SetToProperty(System.String,System.Reflection.BindingFlags)">
            <summary>
            Try looking for a PropertyInfo in the model. If found then set this property accordingly.
            </summary>
            <param name="propertyName">The property name to look for.</param>
            <param name="bindingFlags">The binding flags to use.</param>
            <returns>Returns true if the property info was found.</returns>
        </member>
        <member name="M:Models.Core.Property.Get">
            <summary>Gets the value of this property.</summary>
        </member>
        <member name="M:Models.Core.Property.Set(System.Object)">
            <summary>Sets the value of this property. Returns true if value was set.</summary>
        </member>
        <member name="T:Models.Core.Runner">
            <summary>
            Gets a run job for running one or more simulations.
            </summary>
        </member>
        <member name="M:Models.Core.Runner.ForSimulations(Models.Core.Simulations,Models.Core.IModel,System.Boolean)">
            <summary>Runs the specified simulations.</summary>
            <param name="model">Simulations to run.</param>
            <param name="simulations">Simulations model.</param>
            <param name="runTests">Run the test nodes?</param>
            <returns>A runnable job or null if nothing to run.</returns>
        </member>
        <member name="M:Models.Core.Runner.ForFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Run simulations in files specified by a file specification.</summary>
            <param name="fileSpec">The file specification</param>
            <param name="recurse">Recurse throug sub directories?</param>
            <param name="runTests">Run the test nodes?</param>
            <param name="verbose">Should the child process' output be redirected?</param>
            <param name="multiProcess">Should the child processes be run in multi-process mode?</param>
            <returns>The file of jobs that were run.</returns>
        </member>
        <member name="M:Models.Core.Runner.ForFile(System.String,System.Boolean)">
            <summary>Run simulations in files specified by a file specification.</summary>
            <param name="fileName">The file specification</param>
            <param name="runTests">Run the test nodes?</param>
            <returns>The file of jobs that were run.</returns>
        </member>
        <member name="M:Models.Core.Runner.AllSimulations(Models.Core.IModel)">
            <summary>Runs the specified simulations.</summary>
            <param name="underModel">Look at this model and all child models for simulations to create</param>
            <returns>A list of all created simulations</returns>
        </member>
        <member name="T:Models.Core.Runner.SimulationCreator">
            <summary>An enumable class for creating simulations ready for running.</summary>
        </member>
        <member name="P:Models.Core.Runner.SimulationCreator.SimulationNamesBeingRun">
            <summary>Simulation names being run</summary>
        </member>
        <member name="M:Models.Core.Runner.SimulationCreator.#ctor(Models.Core.IModel)">
            <summary>Constructor</summary>
            <param name="underModel">Look at this model and all child models for simulations to create</param>
        </member>
        <member name="M:Models.Core.Runner.SimulationCreator.System#Collections#Generic#IEnumerable{Models#Core#Simulation}#GetEnumerator">
            <summary>Return simulation enumerator</summary>
        </member>
        <member name="M:Models.Core.Runner.SimulationCreator.System#Collections#IEnumerable#GetEnumerator">
            <summary>Return simulation enumerator</summary>
        </member>
        <member name="T:Models.Core.Runner.SimulationEnumerator">
            <summary>An enumerator for creating simulations ready for running.</summary>
        </member>
        <member name="P:Models.Core.Runner.SimulationEnumerator.simClocks">
            <summary>
            List of simulation clocks - allows us to monitor progress of the runs.
            </summary>
        </member>
        <member name="P:Models.Core.Runner.SimulationEnumerator.SimulationNamesBeingRun">
            <summary>Simulation names being run</summary>
        </member>
        <member name="M:Models.Core.Runner.SimulationEnumerator.#ctor(Models.Core.IModel)">
            <summary>Constructor</summary>
            <param name="underModel">Look at this model and all child models for simulations to create</param>
        </member>
        <member name="P:Models.Core.Runner.SimulationEnumerator.System#Collections#Generic#IEnumerator{Models#Core#Simulation}#Current">
            <summary>Return the current simulation</summary>
        </member>
        <member name="P:Models.Core.Runner.SimulationEnumerator.System#Collections#IEnumerator#Current">
            <summary>Return the current simulation</summary>
        </member>
        <member name="M:Models.Core.Runner.SimulationEnumerator.System#IDisposable#Dispose">
            <summary>Dispose of object</summary>
        </member>
        <member name="M:Models.Core.Runner.SimulationEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>Move to next simulation</summary>
        </member>
        <member name="M:Models.Core.Runner.SimulationEnumerator.System#Collections#IEnumerator#Reset">
            <summary>Reset the enumerator</summary>
        </member>
        <member name="M:Models.Core.Runner.SimulationEnumerator.FindListOfModelsToRun">
            <summary>Determine the list of jobs to run</summary>
        </member>
        <member name="T:Models.Core.ScopingRules">
            <summary>
            Implements APSIMs scoping rules.
            </summary>
        </member>
        <member name="M:Models.Core.ScopingRules.FindAll(Models.Core.IModel)">
            <summary>
            Return a list of models in scope to the one specified.
            </summary>
            <param name="relativeTo">The model to base scoping rules on</param>
        </member>
        <member name="M:Models.Core.ScopingRules.FindScopedParentModel(Models.Core.IModel)">
            <summary>
            Find a parent of 'relativeTo' that has a [ScopedModel] attribute. 
            Returns null if non found.
            </summary>
            <param name="relativeTo">The model to use as a base.</param>
        </member>
        <member name="M:Models.Core.ScopingRules.IsScopedModel(Models.Core.IModel)">
            <summary>
            Return true if model is a scoped model
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.ScopingRules.Clear">
            <summary>
            Clear the current cache
            </summary>
        </member>
        <member name="T:Models.Core.VariableMethod">
            <summary>
            Encapsulates a discovered method of a model. 
            </summary>
        </member>
        <member name="F:Models.Core.VariableMethod.method">
            <summary>
            Gets or sets the PropertyInfo for this property.
            </summary>
        </member>
        <member name="M:Models.Core.VariableMethod.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableMethod" /> class.
            </summary>
            <param name="model">The underlying model for the property</param>
            <param name="method">The PropertyInfo for this property</param>
        </member>
        <member name="P:Models.Core.VariableMethod.Object">
            <summary>
            Gets or sets the underlying model that this property belongs to.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Name">
            <summary>
            Return the name of the method.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Description">
            <summary>
            Gets the description of the method
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Units">
            <summary>
            Gets the units of the method
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.AllowableUnits">
            <summary>
            Gets a list of allowable units
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.IsReadOnly">
            <summary>
            Gets a value indicating whether the method is readonly.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Metadata">
            <summary>
            Gets the metadata for each layer. Returns new string[0] if none available.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.DataType">
            <summary>
            Gets the data type of the method
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Value">
            <summary>
            Gets the values of the method
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Display">
            <summary>
            Gets the associated display type for the related method.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableMethod.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.VariableMethod.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="T:Models.Core.ITestable">
            <summary>
            An interface for something that is testable.
            </summary>
        </member>
        <member name="M:Models.Core.ITestable.Test(System.Boolean,System.Boolean)">
            <summary>Run tests. Should throw an exception if the test fails.</summary>
        </member>
        <member name="T:Models.Core.Replacements">
            <summary>
            A replacements model
            </summary>
        </member>
        <member name="T:Models.Core.Apsim">
            <summary>
            The API for models to discover other models, get and set variables in
            other models and send events and subscribe to events in other models.
            </summary>
        </member>
        <member name="M:Models.Core.Apsim.Get(Models.Core.IModel,System.String,System.Boolean)">
            <summary>
            Gets the value of a variable or model.
            </summary>
            <param name="model">The reference model</param>
            <param name="namePath">The name of the object to return</param>
            <param name="ignoreCase">If true, ignore case when searching for the object or property</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Apsim.GetVariableObject(Models.Core.IModel,System.String)">
            <summary>
            Get the underlying variable object for the given path.
            </summary>
            <param name="model">The reference model</param>
            <param name="namePath">The name of the variable to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Apsim.Set(Models.Core.IModel,System.String,System.Object)">
            <summary>
            Sets the value of a variable. Will throw if variable doesn't exist.
            </summary>
            <param name="model">The reference model</param>
            <param name="namePath">The name of the object to set</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Models.Core.Apsim.FullPath(Models.Core.IModel)">
            <summary>
            Returns the full path of the specified model.
            </summary>
            <param name="model">The model to return the full path for</param>
            <returns>The path</returns>
        </member>
        <member name="M:Models.Core.Apsim.Parent(Models.Core.IModel,System.Type)">
            <summary>
            Return a parent node of the specified type 'typeFilter'. Will throw if not found.
            </summary>
            <param name="model">The model to get the parent for</param>
            <param name="typeFilter">The name of the parent model to return</param>
            <returns>The parent of the specified type.</returns>
        </member>
        <member name="M:Models.Core.Apsim.Ancestor``1(Models.Core.IModel)">
            <summary>
            Returns the closest ancestor to a node of the specified type.
            Returns null if not found.
            </summary>
            <typeparam name="T">Type of model to search for.</typeparam>
            <param name="model">The reference model.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.Apsim.Find(Models.Core.IModel,System.String)">
            <summary>
            Locates and returns a model with the specified name that is in scope.
            </summary>
            <param name="model">The reference model</param>
            <param name="namePath">The name of the model to return</param>
            <returns>The found model or null if not found</returns>
        </member>
        <member name="M:Models.Core.Apsim.Find(Models.Core.IModel,System.Type)">
            <summary>
            Locates and returns a model with the specified type that is in scope.
            </summary>
            <param name="model">The reference model</param>
            <param name="type">The type of the model to return</param>
            <returns>The found model or null if not found</returns>
        </member>
        <member name="M:Models.Core.Apsim.FindAll(Models.Core.IModel)">
            <summary>
            Locates and returns all models in scope.
            </summary>
            <param name="model">The reference model</param>
            <returns>The found models or an empty array if not found.</returns>
        </member>
        <member name="M:Models.Core.Apsim.ClearCaches(Models.Core.IModel)">
            <summary>
            Clears the cached scoping values for the simulation 
            We need to do this when models have been added or deleted,
            as the cache will then be incorrect
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Models.Core.Apsim.FindAll(Models.Core.IModel,System.Type)">
            <summary>
            Locates and returns all models in scope of the specified type.
            </summary>
            <param name="model">The reference model</param>
            <param name="typeFilter">The type of the models to return</param>
            <returns>The found models or an empty array if not found.</returns>
        </member>
        <member name="M:Models.Core.Apsim.Clone(Models.Core.IModel)">
            <summary>
            Perform a deep Copy of the this model.
            </summary>
            <param name="model">The model to clone</param>
            <returns>The clone of the model</returns>
        </member>
        <member name="M:Models.Core.Apsim.SerialiseToStream(Models.Core.IModel)">
            <summary>
            Perform a deep serialise of the model.
            </summary>
            <param name="model">The model to clone</param>
            <returns>The model serialised to a stream.</returns>
        </member>
        <member name="M:Models.Core.Apsim.DeserialiseFromStream(System.IO.Stream)">
            <summary>
            Deserialise a model from a stream.
            </summary>
            <param name="stream">The stream to deserialise from.</param>
            <returns>The newly created model</returns>
        </member>
        <member name="M:Models.Core.Apsim.Delete(Models.Core.IModel)">
            <summary>Deletes the specified model.</summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Models.Core.Apsim.ClearCache(Models.Core.IModel)">
            <summary>Clears the cache</summary>
        </member>
        <member name="M:Models.Core.Apsim.Child(Models.Core.IModel,System.Type)">
            <summary>
            Return a child model that matches the specified 'modelType'. Returns 
            an empty list if not found.
            </summary>
            <param name="model">The parent model</param>
            <param name="typeFilter">The type of children to return</param>
            <returns>A list of all children</returns>
        </member>
        <member name="M:Models.Core.Apsim.Child(Models.Core.IModel,System.String)">
            <summary>
            Return a child model that matches the specified 'name'. Returns 
            null if not found.
            </summary>
            <param name="model">The parent model</param>
            <param name="name">The name of the child to return</param>
            <returns>A list of all children</returns>
        </member>
        <member name="M:Models.Core.Apsim.Children(Models.Core.IModel,System.Type)">
            <summary>
            Return children that match the specified 'typeFilter'. Never returns 
            null. Can return empty List.
            </summary>
            <param name="model">The parent model</param>
            <param name="typeFilter">The type of children to return</param>
            <returns>A list of all children</returns>
        </member>
        <member name="M:Models.Core.Apsim.ChildrenRecursively(Models.Core.IModel)">
            <summary>
            Return a list of all child models recursively. Never returns
            null. Can return an empty list.
            </summary>
            <param name="model">The parent model</param>
            <returns>A list of all children</returns>
        </member>
        <member name="M:Models.Core.Apsim.ChildrenRecursively(Models.Core.IModel,System.Type)">
            <summary>
            Return a list of all child models recursively. Only models of 
            the specified 'typeFilter' will be returned. Never returns
            null. Can return an empty list.
            </summary>
            <param name="model">The parent model</param>
            <param name="typeFilter">The type of children to return</param>
            <returns>A list of all children</returns>
        </member>
        <member name="M:Models.Core.Apsim.ChildrenRecursivelyVisible(Models.Core.IModel)">
            <summary>
            Return a list of all child models recursively. Never returns
            null. Can return an empty list.
            </summary>
            <param name="model">The parent model</param>
            <returns>A list of all children</returns>
        </member>
        <member name="M:Models.Core.Apsim.Siblings(Models.Core.IModel)">
            <summary>
            Return all siblings of the specified model.
            </summary>
            <param name="model">The parent model</param>
            <returns>The found siblings or an empty array if not found.</returns>
        </member>
        <member name="M:Models.Core.Apsim.ParentAllChildren(Models.Core.IModel)">
            <summary>
            Parent all children of 'model'.
            </summary>
            <param name="model">The model to parent</param>
        </member>
        <member name="M:Models.Core.Apsim.UnparentAllChildren(Models.Core.IModel)">
            <summary>
            Parent all children of 'model'.
            </summary>
            <param name="model">The model to parent</param>
        </member>
        <member name="M:Models.Core.Apsim.Subscribe(Models.Core.IModel,System.String,System.EventHandler)">
            <summary>
            Subscribe to an event. Will throw if namePath doesn't point to a event publisher.
            </summary>
            <param name="model">The model containing the handler</param>
            <param name="eventNameAndPath">The name of the event to subscribe to</param>
            <param name="handler">The event handler</param>
        </member>
        <member name="M:Models.Core.Apsim.Unsubscribe(Models.Core.IModel,System.String,System.EventHandler)">
            <summary>
            Unsubscribe an event. Throws if not found.
            </summary>
            <param name="model">The model containing the handler</param>
            <param name="eventNameAndPath">The name of the event to subscribe to</param>
            <param name="handler">The event handler</param>
        </member>
        <member name="M:Models.Core.Apsim.FieldsAndProperties(System.Object,System.Reflection.BindingFlags)">
            <summary>
            Return a list of all parameters (that are not references to child models). Never returns null. Can
            return an empty array. A parameter is a class property that is public and read/write
            </summary>
            <param name="model">The model to search</param>
            <param name="flags">The reflection tags to use in the search</param>
            <returns>The array of variables.</returns>
        </member>
        <member name="M:Models.Core.Apsim.IsChildAllowable(System.Object,System.Type)">
            <summary>Return true if the child can be added to the parent.</summary>
            <param name="parent">The parent model.</param>
            <param name="childType">The child type.</param>
            <returns>True if child can be added.</returns>
        </member>
        <member name="M:Models.Core.Apsim.GetAllowableChildModels(System.Object)">
            <summary>Get a list of allowable child models for the specified parent.</summary>
            <param name="parent">The parent model.</param>
            <returns>A list of allowable child models.</returns>
        </member>
        <member name="M:Models.Core.Apsim.GetAllowableChildFunctions(System.Object)">
            <summary>Get a list of allowable child functions for the specified parent.</summary>
            <param name="parent">The parent model.</param>
            <returns>A list of allowable child functions.</returns>
        </member>
        <member name="M:Models.Core.Apsim.Locator(Models.Core.IModel)">
            <summary>
            Gets the locater model for the specified model.
            </summary>
            <param name="model">The model to find the locator for</param>
            <returns>The an instance of a locater class for the specified model. Never returns null.</returns>
        </member>
        <member name="T:Models.Core.BoundsAttribute">
            <summary>
            Specifies the lower and upper bounds for the related field or property.
            </summary>
        </member>
        <member name="P:Models.Core.BoundsAttribute.Lower">
            <summary>
            Gets or sets the lower bound
            </summary>
        </member>
        <member name="P:Models.Core.BoundsAttribute.Upper">
            <summary>
            Gets or sets the upper bound
            </summary>
        </member>
        <member name="T:Models.Core.SummaryAttribute">
            <summary>
            When applied to a field, the infrastructure will locate an object in scope of the 
            related field and store a reference to it in the field. If no matching
            model is found (and IsOptional is not specified or is false), then an 
            exception will be thrown. 
            </summary>
        </member>
        <member name="T:Models.Core.DisplayType">
            <summary>
            An enumeration for display types.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.None">
            <summary>
            No specific display editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.TableName">
            <summary>
            Use the table name editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.CultivarName">
            <summary>
            A cultivar name editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.FileName">
            <summary>
            A file name editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.FieldName">
            <summary>
            A field name editor.
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.ResidueName">
            <summary>
            Use a list of known residue types
            </summary>
        </member>
        <member name="F:Models.Core.DisplayType.Model">
            <summary>
            A model drop down.
            </summary>
        </member>
        <member name="T:Models.Core.DisplayAttribute">
            <summary>
            Specifies various user interface display properties.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.Format">
            <summary>
            Gets or sets the display format (e.g. 'N3') that the user interface should
            use when showing values in the related property.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.ShowTotal">
            <summary>
            Gets or sets a value indicating whether the user interface should display
            a total at the top of the column in a ProfileGrid.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.ModelType">
            <summary>
            Gets or sets a value denoting the type of model to show in the model drop down.
            </summary>
        </member>
        <member name="P:Models.Core.DisplayAttribute.Type">
            <summary>
            Gets or sets the display type. 
            </summary>
        </member>
        <member name="T:Models.Core.ValidParentAttribute">
            <summary>Specifies the models that this class can sit under in the user interface./// </summary>
        </member>
        <member name="P:Models.Core.ValidParentAttribute.ParentType">
            <summary>Allowable parent type.</summary>
        </member>
        <member name="P:Models.Core.ValidParentAttribute.DropAnywhere">
            <summary>Allow the model to be dropped anywhere?</summary>
        </member>
        <member name="T:Models.Core.DescriptionAttribute">
            <summary>
            Specifies that the related class should use the user interface view
            that has the specified name.
            </summary>
        </member>
        <member name="F:Models.Core.DescriptionAttribute.description">
            <summary>
            The name of the view class
            </summary>
        </member>
        <member name="M:Models.Core.DescriptionAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.DescriptionAttribute" /> class.
            </summary>
            <param name="description">Description text</param>
            <param name="lineNum">Line number of declaration - inserted by compiler magically. Useful for sorting</param>
        </member>
        <member name="M:Models.Core.DescriptionAttribute.ToString">
            <summary>
            Gets the description
            </summary>
            <returns>The description</returns>
        </member>
        <member name="P:Models.Core.DescriptionAttribute.LineNumber">
            <summary>
            Line number of declaration
            </summary>
        </member>
        <member name="T:Models.Core.ViewNameAttribute">
            <summary>
            Specifies that the related class should use the user interface view
            that has the specified name.
            </summary>
        </member>
        <member name="F:Models.Core.ViewNameAttribute.name">
            <summary>
            The name of the view class
            </summary>
        </member>
        <member name="M:Models.Core.ViewNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.ViewNameAttribute" /> class.
            </summary>
            <param name="name">Name of the user interface view class to use</param>
        </member>
        <member name="M:Models.Core.ViewNameAttribute.ToString">
            <summary>
            Gets the name of the view.
            </summary>
            <returns>The name of the view class</returns>
        </member>
        <member name="T:Models.Core.PresenterNameAttribute">
            <summary>
            Specifies that the related class should use the user interface presenter
            that has the specified name.
            </summary>
        </member>
        <member name="F:Models.Core.PresenterNameAttribute.name">
            <summary>
            The name of the presenter class
            </summary>
        </member>
        <member name="M:Models.Core.PresenterNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.PresenterNameAttribute" /> class.
            </summary>
            <param name="name">Name of the user interface presenter class to use</param>
        </member>
        <member name="M:Models.Core.PresenterNameAttribute.ToString">
            <summary>
            Gets the name of the presenter.
            </summary>
            <returns>The name of the presenter class</returns>
        </member>
        <member name="T:Models.Core.EventSubscribeAttribute">
            <summary>
            Specifies that the related method should be called whenever an event
            is invoked that has the specified name.
            </summary>
        </member>
        <member name="F:Models.Core.EventSubscribeAttribute.name">
            <summary>
            The event name being subscribed to.
            </summary>
        </member>
        <member name="M:Models.Core.EventSubscribeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.EventSubscribeAttribute" /> class.
            </summary>
            <param name="name">Name of the event being subscribed to</param>
        </member>
        <member name="M:Models.Core.EventSubscribeAttribute.ToString">
            <summary>
            Gets the name of the event.
            </summary>
            <returns>The name of the event being subscribed to</returns>
        </member>
        <member name="T:Models.Core.UnitsAttribute">
            <summary>
            Specifies the units of the related field or property. Units must conform to the specification in Section 2.6.
            </summary>
        </member>
        <member name="F:Models.Core.UnitsAttribute.unitsString">
            <summary>
            The units passed through the constructor
            </summary>
        </member>
        <member name="M:Models.Core.UnitsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.UnitsAttribute" /> class.
            </summary>
            <param name="units">The units of the associated field or property</param>
        </member>
        <member name="M:Models.Core.UnitsAttribute.ToString">
            <summary>
            Returns the units.
            </summary>
            <returns>The units string</returns>
        </member>
        <member name="T:Models.Core.LinkAttribute">
            <summary>
            When applied to a field, the infrastructure will locate an object that matches the 
            related field and store a reference to it in the field (dependency injection). 
            If no matching model is found (and IsOptional is not specified or is false), then an 
            exception will be thrown. 
            </summary>
        </member>
        <member name="F:Models.Core.LinkAttribute.isOptional">
            <summary>Stores the value of IsOptional if specified.</summary>
        </member>
        <member name="P:Models.Core.LinkAttribute.IsOptional">
            <summary>When true, the infrastructure will not throw an exception when an object cannot be found.</summary>
        </member>
        <member name="M:Models.Core.LinkAttribute.IsScoped(Models.Core.IVariable)">
            <summary>Is this link a scoped link</summary>
        </member>
        <member name="M:Models.Core.LinkAttribute.UseNameToMatch(Models.Core.IVariable)">
            <summary>Should the fields name be used when matching?</summary>
        </member>
        <member name="T:Models.Core.LinkByPathAttribute">
            <summary>
            When applied to a field, the infrastructure will locate an object that matches the 
            related field and path and store a reference to it in the field (dependency injection). 
            If no matching model is found then an will be thrown. 
            </summary>
        </member>
        <member name="P:Models.Core.LinkByPathAttribute.Path">
            <summary>The path to use to find a link match.</summary>
        </member>
        <member name="M:Models.Core.LinkByPathAttribute.UseNameToMatch(Models.Core.IVariable)">
            <summary>Should the fields name be used when matching?</summary>
        </member>
        <member name="T:Models.Core.ScopedLinkByNameAttribute">
            <summary>
            When applied to a field, the infrastructure will locate an object in scope of the 
            related field and store a reference to it in the field. If no matching
            model is found (and IsOptional is not specified or is false), then an 
            exception will be thrown. 
            </summary>
        </member>
        <member name="M:Models.Core.ScopedLinkByNameAttribute.IsScoped(Models.Core.IVariable)">
            <summary>Is this link a scoped link</summary>
        </member>
        <member name="M:Models.Core.ScopedLinkByNameAttribute.UseNameToMatch(Models.Core.IVariable)">
            <summary>Should the fields name be used when matching?</summary>
        </member>
        <member name="T:Models.Core.ScopedLinkAttribute">
            <summary>
            When applied to a field, the infrastructure will locate an object in scope of the 
            related field and store a reference to it in the field. If no matching
            model is found (and IsOptional is not specified or is false), then an 
            exception will be thrown. 
            </summary>
        </member>
        <member name="M:Models.Core.ScopedLinkAttribute.IsScoped(Models.Core.IVariable)">
            <summary>Is this link a scoped link</summary>
        </member>
        <member name="M:Models.Core.ScopedLinkAttribute.UseNameToMatch(Models.Core.IVariable)">
            <summary>Should the fields name be used when matching?</summary>
        </member>
        <member name="T:Models.Core.ChildLinkAttribute">
            <summary>
            When applied to a field, the infrastructure will locate a child object of the 
            related fields type and store a reference to it in the field. If no matching
            model is found (and IsOptional is not specified or is false), then an 
            exception will be thrown. 
            </summary>
        </member>
        <member name="M:Models.Core.ChildLinkAttribute.IsScoped(Models.Core.IVariable)">
            <summary>Is this link a scoped link</summary>
        </member>
        <member name="M:Models.Core.ChildLinkAttribute.UseNameToMatch(Models.Core.IVariable)">
            <summary>Should the fields name be used when matching?</summary>
        </member>
        <member name="T:Models.Core.ChildLinkByNameAttribute">
            <summary>
            When applied to a field, the infrastructure will locate a child object of the 
            related fields type and name and store a reference to it in the field. If no matching
            model is found (and IsOptional is not specified or is false), then an 
            exception will be thrown. 
            </summary>
        </member>
        <member name="M:Models.Core.ChildLinkByNameAttribute.IsScoped(Models.Core.IVariable)">
            <summary>Is this link a scoped link</summary>
        </member>
        <member name="M:Models.Core.ChildLinkByNameAttribute.UseNameToMatch(Models.Core.IVariable)">
            <summary>Should the fields name be used when matching?</summary>
        </member>
        <member name="T:Models.Core.ParentLinkAttribute">
            <summary>
            When applied to a field, the infrastructure will locate a parent object of the 
            related fields type and store a reference to it in the field. If no matching
            model is found (and IsOptional is not specified or is false), then an 
            exception will be thrown. 
            </summary>
        </member>
        <member name="M:Models.Core.ParentLinkAttribute.IsScoped(Models.Core.IVariable)">
            <summary>Is this link a scoped link</summary>
        </member>
        <member name="M:Models.Core.ParentLinkAttribute.UseNameToMatch(Models.Core.IVariable)">
            <summary>Should the fields name be used when matching?</summary>
        </member>
        <member name="T:Models.Core.IModel">
            <summary>
            The IModel interface specifies the properties and methods that all
            models must have. 
            </summary>
        </member>
        <member name="P:Models.Core.IModel.Name">
            <summary>
            Gets or sets the name of the model.
            </summary>
        </member>
        <member name="P:Models.Core.IModel.Parent">
            <summary>
            Gets or sets the parent model. Can be null if model has no parent.
            </summary>
        </member>
        <member name="P:Models.Core.IModel.Children">
            <summary>
            Gets of sets the child models. Can be empty array but never null.
            </summary>
        </member>
        <member name="P:Models.Core.IModel.IsHidden">
            <summary>
            Gets or sets a value indicating whether a model is hidden from the user.
            </summary>
        </member>
        <member name="P:Models.Core.IModel.IncludeInDocumentation">
            <summary>
            Gets or sets a value indicating whether the graph should be included in the auto-doc documentation.
            </summary>
        </member>
        <member name="P:Models.Core.IModel.Enabled">
            <summary>
            Gets or sets whether the model is enabled
            </summary>
        </member>
        <member name="P:Models.Core.IModel.ReadOnly">
            <summary>
            Gets or sets whether the model is readonly.
            </summary>
        </member>
        <member name="M:Models.Core.IModel.OnCreated">
            <summary>
            Called when the model has been newly created in memory whether from 
            cloning or deserialisation.
            </summary>
        </member>
        <member name="T:Models.Core.VariableComposite">
            <summary>
            This class encapsulates a list of IVariables that are evaluated when
            the Value property is called.
            source code.
            </summary>
        </member>
        <member name="F:Models.Core.VariableComposite.name">
            <summary>
            The name of the composite variable
            </summary>
        </member>
        <member name="F:Models.Core.VariableComposite.variables">
            <summary>
            The list of variables to be evaluated
            </summary>
        </member>
        <member name="M:Models.Core.VariableComposite.#ctor(System.String,System.Collections.Generic.List{Models.Core.IVariable})">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableComposite" /> class.
            </summary>
            <param name="name">The name</param>
            <param name="variables">The list of variables to be evaluated</param>
        </member>
        <member name="P:Models.Core.VariableComposite.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Object">
            <summary>
            Gets or sets the object this variable is relative to
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Description">
            <summary>
            Gets a description of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Units">
            <summary>
            Gets the units of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableComposite.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.VariableComposite.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="T:Models.Core.IPostSimulationTool">
            <summary>
            An interface for a post simulation tool
            </summary>
        </member>
        <member name="M:Models.Core.IPostSimulationTool.Run(Models.Core.IStorageReader)">
            <summary>Runs the tool</summary>
            <param name="store">The data store where output should be stored</param>
        </member>
        <member name="T:Models.Core.IVariable">
            <summary>
            This abstract base class encapsulates the interface for a variable from a Model.
            source code.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Object">
            <summary>
            Gets or sets the object this variable is relative to
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Description">
            <summary>
            Gets a description of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Units">
            <summary>
            Gets or sets the units of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="P:Models.Core.IVariable.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.IVariable.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="T:Models.Core.Locater">
            <summary>
            This class is responsible for the location and retrieval of variables or models 
            given a path.
            Path example syntax:
               .Clock.Start                         ABSOLUTE PATH
               [PotatoSowingRule].Script.SowDate    RELATIVE TO A MODEL IN SCOPE
               Leaf.LAI                             RELATIVE CHILD MODEL.
            </summary>
        </member>
        <member name="F:Models.Core.Locater.CacheForModel.cache">
            <summary>
            A cache for speeding up look ups. The object can be either 
            Model[] or an IVariable.
            </summary>
        </member>
        <member name="M:Models.Core.Locater.CacheForModel.GetValueForKey(System.String)">
            <summary>
            Get a value for the specified key or null if not in cache.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:Models.Core.Locater.cache">
            <summary>
            A cache for speeding up look ups. The object can be either 
            Model[] or an IVariable.
            </summary>
        </member>
        <member name="M:Models.Core.Locater.Clear">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="M:Models.Core.Locater.Get(System.String,Models.Core.Model,System.Boolean)">
            <summary>
            Get the value of a variable or model.
            </summary>
            <param name="namePath">The name of the object to return</param>
            <param name="relativeTo">The model calling this method</param>
            <param name="ignoreCase">If true, ignore case when searching for the object or property</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Locater.Set(System.String,Models.Core.Model,System.Object)">
            <summary>
            Set the value of a variable. Will throw if variable doesn't exist.
            </summary>
            <param name="namePath">The name of the object to set</param>
            <param name="relativeTo">The model calling this method</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Models.Core.Locater.GetInternal(System.String,Models.Core.Model,System.Boolean)">
            <summary>
            Get the value of a variable or model.
            </summary>
            <param name="namePath">The name of the object to return</param>
            <param name="relativeTo">The model calling this method</param>
            <param name="ignoreCase">If true, ignore case when searching for the object or property</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Locater.GetTypeWithoutNameSpace(System.String)">
            <summary>
            Gets all Type instances matching the specified class name with no namespace qualified class name.
            Will not throw. May return empty array.
            </summary>
        </member>
        <member name="M:Models.Core.Locater.AddToCache(System.String,Models.Core.Model,System.Object)">
            <summary>
            Add the specified object to the cache.
            </summary>
            <param name="key">cache key</param>
            <param name="relativeTo">Model for which the object is relative to</param>
            <param name="obj">The object to store.</param>
        </member>
        <member name="M:Models.Core.Locater.GetFromCache(System.String,Models.Core.Model)">
            <summary>
            Get an object from the cache.
            </summary>
            <param name="key">The cache key</param>
            <param name="relativeTo">The model the object is relative to</param>
            <returns>The object or null if not found.</returns>
        </member>
        <member name="T:Models.Core.ModelCollectionFromResource">
            <summary>This class loads a model from a resource</summary>
        </member>
        <member name="P:Models.Core.ModelCollectionFromResource.ResourceName">
            <summary>Gets or sets the name of the resource.</summary>
        </member>
        <member name="P:Models.Core.ModelCollectionFromResource.DoSerialiseChildren">
            <summary>Allow children to be serialised?</summary>
        </member>
        <member name="M:Models.Core.ModelCollectionFromResource.OnCreated">
            <summary>
            We have just been deserialised. If from XML then load our model
            from resource.
            </summary>
        </member>
        <member name="M:Models.Core.ModelCollectionFromResource.CopyPropertiesFrom(Models.Core.Model)">
            <summary>
            Copy all properties from the specified resource.
            </summary>
            <param name="from">Model to copy from</param>
        </member>
        <member name="M:Models.Core.ModelCollectionFromResource.SetNotVisible(Models.Core.Model)">
            <summary>Sets the not visible.</summary>
            <param name="ModelFromResource">The model from resource.</param>
        </member>
        <member name="T:Models.Core.VariableExpression">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="F:Models.Core.VariableExpression.expression">
            <summary>
            The expression string.
            </summary>
        </member>
        <member name="F:Models.Core.VariableExpression.fn">
            <summary>
            An instance of the expression evaluator once the expression has been parsed.
            </summary>
        </member>
        <member name="M:Models.Core.VariableExpression.#ctor(System.String,Models.Core.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableExpression" /> class.
            </summary>
            <param name="expression">The string expression</param>
            <param name="model">The model</param>
        </member>
        <member name="P:Models.Core.VariableExpression.Object">
            <summary>
            A reference to the variables class so that getting of variable values is possible.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Description">
            <summary>
            Gets a description of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Units">
            <summary>
            Gets the units of the property (in brackets) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="M:Models.Core.VariableExpression.FillVariableNames">
            <summary>
            Fill the function variables with names.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableExpression.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.VariableExpression.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="T:Models.Core.VariableProperty">
            <summary>
            Encapsulates a discovered property of a model. Provides properties for
            returning information about the property. 
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.property">
            <summary>
            Gets or sets the PropertyInfo for this property.
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.lowerArraySpecifier">
            <summary>
            An optional lower bound array index.
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.upperArraySpecifier">
            <summary>
            An optional upper bound array index.
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.elementPropertyName">
            <summary>The name of the property to call on each array element.</summary>
        </member>
        <member name="M:Models.Core.VariableProperty.#ctor(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableProperty" /> class.
            </summary>
            <param name="model">The underlying model for the property</param>
            <param name="property">The PropertyInfo for this property</param>
            <param name="arraySpecifier">An optional array specification e.g. 1:3</param>
        </member>
        <member name="M:Models.Core.VariableProperty.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.VariableProperty" /> class.
            </summary>
            <param name="model">The underlying model for the property</param>
            <param name="elementPropertyName">The name of the property to call on each array element.</param>
        </member>
        <member name="P:Models.Core.VariableProperty.Object">
            <summary>
            Gets or sets the underlying model that this property belongs to.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Name">
            <summary>
            Return the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Description">
            <summary>
            Gets the description of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Caption">
            <summary>
            Gets the text to use as a label for the property.
            This is derived from the BriefLabel attribute or,
            if that does not exist, from the Description attribute
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Units">
            <summary>
            Gets the units of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="M:Models.Core.VariableProperty.GetEnumDescription(System.Enum)">
            <summary>
            Looks for a description string associated with an enumerated value
            Adapted from http://blog.spontaneouspublicity.com/associating-strings-with-enums-in-c
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Models.Core.VariableProperty.NameLabelPair">
            <summary>
            Simple structure to hold both a name and an associated label
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.NameLabelPair.Name">
            <summary>
            Name of an object
            </summary>
        </member>
        <member name="F:Models.Core.VariableProperty.NameLabelPair.Label">
            <summary>
            Display label for the object
            </summary>
        </member>
        <member name="M:Models.Core.VariableProperty.NameLabelPair.#ctor(System.String,System.String)">
            <summary>
            Constructs a NameLabelPair
            </summary>
            <param name="name">Name of the object</param>
            <param name="label">Display label for the object</param>
        </member>
        <member name="P:Models.Core.VariableProperty.AllowableUnits">
            <summary>
            Gets a list of allowable units
            The list contains both the actual name and a display name for each entry
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.IsReadOnly">
            <summary>
            Gets a value indicating whether the property is readonly.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Metadata">
            <summary>
            Gets the metadata for each layer. Returns new string[0] if none available.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Value">
            <summary>
            Gets the values of the property
            </summary>
        </member>
        <member name="M:Models.Core.VariableProperty.ProcessPropertyOfArrayElement">
            <summary>
            Special case where trying to get a property of an array(IList). In this case
            we want to return the property value for all items in the array.
            e.g. Maize.Root.Zones.WaterUptake
            Zones is a List of ZoneState objects.
            </summary>
        </member>
        <member name="M:Models.Core.VariableProperty.ValueAsString">
            <summary>
            Returns the string representation of our value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Core.VariableProperty.AsString(System.Object)">
            <summary>
            Returns the string representation of a scalar value. 
            Uses InvariantCulture when converting doubles
            to ensure a consistent representation of Nan and Inf
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Models.Core.VariableProperty.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Format">
            <summary>
            Gets the display format for this property e.g. 'N3'. Can return null if not present.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.CropName">
            <summary>
            Gets the crop name of the property or null if this property isn't a crop one.
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Total">
            <summary>
            Gets the sum of all values in this array property if the property has been 
            marked as [DisplayTotal]. Otherwise return double.Nan
            </summary>
        </member>
        <member name="P:Models.Core.VariableProperty.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="M:Models.Core.VariableProperty.SetFromString(System.String)">
            <summary>
            Set the value of this object via a string.
            </summary>
            <param name="value">The string value to set this property to</param>
        </member>
        <member name="M:Models.Core.VariableProperty.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="M:Models.Core.VariableProperty.EnumToStrings(System.Object)">
            <summary>
            Convert the specified enum to a list of strings.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Core.VariableProperty.ParseEnum(System.Type,System.Object)">
            <summary>
            Parse the specified object to an enum. 
            Similar to Enum.Parse(), but this will check against the enum's description attribute.
            </summary>
            <param name="obj">Object to parse. Should probably be a string.</param>
            <param name="t">Enum in which we will try to find a matching member.</param>
            <returns>Enum member.</returns>
        </member>
        <member name="T:Models.Core.ApsimXException">
            <summary>
            Apsim's exception object
            </summary>
        </member>
        <member name="P:Models.Core.ApsimXException.model">
            <summary>Gets or sets the model.</summary>
            <value>The model.</value>
        </member>
        <member name="M:Models.Core.ApsimXException.#ctor(Models.Core.IModel,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Models.Core.ApsimXException"/> class.</summary>
            <param name="model">The model.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Models.Core.Folder">
            <summary>
            A folder model
            </summary>
        </member>
        <member name="P:Models.Core.Folder.ShowPageOfGraphs">
            <summary>Show page of graphs?</summary>
        </member>
        <member name="M:Models.Core.Folder.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Core.Folder.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Core.IEvent">
            <summary>
            An interface for publishing / subscribing to events.
            </summary>
        </member>
        <member name="M:Models.Core.IEvent.Subscribe(System.String,System.EventHandler)">
            <summary>
            Subscribe to an event. Will throw if namePath doesn't point to a event publisher.
            </summary>
            <param name="eventName">The name of the event to subscribe to</param>
            <param name="handler">The event handler</param>
        </member>
        <member name="M:Models.Core.IEvent.Unsubscribe(System.String,System.EventHandler)">
            <summary>
            Unsubscribe an event. Throws if not found.
            </summary>
            <param name="eventName">The name of the event to subscribe to</param>
            <param name="handler">The event handler</param>
        </member>
        <member name="M:Models.Core.IEvent.ConnectEvents">
            <summary>Connect all events in the specified simulation.</summary>
        </member>
        <member name="M:Models.Core.IEvent.DisconnectEvents">
            <summary>Connect all events in the specified simulation.</summary>
        </member>
        <member name="T:Models.Core.ILocator">
            <summary>
            An interface for locating variables/models at runtime.
            </summary>
        </member>
        <member name="M:Models.Core.ILocator.Get(System.String)">
            <summary>
            Gets the value of a variable or model. Case insensitive. 
            </summary>
            <param name="namePath">The name of the object to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.ILocator.Get(System.Type)">
            <summary>Gets a model in scope of the specified type</summary>
            <param name="typeToMatch">The type of the model to return</param>
            <returns>The found model or null if not found</returns>
        </member>
        <member name="M:Models.Core.ILocator.GetObject(System.String)">
            <summary>
            Get the underlying variable object for the given path.
            </summary>
            <param name="namePath">The name of the variable to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="T:Models.Core.IStorageReader">
            <summary>
            Interface for reading and writing data to/from permanent storage.
            </summary>
        </member>
        <member name="P:Models.Core.IStorageReader.FileName">
            <summary>Returns the file name of the .db file</summary>
        </member>
        <member name="M:Models.Core.IStorageReader.Checkpoints">
            <summary>
            Return list of checkpoints.
            </summary>
        </member>
        <member name="M:Models.Core.IStorageReader.GetData(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Return all data from the specified simulation and table name. If simulationName = "*"
            the all simulation data will be returned.
            </summary>
            <param name="checkpointName">Name of the checkpoint.</param>
            <param name="simulationName">Name of the simulation.</param>
            <param name="tableName">Name of the table.</param>
            <param name="fieldNames">Optional column names to retrieve from storage</param>
            <param name="filter">Optional filter</param>
            <param name="from">Optional start index. Only used when 'count' specified. The record number to offset.</param>
            <param name="count">Optional number of records to return or all if 0.</param>
            <param name="orderBy">Optional column name to order by</param>
        </member>
        <member name="M:Models.Core.IStorageReader.GetSimulationID(System.String)">
            <summary>Get a simulation ID for the specified simulation name</summary>
            <param name="simulationName">The simulation name to look for</param>
            <returns>The database ID or -1 if not found</returns>
        </member>
        <member name="M:Models.Core.IStorageReader.GetCheckpointID(System.String)">
            <summary>Get a checkpoint ID for the specified checkpoint name</summary>
            <param name="checkpointName">The simulation name to look for</param>
            <returns>The database ID or -1 if not found</returns>
        </member>
        <member name="M:Models.Core.IStorageReader.GetUnits(System.String,System.String)">
            <summary>
            Obtain the units for a column of data
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="columnHeading">Name of the data column</param>
            <returns>The units (with surrounding parentheses), or null if not available</returns>
        </member>
        <member name="M:Models.Core.IStorageReader.WriteTable(System.Data.DataTable)">
            <summary>
            Create a table in the database based on the specified data. If a 'SimulationName'
            column is found a corresponding 'SimulationID' column will be created.
            </summary>
            <param name="data">The data to write</param>
        </member>
        <member name="M:Models.Core.IStorageReader.DeleteDataInTable(System.String)">
            <summary>Delete the specified table.</summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Models.Core.IStorageReader.RunQuery(System.String)">
            <summary>Return all data from the specified simulation and table name.</summary>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="P:Models.Core.IStorageReader.SimulationNames">
            <summary>Return a list of simulations names or empty string[]. Never returns null.</summary>
        </member>
        <member name="P:Models.Core.IStorageReader.TableNames">
            <summary>Returns a list of table names</summary>
        </member>
        <member name="M:Models.Core.IStorageReader.ColumnNames(System.String)">
            <summary>Return a list of simulations names or empty string[]. Never returns null.</summary>
        </member>
        <member name="M:Models.Core.IStorageReader.EmptyDataStore">
            <summary>Delete all tables</summary>
        </member>
        <member name="M:Models.Core.IStorageReader.AddUnitsForTable(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Add units to table. Removes old units first.
            </summary>
            <param name="tableName">The table name</param>
            <param name="columnNames">The column names to add</param>
            <param name="columnUnits">The column units to add</param>
        </member>
        <member name="M:Models.Core.IStorageReader.GetTableColumns(System.String)">
            <summary>
            Get a list of the table columns
            </summary>
            <param name="tableName">The table name</param>
            <returns></returns>
        </member>
        <member name="T:Models.Core.VariableObject">
            <summary>
            This class encapsulates a single property of a model. Has properties for getting the value
            of the property, the value in the base model and the default value as definned in the 
            source code.
            </summary>
        </member>
        <member name="M:Models.Core.VariableObject.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Object">
            <summary>
            Gets or sets the object this variable is relative to
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Name">
            <summary>
            Return the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Value">
            <summary>
            Returns the value of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Description">
            <summary>
            Returns a description of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Units">
            <summary>
            Returns the units of the property (in brackets) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableObject.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.VariableObject.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="T:Models.Core.VariableField">
            <summary>
            This class encapsulates a single field of a model. Has properties for getting the value
            of the property, the value in the base model and the default value as definned in the 
            source code.
            </summary>
        </member>
        <member name="M:Models.Core.VariableField.#ctor(System.Object,System.Reflection.FieldInfo)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Object">
            <summary>
            Gets or sets the object this variable is relative to
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Name">
            <summary>
            Return the name of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Value">
            <summary>
            Returns the value of the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.ValueWithArrayHandling">
            <summary>
            Gets or sets the value of the specified property with arrays converted to comma separated strings.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.DataType">
            <summary>
            Gets the data type of the property
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Description">
            <summary>
            Returns a description of the property or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Caption">
            <summary>
            Gets the text to use as a label for the property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Units">
            <summary>
            Returns the units of the property (in brackets) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.UnitsLabel">
            <summary>
            Gets the units of the property as formmatted for display (in parentheses) or null if not found.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Display">
            <summary>
            Gets the associated display type for the related property.
            </summary>
        </member>
        <member name="P:Models.Core.VariableField.Writable">
            <summary>
            Returns true if the variable is writable
            </summary>
        </member>
        <member name="M:Models.Core.VariableField.GetAttribute(System.Type)">
            <summary>
            Return an attribute
            </summary>
            <param name="attributeType">Type of attribute to find</param>
            <returns>The attribute or null if not found</returns>
        </member>
        <member name="T:Models.Core.ISummary">
            <summary>
            A summary model interface for writing to the summary file.
            </summary>
        </member>
        <member name="M:Models.Core.ISummary.WriteMessage(Models.Core.IModel,System.String)">
            <summary>
            Write a message to the summary
            </summary>
            <param name="model">The model writing the message</param>
            <param name="message">The message to write</param>
        </member>
        <member name="M:Models.Core.ISummary.WriteWarning(Models.Core.IModel,System.String)">
            <summary>
            Write a message to the summary
            </summary>
            <param name="model">The model writing the message</param>
            <param name="message">The message to write</param>
        </member>
        <member name="M:Models.Core.ISummary.WriteError(Models.Core.IModel,System.String)">
            <summary>Write an error message to the summary</summary>
            <param name="model">The model writing the message</param>
            <param name="message">The warning message to write</param>
        </member>
        <member name="T:Models.Core.Model">
            <summary>
            Base class for all models
            </summary>
        </member>
        <member name="M:Models.Core.Model.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Core.Model" /> class.
            </summary>
        </member>
        <member name="P:Models.Core.Model.Name">
            <summary>
            Gets or sets the name of the model
            </summary>
        </member>
        <member name="P:Models.Core.Model.Children">
            <summary>
            Gets or sets a list of child models.   
            </summary>
        </member>
        <member name="P:Models.Core.Model.Parent">
            <summary>
            Gets or sets the parent of the model.
            </summary>
        </member>
        <member name="P:Models.Core.Model.IsHidden">
            <summary>
            Gets or sets a value indicating whether a model is hidden from the user.
            </summary>
        </member>
        <member name="P:Models.Core.Model.IncludeInDocumentation">
            <summary>
            Gets or sets a value indicating whether the graph should be included in the auto-doc documentation.
            </summary>
        </member>
        <member name="M:Models.Core.Model.ClearChildLists">
            <summary>
            A cleanup routine, in which we clear our child list recursively
            </summary>
        </member>
        <member name="P:Models.Core.Model.Enabled">
            <summary>
            Gets or sets whether the model is enabled
            </summary>
        </member>
        <member name="P:Models.Core.Model.ApsimVersion">
            <summary>
            Return the current APSIM version number.
            </summary>
        </member>
        <member name="P:Models.Core.Model.ReadOnly">
            <summary>
            Controls whether the model can be modified.
            </summary>
        </member>
        <member name="M:Models.Core.Model.OnCreated">
            <summary>
            Called when the model has been newly created in memory whether from 
            cloning or deserialisation.
            </summary>
        </member>
        <member name="T:Models.Core.Zone">
            <summary>
            # [Name]
            A generic system that can have children
            </summary>
        </member>
        <member name="P:Models.Core.Zone.Area">
            <summary>Area of the zone.</summary>
            <value>The area.</value>
        </member>
        <member name="P:Models.Core.Zone.Slope">
            <summary>Gets or sets the slope.</summary>
            <value>The slope.</value>
        </member>
        <member name="P:Models.Core.Zone.Plants">
            <summary>Return a list of plant models.</summary>
        </member>
        <member name="P:Models.Core.Zone.Index">
            <summary>Return the index of this paddock</summary>
        </member>
        <member name="M:Models.Core.Zone.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Core.Zone.Get(System.String)">
            <summary>Gets the value of a variable or model.</summary>
            <param name="namePath">The name of the object to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Zone.GetVariableObject(System.String)">
            <summary>Get the underlying variable object for the given path.</summary>
            <param name="namePath">The name of the variable to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Zone.Set(System.String,System.Object)">
            <summary>Sets the value of a variable. Will throw if variable doesn't exist.</summary>
            <param name="namePath">The name of the object to set</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Models.Core.Zone.Locator">
            <summary>Gets the locater model for the specified model.</summary>
            <returns>The an instance of a locater class for the specified model. Never returns null.</returns>
        </member>
        <member name="T:Models.Core.Simulations">
            <summary>
            # [Name]
            Encapsulates a collection of simulations. It is responsible for creating this collection,
            changing the structure of the components within the simulations, renaming components, adding
            new ones, deleting components. The user interface talks to an instance of this class.
            </summary>
        </member>
        <member name="F:Models.Core.Simulations._FileName">
            <summary>The _ file name</summary>
        </member>
        <member name="P:Models.Core.Simulations.ExplorerWidth">
            <summary>Gets or sets the width of the explorer.</summary>
            <value>The width of the explorer.</value>
        </member>
        <member name="P:Models.Core.Simulations.Version">
            <summary>Gets or sets the version.</summary>
        </member>
        <member name="P:Models.Core.Simulations.FileName">
            <summary>The name of the file containing the simulations.</summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Models.Core.Simulations.Links">
            <summary>Returns an instance of a links service</summary>
        </member>
        <member name="M:Models.Core.Simulations.GetEventService(Models.Core.IModel)">
            <summary>Returns an instance of an events service</summary>
            <param name="model">The model the service is for</param>
        </member>
        <member name="M:Models.Core.Simulations.GetLocatorService(Models.Core.IModel)">
            <summary>Returns an instance of an locator service</summary>
            <param name="model">The model the service is for</param>
        </member>
        <member name="M:Models.Core.Simulations.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Core.Simulations.Create(System.Collections.Generic.IEnumerable{Models.Core.IModel})">
            <summary>
            Create a simulations model
            </summary>
            <param name="children">The child models</param>
        </member>
        <member name="M:Models.Core.Simulations.AddCheckpoint(System.String)">
            <summary>
            Checkpoint the simulation.
            </summary>
            <param name="checkpointName">Name of checkpoint</param>
        </member>
        <member name="M:Models.Core.Simulations.RevertCheckpoint(System.String)">
            <summary>
            Revert this object to a previous one.
            </summary>
            <param name="checkpointName">Name of checkpoint</param>
            <returns>A new simulations object that represents the file on disk</returns>
        </member>
        <member name="M:Models.Core.Simulations.Run(Models.Core.Simulation,System.Boolean)">
            <summary>Run a simulation</summary>
            <param name="simulation">The simulation to run</param>
            <param name="doClone">Clone the simulation before running?</param>
        </member>
        <member name="M:Models.Core.Simulations.MakeSubsAndLoad(Models.Core.Simulation)">
            <summary>
            Perform model substitutions
            </summary>
        </member>
        <member name="M:Models.Core.Simulations.Write(System.String)">
            <summary>Write the specified simulation set to the specified filename</summary>
            <param name="FileName">Name of the file.</param>
        </member>
        <member name="M:Models.Core.Simulations.FindAllSimulationNames">
            <summary>Find all simulation names that are going to be run.</summary>
            <returns></returns>
        </member>
        <member name="M:Models.Core.Simulations.FindDuplicateSimulationNames">
            <summary>Find and return a list of duplicate simulation names.</summary>
        </member>
        <member name="M:Models.Core.Simulations.SetFileNameInAllSimulations">
            <summary>Look through all models. For each simulation found set the filename.</summary>
        </member>
        <member name="M:Models.Core.Simulations.ClearLinks">
            <summary>
            Nulls the link object, which will force it to be recreated when it's needed
            </summary>
        </member>
        <member name="M:Models.Core.Simulations.CreateLinks">
            <summary>Create a links object</summary>
        </member>
        <member name="M:Models.Core.Simulations.ClearSimulationReferences">
            <summary>
            A cleanup routine to be used when we close this set of simulations
            The goal is to avoid cyclic references that can prevent the garbage collector
            from clearing the memory we have used
            </summary>
        </member>
        <member name="M:Models.Core.Simulations.FindAllReferencedFiles">
            <summary>Find all referenced files from all models.</summary>
        </member>
        <member name="M:Models.Core.Simulations.DocumentModel(System.String,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32)">
            <summary>Documents the specified model.</summary>
            <param name="modelNameToDocument">The model name to document.</param>
            <param name="tags">The auto doc tags.</param>
            <param name="headingLevel">The starting heading level.</param>
        </member>
        <member name="T:Models.Core.IPlant">
            <summary>
            The ICrop interface specifies the properties and methods that all
            crops must have. In effect this interface describes the interactions
            between a crop and the other models in APSIM.
            </summary>
        </member>
        <member name="P:Models.Core.IPlant.Legumosity">
            <summary>Gets a value indicating how leguminous a plant is</summary>
        </member>
        <member name="P:Models.Core.IPlant.IsC4">
            <summary>Gets a value indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.Core.IPlant.IsAlive">
            <summary> Is the plant alive?</summary>
        </member>
        <member name="P:Models.Core.IPlant.CultivarNames">
            <summary>Gets a list of cultivar names</summary>
        </member>
        <member name="P:Models.Core.IPlant.AboveGround">
            <summary>Get above ground biomass</summary>
        </member>
        <member name="M:Models.Core.IPlant.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sows the plant</summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth.</param>
            <param name="rowSpacing">The row spacing.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
        </member>
        <member name="P:Models.Core.IPlant.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="M:Models.Core.IPlant.Harvest">
            <summary>Harvest the crop</summary>
        </member>
        <member name="M:Models.Core.IPlant.EndCrop">
            <summary>End the crop</summary>
        </member>
        <member name="T:Models.Core.Simulation">
            <summary>
            # [Name]
            A simulation model
            </summary>
        </member>
        <member name="F:Models.Core.Simulation.hasRun">
            <summary>Has this simulation been run?</summary>
        </member>
        <member name="P:Models.Core.Simulation.Area">
            <summary>Return total area.</summary>
        </member>
        <member name="T:Models.Core.Simulation.ErrorLevel">
            <summary>
            An enum that is used to indicate message severity when writing messages to the .db
            </summary>
        </member>
        <member name="F:Models.Core.Simulation.ErrorLevel.Information">
            <summary>Information</summary>
        </member>
        <member name="F:Models.Core.Simulation.ErrorLevel.Warning">
            <summary>Warning</summary>
        </member>
        <member name="F:Models.Core.Simulation.ErrorLevel.Error">
            <summary>Error</summary>
        </member>
        <member name="T:Models.Core.Simulation.MessageType">
            <summary>
            An enum that is used to indicate message severity when writing messages to the status window.
            </summary>
        </member>
        <member name="F:Models.Core.Simulation.MessageType.Information">
            <summary>Information</summary>
        </member>
        <member name="F:Models.Core.Simulation.MessageType.Warning">
            <summary>Warning</summary>
        </member>
        <member name="P:Models.Core.Simulation.Scope">
            <summary>Returns the object responsible for scoping rules.</summary>
        </member>
        <member name="F:Models.Core.Simulation.locater">
            <summary>A locater object for finding models and variables.</summary>
        </member>
        <member name="P:Models.Core.Simulation.Locater">
            <summary>Cache to speed up scope lookups.</summary>
            <value>The locater.</value>
        </member>
        <member name="M:Models.Core.Simulation.Get(System.String)">
            <summary>Gets the value of a variable or model.</summary>
            <param name="namePath">The name of the object to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Simulation.GetVariableObject(System.String)">
            <summary>Get the underlying variable object for the given path.</summary>
            <param name="namePath">The name of the variable to return</param>
            <returns>The found object or null if not found</returns>
        </member>
        <member name="M:Models.Core.Simulation.Set(System.String,System.Object)">
            <summary>Sets the value of a variable. Will throw if variable doesn't exist.</summary>
            <param name="namePath">The name of the object to set</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="P:Models.Core.Simulation.FileName">
            <summary>Return the filename that this simulation sits in.</summary>
            <value>The name of the file.</value>
        </member>
        <member name="M:Models.Core.Simulation.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Simulation has completed. Clear scope and locator
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Core.Simulation.ClearCaches">
            <summary>
            Clears the existing Scoping Rules
            </summary>
        </member>
        <member name="M:Models.Core.Simulation.OnBeginRun">
            <summary>Simulation runs are about to begin.</summary>
        </member>
        <member name="M:Models.Core.Simulation.NextSimulationToRun(System.Boolean)">
            <summary>Gets the next job to run</summary>
        </member>
        <member name="M:Models.Core.Simulation.GetSimulationNames(System.Boolean)">
            <summary>Gets a list of simulation names</summary>
        </member>
        <member name="M:Models.Core.Simulation.GetFactors">
            <summary>Gets a list of factors</summary>
        </member>
        <member name="M:Models.Core.Simulation.GenerateApsimXFile(System.String)">
            <summary>
            Generates an .apsimx file for this simulation.
            </summary>
            <param name="path">Directory to write the file to.</param>
        </member>
        <member name="T:Models.CLEM.Activities.BlankActivity">
            <summary>
            Blank activity for passing details
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.BlankActivity.DoActivity">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.BlankActivity.GetResourcesNeededForActivity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.BlankActivity.GetResourcesNeededForinitialisation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig">
            <summary>Ruminant predictive stocking activity</summary>
            <summary>This activity ensures the total herd size is acceptible to graze the dry season pasture</summary>
            <summary>It is designed to consider individuals already marked for sale and add additional individuals before transport and sale.</summary>
            <summary>It will check all paddocks that the specified herd are grazing</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.HerdName">
            <summary>
            Herd to manage for dry season pasture availability
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.AssessmentMonth">
            <summary>
            Month for assessing dry season feed requirements
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.DrySeasonLength">
            <summary>
            Number of months to assess
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.FeedLowLimit">
            <summary>
            Minimum estimated feed (kg/ha) allowed at end of period
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.MinimumBreederAgeLimit">
            minimum no that can be sold off... now controlled by sale and transport activity 
            <summary>
            Minimum breedeer age allowed to be sold
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.SellDryCows">
            <summary>
            Allow dry cows to be sold if feed shortage
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.SellWetCows">
            <summary>
            Allow wet cows to be sold if feed shortage
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.SellSteers">
            <summary>
            Allow steers to be sold if feed shortage
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.OnCLEMAnimalStock(System.Object,System.EventArgs)">
            <summary>An event handler to call for all resources other than food for feeding activity</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingOrig.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig">
            <summary>Ruminant predictive stocking activity using ENSO predictions</summary>
            <summary>This activity will undertake stocking and destocking based on future season predictions (La Nini or El Nino)</summary>
            <summary>It is designed to consider individuals already marked for sale and add additional individuals before transport and sale.</summary>
            <summary>It will check all paddocks that the specified herd are grazing</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.HerdName">
            <summary>
            Herd to manage for dry season pasture availability
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.AssessmentMonth">
            <summary>
            Month for assessing dry season feed requirements
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.MinimumFeedBeforeRestock">
            <summary>
            Minimum estimated feed (kg/ha) before restocking
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.SellDryCows">
            <summary>
            Allow dry cows to be sold if feed shortage
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.SellWetCows">
            <summary>
            Allow wet cows to be sold if feed shortage
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.SellSteers">
            <summary>
            Allow steers to be sold if feed shortage
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.MonthlySIOFile">
            <summary>
            File containing SOI measure from BOM http://www.bom.gov.au/climate/influences/timeline/
            Year Jan Feb Mar.....
            1876 11  0.2 -3  +ve LaNina -ve El Nino
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.GrazeFoodStoreName">
            <summary>
            Name of GrazeFoodStore (paddock) to place purchases in for grazing (leave blank for general yards)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.MeanSOIForLaNina">
            <summary>
            Minimum mean SOI for La Nina
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.MeanSOIForElNino">
            <summary>
            Minimum mean SOI (absolute) for El Nino
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.PastureToStockingChangeElNino">
            <summary>
            The relationship to convert pasture biomass to stock rate change for El Nino
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.PastureToStockingChangeLaNina">
            <summary>
            The relationship to convert pasture biomass to stock rate change for La Nina
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.foodStore">
            <summary>
            Store graze 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.OnCLEMAnimalStock(System.Object,System.EventArgs)">
            <summary>An event handler to call for all resources other than food for feeding activity</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSOOrig.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.ActivitiesHolder">
            <summary>
             Manger for all activities available to the model
            </summary> 
        </member>
        <member name="F:Models.CLEM.Activities.ActivitiesHolder.activities">
            <summary>
            List of the all the Activities.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivitiesHolder.LastShortfallResourceRequest">
            <summary>
            Last resource request that was in defecit
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivitiesHolder.ResourceShortfallOccurred">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Activities.ActivitiesHolder.LastActivityPerformed">
            <summary>
            Details of the last activity performed
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivitiesHolder.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.SearchForNameInActivity(Models.Core.Model,System.String)">
            <summary>
            Function to return an activity from the list of available activities.
            </summary>
            <param name="activity"></param>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.SearchForNameInActivities(System.String)">
            <summary>
            Function to return an activity from the list of available activities.
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnGetResourcesRequired(System.Object,System.EventArgs)">
            <summary>An event handler to allow to call all Activities in tree to request their resources in order.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow to call all Activities in tree to request their resources in order.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnCLEMEndOfTimeStep(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivitiesHolder.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerCropHarvest">
            <summary>
            Activity timer based on crop harvest
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerCropHarvest.MonthsBeforeHarvestStart">
            <summary>
            Months before harvest to start performing activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerCropHarvest.MonthsBeforeHarvestStop">
            <summary>
            Months before harvest to stop performing activities
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerCropHarvest.ActivityPerformed">
            <summary>
            Notify CLEM that this activity was performed.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerCropHarvest.ActivityDue">
            <summary>
            Method to determine whether the activity is due based on harvest details form parent.
            </summary>
            <returns>Whether the activity is due in the current month</returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerCropHarvest.OnActivityPerformed(System.EventArgs)">
            <summary>
            Activity has occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerDateRange">
            <summary>
            Activity timer based on monthly interval
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerDateRange.StartDate">
            <summary>
            Start date of period to perform activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerDateRange.EndDate">
            <summary>
            End date of period to perform activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerDateRange.Invert">
            <summary>
            Invert (NOT in selected range)
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerDateRange.ActivityPerformed">
            <summary>
            Activity performed
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerDateRange.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerDateRange.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerDateRange.ActivityDue">
            <summary>
            Method to determine whether the activity is due
            </summary>
            <returns>Whether the activity is due in the current month</returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerDateRange.OnActivityPerformed(System.EventArgs)">
            <summary>
            Activity has occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerMonthRange">
            <summary>
            Activity timer based on monthly interval
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerMonthRange.ActivityPerformed">
            <summary>
            Notify CLEM that this Timer was performed
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerMonthRange.StartMonth">
            <summary>
            Start month of annual period to perform activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerMonthRange.EndMonth">
            <summary>
            End month of annual period to perform activities
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerMonthRange.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerMonthRange.ActivityDue">
            <summary>
            Method to determine whether the activity is due
            </summary>
            <returns>Whether the activity is due in the current month</returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerMonthRange.OnActivityPerformed(System.EventArgs)">
            <summary>
            Activity has occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityTimerInterval">
            <summary>
            Activity timer based on monthly interval
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityTimerInterval.ActivityPerformed">
            <summary>
            Notify CLEM that timer was ok
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerInterval.Interval">
            <summary>
            The payment interval (in months, 1 monthly, 12 annual)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerInterval.MonthDue">
            <summary>
            First month to pay overhead
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerInterval.NextDueDate">
            <summary>
            Month this overhead is next due.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityTimerInterval.ActivityDue">
            <summary>
            Method to determine whether the activity is due
            </summary>
            <returns>Whether the activity is due in the current month</returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.OnEndOfMonth(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityTimerInterval.OnActivityPerformed(System.EventArgs)">
            <summary>
            Activity has occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.CropActivityManageCrop">
            <summary>Grow management activity</summary>
            <summary>This activity sets aside land for the crop</summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageCrop.LandItemNameToUse">
            <summary>
            Name of land type where crop is located
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageCrop.AreaRequested">
            <summary>
            Area of land requested
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageCrop.UseAreaAvailable">
            <summary>
            Use entire area available
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.CropActivityManageCrop.Area">
            <summary>
            Area of land actually received (maybe less than requested)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageCrop.LinkedLandItem">
            <summary>
            Land item
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>A list of resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.CropActivityManageCrop.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.CropActivityManageCrop.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageCrop.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.CropActivityManageProduct">
            <summary>Manage crop product activity</summary>
            <summary>This activity sets aside land for the crop</summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.ModelNameFileCrop">
            <summary>
            Name of the model for the crop input file
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.CropName">
            <summary>
            Name of crop in file
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.Store">
            <summary>
            Store to put crop growth into
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.StoreItemName">
            <summary>
            Item name (in the store) to put crop growth into
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.PercentKept">
            <summary>
            Percentage of the crop growth that is kept
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.TreesPerHa">
            <summary>
            Number of Trees per Hectare 
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.CropActivityManageProduct.IsTreeCrop">
            <summary>
            Is this a tree crop.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.LinkedResourceItem">
            <summary>
            resource item
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.HarvestData">
            <summary>
            Harvest Data retrieved from the Forage File.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.NextHarvest">
            <summary>
            Stores the next harvest details
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.PreviousHarvest">
            <summary>
            Stores the next harvest details
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.CropActivityManageProduct.fileCrop">
            <summary>
            Model for the crop input file
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.CropActivityManageProduct.parentManagementActivity">
            <summary>
            Parent of this Model that gets the land for growing this crop.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityManageProduct.UnitsToHaConverter">
            <summary>
            Units to Hectares converter from Land type
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>
            Function to get the next harvest date from data
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.OnCLEMDoCutAndCarry(System.Object,System.EventArgs)">
            <summary>An event handler for a Cut and Carry</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>A list of resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.CropActivityManageProduct.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.CropActivityManageProduct.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityManageProduct.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.CropActivityTask">
            <summary>Crop activity task</summary>
            <summary>This activity will perform costs and labour for a crop activity</summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.CropActivityTask.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.CropActivityTask.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityTask.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.IATCropLand">
            <summary>Grow a crop activity</summary>
            <summary>This activity sows, grows and harvests crops.</summary>
            <version>1.0</version>
            <updates>First implementation of this activity recreating IAT logic</updates>
        </member>
        <member name="P:Models.CLEM.Activities.IATCropLand.LandItemNameToUse">
            <summary>
            Name of land type where crop is located
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATCropLand.AreaRequested">
            <summary>
            Area of land requested
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATCropLand.Area">
            <summary>
            Area of land actually received (maybe less than requested)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATCropLand.LinkedLandItem">
            <summary>
            Land item
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATCropLand.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.IATCropLand.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.IATCropLand.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>A list of resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATCropLand.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATCropLand.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.IATCropLand.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATCropLand.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.IATCropLand.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATCropLand.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.IATGrowCropCost">
            <summary>manage enterprise activity</summary>
            <summary>This activity undertakes the overheads of running the enterprise.</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropCost.Clock">
            <summary>
            Get the Clock.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCost.MthsBeforeHarvest">
            <summary>
            Months before harvest to sow crop
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCost.PaymentStyle">
            <summary>
            Crop payment style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCost.UnitsPerHaOrTree">
            <summary>
            Units Per Hectare 
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCost.CostPerUnit">
            <summary>
            Cost Per Unit
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCost.AccountName">
            <summary>
            name of account to use
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropCost.costDate">
            <summary>
            Date to apply the cost on.
            Has to be stored as a global variable because of a race condition that occurs if user sets  MthsBeforeHarvest=0
            Then because ParentGrowCrop and children are all executing on the harvest month and 
            the ParentGrowCrop executes first and it removes the harvest from the harvest list, 
            then the chidren such as these never get the Clock.Today == harvest date (aka costdate).
            So instead we store the next harvest date (aka costdate) in this variable and don't update its value
            until after we have done the Clock.Today == harvest date (aka costdate) comparison.
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropCost.bankAccount">
            <summary>
            Store finance type to use
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropCost.parentGrowCrop">
            <summary>
            Parent somewhere above this model.
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropCost.grandParentCropLand">
            <summary>
            Parent above ParentGrowCrop.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCost.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCost.FindParentGrowCrop">
            <summary>
            Find a parent of type IATGrowCrop somewhere above this model in the simulation tree.
            </summary>
            <returns>true or false whether this found it</returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCost.CostDateFromHarvestDate">
            <summary>
            Get the cost date from the harvest date.
            This will happen every month in case the harvest has occured and there is a new harvest date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCost.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCost.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCost.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.IATGrowCropCost.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCost.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.IATGrowCropCost.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCost.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityFolder">
            <summary>manage enterprise activity</summary>
            <summary>This activity undertakes the overheads of running the enterprise.</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.ActivityFolder.OnPartialResourcesAvailableAction">
            <summary>
            Perform Activity with partial resources available
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityFolder.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityFolder.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityFolder.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityFolder.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityFolder.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.ActivityFolder.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ActivityFolder.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.FinanceActivityPayExpense">
            <summary>Activity to arrange and pay an enterprise expenses
            Expenses can be flagged as overheads for accounting
            </summary>
            <version>1.0</version>
        </member>
        <member name="P:Models.CLEM.Activities.FinanceActivityPayExpense.Amount">
            <summary>
            Amount payable
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.FinanceActivityPayExpense.AccountName">
            <summary>
            name of account to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.FinanceActivityPayExpense.IsOverhead">
            <summary>
            Farm overhead
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.FinanceActivityPayExpense.NextDueDate">
            <summary>
            Month this overhead is next due.
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.FinanceActivityPayExpense.bankAccount">
            <summary>
            Store finance type to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.FinanceActivityPayExpense.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.FinanceActivityPayExpense.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityPayExpense.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.GrazeBreedPoolLimit">
            <summary>
            The proportional intake limit for a given pool by breed
            This class is used internally in pasture grazing activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.GrazeBreedPoolLimit.Limit">
            <summary>
            Proportion of intake limit for pool
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.GrazeBreedPoolLimit.Pool">
            <summary>
            Pool that this limit applies to
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.IATGrowCrop">
            <summary>Grow a crop activity</summary>
            <summary>This activity sows, grows and harvests crops.</summary>
            <version>1.0</version>
            <updates>First implementation of this activity recreating IAT logic</updates>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCrop.ModelNameFileCrop">
            <summary>
            Name of the model for the crop input file
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCrop.CropName">
            <summary>
            Name of crop in file
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCrop.Store">
            <summary>
            Store to put crop growth into
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCrop.StoreItemName">
            <summary>
            Item name (in the store) to put crop growth into
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCrop.PercentKept">
            <summary>
            Percentage of the crop growth that is kept
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCrop.TreesPerHa">
            <summary>
            Number of Trees per Hectare 
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCrop.IsTreeCrop">
            <summary>
            Is this a tree crop.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCrop.LinkedHumanFoodItem">
            <summary>
            Human Food item
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCrop.LinkedAnimalFoodItem">
            <summary>
            Feed item
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCrop.LinkedProductItem">
            <summary>
            Inedible crop product item
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCrop.HarvestData">
            <summary>
            Harvest Data retrieved from the Forage File.
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCrop.fileCrop">
            <summary>
            Model for the crop input file
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCrop.cropLand">
            <summary>
            Parent of this Model that gets the land for growing this crop.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCrop.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCrop.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCrop.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>A list of resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCrop.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCrop.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCrop.OnCLEMDoCutAndCarry(System.Object,System.EventArgs)">
            <summary>An event handler for a Cut and Carry</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Models.CLEM.Activities.IATGrowCrop.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCrop.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.IATGrowCrop.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCrop.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.IATGrowCropCostAndLabour">
            <summary>Activity to remove the costs and labour used for graowing a crop as a single resource request.
            So either both cost and labour is taken or neither is.</summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropCostAndLabour.Clock">
            <summary>
            Get the Clock.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCostAndLabour.MthsBeforeHarvest">
            <summary>
            Months before harvest to sow crop
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCostAndLabour.PaymentStyle">
            <summary>
            Crop payment style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCostAndLabour.UnitsPerHaOrTree">
            <summary>
            Units Per Hectare 
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCostAndLabour.CostPerUnit">
            <summary>
            Cost Per Unit
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCostAndLabour.AccountName">
            <summary>
            name of account to use
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropCostAndLabour.costDate">
            <summary>
            Date to apply the cost on.
            Has to be stored as a global variable because of a race condition that occurs if user sets  MthsBeforeHarvest=0
            Then because ParentGrowCrop and children are all executing on the harvest month and 
            the ParentGrowCrop executes first and it removes the harvest from the harvest list, 
            then the chidren such as these never get the Clock.Today == harvest date (aka costdate).
            So instead we store the next harvest date (aka costdate) in this variable and don't update its value
            until after we have done the Clock.Today == harvest date (aka costdate) comparison.
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropCostAndLabour.parentGrowCrop">
            <summary>
            Parent somewhere above this model.
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropCostAndLabour.grandParentCropLand">
            <summary>
            Parent above ParentGrowCrop.
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropCostAndLabour.bankAccount">
            <summary>
            Store finance type to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropCostAndLabour.labour">
            <summary>
            Labour settings
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCostAndLabour.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCostAndLabour.FindParentGrowCrop">
            <summary>
            Find a parent of type IATGrowCrop somewhere above this model in the simulation tree.
            </summary>
            <returns>true or false whether this found it</returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCostAndLabour.CostDateFromHarvestDate">
            <summary>
            Get the cost date from the harvest date.
            This will happen every month in case the harvest has occured and there is a new harvest date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCostAndLabour.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCostAndLabour.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCostAndLabour.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.IATGrowCropCostAndLabour.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCostAndLabour.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.IATGrowCropCostAndLabour.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropCostAndLabour.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.LabourActivityOffFarm">
            <summary>
            Off farm labour activities
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityOffFarm.DailyRate">
            <summary>
            Daily labour rate
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityOffFarm.DaysWorkAvailableEachMonth">
            <summary>
            Days worked
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.LabourActivityOffFarm.BankAccountName">
            <summary>
            Bank account name to pay to
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.LabourActivityOffFarm.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.LabourActivityOffFarm.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.LabourActivityOffFarm.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.OtherAnimalsActivityGrow">
            <summary>Other animals grow activity</summary>
            <summary>This activity grows other animals and includes aging</summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityGrow.OtherAnimalType">
            <summary>
            Name of Other Animal Type
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityGrow.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityGrow.OnCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>
            Function to age other animals
            This needs to be undertaken prior to herd management
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityGrow.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>A list of resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityGrow.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityGrow.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.OtherAnimalsActivityGrow.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityGrow.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.OtherAnimalsActivityGrow.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityGrow.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.PastureActivityBurn">
            <summary>Activity to perform controlled burning of native pastures</summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityBurn.MinimumProportionGreen">
            <summary>
            Minimum proportion green for fire to carry
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityBurn.PaddockName">
            <summary>
            Name of graze food store/paddock to burn
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityBurn.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Activities.Relationship">
            <summary>
            This determines a relationship
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.Relationship.Value">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.Relationship.StartingValue">
            <summary>
            Starting value
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.Relationship.Minimum">
            <summary>
            Minimum value possible
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.Relationship.Maximum">
            <summary>
            Maximum value possible
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.Relationship.XValues">
            <summary>
            X values of relationship
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.Relationship.YValues">
            <summary>
            Y values of relationship
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.Relationship.SolveY(System.Double,System.Boolean)">
            <summary>
            Solve equation for y given x
            </summary>
            <param name="X">x value to solve y</param>
            <param name="LinearInterpolation">Use linear interpolation between the nearest point before and after x</param>
            <returns>y value for given x</returns>
        </member>
        <member name="M:Models.CLEM.Activities.Relationship.Modify(System.Double)">
            <summary>
            Modify the current value by Y calculated from x
            </summary>
            <param name="x">x value</param>
        </member>
        <member name="M:Models.CLEM.Activities.Relationship.Calculate(System.Double)">
            <summary>
            Calculate new value using Y calculated from x
            </summary>
            <param name="x">x value</param>
        </member>
        <member name="M:Models.CLEM.Activities.Relationship.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.Relationship.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Activities.ResourceActivitySell">
            <summary>
            Activity to price and sell resources
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.AccountName">
            <summary>
            Name of account to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.ResourceGroupName">
            <summary>
            Name of resource group containing resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.ResourceTypeName">
            <summary>
            Name of resource type to sell
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.SellWholeUnitsOnly">
            <summary>
            Determines whether sales are restricted to whole units
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.AmountReserved">
            <summary>
            Amount reserved from sale
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.UnitSize">
            <summary>
            Unit size (amount of the resource per sale unit)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.UnitPrice">
            <summary>
            Unit price (value of each sale unit)
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ResourceActivitySell.bankAccount">
            <summary>
            Store finance type to use
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ResourceActivitySell.resourceToSell">
            <summary>
            Store finance type to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.Labour">
            <summary>
            Labour settings
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Activities.ResourceActivitySell.UnitsAvailableForSale">
            <summary>
            Gets the number of units available for sale
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.ResourceActivitySell.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.ResourceActivitySell.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.ResourceActivitySell.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityCollectManureAll">
            <summary>Ruminant manure collection activity</summary>
            <summary>This activity performs the collection of all manure</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityCollectManureAll.labour">
            <summary>
            Labour settings
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManureAll.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManureAll.GetResourcesNeededForActivityLocal">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManureAll.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManureAll.OnCLEMCollectManure(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManureAll.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManureAll.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityCollectManureAll.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManureAll.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityCollectManureAll.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManureAll.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityCollectManurePaddock">
            <summary>Ruminant graze activity</summary>
            <summary>This activity determines how a ruminant group will graze</summary>
            <summary>It is designed to request food via a food store arbitrator</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.labour">
            <summary>
            Labour settings
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.GrazeFoodStoreTypeName">
            <summary>
            Name of paddock or pasture to collect from (blank is yards)
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.GetResourcesNeededForActivityLocal">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.OnCLEMCollectManure(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityCollectManurePaddock.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityGrazeAll">
            <summary>Ruminant graze activity</summary>
            <summary>This activity determines how a ruminant group will graze</summary>
            <summary>It is designed to request food via a food store arbitrator</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazeAll.HoursGrazed">
            <summary>
            Number of hours grazed
            Based on 8 hour grazing days
            Could be modified to account for rain/heat walking to water etc.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityGrazeAll.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityGrazeAll.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazeAll.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityGrazePasture">
            <summary>Ruminant graze activity</summary>
            <summary>This activity determines how a ruminant group will graze</summary>
            <summary>It is designed to request food via a food store arbitrator</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using NABSA processes</updates>
        </member>
        <member name="F:Models.CLEM.Activities.RuminantActivityGrazePasture.Clock">
            <summary>
            Link to clock
            Public so children can be dynamically created after links defined
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePasture.HoursGrazed">
            <summary>
            Number of hours grazed
            Based on 8 hour grazing days
            Could be modified to account for rain/heat walking to water etc.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePasture.GrazeFoodStoreTypeName">
            <summary>
            Name of paddock or pasture to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePasture.GrazeFoodStoreModel">
            <summary>
            paddock or pasture to graze
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityGrazePasture.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityGrazePasture.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePasture.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityGrazePastureHerd">
            <summary>Ruminant grazing activity</summary>
            <summary>Specific version where pasture and breed is specified</summary>
            <summary>This activity determines how a ruminant breed will graze on a particular pasture (GrazeFoodSotreType)</summary>
        </member>
        <member name="F:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.Clock">
            <summary>
            Link to clock
            Public so children can be dynamically created after links defined
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.HoursGrazed">
            <summary>
            Number of hours grazed
            Based on 8 hour grazing days
            Could be modified to account for rain/heat walking to water etc.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.GrazeFoodStoreTypeName">
            <summary>
            Name of paddock or pasture to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.GrazeFoodStoreModel">
            <summary>
            paddock or pasture to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.RuminantTypeName">
            <summary>
            Name of ruminant group to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.RuminantTypeModel">
            <summary>
            Ruminant group to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.GrazingCompetitionLimiter">
            <summary>
            The proportion of required graze that is available determined from parent activity arbitration
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.BiomassPerHectare">
            <summary>
            The biomass of pasture per hectare at start of allocation
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.PotentialIntakePastureQualityLimiter">
            <summary>
            Potential intake limiter based on pasture quality
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.DMD">
            <summary>
            Dry matter digestibility of pasture consumed (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.N">
            <summary>
            Nitrogen of pasture consumed (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.PoolFeedLimits">
            <summary>
            Proportion of intake that can be taken from each pool
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.OnStartOfMonth(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to clear requests at start of month.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.GetResourcesRequiredForActivity">
            <summary>
            Method to get the resources required for this activity
            this method overrides the base method to allow specific resource rules
            and not remove resources immediately
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.SetupPoolsAndLimits(System.Double)">
            <summary>
            Method to set up pools from currently available graze pools and limit based upon green content herd limit parameters
            </summary>
            <param name="limit">The competition limit defined from GrazePasture parent</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrazePastureHerd.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityHerdCost">
            <summary>Ruminant herd cost </summary>
            <summary>This activity will arrange payment of a herd expense such as vet fees</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityHerdCost.Amount">
            <summary>
            Amount payable
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityHerdCost.PaymentStyle">
            <summary>
            Payment style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityHerdCost.AccountName">
            <summary>
            name of account to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityHerdCost.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityHerdCost.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityHerdCost.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.IATGrowCropLabour">
            <summary>Activity to remove the labour used for graowing a crop</summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropLabour.Clock">
            <summary>
            Get the Clock.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropLabour.MthsBeforeHarvest">
            <summary>
            Months before harvest to sow crop
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropLabour.costDate">
            <summary>
            Date to apply the cost on.
            Has to be stored as a global variable because of a race condition that occurs if user sets  MthsBeforeHarvest=0
            Then because ParentGrowCrop and children are all executing on the harvest month and 
            the ParentGrowCrop executes first and it removes the harvest from the harvest list, 
            then the chidren such as these never get the Clock.Today == harvest date (aka costdate).
            So instead we store the next harvest date (aka costdate) in this variable and don't update its value
            until after we have done the Clock.Today == harvest date (aka costdate) comparison.
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropLabour.parentGrowCrop">
            <summary>
            Parent somewhere above this model.
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.IATGrowCropLabour.grandParentCropLand">
            <summary>
            Parent above ParentGrowCrop.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.IATGrowCropLabour.labour">
            <summary>
            Labour settings
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropLabour.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropLabour.FindParentGrowCrop">
            <summary>
            Find a parent of type IATGrowCrop somewhere above this model in the simulation tree.
            </summary>
            <returns>true or false whether this found it</returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropLabour.CostDateFromHarvestDate">
            <summary>
            Get the cost date from the harvest date.
            This will happen every month in case the harvest has occured and there is a new harvest date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropLabour.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropLabour.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropLabour.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.IATGrowCropLabour.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropLabour.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.IATGrowCropLabour.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.IATGrowCropLabour.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityMilking">
            <summary>Activity to undertake milking of particular herd</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityMilking.labour">
            <summary>
            Labour settings
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.OnCLEMMilking(System.Object,System.EventArgs)">
            <summary>An event handler to call for all herd management activities</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityMilking.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityMilking.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMilking.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO">
            <summary>Ruminant predictive stocking activity using ENSO predictions</summary>
            <summary>This activity will undertake stocking and destocking based on future season predictions (La Nini or El Nino)</summary>
            <summary>It is designed to consider individuals already marked for sale and add additional individuals before transport and sale.</summary>
            <summary>It will check all paddocks that the specified herd are grazing</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.HerdName">
            <summary>
            Herd to manage for dry season pasture availability
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.AssessmentMonth">
            <summary>
            Month for assessing dry season feed requirements
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.MinimumFeedBeforeRestock">
            <summary>
            Minimum estimated feed (kg/ha) before restocking
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.SellDryCows">
            <summary>
            Allow dry cows to be sold if feed shortage
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.SellWetCows">
            <summary>
            Allow wet cows to be sold if feed shortage
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.SellSteers">
            <summary>
            Allow steers to be sold if feed shortage
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.MonthlySIOFile">
            <summary>
            File containing SOI measure from BOM http://www.bom.gov.au/climate/influences/timeline/
            Year Jan Feb Mar.....
            1876 11  0.2 -3  +ve LaNina -ve El Nino
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.GrazeFoodStoreName">
            <summary>
            Name of GrazeFoodStore (paddock) to place purchases in for grazing (leave blank for general yards)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.MeanSOIForLaNina">
            <summary>
            Minimum mean SOI for La Nina
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.MeanSOIForElNino">
            <summary>
            Minimum mean SOI (absolute) for El Nino
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.PastureToStockingChangeElNino">
            <summary>
            The relationship to convert pasture biomass to stock rate change for El Nino
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.PastureToStockingChangeLaNina">
            <summary>
            The relationship to convert pasture biomass to stock rate change for La Nina
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.foodStore">
            <summary>
            Store graze 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.OnCLEMAnimalStock(System.Object,System.EventArgs)">
            <summary>An event handler to call for all resources other than food for feeding activity</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStockingENSO.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.ENSOState">
            <summary>
            ENSO state
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ENSOState.Neutral">
            <summary>
            Neutral conditions
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ENSOState.ElNino">
            <summary>
            El Nino conditions
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ENSOState.LaNina">
            <summary>
            La Nina conditions
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityWean">
            <summary>Ruminant wean activity</summary>
            <summary>This activity will wean the herd</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityWean.WeaningAge">
            <summary>
            Weaning age (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityWean.WeaningWeight">
            <summary>
            Weaning weight (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityWean.GrazeFoodStoreName">
            <summary>
            Name of GrazeFoodStore (paddock) to place weaners (leave blank for general yards)
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.OnCLEMAnimalManage(System.Object,System.EventArgs)">
            <summary>An event handler to call for all herd management activities</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityWean.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityWean.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityWean.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.CropActivityFee">
            <summary>Ruminant herd cost </summary>
            <summary>This activity will arrange payment of a herd expense such as vet fees</summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityFee.PaymentStyle">
            <summary>
            Payment style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CropActivityFee.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CropActivityFee.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityFee">
            <summary>Ruminant herd cost </summary>
            <summary>This activity will arrange payment of a herd expense such as vet fees</summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFee.PaymentStyle">
            <summary>
            Payment style
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFee.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFee.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.TruckingSettings">
            <summary>Tracking settings for Ruminant purchases and sales</summary>
            <summary>If this model is provided within RuminantActivityBuySell, trucking costs and loading rules will occur</summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.DistanceToMarket">
            <summary>
            Distance to market
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.CostPerKmTrucking">
            <summary>
            Cost of trucking ($/km/truck)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.Number450kgPerTruck">
            <summary>
            Number of 450kg animals per truck load
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.MinimumTrucksBeforeSelling">
            <summary>
            Minimum number of truck loads before selling (0 continuous sales)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.MinimumLoadBeforeSelling">
            <summary>
            Minimum proportion of truck load before selling (0 continuous sales)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.TruckCO2Emissions">
            <summary>
            Truck CO2 emissions per km
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.TruckMethaneEmissions">
            <summary>
            Truck methane emissions per km
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.TruckingSettings.TruckNOxEmissions">
            <summary>
            Truck NOx emissions per km
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.TruckingSettings.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.TruckingSettings.ReportEmissions(System.Int32,System.Boolean)">
            <summary>
            Method to report trucking emissions.
            </summary>
            <param name="NumberOfTrucks">Number of trucks</param>
            <param name="IsSales">Determines if this is a sales or purchase shipment</param>
        </member>
        <member name="T:Models.CLEM.Activities.CLEMRuminantActivityBase">
            <summary>
             CLEM ruminant specific activity base model
             This has the ability of identify herd to be used.
            </summary> 
        </member>
        <member name="P:Models.CLEM.Activities.CLEMRuminantActivityBase.HerdFilters">
            <summary>
            List of filters that define the herd
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMRuminantActivityBase.PredictedHerdName">
            <summary>
            Herd name determined for this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMRuminantActivityBase.PredictedHerdBreed">
            <summary>
            Breed determined for this activity
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.InitialiseHerd(System.Boolean,System.Boolean)">
            <summary>
            Method to get the set herd filters
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.GetHerdFilters">
            <summary>
            Method to get the set herd filters
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.CurrentHerd(System.Boolean)">
            <summary>
            Gets the current herd from all herd filters above
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.DetermineHerdName">
            <summary>
            Determines the herd name from individuals available, filter details or resources
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.CheckHerd">
            <summary>
            Method to check single breed status of herd for activities.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.DoActivity">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.GetResourcesNeededForActivity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMRuminantActivityBase.GetResourcesNeededForinitialisation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Activities.FinanceActivityCalculateInterest">
            <summary>manage enterprise activity</summary>
            <summary>This activity undertakes the overheads of running the enterprise.</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="F:Models.CLEM.Activities.FinanceActivityCalculateInterest.financesExist">
            <summary>
            test for whether finances are included.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.OnEndOfMonth(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to make all payments when needed</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Models.CLEM.Activities.FinanceActivityCalculateInterest.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.FinanceActivityCalculateInterest.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.FinanceActivityCalculateInterest.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.OtherAnimalsActivityBreed">
            <summary>Other animals breed activity</summary>
            <summary>This activity handles breeding in other animals types</summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.AnimalType">
            <summary>
            name of other animal type
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.OffspringPerBreeder">
            <summary>
            Offspring per female breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.CostPerBreeder">
            <summary>
            Cost per female breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.BreedingAge">
            <summary>
            Breeding female age
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.UseLocalMales">
            <summary>
            Use local males for breeding
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.OtherAnimalsActivityBreed.SelectedOtherAnimalsType">
            <summary>
            The Other animal type this group points to
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.NextDueDate">
            <summary>
            Month this overhead is next due.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityBreed.labour">
            <summary>
            Labour settings
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Object validation
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.OnCLEMAnimalBreeding(System.Object,System.EventArgs)">
            <summary>An event handler to perform herd breeding </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.OtherAnimalsActivityBreed.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.OtherAnimalsActivityBreed.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityBreed.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.OtherAnimalsActivityFeed">
            <summary>Other animals feed activity</summary>
            <summary>This activity provides food to specified other animals based on a feeding style</summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityFeed.FeedTypeName">
            <summary>
            Name of Feed to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityFeed.FeedStyle">
            <summary>
            Feeding style to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityFeed.labour">
            <summary>
            Labour settings
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.OtherAnimalsActivityFeed.FeedType">
            <summary>
            Feed type
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.OtherAnimalsActivityFeed.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.OtherAnimalsActivityFeed.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.OtherAnimalsActivityFeed.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.OtherAnimalsFeedActivityTypes">
            <summary>
            Ruminant feeding styles
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.OtherAnimalsFeedActivityTypes.SpecifiedDailyAmount">
            <summary>
            Feed specified amount daily in selected months
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.OtherAnimalsFeedActivityTypes.ProportionOfWeight">
            <summary>
            Feed proportion of animal weight in selected months
            </summary>
        </member>
        <member name="T:Models.CLEM.Activities.PastureActivityManage">
            <summary>Pasture management activity</summary>
            <summary>This activity provides a pasture based on land unit, area and pasture type</summary>
            <summary>Ruminant mustering activities place individuals in the paddack after which they will graze pasture for the paddock stored in the PastureP Pools</summary>
            <version>1.0</version>
            <updates>First implementation of this activity using NABSA grazing processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.LandTypeNameToUse">
            <summary>
            Name of land type where pasture is located
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.FeedTypeName">
            <summary>
            Name of the pasture type to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.StartingAmount">
            <summary>
            Starting amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.StartingStockingRate">
            <summary>
            Starting stocking rate (Adult Equivalents/square km)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.Area">
            <summary>
            Area of pasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.LandConditionIndex">
            <summary>
            Current land condition index
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.GrassBasalArea">
            <summary>
            Grass basal area
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.Perennials">
            <summary>
            Perennials
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.AreaRequested">
            <summary>
            Area requested
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.PastureActivityManage.LinkedNativeFoodType">
            <summary>
            Feed type
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.PastureActivityManage.unitsOfArea2Ha">
            <summary>
            Conversion of simulation units of area to hectares
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to intitalise this activity just once at start of simulation</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnCLEMUpdatePasture(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to get next supply of pasture</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnCLEMCalculateEcologicalState(System.Object,System.EventArgs)">
            <summary>
            Function to calculate ecological indicators. 
            By summing the monthly stocking rates so when you do yearly ecological calculation 
            you can get average monthly stocking rate for the whole year.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnCLEMStartOfTimeStep(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to clear pools.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>
            Function to age resource pools
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.CalculateEcologicalIndicators">
            <summary>
            Method to perform calculation of all ecological indicators.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.GetPastureDataList_TodayToNextEcolCalculation">
            <summary>
            From GRASP File get all the Pasture Data from today to the next Ecological Calculation
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>A list of resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.PastureActivityManage.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.PastureActivityManage.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.PastureActivityManage.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityBreed">
            <summary>Ruminant breeding activity</summary>
            <summary>This activity provides all functionality for ruminant breeding up until natural weaning</summary>
            <summary>It will be applied to the supplied herd if males and females are located together</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityBreed.MaximumConceptionRateUncontrolled">
            <summary>
            Maximum conception rate for uncontrolled matings
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityBreed.UseAI">
            <summary>
            Use artificial insemination (no bulls required)
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.OnCLEMAnimalBreeding(System.Object,System.EventArgs)">
            <summary>An event handler to perform herd breeding </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.ConceptionRate(Models.CLEM.Resources.RuminantFemale)">
            <summary>
            Calculate conception rate for a female
            </summary>
            <param name="female">Female to calculate conception rate for</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.GetResourcesNeededForActivityLocal">
            <summary>
            Private method to determine resources required for this activity in the current month
            This method is local to this activity and not called with CLEMGetResourcesRequired event
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityBreed.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityBreed.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBreed.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityBuySell">
            <summary>Ruminant sales activity</summary>
            <summary>This activity undertakes the sale and transport of any individuals flagged for sale.</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityBuySell.BankAccountName">
            <summary>
            name of account to use
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.OnCLEMAnimalBuy(System.Object,System.EventArgs)">
            <summary>An event handler to call for animal purchases</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.OnCLEMAnimalSell(System.Object,System.EventArgs)">
            <summary>An event handler to call for animal sales</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityBuySell.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityBuySell.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityBuySell.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityFeed">
            <summary>Ruminant feed activity</summary>
            <summary>This activity provides food to specified ruminants based on a feeding style</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.FeedTypeName">
            <summary>
            Name of Feed to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.ProportionTramplingWastage">
            <summary>
            Proportion wastage through trampling (feed trough = 0)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.LabourFilterList">
            <summary>
            Labour grouping for breeding
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.FeedType">
            <summary>
            Feed type
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.FeedStyle">
            <summary>
            Feeding style to use
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityFeed.labour">
            <summary>
            Labour settings
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityFeed.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityFeed.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityFeed.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityGraze">
            <summary>Ruminant graze activity</summary>
            <summary>This activity determines how a ruminant group will graze</summary>
            <summary>It is designed to request food via a food store arbitrator</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGraze.HoursGrazed">
            <summary>
            Number of hours grazed
            Based on 8 hour grazing days
            Could be modified to account for rain/heat walking to water etc.
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGraze.PaddockName">
            <summary>
            Name of paddock or pasture to graze
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGraze.FeedType">
            <summary>
            Feed type (not used here)
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGraze.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGraze.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGraze.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGraze.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityGraze.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGraze.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityGrow">
            <summary>Ruminant growth activity</summary>
            <summary>This activity determines potential intake for the Feeding activities and feeding arbitrator for all ruminants</summary>
            <summary>This activity includes deaths</summary>
            <summary>See Breed activity for births, calf mortality etc</summary>
            <version>1.1</version>
            <updates>First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrow.EnergyGross">
            <summary>
            Gross energy content of forage (MJ/kg DM)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityGrow.OnPartialResourcesAvailableAction">
            <summary>
            Perform Activity with partial resources available
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMPotentialIntake(System.Object,System.EventArgs)">
            <summary>Function to determine all individuals potential intake and suckling intake after milk consumption from mother</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.CalculateMilkProduction(Models.CLEM.Resources.RuminantFemale)">
            <summary>
            Set the milk production of the selected female given diet drymatter digesibility
            </summary>
            <param name="ind">Female individual</param>
            <returns>energy of milk</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMAnimalWeightGain(System.Object,System.EventArgs)">
            <summary>Function to calculate growth of herd for the monthly timestep</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMCalculateManure(System.Object,System.EventArgs)">
            <summary>
            Function to calculate manure production and place in uncollected manure pools of the "manure" resource in ProductResources 
            This is called at the end of CLEMAnimalWeightGain so after intake determines and before deaths and sales.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.CalculateEnergy(Models.CLEM.Resources.Ruminant,System.Double@)">
            <summary>
            Function to calculate energy from intake and subsequent growth
            </summary>
            <param name="ind">Ruminant individual class</param>
            <param name="methaneProduced">Sets output variable to value of methane produced</param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>
            Function to age individuals and remove those that died in timestep
            This needs to be undertaken prior to herd management
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnCLEMAnimalDeath(System.Object,System.EventArgs)">
            <summary>Function to determine which animlas have died and remove from the population</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityGrow.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityGrow.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityGrow.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityManage">
            <summary>Ruminant herd management activity</summary>
            <summary>This activity will maintain a breeding herd at the desired levels of age/breeders etc</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumBreedersKept">
            <summary>
            Maximum number of breeders that can be kept
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MinimumBreedersKept">
            <summary>
            Minimum number of breeders that can be kept
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumBreederAge">
            <summary>
            Maximum breeder age (months) for culling
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumBreedersPerPurchase">
            <summary>
            Maximum number of breeders in a single purchase
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumSiresKept">
            <summary>
            Maximum number of breeding sires kept
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumBullAge">
            <summary>
            Maximum bull age (months) for culling
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.AllowSireReplacement">
            <summary>
            Allow natural herd replacement of sires
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaximumSiresPerPurchase">
            <summary>
            Maximum number of sires in a single purchase
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaleSellingAge">
            <summary>
            Male selling age (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MaleSellingWeight">
            <summary>
            Male selling weight (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.GrazeFoodStoreName">
            <summary>
            Name of GrazeFoodStore (paddock) to place purchases in for grazing (leave blank for general yards)
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.MinimumPastureBeforeRestock">
            <summary>
            Minimum pasture (kg/ha) before restocking if placed in paddock
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.SellFemalesLikeMales">
            <summary>
            Perform selling of young females the same as males
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityManage.ContinuousMaleSales">
            <summary>
            Identify males for sale every time step
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.RuminantActivityManage.foodStore">
            <summary>
            Store graze 
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.RuminantActivityManage.breedParams">
            <summary>
            Breed params for this activity
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.OnCLEMAnimalManage(System.Object,System.EventArgs)">
            <summary>An event handler to call for all herd management activities</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityManage.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityManage.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityManage.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityMuster">
            <summary>Ruminant muster activity</summary>
            <summary>This activity moves specified ruminants to a given pasture</summary>
            <version>1.0</version>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityMuster.ManagedPastureName">
            <summary>
            Name of managed pasture to muster to
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityMuster.PerformAtStartOfSimulation">
            <summary>
            Determines whether this must be performed to setup herds at the start of the simulation
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityMuster.MoveSucklings">
            <summary>
            Determines whether sucklings are automatically mustered with the mother or seperated
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMuster.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMuster.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMuster.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMuster.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityMuster.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMuster.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityMuster.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityMuster.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityPredictiveStocking">
            <summary>Ruminant predictive stocking activity</summary>
            <summary>This activity ensures the total herd size is acceptible to graze the dry season pasture</summary>
            <summary>It is designed to consider individuals already marked for sale and add additional individuals before transport and sale.</summary>
            <summary>It will check all paddocks that the specified herd are grazing</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.AssessmentMonth">
            <summary>
            Month for assessing dry season feed requirements
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.DrySeasonLength">
            <summary>
            Number of months to assess
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityPredictiveStocking.FeedLowLimit">
            <summary>
            Minimum estimated feed (kg/ha) allowed at end of period
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.OnCLEMAnimalStock(System.Object,System.EventArgs)">
            <summary>An event handler to call for changing stocking based on prediced pasture biomass</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityPredictiveStocking.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityPredictiveStocking.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityPredictiveStocking.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivitySellDryBreeders">
            <summary>Ruminant dry breeder culling activity</summary>
            <summary>This activity provides functionality for kulling dry breeders</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivitySellDryBreeders.MinimumConceptionBeforeSell">
            <summary>
            Minimum conception rate before any selling
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivitySellDryBreeders.MonthsSinceBirth">
            <summary>
            Number of months since last birth to be considered dry
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivitySellDryBreeders.ProportionToRemove">
            <summary>
            Proportion of dry breeder to sell
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivitySellDryBreeders.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivitySellDryBreeders.OnCLEMAnimalMilking(System.Object,System.EventArgs)">
            <summary>An event handler to perform herd dry breeder cull</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivitySellDryBreeders.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivitySellDryBreeders.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivitySellDryBreeders.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivitySellDryBreeders.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivitySellDryBreeders.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivitySellDryBreeders.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivitySellDryBreeders.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.RuminantActivityTrade">
            <summary>Ruminant herd management activity</summary>
            <summary>This activity will maintain a breeding herd at the desired levels of age/breeders etc</summary>
            <version>1.0</version>
            <updates>1.0 First implementation of this activity using IAT/NABSA processes</updates>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityTrade.MinMonthsKept">
            <summary>
            Months kept before sale
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.RuminantActivityTrade.TradeWeight">
            <summary>
            Weight to achieve before sale
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.OnCLEMInitialiseActivity(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.OnCLEMAnimalManage(System.Object,System.EventArgs)">
            <summary>An event handler to call for all herd management activities</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.GetResourcesNeededForActivity">
            <summary>
            Method to determine resources required for this activity in the current month
            </summary>
            <returns>List of required resource requests</returns>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.DoActivity">
            <summary>
            Method used to perform activity if it can occur as soon as resources are available.
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.GetResourcesNeededForinitialisation">
            <summary>
            Method to determine resources required for initialisation of this activity
            </summary>
            <returns></returns>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityTrade.ResourceShortfallOccurred">
            <summary>
            Resource shortfall event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.RuminantActivityTrade.ActivityPerformed">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.RuminantActivityTrade.OnActivityPerformed(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.CLEMActivityBase">
            <summary>
             CLEM Activity base model
            </summary> 
        </member>
        <member name="F:Models.CLEM.Activities.CLEMActivityBase.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.ResourceRequestList">
            <summary>
            Current list of resources requested by this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.ActivityList">
            <summary>
            Current list of activities under this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.Status">
            <summary>
            Current status of this activity
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.TimingOK">
            <summary>
            Property to check if timing of this activity is ok based on child and parent ActivityTimers in UI tree
            </summary>
            <returns>T/F</returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.SetStatusSuccess">
            <summary>
            Property to check if timing of this activity is ok based on child and parent ActivityTimers in UI tree
            </summary>
            <returns>T/F</returns>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ClearAllAllActivitiesPerformedStatus">
            <summary>
            Method to cascade calls for calling activites performed for all activities in the UI tree. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ClearActivitiesPerformedStatus">
            <summary>
            Protected method to cascade calls for activities performed for all activities in the UI tree. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ReportAllAllActivitiesPerformed">
            <summary>
            Method to cascade calls for calling activites performed for all activities in the UI tree. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ReportActivitiesPerformed">
            <summary>
            Protected method to cascade calls for activities performed for all activities in the UI tree. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesForAllActivityInitialisation">
            <summary>
            Method to cascade calls for resources for all activities in the UI tree. 
            Responds to CLEMInitialiseActivity in the Activity model holing top level list of activities
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ResourcesForAllActivityInitialisation">
            <summary>
            Protected method to cascade calls for resources for all activities in the UI tree. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesForAllActivities">
            <summary>
            Method to cascade calls for resources for all activities in the UI tree. 
            Responds to CLEMGetResourcesRequired in the Activity model holing top level list of activities
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ResourcesForAllActivities">
            <summary>
            protected method to cascade calls for resources for all activities in the UI tree. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesRequiredForInitialisation">
            <summary>
            Method to get required resources for initialisation of this activity. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ResourcesRequiredForInitialisation">
            <summary>
            Protected method to get required resources for initialisation of this activity. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesRequiredForActivity">
            <summary>
            Method to get this time steps current required resources for this activity. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.ResourcesRequiredForActivity">
            <summary>
            Protected method to get this time steps current required resources for this activity. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.TakeResources(System.Collections.Generic.List{Models.CLEM.Resources.ResourceRequest},System.Boolean)">
            <summary>
            Try to take the Resources based on Resource Request List provided.
            Returns true if it was able to take the resources it needed.
            Returns false if it was unable to take the resources it needed.
            </summary>
            <param name="ResourceRequestList"></param>
            <param name="TriggerActivityPerformed"></param>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.TriggerOnActivityPerformed">
            <summary>
            Method to trigger an Activity Performed event 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.TriggerOnActivityPerformed(Models.CLEM.Activities.ActivityStatus)">
            <summary>
            Method to trigger an Activity Performed event 
            </summary>
        </member>
        <member name="P:Models.CLEM.Activities.CLEMActivityBase.OnPartialResourcesAvailableAction">
            <summary>
            Insufficient resources available action
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesNeededForActivity">
            <summary>
            Abstract method to determine list of resources and amounts needed. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.GetResourcesNeededForinitialisation">
            <summary>
            Abstract method to determine list of resources and amounts needed for initilaisation. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.DoActivity">
            <summary>
            Method to perform activity tasks if expected as soon as resources are available
            </summary>
        </member>
        <member name="E:Models.CLEM.Activities.CLEMActivityBase.ResourceShortfallOccurred">
            <summary>
            Resource shortfall occured event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.OnShortfallOccurred(System.EventArgs)">
            <summary>
            Shortfall occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Models.CLEM.Activities.CLEMActivityBase.ActivityPerformed">
            <summary>
            Activity performed event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Activities.CLEMActivityBase.OnActivityPerformed(System.EventArgs)">
            <summary>
            Activity has occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Models.CLEM.Activities.ActivityStatus">
            <summary>
            Status of activity
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Success">
            <summary>
            Performed with all resources available
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Partial">
            <summary>
            Performed with partial resources available
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Ignored">
            <summary>
            Insufficient resources so activity ignored
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Critical">
            <summary>
            Insufficient resources so simulation stopped
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Timer">
            <summary>
            Indicates a timer occurred successfully
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.Calculation">
            <summary>
            Indicates a calculation event occurred
            </summary>
        </member>
        <member name="F:Models.CLEM.Activities.ActivityStatus.NotNeeded">
            <summary>
            Indicated activity occurred but was not needed
            </summary>
        </member>
        <member name="T:Models.CLEM.FileSQLiteGRASP">
            <summary>
             SQLite database reader for access to GRASP data for other models.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Models.CLEM.FileSQLiteGRASP.clock">
            <summary>
            A link to the clock model.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileSQLiteGRASP.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileSQLiteGRASP.SQLiteReader">
            <summary>
            APSIMx SQLite class
            </summary>
        </member>
        <member name="F:Models.CLEM.FileSQLiteGRASP.ErrorMessage">
            <summary>
            Provides an error message to display if something is wrong.
            The message is displayed in the warning label of the View.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileSQLiteGRASP.distinctStkRates">
            <summary>
            All the distinct Stocking Rates that were found in the database
            </summary>
        </member>
        <member name="M:Models.CLEM.FileSQLiteGRASP.OpenSQLiteDB">
            <summary>
            Opens the SQLite database if necessary
            </summary>
            <returns>true if open suceeded, false if the opening failed </returns>
        </member>
        <member name="M:Models.CLEM.FileSQLiteGRASP.GetCategories(System.String)">
            <summary>
            Searches the DataTable created from the GRASP File for all the distinct values for the specified ColumnName.
            </summary>
            <returns>Sorted array of unique values for the column</returns>
        </member>
        <member name="M:Models.CLEM.FileSQLiteGRASP.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate model
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.FileSQLiteGRASP.FullFileName">
            <summary>
            Gets or sets the full file name (with path). The user interface uses this. 
            Must be a property so that the Prsenter can use a  Commands.ChangeProperty() on it.
            ChangeProperty does not work on fields.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileSQLiteGRASP.GetYearsInFile">
            <summary>
            Gets the first year in the SQLite File
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileSQLiteGRASP.GetTable(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileSQLiteGRASP.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.FileSQLiteGRASP.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.FileSQLiteGRASP.FindClosestStkRateCategory(System.Double)">
            <summary>
            Finds the closest Stocking Rate Category in the GRASP file for a given Stocking Rate.
            The GRASP file does not have every stocking rate. 
            Each GRASP file has its own set of stocking rate value categories
            Need to find the closest the stocking rate category in the GRASP file for this stocking rate.
            It will find the category with the next largest value to the actual stocking rate.
            So if the stocking rate is 0 the category with the next largest value will normally be 1
            </summary>
            <param name="StkRate"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileSQLiteGRASP.GetIntervalsPastureData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Int32)">
            <summary>
            Queries the the GRASP SQLite database using the specified parameters.
            nb. Ignore ForageNo , it is a legacy column in the GRASP file that is not used anymore.
            </summary>
            <param name="Region"></param>
            <param name="Soil"></param>
            <param name="GrassBA"></param>
            <param name="LandCon"></param>
            <param name="StkRate"></param>
            <param name="EcolCalculationDate"></param>
            <param name="EcolCalculationInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileSQLiteGRASP.CheckAllMonthsWereRetrieved(System.Collections.Generic.List{Models.CLEM.PastureDataType},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Do simple error checking to make sure the data retrieved is usable
            </summary>
            <param name="Filtered"></param>
            <param name="StartDate"></param>
            <param name="EndDate"></param>
            <param name="Region"></param>
            <param name="Soil"></param>
            <param name="GrassBA"></param>
            <param name="LandCon"></param>
            <param name="StkRate"></param>
        </member>
        <member name="T:Models.CLEM.Groupings.RuminantDestockGroup">
            <summary>
             Contains a group of filters to identify individual ruminants for destocking activities
            </summary> 
        </member>
        <member name="T:Models.CLEM.Groupings.LabourFilterGroupSpecified">
            <summary>
             Contains a group of filters to identify individul ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.LabourFilterGroupSpecified.LabourPerUnit">
            <summary>
            Days labour required per unit or fixed (days)
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.LabourFilterGroupSpecified.UnitSize">
            <summary>
            Size of unit
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.LabourFilterGroupSpecified.UnitType">
            <summary>
            Labour unit type
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.LabourFilterGroupUnit">
            <summary>
             Contains a group of filters to identify individul ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.LabourFilterGroupUnit.LabourPerUnit">
            <summary>
            Days labour required per unit or fixed (days)
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.LabourFilterGroupUnit.UnitType">
            <summary>
            Labour unit type
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.RuminantFilterGroup">
            <summary>
            Contains a group of filters to identify individual ruminants
            </summary> 
        </member>
        <member name="T:Models.CLEM.Groupings.LabourFilterGroup">
            <summary>
             Contains a group of filters to identify individul ruminants
            </summary> 
        </member>
        <member name="T:Models.CLEM.Groupings.FilterOperators">
            <summary>
            Filter operators
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.FilterOperators.Equal">
            <summary>
            Equals
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.FilterOperators.NotEqual">
            <summary>
            Not equal to
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.FilterOperators.LessThan">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.FilterOperators.LessThanOrEqual">
            <summary>
            Less than or equal to
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.FilterOperators.GreaterThan">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.FilterOperators.GreaterThanOrEqual">
            <summary>
            Greater than or equal to
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.FilterOperatorsExtensions">
            <summary>
            Extension methods for RuminantFilterOperators enum
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.FilterOperatorsExtensions.ToSymbol(Models.CLEM.Groupings.FilterOperators)">
            <summary>
            Method to return the symbol value of the enum
            </summary>
            <param name="me"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Groupings.FodderLimitsFilterGroup">
            <summary>
             Contains a group of filters to identify individul ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.FodderLimitsFilterGroup.PoolValues">
            <summary>
            Monthly values to supply selected individuals
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.FodderLimitsFilterGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.FodderLimitsFilterGroup.StrictLimits">
            <summary>
            Are set limits strict, or can individual continue eating if food available? 
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.LabourFilter">
            <summary>
             Individual filter term for ruminant group of filters to identify individul ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.LabourFilter.Parameter">
            <summary>
            Name of parameter to filter by
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.LabourFilter.Operator">
            <summary>
            Name of parameter to filter by
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.LabourFilter.Value">
            <summary>
            Value to check for filter
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.LabourFilterParameters">
            <summary>
            Ruminant filter parameters
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.LabourFilterParameters.Name">
            <summary>
            Name of individual
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.LabourFilterParameters.Gender">
            <summary>
            Gender of individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.LabourFilterParameters.Age">
            <summary>
            Age (months) of individuals
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.LabourFilterGroupDefine">
            <summary>
             Contains a group of filters to identify individul ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.LabourFilterGroupDefine.DaysPerMonth">
            <summary>
            Days per month selected individuals available
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.LabourFilterGroupDefine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.OtherAnimalsFilter">
            <summary>
             Individual filter term for ruminant group of filters to identify individul ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.OtherAnimalsFilter.Parameter">
            <summary>
            Name of parameter to filter by
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.OtherAnimalsFilter.Operator">
            <summary>
            Name of parameter to filter by
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.OtherAnimalsFilter.Value">
            <summary>
            Value to check for filter
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.OtherAnimalsFilterParameters">
            <summary>
            Ruminant filter parameters
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.OtherAnimalsFilterParameters.Gender">
            <summary>
            Gender of individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.OtherAnimalsFilterParameters.Age">
            <summary>
            Age (months) of individuals
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.OtherAnimalsFilterGroup">
            <summary>
             Contains a group of filters to identify individual other animals
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.OtherAnimalsFilterGroup.MonthlyValues">
            <summary>
            Daily amount to supply selected individuals each month
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.OtherAnimalsFilterGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.OtherAnimalsFilterGroup.AnimalType">
            <summary>
            name of other animal type
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.OtherAnimalsFilterGroup.SelectedOtherAnimalsType">
            <summary>
            The Other animal type this group points to
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.OtherAnimalsFilterGroup.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.CLEM.Groupings.RuminantFilter">
            <summary>
             Individual filter term for ruminant group of filters to identify individul ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.RuminantFilter.Parameter">
            <summary>
            Name of parameter to filter by
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.RuminantFilter.Operator">
            <summary>
            Name of parameter to filter by
            </summary>
        </member>
        <member name="P:Models.CLEM.Groupings.RuminantFilter.Value">
            <summary>
            Value to check for filter
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.RuminantFilterParameters">
            <summary>
            Ruminant filter parameters
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.Breed">
            <summary>
            Breed of ruminant
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.HerdName">
            <summary>
            Herd individuals belong to
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.Gender">
            <summary>
            Gender of individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.Age">
            <summary>
            Age (months) of individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.ID">
            <summary>
            ID of individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.Weight">
            <summary>
            Weight of individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.ProportionOfHighWeight">
            <summary>
            Weight as proportion of High weight achieved
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.ProportionOfSRW">
            <summary>
            Weight as proportion of Standard Reference Weight
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.Location">
            <summary>
            Current grazing location
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.Weaned">
            <summary>
            Weaned status
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.IsLactating">
            <summary>
            Is female lactating
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.IsPregnant">
            <summary>
            Is female pregnant
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.Draught">
            <summary>
            Is male draught individual
            </summary>
        </member>
        <member name="F:Models.CLEM.Groupings.RuminantFilterParameters.BreedingSire">
            <summary>
            Is male breeding sire
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.RuminantFeedGroup">
            <summary>
             Contains a group of filters to identify individual ruminants
            </summary> 
        </member>
        <member name="P:Models.CLEM.Groupings.RuminantFeedGroup.MonthlyValues">
            <summary>
            Daily value to supply for each month
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.RuminantFeedGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Models.CLEM.Groupings.ListFilterExtensions">
            <summary>
            Herd list extensions
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.ListFilterExtensions.Filter(System.Collections.Generic.IEnumerable{Models.CLEM.Resources.LabourType},Models.Core.Model)">
            <summary>
            Filter extensions for labour
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.ListFilterExtensions.Filter(System.Collections.Generic.IEnumerable{Models.CLEM.Resources.Ruminant},Models.Core.Model)">
            <summary>
            Filter extensions for herd list
            </summary>
        </member>
        <member name="M:Models.CLEM.Groupings.ListFilterExtensions.Filter(System.Collections.Generic.IEnumerable{Models.CLEM.Resources.OtherAnimalsTypeCohort},Models.Core.Model)">
            <summary>
            Filter extensions for other animals cohort list
            </summary>
        </member>
        <member name="T:Models.CLEM.IActivityPerformedNotifier">
            <summary>
            Interface for Activities able to report performed event
            </summary>
        </member>
        <member name="E:Models.CLEM.IActivityPerformedNotifier.ActivityPerformed">
            <summary>
            Activity performed event handler
            </summary>
        </member>
        <member name="T:Models.CLEM.IFileGRASP">
            <summary>
            GRASP reader interface
            </summary>
        </member>
        <member name="M:Models.CLEM.IFileGRASP.GetIntervalsPastureData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Int32)">
            <summary>
            Queries the the GRASP SQLite database using the specified parameters.
            nb. Ignore ForageNo , it is a legacy column in the GRASP file that is not used anymore.
            </summary>
            <param name="Region"></param>
            <param name="Soil"></param>
            <param name="GrassBA"></param>
            <param name="LandCon"></param>
            <param name="StkRate"></param>
            <param name="EcolCalculationDate"></param>
            <param name="EcolCalculationInterval"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportActivitiesPerformed">
            <summary>
            A report class for writing output to the data store.
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportActivitiesPerformed.columns">
            <summary>The columns to write to the data store.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportActivitiesPerformed.columnNames">
            <summary>An array of column names to write to storage.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportActivitiesPerformed.columnUnits">
            <summary>An array of columns units to write to storage.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportActivitiesPerformed.simulation">
            <summary>Link to a simulation</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportActivitiesPerformed.clock">
            <summary>Link to a clock model.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportActivitiesPerformed.storage">
            <summary>Link to a storage service.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportActivitiesPerformed.locator">
            <summary>Link to a locator service.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportActivitiesPerformed.events">
            <summary>Link to an event service.</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.DoOutput">
            <summary>A method that can be called by other models to perform a line of output.</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.WriteAllTables(Models.Core.IStorageReader,System.String)">
            <summary>Create a text report from tables in this data store.</summary>
            <param name="storage">The data store.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.SortColumnsOfDataTable(System.Data.DataTable)">
            <summary>Sort the columns alphabetically</summary>
            <param name="table">The table to sort</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.DoOutputEvent(System.Object,System.EventArgs)">
            <summary>Called when one of our 'EventNames' events are invoked</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.FindVariableMembers">
            <summary>
            Fill the Members list with VariableMember objects for each variable.
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportActivitiesPerformed.AddExperimentFactorLevels">
            <summary>Add the experiment factor levels as columns.</summary>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportPasturePoolDetails">
            <summary>
            A report class for writing output to the data store.
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportPasturePoolDetails.columns">
            <summary>The columns to write to the data store.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportPasturePoolDetails.columnNames">
            <summary>An array of column names to write to storage.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportPasturePoolDetails.columnUnits">
            <summary>An array of columns units to write to storage.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportPasturePoolDetails.simulation">
            <summary>Link to a simulation</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportPasturePoolDetails.clock">
            <summary>Link to a clock model.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportPasturePoolDetails.storage">
            <summary>Link to a storage service.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportPasturePoolDetails.locator">
            <summary>Link to a locator service.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportPasturePoolDetails.events">
            <summary>Link to an event service.</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPasturePoolDetails.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPasturePoolDetails.DoOutput">
            <summary>A method that can be called by other models to perform a line of output.</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPasturePoolDetails.WriteAllTables(Models.Core.IStorageReader,System.String)">
            <summary>Create a text report from tables in this data store.</summary>
            <param name="storage">The data store.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPasturePoolDetails.SortColumnsOfDataTable(System.Data.DataTable)">
            <summary>Sort the columns alphabetically</summary>
            <param name="table">The table to sort</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPasturePoolDetails.DoOutputEvent(System.Object,System.EventArgs)">
            <summary>Called when one of our 'EventNames' events are invoked</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPasturePoolDetails.FindVariableMembers">
            <summary>
            Fill the Members list with VariableMember objects for each variable.
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportPasturePoolDetails.AddExperimentFactorLevels">
            <summary>Add the experiment factor levels as columns.</summary>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportResourceBalances">
            <summary>
            A report class for writing output to the data store.
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceBalances.columns">
            <summary>The columns to write to the data store.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceBalances.columnNames">
            <summary>An array of column names to write to storage.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceBalances.columnUnits">
            <summary>An array of columns units to write to storage.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceBalances.simulation">
            <summary>Link to a simulation</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceBalances.clock">
            <summary>Link to a clock model.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceBalances.storage">
            <summary>Link to a storage service.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceBalances.locator">
            <summary>Link to a locator service.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceBalances.events">
            <summary>Link to an event service.</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceBalances.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceBalances.DoOutput">
            <summary>A method that can be called by other models to perform a line of output.</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceBalances.WriteAllTables(Models.Core.IStorageReader,System.String)">
            <summary>Create a text report from tables in this data store.</summary>
            <param name="storage">The data store.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceBalances.SortColumnsOfDataTable(System.Data.DataTable)">
            <summary>Sort the columns alphabetically</summary>
            <param name="table">The table to sort</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceBalances.DoOutputEvent(System.Object,System.EventArgs)">
            <summary>Called when one of our 'EventNames' events are invoked</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceBalances.FindVariableMembers">
            <summary>
            Fill the Members list with VariableMember objects for each variable.
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceBalances.AddExperimentFactorLevels">
            <summary>Add the experiment factor levels as columns.</summary>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportResourceShortfalls">
            <summary>
            A report class for writing output to the data store.
            </summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceShortfalls.columns">
            <summary>The columns to write to the data store.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceShortfalls.columnNames">
            <summary>An array of column names to write to storage.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceShortfalls.columnUnits">
            <summary>An array of columns units to write to storage.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceShortfalls.simulation">
            <summary>Link to a simulation</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceShortfalls.clock">
            <summary>Link to a clock model.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceShortfalls.storage">
            <summary>Link to a storage service.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceShortfalls.locator">
            <summary>Link to a locator service.</summary>
        </member>
        <member name="F:Models.CLEM.Reporting.ReportResourceShortfalls.events">
            <summary>Link to an event service.</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceShortfalls.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceShortfalls.DoOutput">
            <summary>A method that can be called by other models to perform a line of output.</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceShortfalls.WriteAllTables(Models.Core.IStorageReader,System.String)">
            <summary>Create a text report from tables in this data store.</summary>
            <param name="storage">The data store.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceShortfalls.SortColumnsOfDataTable(System.Data.DataTable)">
            <summary>Sort the columns alphabetically</summary>
            <param name="table">The table to sort</param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceShortfalls.DoOutputEvent(System.Object,System.EventArgs)">
            <summary>Called when one of our 'EventNames' events are invoked</summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceShortfalls.FindVariableMembers">
            <summary>
            Fill the Members list with VariableMember objects for each variable.
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportResourceShortfalls.AddExperimentFactorLevels">
            <summary>Add the experiment factor levels as columns.</summary>
        </member>
        <member name="T:Models.CLEM.Reporting.EcolIndicatorsEventArgs">
            <summary>
            Class for reporting transaction details in EcologicalIndicatorsCalculated Events
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.EcolIndicatorsEventArgs.Indicators">
            <summary>
            Ecological indicators details
            </summary>
        </member>
        <member name="T:Models.CLEM.Reporting.ReportRuminantHerd">
            <summary>Ruminant reporting</summary>
            <summary>This activity writes individual ruminant details for reporting</summary>
        </member>
        <member name="E:Models.CLEM.Reporting.ReportRuminantHerd.OnReportItemGenerated">
            <summary>
            Report item was generated event handler
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.ReportRuminantHerd.ReportDetails">
            <summary>
            The details of the summary group for reporting
            </summary>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantHerd.ReportItemGenerated(Models.CLEM.Reporting.RuminantReportItemEventArgs)">
            <summary>
            Report item generated and ready for reporting 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Reporting.ReportRuminantHerd.OnCLEMHerdSummary(System.Object,System.EventArgs)">
            <summary>
            Function to report herd individuals each month
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.CLEM.Reporting.RuminantReportItemEventArgs">
            <summary>
            New ruminant report item event args
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantReportItemEventArgs.RumObj">
            <summary>
            Individual ruminant to report as Female
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantReportItemEventArgs.Individual">
            <summary>
            Individual ruminant to report
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantReportItemEventArgs.Female">
            <summary>
            Individual ruminant to report as Female
            </summary>
        </member>
        <member name="P:Models.CLEM.Reporting.RuminantReportItemEventArgs.Male">
            <summary>
            Individual ruminant to report as Male
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.Equipment">
            <summary>
             Parent model of equipment stores.
            </summary> 
        </member>
        <member name="M:Models.CLEM.Resources.Equipment.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Equipment.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Equipment.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.Equipment.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.EquipmentType">
            <summary>
             Store for equipment type
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.StartingAmount">
            <summary>
            Starting amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.ServiceInterval">
            <summary>
            Service interval
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.Odometer">
            <summary>
            Odometer
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.Initialise">
            <summary>
            Initialise resource type
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.EquipmentType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.EquipmentType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.Add(System.Object,System.String,System.String)">
            <summary>
            Add money to account
            </summary>
            <param name="ResourceAmount"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.Remove(System.Object)">
            <summary>
            Remove money (object) from account
            </summary>
            <param name="RemoveRequest"></param>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.EquipmentType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="NewAmount"></param>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantConceptionAdvanced">
            <summary>
            Advanced ruminant conception for first conception less than 12 months, 12-24 months, 2nd calf and 3+ calf
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionAdvanced.ConceptionRateCoefficent">
            <summary>
            Conception rate coefficient of breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionAdvanced.ConceptionRateIntercept">
            <summary>
            Conception rate intercept of breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantConceptionAdvanced.ConceptionRateAsymptote">
            <summary>
            Conception rate assymtote of breeder
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.WaterType">
            <summary>
             Store for water type
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.WaterType.StartingAmount">
            <summary>
            Starting amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.WaterType.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.Initialise">
            <summary>
            Initialise resource type
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.WaterType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.WaterType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.Add(System.Object,System.String,System.String)">
            <summary>
            Add money to account
            </summary>
            <param name="ResourceAmount"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.Remove(System.Object)">
            <summary>
            Remove money (object) from account
            </summary>
            <param name="RemoveRequest"></param>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.WaterType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="NewAmount"></param>
        </member>
        <member name="T:Models.CLEM.Resources.WaterStore">
            <summary>
             Parent model of water stores.
             e.g. tap, bore, tank, dam
            </summary> 
        </member>
        <member name="M:Models.CLEM.Resources.WaterStore.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.WaterStore.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.WaterStore.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.WaterStore.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.AnimalFoodStore">
            <summary>
             Store for all the food designated for animals to eat (eg. Forages and Supplements)
            </summary> 
        </member>
        <member name="F:Models.CLEM.Resources.AnimalFoodStore.Items">
            <summary>
            List of all the Food Types in this Resource Group.
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStore.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStore.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStore.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.AnimalFoodStore.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.AnimalFoodStoreType">
            <summary>
            This stores the initialisation parameters for a fodder type.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.DryMatter">
            <summary>
            Dry Matter (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.DMD">
            <summary>
            Dry Matter Digestibility (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.Nitrogen">
            <summary>
            Nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.CurrentStoreNitrogen">
            <summary>
            Current store nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.StartingAmount">
            <summary>
            Starting Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.Amount">
            <summary>
            Amount currently available (kg dry)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.Initialise">
            <summary>
            Initialise the current state to the starting amount of animal food
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.Add(System.Object,System.String,System.String)">
            <summary>
            Add to food store
            </summary>
            <param name="ResourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="ActivityName">Name of activity adding resource</param>
            <param name="Reason">Name of individual adding resource</param>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from animal food store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.Set(System.Double)">
            <summary>
            Set amount of animal food available
            </summary>
            <param name="NewValue">New value to set food store to</param>
        </member>
        <member name="E:Models.CLEM.Resources.AnimalFoodStoreType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.AnimalFoodStoreType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalFoodStoreType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.EcologicalIndicators">
            <summary>
            A store of all ecological indicators for a given pasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.ResourceType">
            <summary>
            Name of the resource holding these details
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.LandConditionIndex">
            <summary>
            Land condition index
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.GrassBasalArea">
            <summary>
            Grass basla area
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.StockingRate">
            <summary>
            Average monthly stocking rate (Adult Equivalents/square km)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.EcologicalIndicators.Utilisation">
            <summary>
            Utilisation percentage
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.GreenhouseGases">
            <summary>
             Parent model of emission stores.
            </summary> 
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGases.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGases.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGases.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.GreenhouseGases.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.GreenhouseGasesType">
            <summary>
             Store for emission type
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.GreenhouseGasesType.StartingAmount">
            <summary>
            Starting amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GreenhouseGasesType.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GreenhouseGasesType.GlobalWarmingPotential">
            <summary>
            Global warming potential
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GreenhouseGasesType.CO2Equivalents">
            <summary>
            CO2 equivalents
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.Initialise">
            <summary>
            Initialise resource type
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.GreenhouseGasesType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.GreenhouseGasesType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.Add(System.Object,System.String,System.String)">
            <summary>
            Add money to account
            </summary>
            <param name="ResourceAmount"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.Remove(System.Object)">
            <summary>
            Remove money (object) from account
            </summary>
            <param name="RemoveRequest"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GreenhouseGasesType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="NewAmount"></param>
        </member>
        <member name="T:Models.CLEM.Resources.Finance">
            <summary>
             Parent model of finance models.
            </summary> 
        </member>
        <member name="M:Models.CLEM.Resources.Finance.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Finance.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Finance.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.Finance.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.FinanceType">
            <summary>
             Store for bank account
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.OpeningBalance">
            <summary>
            Opening balance
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.EnforceWithdrawalLimit">
            <summary>
            Enforce withdrawal limit
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.WithdrawalLimit">
            <summary>
            The amount this account can be withdrawn to (-ve)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.InterestRateCharged">
            <summary>
            Interest rate (%) charged on negative balance
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.InterestRatePaid">
            <summary>
            Interest rate (%) paid on positive balance
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.FundsAvailable">
            <summary>
            Current funds available
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.Balance">
            <summary>
            Current balance
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.Initialise">
            <summary>
            Initialise resource type
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.FinanceType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.FinanceType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.Add(System.Object,System.String,System.String)">
            <summary>
            Add money to account
            </summary>
            <param name="ResourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.Remove(System.Object)">
            <summary>
            Remove money (object) from account
            </summary>
            <param name="RemoveRequest"></param>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.FinanceType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="NewAmount"></param>
        </member>
        <member name="T:Models.CLEM.Resources.GrazeFoodStore">
            <summary>
             Store for all the biomass growing in the fields (pasture, crop residue etc)
             This acts like an AnimalFoodStore but in reality the food is in a field
            </summary> 
        </member>
        <member name="F:Models.CLEM.Resources.GrazeFoodStore.Items">
            <summary>
            Current state of this resource.
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStore.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStore.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStore.OnEcologicalIndicatorsCalculated(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.GrazeFoodStore.EcologicalIndicatorsCalculated">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStore.LastEcologicalIndicators">
            <summary>
            Last ecological indicators received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStore.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.GrazeFoodStore.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.GrazeFoodStorePool">
            <summary>
            A food pool of given age
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.DryMatter">
            <summary>
            Dry Matter (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.DMD">
            <summary>
            Dry Matter Digestibility (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Nitrogen">
            <summary>
            Nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Amount">
            <summary>
            Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Age">
            <summary>
            Age of pool in months
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Limit">
            <summary>
            Current pool grazing limit based on ruminant eating pool
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.StartingAmount">
            <summary>
            Amount to set at start (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Detached">
            <summary>
            Amount detached in this time step (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Consumed">
            <summary>
            Amount consumed in this time step (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStorePool.Growth">
            <summary>
            Amount detached in this time step (kg)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Reset">
            <summary>
            Reset timestep stores
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Add(System.Object,System.String,System.String)">
            <summary>
            Add to Resource method.
            This style is not supported in GrazeFoodStoreType
            </summary>
            <param name="ResourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Add(Models.CLEM.Resources.GrazeFoodStorePool)">
            <summary>
            Add to Resource method.
            This style is used when a pool needs to be added to the current pool
            This occurs when no detachment and decay (values of zero) are included in the GrazeFoodStore parameters
            </summary>
            <param name="pool">GrazeFoodStorePool to add to this pool</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Remove(System.Double,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="RemoveAmount"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="RemoveRequest"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="NewAmount"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStorePool.Initialise">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.GrazeFoodStoreType">
            <summary>
            This stores the parameters for a GrazeFoodType and holds values in the store
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.GrazeFoodStoreType.Pools">
            <summary>
            List of pools available
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.NToDMDCoefficient">
            <summary>
            Coefficient to convert initial N% to DMD%
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.NToDMDIntercept">
            <summary>
            Intercept to convert initial N% to DMD%
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.NToDMDCrudeProteinDenominator">
            <summary>
            Crude protein denominator to convert initial N% to DMD%
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.GreenNitrogen">
            <summary>
            Nitrogen of new growth (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.DecayNitrogen">
            <summary>
            Proportion Nitrogen loss each month from pools
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.MinimumNitrogen">
            <summary>
            Minimum Nitrogen %
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.DecayDMD">
            <summary>
            Proportion Dry Matter Digestibility loss each month from pools
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.MinimumDMD">
            <summary>
            Minimum Dry Matter Digestibility
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.DetachRate">
            <summary>
            Monthly detachment rate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.CarryoverDetachRate">
            <summary>
            Detachment rate of 12 month or older plants
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.IntakeTropicalQualityCoefficient">
            <summary>
            Coefficient to adjust intake for tropical herbage quality
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.IntakeQualityCoefficient">
            <summary>
            Coefficient to adjust intake for herbage quality
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.Area">
            <summary>
            The area provided for this pasture to grow on
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.kgPerHa">
            <summary>
            The biomass per hectare of parture available
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.PercentUtilisation">
            <summary>
            Percent utilisation
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.DMD">
            <summary>
            Calculated total pasture (all pools) Dry Matter Digestibility (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.PastureDecays">
            <summary>
            DecayOfPasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.Amount">
            <summary>
            Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.TonnesPerHectare">
            <summary>
            Amount (tonnes per ha)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.GetValueByPoolAge(System.Int32,System.String)">
            <summary>
            Get a property of pools by pool age
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.TonnesPerHectareStartOfTimeStep">
            <summary>
            Amount (tonnes per ha)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Initialise">
            <summary>
            Initialise the current state to the starting amount of fodder
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.ONCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>Clear data stores for utilisation at end of ecological indicators calculation month</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.ONCLEMPastureReady(System.Object,System.EventArgs)">
            <summary>Store amount of pasture available for everyone at the start of the step (kg per hectare)</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Add(System.Object,System.String,System.String)">
            <summary>
            Graze food add method.
            This style is not supported in GrazeFoodStoreType
            </summary>
            <param name="ResourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Remove(System.Double,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="RemoveAmount"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            
            </summary>
            <param name="Request"></param>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.Set(System.Double)">
            <summary>
            
            </summary>
            <param name="NewAmount"></param>
        </member>
        <member name="E:Models.CLEM.Resources.GrazeFoodStoreType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.GrazeFoodStoreType.EcologicalIndicatorsCalculated">
            <summary>
            Ecological indicators have been calculated
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.GrazeFoodStoreType.OnEcologicalIndicatorsCalculated(System.EventArgs)">
            <summary>
            Ecological indicators calculated 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.GrazeFoodStoreType.CurrentEcologicalIndicators">
            <summary>
            Ecological indicators of this pasture
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.HumanFoodStore">
            <summary>
             Store for all the food designated for Household to eat (eg. Grain, Tree Crops (nuts) etc.)
            </summary> 
        </member>
        <member name="F:Models.CLEM.Resources.HumanFoodStore.Items">
            <summary>
            Current state of this resource.
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStore.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStore.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStore.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.HumanFoodStore.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.HumanFoodStoreType">
            <summary>
            This stores the initialisation parameters for a Home Food Store type.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.DryMatter">
            <summary>
            Dry Matter (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.DMD">
            <summary>
            Dry Matter Digestibility (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.Nitrogen">
            <summary>
            Nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.CurrentStoreNitrogen">
            <summary>
            Current store nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.StartingAge">
            <summary>
            Starting Age of the Fodder (Months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.StartingAmount">
            <summary>
            Starting Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.Age">
            <summary>
            Age of this Human Food (Months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.Amount">
            <summary>
            Amount (kg)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.Initialise">
            <summary>
            Initialise the current state to the starting amount of fodder
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.Add(System.Object,System.String,System.String)">
            <summary>
            Add to food store
            </summary>
            <param name="ResourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen in a Res) of food being added</param>
            <param name="ActivityName">Name of activity adding resource</param>
            <param name="Reason">Name of individual radding resource</param>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from human food store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.Remove(System.Object)">
            <summary>
            Remove Food
            </summary>
            <param name="RemoveRequest">A feed request object with required information</param>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.Set(System.Double)">
            <summary>
            Set amount of animal food available
            </summary>
            <param name="NewValue">New value to set food store to</param>
        </member>
        <member name="E:Models.CLEM.Resources.HumanFoodStoreType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.HumanFoodStoreType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.HumanFoodStoreType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.OtherAnimals">
            <summary>
             Parent model of Ruminant Types.
            </summary> 
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimals.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimals.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimals.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.OtherAnimals.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.OtherAnimalsType">
            <summary>
             Store for bank account
            </summary> 
        </member>
        <member name="F:Models.CLEM.Resources.OtherAnimalsType.Cohorts">
            <summary>
            Current cohorts of this Other Animal Type.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.LastCohortChanged">
            <summary>
            The last group of individuals to be added or removed (for reporting)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.AgeWhenAdult">
            <summary>
            Age when individuals become adults for feeding and breeding rates
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.MaxAge">
            <summary>
            Age when individuals die
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.Initialise">
            <summary>
            Initialise resource type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.OtherAnimalsType.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.Add(System.Object,System.String,System.String)">
            <summary>
            Add individuals to type based on cohort
            </summary>
            <param name="AddIndividuals"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.Remove(System.Object)">
            <summary>
            Remove individuals from type based on cohort
            </summary>
            <param name="RemoveRequest"></param>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.Remove(System.Object,System.String,System.String)">
            <summary>
            Remove individuals from type based on cohort
            </summary>
            <param name="RemoveIndividuals"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.OtherAnimalsType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="NewAmount"></param>
        </member>
        <member name="T:Models.CLEM.Resources.OtherAnimalsTypeCohort">
            <summary>
            This stores the initialisation parameters for a Cohort of a specific Other Animal Type.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.Gender">
            <summary>
            Gender
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.Age">
            <summary>
            Age (Months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.Number">
            <summary>
            Starting Number
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.Weight">
            <summary>
            Starting Weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.StartingWeightSD">
            <summary>
            Standard deviation of starting weight. Use 0 to use starting weight only
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.SaleFlag">
            <summary>
            Flag to identify individual ready for sale
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.GenderAsString">
            <summary>
            Gender as string for reports
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.OtherAnimalsTypeCohort.SaleFlagAsString">
            <summary>
            SaleFlag as string for reports
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ProductStoreType">
            <summary>
             Store for emission type
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreType.StartingAmount">
            <summary>
            Starting amount
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreType.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.Initialise">
            <summary>
            Initialise resource type
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.ProductStoreType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.Add(System.Object,System.String,System.String)">
            <summary>
            Add money to account
            </summary>
            <param name="ResourceAmount"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.Remove(System.Object)">
            <summary>
            Remove money (object) from account
            </summary>
            <param name="RemoveRequest"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreType.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="NewAmount"></param>
        </member>
        <member name="T:Models.CLEM.Resources.ProductStore">
            <summary>
             Parent model of products stores.
             e.g. manure, cotton, wool
            </summary> 
        </member>
        <member name="M:Models.CLEM.Resources.ProductStore.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStore.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStore.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.ProductStore.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ProductStoreTypeManure">
            <summary>
             Store for manure
            </summary> 
        </member>
        <member name="F:Models.CLEM.Resources.ProductStoreTypeManure.UncollectedStores">
            <summary>
            List of all uncollected manure stores
            These present manure in the field and yards
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.DecayRate">
            <summary>
            Biomass decay rate each time step
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.MoistureDecayRate">
            <summary>
            Moisture decay rate each time step
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.ProportionMoistureFresh">
            <summary>
            Proportion moisture of fresh manure
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.MaximumAge">
            <summary>
            Maximum age manure lasts
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.AddUncollectedManure(System.String,System.Double)">
            <summary>
            Method to add uncollected manure to stores
            </summary>
            <param name="storeName">Name of store to add manure to</param>
            <param name="amount">Amount (dry weight) of manure to add</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.OnCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>
            Function to age manure pools
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Collect(System.String,System.Double,System.String)">
            <summary>
            Method to collect manure from uncollected manure stores
            Manure is collected from freshest to oldest
            </summary>
            <param name="storeName">Name of store to add manure to</param>
            <param name="resourceLimiter">Reduction due to limited resources</param>
            <param name="activityName">Name of activity performing collection</param>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.Amount">
            <summary>
            Current amount of this resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Initialise">
            <summary>
            Initialise resource type
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.ProductStoreTypeManure.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.ProductStoreTypeManure.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Add(System.Object,System.String,System.String)">
            <summary>
            Add money to account
            </summary>
            <param name="ResourceAmount"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Remove(System.Object)">
            <summary>
            Remove money (object) from account
            </summary>
            <param name="RemoveRequest"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ProductStoreTypeManure.Set(System.Double)">
            <summary>
            Set the amount in an account.
            </summary>
            <param name="NewAmount"></param>
        </member>
        <member name="T:Models.CLEM.Resources.ManureStoreUncollected">
            <summary>
            Individual store of uncollected manure
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ManureStoreUncollected.Name">
            <summary>
            Name of store (eg yards, paddock name etc)
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.ManureStoreUncollected.Pools">
            <summary>
            Pools of manure in this store
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ManurePool">
            <summary>
            Individual uncollected manure pool to track age and decomposition
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ManurePool.Age">
            <summary>
            Age of pool (in timesteps)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ManurePool.Amount">
            <summary>
            Amount (dry weight) in pool
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ManurePool.ProportionMoisture">
            <summary>
            Proportion water in pool
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ManurePool.WetWeight(System.Double,System.Double)">
            <summary>
            Acluclate wet weight of pool
            </summary>
            <param name="MoistureDecayRate"></param>
            <param name="ProportionMoistureFresh"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Resources.ResourceBaseWithTransactions">
            <summary>
             Base resource model to implement transaction tracking
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceBaseWithTransactions.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.ResourceBaseWithTransactions.TransactionOccurred">
            <summary>
            Resource transaction occured Event handler
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ResourceBaseWithTransactions.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Resources.ResourceBaseWithTransactions.GetByName(System.String)">
            <summary>
            Get resource by name
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourceBaseWithTransactions.GetFirst">
            <summary>
            Get main/first account
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Resources.ResourceRequest">
            <summary>
             Resource request for Resource from a ResourceType
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Resource">
            <summary>
             Link to resource being requested 
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.ResourceType">
            <summary>
             Link to resource being requested 
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.ResourceTypeName">
            <summary>
             Name of resource type being requested 
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.ActivityModel">
            <summary>
             Name of activity requesting resource
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.ActivityID">
            <summary>
             Unique identifier for instance of activity request
             Used to allow multiple concurrent resource requests i.e labour types.
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Reason">
            <summary>
             Reason for requesting resource
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Required">
            <summary>
             Amount required 
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Available">
            <summary>
             Amount available
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.Provided">
            <summary>
             Amount provided
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.FilterDetails">
            <summary>
             Filtering and sorting items list
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.AdditionalDetails">
            <summary>
             Additional details for this request
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.AllowTransmutation">
            <summary>
             Allow transmutation
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequest.TransmutationPossible">
            <summary>
             Allow transmutation
            </summary> 
        </member>
        <member name="M:Models.CLEM.Resources.ResourceRequest.#ctor">
            <summary>
             ResourceRequest constructor
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.FoodResourcePacket">
            <summary>
             Additional information for animal food requests
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.FoodResourcePacket.Amount">
            <summary>
             Amount of food supplied
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.FoodResourcePacket.DMD">
            <summary>
             Dry Matter Digestibility of food supplied
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.FoodResourcePacket.PercentN">
            <summary>
             Percent N of food supplied
            </summary> 
        </member>
        <member name="T:Models.CLEM.Resources.ResourceRequestEventArgs">
            <summary>
            Class for reporting transaction details in OnTransactionEvents
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ResourceRequestEventArgs.Request">
            <summary>
            Resource request details
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ActivityPerformedEventArgs">
            <summary>
            Class for reporting last activity performed details in OnActivityPerformed
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.ActivityPerformedEventArgs.Activity">
            <summary>
            Activity details
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.ResourcesHolder">
            <summary>
             Manger for all resources available to the model
            </summary> 
        </member>
        <member name="F:Models.CLEM.Resources.ResourcesHolder.ResourceTypeList">
            <summary>
            List of the all the Resource Groups.
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.GetResourceByName(System.String)">
            <summary>
            Get resource by name
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.GetResourceItem(Models.CLEM.Resources.ResourceRequest,Models.CLEM.OnMissingResourceActionTypes,Models.CLEM.OnMissingResourceActionTypes)">
            <summary>
            Retrieve a ResourceType from a ResourceGroup based on a request item including filter and sort options
            </summary>
            <param name="Request">A resource request item</param>
            <param name="MissingResourceAction">Action to take if requested resource group not found</param>
            <param name="MissingResourceTypeAction">Action to take if requested resource type not found</param>
            <returns>A reference to the item of type Model</returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.GetResourceItem(Models.Core.Model,System.Type,System.String,Models.CLEM.OnMissingResourceActionTypes,Models.CLEM.OnMissingResourceActionTypes)">
            <summary>
            Retrieve a ResourceType from a ResourceGroup with specified names
            </summary>
            <param name="RequestingModel">name of model requesting resource</param>
            <param name="ResourceType">Type of the resource group</param>
            <param name="ResourceTypeName">Name of the resource item</param>
            <param name="MissingResourceAction">Action to take if requested resource group not found</param>
            <param name="MissingResourceTypeAction">Action to take if requested resource type not found</param>
            <returns>A reference to the item of type object</returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.Products">
            <summary>
            Get the Resource Group for Products
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.AnimalFoodStore">
            <summary>
            Get the Resource Group for Animal Feed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.OtherAnimalsStore">
            <summary>
            Get the Resource Group for OtherAnimals
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.HumanFoodStore">
            <summary>
            Get the Resource Group for FoodStore
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.GreenhouseGases">
            <summary>
            Get the Resource Group for GreenhouseGases
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.LabourFamily">
            <summary>
            Get the Resource Group for Labour Family
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.Land">
            <summary>
            Get the Resource Group for Land
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.GrazeFoodStore">
            <summary>
            Get the Resource Group for the GrazeFoodStore
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.RuminantHerd">
            <summary>
            Get the Resource Group for Ruminant Herd
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.FinanceResource">
            <summary>
            Get the Resource Group for Finances
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.TransmutateShortfall(System.Collections.Generic.List{Models.CLEM.Resources.ResourceRequest},System.Boolean)">
            <summary>
            Performs the transmutation of resources into a required resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.ResourcesHolder.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Resources.Ruminant">
            <summary>
            Object for an individual Ruminant Animal.
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.Ruminant.BreedParams">
            <summary>
            Reference to the Breed Parameters.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Breed">
            <summary>
            Breed of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.HerdName">
            <summary>
            Herd individual belongs to
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ID">
            <summary>
            Unique ID of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Mother">
            <summary>
            Link to individual's mother
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Gender">
            <summary>
            Gender
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.GenderAsString">
            <summary>
            Gender as string for reports
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Age">
            <summary>
            Age (Months)
            </summary>
            <units>Months</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.PurchaseAge">
            <summary>
            Purchase age (Months)
            </summary>
            <units>Months</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.AgeZeroCorrected">
            <summary>
            Will return 0.1 if Age is 0 for calculations (Months)
            </summary>
            <units>Months</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Weight">
            <summary>
            Weight (kg)
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.PreviousWeight">
            <summary>
            Previous weight (kg)
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.WeightGain">
            <summary>
            Previous weight (kg)
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.AdultEquivalent">
            <summary>
            The adult equivalent of this individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.HighWeight">
            <summary>
            Highest previous weight
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ProportionOfHighWeight">
            <summary>
            The current weight as a proportion of High weight achieved
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ProportionOfSRW">
            <summary>
            The current weight as a proportion of Standard Reference Weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Intake">
            <summary>
            Current monthly intake store
            </summary>
            <units>kg/month</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.MilkIntake">
            <summary>
            Current monthly intake of milk
            </summary>
            <units>kg/month</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.PercentNOfIntake">
            <summary>
            Percentage Nitrogen of current intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.DietDryMatterDigestibility">
            <summary>
            Diet dry matter digestibility of current monthly intake store
            </summary>
            <units>percent</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.PotentialIntake">
            <summary>
            Current monthly potential intake
            </summary>
            <units>kg/month</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.NormalisedAnimalWeight">
            <summary>
            Normalised animal weight
            </summary>
            <units>kg</units>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Number">
            <summary>
            Number in this class (1 if individual model)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.SaleFlag">
            <summary>
            Flag to identify individual ready for sale
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.PopulationChangeDirection">
            <summary>
            Determines if the change resson is her positive or negative
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.SaleFlagAsString">
            <summary>
            SaleFlag as string for reports
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.ReadyForSale">
            <summary>
            Is the individual currently marked for sale?
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.EnergyBalance">
            <summary>
            Energy balance store
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Died">
            <summary>
            Indicates if this individual has died
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.StandardReferenceWeight">
            <summary>
            Standard Reference Weight determined from coefficients and gender
            </summary>
            <units>kg</units>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.Wean">
            <summary>
            Wean this individual
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.SetUnweaned">
            <summary>
            Method to set the weaned status to unweaned for new born individuals.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Weaned">
            <summary>
            Weaned individual flag
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.MothersMilkProductionAvailable">
            <summary>
            Milk production currently available from mother
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.AddIntake(Models.CLEM.Resources.FoodResourcePacket)">
            <summary>
            A funtion to add intake and track changes in %N and DietDryMatterDigestibility
            </summary>
            <param name="intake">Feed request containing intake information kg, %N, DMD</param>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Location">
            <summary>
            Unique ID of the managed paddock the individual is located in.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Wool">
            <summary>
            Amount of wool on individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Ruminant.Cashmere">
            <summary>
            Amount of wool on individual
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Ruminant.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.Sex">
            <summary>
            Sex of individuals
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.Sex.Male">
            <summary>
            Male
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.Sex.Female">
            <summary>
            Female
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantFemale">
            <summary>
            Object for an individual female Ruminant.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.AgeAtLastBirth">
            <summary>
            The age of female at last birth
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.NumberOfBirths">
            <summary>
            Number of births for the female (twins = 1 birth)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.NumberOfBirthsThisTimestep">
            <summary>
            Births this timestep
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.AgeAtLastConception">
            <summary>
            The age at last conception
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.WeightAtConception">
            <summary>
            Weight at time of conception
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.PreviousConceptionRate">
            <summary>
            Previous conception rate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.WeightLossDueToCalf">
            <summary>
            Weight lost at birth due to calf
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.BirthDue">
            <summary>
            Indicates if birth is due this month
            Knows whether the feotus(es) have survived
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.UpdateBirthDetails">
            <summary>
            Method to handle birth changes
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.IsPregnant">
            <summary>
            Indicates if the individual is pregnant
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.CarryingTwins">
            <summary>
            Indicates if individual is carrying twins
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.OneOffspringDies">
            <summary>
            Method to remove one offspring that dies between conception and death
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.UpdateConceptionDetails(System.Boolean,System.Double)">
            <summary>
            Method to handle conception changes
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.DryBreeder">
            <summary>
            Indicates if the individual is a dry breeder
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.IsLactating">
            <summary>
            Indicates if the individual is lactating
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.DaysLactating">
            <summary>
            Calculate the MilkinIndicates if the individual is lactating
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MilkingPerformed">
            <summary>
            Determines if milking has been performed on individual to increase milk production
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MilkAmount">
            <summary>
            Amount of milk available in the month (L)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.MilkProduction">
            <summary>
            Amount of milk produced (L/day)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.TakeMilk(System.Double)">
            <summary>
            Method to remove milk from female
            </summary>
            <param name="amount">Amount to take</param>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.SucklingOffspring">
            <summary>
            A list of individuals currently suckling this female
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantFemale.SuccessfulPregnancy">
            <summary>
            Used to track successful preganacy
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantFemale.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantInitialCohorts">
            <summary>
            Holder for all initial ruminant cohorts
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantInitialCohorts.CreateIndividuals">
            <summary>
            Create the individual ruminant animals for this Ruminant Type (Breed)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantMale">
            <summary>
            Object for an individual male Ruminant.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantMale.BreedingSire">
            <summary>
            Indicates if individual is breeding sire
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantMale.Draught">
            <summary>
            Indicates if individual is draught animal
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantMale.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.AnimalPricing">
            <summary>
            User entry of Animal prices
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPricing.PricingStyle">
            <summary>
            Style of pricing animals
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPricing.BreedingSirePrice">
            <summary>
            Price of individual breeding sire
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.AnimalPriceEntry">
            <summary>
            Individual price entry
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPriceEntry.Gender">
            <summary>
            Gender
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPriceEntry.Age">
            <summary>
            Age in months
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPriceEntry.PurchaseValue">
            <summary>
            Purchase value of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPriceEntry.SellValue">
            <summary>
            Sell value of individual
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantTypeCohort">
            <summary>
            This stores the initialisation parameters for a Cohort of a specific Ruminant Type.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Gender">
            <summary>
            Gender
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Age">
            <summary>
            Starting Age (Months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Number">
            <summary>
            Starting Number
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Weight">
            <summary>
            Starting Weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.WeightSD">
            <summary>
            Standard deviation of starting weight. Use 0 to use starting weight only
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Suckling">
            <summary>
            Is suckling?
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantTypeCohort.Sire">
            <summary>
            Breeding sire?
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantTypeCohort.CreateIndividuals">
            <summary>
            Create the individual ruminant animals using the Cohort parameterisations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantType">
            <summary>
            This stores the parameters for a ruminant Type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.Breed">
            <summary>
            Breed
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.RuminantType.PriceList">
            <summary>
            Current value of individuals in the herd
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.PricingAvailable">
            <summary>
            Determine if a price schedule has been provided for this breed
            </summary>
            <returns>boolean</returns>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.SirePrice">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.ValueofIndividual(Models.CLEM.Resources.Ruminant,System.Boolean)">
            <summary>
            Get value of a specific individual
            </summary>
            <returns>value</returns>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.Add(System.Object,System.String,System.String)">
            <summary>
            Add resource
            </summary>
            <param name="ResourceAmount"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove resource
            </summary>
            <param name="Request"></param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.Set(System.Double)">
            <summary>
            Set resource
            </summary>
            <param name="NewAmount"></param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.Initialise">
            <summary>
            Initialise resource
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantType.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Model Validation
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.Amount">
            <summary>
            Current number of individuals of this herd.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EMaintEfficiencyCoefficient">
            <summary>
            Energy maintenance efficiency coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EMaintEfficiencyIntercept">
            <summary>
            Energy maintenance efficiency intercept
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EGrowthEfficiencyCoefficient">
            <summary>
            Energy growth efficiency coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EGrowthEfficiencyIntercept">
            <summary>
            Energy growth efficiency intercept
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ELactationEfficiencyCoefficient">
            <summary>
            Energy lactation efficiency coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ELactationEfficiencyIntercept">
            <summary>
            Energy lactation efficiency intercept
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EMaintExponent">
            <summary>
            Energy maintenance exponent
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EMaintIntercept">
            <summary>
            Energy maintenance intercept
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EMaintCoefficient">
            <summary>
            Energy maintenance coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.EnergyMaintenanceMaximumAge">
            <summary>
            Maximum age for energy maintenance calculation (yrs)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.Kme">
            <summary>
            Breed factor for maintenence energy
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GrowthEnergyIntercept1">
            <summary>
            Parameter for energy for growth #1
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GrowthEnergyIntercept2">
            <summary>
            Parameter for energy for growth #2
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GrowthEfficiency">
            <summary>
            Growth efficiency
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.SRWFemale">
            <summary>
            Standard Reference Weight of female
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.SRWMaleMultiplier">
            <summary>
            Standard Reference Weight for male from female multiplier
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.SRWBirth">
            <summary>
            Standard Reference Weight at birth
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.AgeGrowthRateCoefficient">
            <summary>
            Age growth rate coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.SRWGrowthScalar">
            <summary>
            SWR growth scalar
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.IntakeCoefficient">
            <summary>
            Intake coefficient in relation to Live Weight
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.IntakeIntercept">
            <summary>
            Intake intercept In relation to SRW
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ProteinCoefficient">
            <summary>
            Protein requirement coeff (g/kg feed)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ProteinDegradability">
            <summary>
            Protein degradability
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.BaseAnimalEquivalent">
            <summary>
            Weight(kg) of 1 animal equivalent(steer)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GreenDietMax">
            <summary>
            Maximum green in diet
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GreenDietCoefficient">
            <summary>
            Shape of curve for diet vs pasture
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GreenDietZero">
            <summary>
            Proportion green in pasture at zero in diet
            was %
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.IntakeTropicalQuality">
            <summary>
            Coefficient to adjust intake for herbage quality
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.IntakeCoefficientQuality">
            <summary>
            Coefficient to adjust intake for tropical herbage quality
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.IntakeCoefficientBiomass">
            <summary>
            Coefficient to adjust intake for herbage biomass
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.StrictFeedingLimits">
            <summary>
            Enforce strict feeding limits
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkIntakeCoefficient">
            <summary>
            Coefficient of juvenile milk intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkIntakeIntercept">
            <summary>
            Intercept of juvenile milk intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkIntakeMaximum">
            <summary>
            Maximum juvenile milk intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkLWTFodderSubstitutionProportion">
            <summary>
            Milk as proportion of LWT for fodder substitution
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MaxJuvenileIntake">
            <summary>
            Max juvenile (suckling) intake as proportion of LWT
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ProportionalDiscountDueToMilk">
            <summary>
            Proportional discount to intake due to milk intake
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ProportionOfMaxWeightToSurvive">
            <summary>
            Proportion of max body weight needed for survival
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.LactatingPotentialModifierConstantA">
            <summary>
            Lactating Potential intake modifier Coefficient A
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.LactatingPotentialModifierConstantB">
            <summary>
            Lactating Potential intake modifier Coefficient B
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.LactatingPotentialModifierConstantC">
            <summary>
            Lactating Potential intake modifier Coefficient C
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MaximumSizeOfIndividual">
            <summary>
            Maximum size of individual relative to SRW
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MortalityBase">
            <summary>
            Mortality rate base
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MortalityCoefficient">
            <summary>
            Mortality rate coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MortalityIntercept">
            <summary>
            Mortality rate intercept
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MortalityExponent">
            <summary>
            Mortality rate exponent
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.JuvenileMortalityCoefficient">
            <summary>
            Juvenile mortality rate coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.JuvenileMortalityMaximum">
            <summary>
            Juvenile mortality rate maximum
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.JuvenileMortalityExponent">
            <summary>
            Juvenile mortality rate exponent
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.WoolCoefficient">
            <summary>
            Wool coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.CashmereCoefficient">
            <summary>
            Cashmere coefficient
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.AdvancedConceptionParameters">
            <summary>
            Advanced conception parameters if present
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkCurveSuckling">
            <summary>
            Milk curve shape suckling
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkCurveNonSuckling">
            <summary>
            Milk curve shape non suckling
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkingDays">
            <summary>
            Number of days for milking
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkPeakYield">
            <summary>
            Peak milk yield(kg/day)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkOffsetDay">
            <summary>
            Milk offset day
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MilkPeakDay">
            <summary>
            Milk peak day
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.InterParturitionIntervalIntercept">
            <summary>
            Inter-parturition interval intercept of PW (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.InterParturitionIntervalCoefficient">
            <summary>
            Inter-parturition interval coefficient of PW (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.GestationLength">
            <summary>
            Months between conception and parturition
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MinimumAge1stMating">
            <summary>
            Minimum age for 1st mating (months)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MinimumSize1stMating">
            <summary>
            Minimum size for 1st mating, proportion of SRW
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MinimumDaysBirthToConception">
            <summary>
            Minimum number of days between last birth and conception
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.TwinRate">
            <summary>
            Rate at which twins are concieved
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.CriticalCowWeight">
            <summary>
            Proportion of SRW for zero calving/lambing rate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ConceptionRateCoefficent">
            <summary>
            Conception rate coefficient of breeder PW
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ConceptionRateIntercept">
            <summary>
            Conception rate intercept of breeder PW
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.ConceptionRateAsymptote">
            <summary>
            Conception rate assymtote
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MaximumMaleMatingsPerDay">
            <summary>
            Maximum number of matings per male per day
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.PrenatalMortality">
            <summary>
            Prenatal mortality rate
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MaximumConceptionUncontrolledBreeding">
            <summary>
            Maximum conception rate from uncontrolled breeding 
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantType.MethaneProductionCoefficient">
            <summary>
            Methane production from intake coefficient
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.RuminantHerd">
            <summary>
             Parent model of Ruminant Types.
            </summary> 
        </member>
        <member name="F:Models.CLEM.Resources.RuminantHerd.Herd">
            <summary>
            Current state of this resource.
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.RuminantHerd.PurchaseIndividuals">
            <summary>
            List of requested purchases.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantHerd.LastIndividualChanged">
            <summary>
            The last individual to be added or removed (for reporting)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.AddRuminant(Models.CLEM.Resources.Ruminant)">
            <summary>
            Add individual/cohort to the the herd
            </summary>
            <param name="ind">Individual Ruminant to add</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.RemoveRuminant(Models.CLEM.Resources.Ruminant)">
            <summary>
            Remove individual/cohort from the herd
            </summary>
            <param name="ind">Individual Ruminant to remove</param>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.RemoveRuminant(System.Collections.Generic.List{Models.CLEM.Resources.Ruminant})">
            <summary>
            Remove list of Ruminants from the herd
            </summary>
            <param name="list">List of Ruminants to remove</param>
        </member>
        <member name="P:Models.CLEM.Resources.RuminantHerd.NextUniqueID">
            <summary>
            Gte the next unique individual id number
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.RuminantHerd.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.RuminantHerd.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.LandType">
            <summary>
            This stores the initialisation parameters for land
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.LandArea">
            <summary>
            Total Area
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.UnusablePortion">
            <summary>
            Unusable Portion - Buildings, paths etc. (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.ProportionOfTotalArea">
            <summary>
            Allocate proportion of Total Area
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.SoilType">
            <summary>
            Soil Type (1-5) 
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.AreaAvailable">
            <summary>
            Area not currently being used (ha)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.AreaUsed">
            <summary>
            Area already used (ha)
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.UsableArea">
            <summary>
            The total area available 
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.Initialise">
            <summary>
            Initialise the current state to the starting amount of fodder
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.Amount">
            <summary>
            Resource available
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.Add(System.Object,System.String,System.String)">
            <summary>
            Add to food store
            </summary>
            <param name="ResourceAmount"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from finance type store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.Set(System.Double)">
            <summary>
            Set amount of land available
            </summary>
            <param name="NewValue">New value to set land to</param>
        </member>
        <member name="E:Models.CLEM.Resources.LandType.TransactionOccurred">
            <summary>
            Back account transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LandType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Models.CLEM.Resources.LandType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.Land">
            <summary>
             Parent model of Land Types.
            </summary> 
        </member>
        <member name="P:Models.CLEM.Resources.Land.UnitsOfArea">
            <summary>
            Unit of area to be used in this simulation
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Land.UnitsOfAreaToHaConversion">
            <summary>
            Conversion of unit of area to hectares (10,000 square metres)
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Land.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Land.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Land.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Land.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.Land.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.Labour">
            <summary>
             Parent model of Labour Person models.
            </summary> 
        </member>
        <member name="F:Models.CLEM.Resources.Labour.Clock">
            <summary>
            Get the Clock.
            </summary>
        </member>
        <member name="F:Models.CLEM.Resources.Labour.Items">
            <summary>
            Labour types currently available.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.Labour.AllowAging">
            <summary>
            Allows indiviuals to age each month
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.OnCLEMInitialiseResource(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.OnStartOfMonth(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.ONCLEMAgeResources(System.Object,System.EventArgs)">
            <summary>Age individuals</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.Resources.Labour.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="E:Models.CLEM.Resources.Labour.TransactionOccurred">
            <summary>
            Override base event
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.LabourType">
            <summary>
            This stores the initialisation parameters for a land type person who can do labour 
            who is a family member.
            eg. AdultMale, AdultFemale etc.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.InitialAge">
            <summary>
            Age in years.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Gender">
            <summary>
            Male or Female
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.MaxLabourSupply">
            <summary>
            Maximum Labour Supply (in days) for each month of the year. 
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Age">
            <summary>
            Age in years.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.AgeInMonths">
            <summary>
            Age in months.
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Individuals">
            <summary>
            Number of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.LastActivityRequestID">
            <summary>
            The unique id of the last activity request for this labour type
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.AvailableDays">
            <summary>
            Available Labour (in days) in the current month. 
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.SetAvailableDays(System.Int32)">
            <summary>
            Reset the available days for a given month
            </summary>
            <param name="month"></param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.Add(System.Object,System.String,System.String)">
            <summary>
            Add to labour store of this type
            </summary>
            <param name="ResourceAmount"></param>
            <param name="ActivityName"></param>
            <param name="Reason"></param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove from labour store
            </summary>
            <param name="Request">Resource request class with details.</param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.Set(System.Double)">
            <summary>
            Set amount of animal food available
            </summary>
            <param name="NewValue">New value to set food store to</param>
        </member>
        <member name="E:Models.CLEM.Resources.LabourType.TransactionOccurred">
            <summary>
            Labour type transaction occured
            </summary>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.OnTransactionOccurred(System.EventArgs)">
            <summary>
            Transcation occurred 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.Remove(System.Object)">
            <summary>
            Remove labour using a request object
            </summary>
            <param name="RemoveRequest"></param>
        </member>
        <member name="M:Models.CLEM.Resources.LabourType.Initialise">
            <summary>
            Implemented Initialise method
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.LabourType.Amount">
            <summary>
            Current amount of labour required.
            </summary>
        </member>
        <member name="T:Models.CLEM.Resources.AnimalPriceValue">
            <summary>
            Animal valuation entry
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPriceValue.Breed">
            <summary>
            Name of herd
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPriceValue.Gender">
            <summary>
            Gender
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPriceValue.Age">
            <summary>
            Age in months
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPriceValue.PurchaseValue">
            <summary>
            Value of individual to buy
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPriceValue.SellValue">
            <summary>
            Value of individual to sell
            </summary>
        </member>
        <member name="P:Models.CLEM.Resources.AnimalPriceValue.Style">
            <summary>
            Type of Styling
            </summary>
        </member>
        <member name="T:Models.CLEM.FileCrop">
            <summary>
             Reads in crop growth data and makes it available to other models.
            </summary>
                
            <remarks>
            </remarks>
        </member>
        <member name="F:Models.CLEM.FileCrop.reader">
            <summary>
            A reference to the text file reader object
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.soilNumIndex">
            <summary>
            The character spacing index for the SoilNum column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.cropNameIndex">
            <summary>
            The character spacing index for the CropName column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.yearIndex">
            <summary>
            The character spacing index for the Year column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.monthIndex">
            <summary>
            The character spacing index for the Month column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.AmtKgIndex">
            <summary>
            The character spacing index for the AmtKg column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.NpctIndex">
            <summary>
            The character spacing index for the Npct column
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.ForageFileAsTable">
            <summary>
            The entire Crop File read in as a DataTable with Primary Keys assigned.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.FullFileName">
            <summary>
            Gets or sets the full file name (with path). The user interface uses this. 
            </summary>
        </member>
        <member name="P:Models.CLEM.FileCrop.ExcelWorkSheetName">
            <summary>
            Used to hold the WorkSheet Name if data retrieved from an Excel file
            </summary>
        </member>
        <member name="M:Models.CLEM.FileCrop.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for initialization.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileCrop.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="F:Models.CLEM.FileCrop.ErrorMessage">
            <summary>
            Provides an error message to display if something is wrong.
            Used by the UserInterface to give a warning of what is wrong
            
            When the user selects a file using the browse button in the UserInterface 
            and the file can not be displayed for some reason in the UserInterface.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileCrop.GetTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileCrop.GetAllData">
            <summary>
            Get the DataTable view of this data
            </summary>
            <returns>The DataTable</returns>
        </member>
        <member name="M:Models.CLEM.FileCrop.GetCropDataForEntireRun(System.Int32,System.String,System.DateTime,System.DateTime)">
            <summary>
            Searches the DataTable created from the Forage File using the specified parameters.
            <returns></returns>
            </summary>
            <param name="SoilNum"></param>
            <param name="CropName"></param>
            <param name="StartDate"></param>
            <param name="EndDate"></param>
            <returns>A struct called CropDataType containing the crop data for this month.
            This struct can be null. 
            </returns>
        </member>
        <member name="M:Models.CLEM.FileCrop.OpenDataFile">
            <summary>
            Open the forage data file.
            </summary>
            <returns>True if the file was successfully opened</returns>
        </member>
        <member name="M:Models.CLEM.FileCrop.CloseDataFile">
            <summary>Close the datafile.</summary>
        </member>
        <member name="T:Models.CLEM.CropDataType">
            <summary>
            A structure containing the commonly used weather data.
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.SoilNum">
            <summary>
            Soil Number
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.CropName">
            <summary>
            Name of Crop
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.Year">
            <summary>
            Year (eg. 2017)
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.Month">
            <summary>
            Month (eg. 1 is Jan, 2 is Feb)
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.AmtKg">
            <summary>
            Amount in Kg (perHa or perTree) 
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.Npct">
            <summary>
            Nitrogen Percentage of the Amount
            </summary>
        </member>
        <member name="F:Models.CLEM.CropDataType.HarvestDate">
            <summary>
            Combine Year and Month to create a DateTime. 
            Day is set to the 1st of the month.
            </summary>
        </member>
        <member name="T:Models.CLEM.FileGRASP">
            <summary>
             Reads in GRASP file data and makes it available to other models.
            </summary>
                
            <remarks>
            </remarks>
        </member>
        <member name="F:Models.CLEM.FileGRASP.clock">
            <summary>
            A link to the clock model.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.reader">
            <summary>
            A reference to the text file reader object
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.regionIndex">
            <summary>
            The index of the climate region number column in the GRASP file
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.soilIndex">
            <summary>
            The index of the soil number column in the GRASP file
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.forageNoIndex">
            <summary>
            The index of the forage number column in the GRASP file
            nb. This column is to be ignored.
            It is a legacy column in the GRASP file and is not used any more.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.grassBAIndex">
            <summary>
            The index of the grass basal area column in the GRASP file
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.landConIndex">
            <summary>
            The index of the land condition column in the GRASP file
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.stkRateIndex">
            <summary>
            The index of the stocking rate column in the GRASP file
            nb. a row does NOT exist for every stocking rate.
            instead only certain stocking rate categories have rows.
            We need to find the closest categegory in the GRASP file
            to the actual stocking rate in any given month.
            These stocking rate categories vary from GRASP file to GRASP file
            and are not standarised categories.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.yearNumIndex">
            <summary>
            The index of the year number column in the GRASP file
            This is NOT the actually date year, this is the number of
            years since the start of the GRASP run that generated the
            GRASP data. 
            eg. it starts at 1 and goes up sequentially 
            for however many years the GRASP run went for.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.yearIndex">
            <summary>
            The index of the year column in the GRASP file.
            This is the actual date year
            eg.1975
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.cutNumIndex">
            <summary>
            The index of the cut number column in the GRASP file
            Some crops such as lucerne are ratooning crops.
            So we need to provide a cut number to keep track of
            how many harvests from the original planting of the
            crop. Cut Number = 1 is the first harvest after planting
            and it goes up from there until it is pulled out and
            replanted.
            nb. you may have multiple cuts in the one month so 
            year and month does not uniquely identify the monthly
            yield data for that month. 
            We need to add up all the cuts within that month and use
            this as the monthly yield data for these crops.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.monthIndex">
            <summary>
            The index of the month number column in the GRASP file
            eg. 1 to 12 (for Jan to Dec)
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.growthIndex">
            <summary>
            The index of the growth amount column in the GRASP file
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.bp1Index">
            <summary>
            The index of the by product 1 column in the GRASP file
            Crops can have by products that are produced as a consequence
            of growing the crop. 
            This is the amount of the first by product of this crop
            Eg. straw from growing wheat grain.
            nb. THIS IS NOT REALLY USED BY PASTURES
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.bp2Index">
            <summary>
            The index of the by product 2 (second) column in the GRASP file
            Crops can have by products that are produced as a consequence
            of growing the crop. 
            This is the amount of the second by product of this crop
            Eg. grain husks from growing wheat grain.
            nb. THIS IS NOT REALLY USED BY PASTURES. 
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.utilisnIndex">
            <summary>
            The index of the utilisation column in the GRASP file
            The fractional proportional green growth pasture growth that the animals ate.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.soillossIndex">
            <summary>
            The index of the soil loss column in the GRASP file
            erosion caused to soil by your stocking number on this pasture growth.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.coverIndex">
            <summary>
            The index of the cover column in the GRASP file
            fraction of the soil surface that has cover (both dead and green) over it.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.treeBAIndex">
            <summary>
            The index of the tree basal area column in the GRASP file
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.rainfallIndex">
            <summary>
            The index of the rainfall column in the GRASP file
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.runoffIndex">
            <summary>
            The index of the runoff column in the GRASP file
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.PastureFileAsTable">
            <summary>
            The entire pasture File read in as a DataTable with Primary Keys assigned.
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.distinctStkRates">
            <summary>
            All the distinct Stocking Rates that were found in the PastureFileAsDataTable
            </summary>
        </member>
        <member name="P:Models.CLEM.FileGRASP.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.CLEM.FileGRASP.FullFileName">
            <summary>
            Gets or sets the full file name (with path). The user interface uses this. 
            </summary>
        </member>
        <member name="P:Models.CLEM.FileGRASP.ExcelWorkSheetName">
            <summary>
            Used to hold the WorkSheet Name if data retrieved from an Excel file
            </summary>
        </member>
        <member name="M:Models.CLEM.FileGRASP.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for initialization.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileGRASP.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="F:Models.CLEM.FileGRASP.ErrorMessage">
            <summary>
            Provides an error message to display if something is wrong.
            Used by the UserInterface to give a warning of what is wrong
            
            When the user selects a file using the browse button in the UserInterface 
            and the file can not be displayed for some reason in the UserInterface.
            </summary>
        </member>
        <member name="M:Models.CLEM.FileGRASP.GetTable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileGRASP.GetAllData">
            <summary>
            Get the DataTable view of this data
            </summary>
            <returns>The DataTable</returns>
        </member>
        <member name="M:Models.CLEM.FileGRASP.GetStkRateCategories">
            <summary>
            Searches the DataTable created from the GRASP File for all the distinct StkRate values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileGRASP.FindClosestStkRateCategory(System.Double)">
             <summary>
             Finds the closest Stocking Rate Category in the GRASP file for a given Stocking Rate.
            The GRASP file does not have every stocking rate. 
            Each GRASP file has its own set of stocking rate value categories
            Need to find the closest the stocking rate category in the GRASP file for this stocking rate.
            It will find the category with the next largest value to the actual stocking rate.
            So if the stocking rate is 0 the category with the next largest value will normally be 1
             </summary>
             <param name="StkRate"></param>
             <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileGRASP.GetIntervalsPastureData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Int32)">
            <summary>
            Searches the DataTable created from the GRASP File using the specified parameters.
            nb. Ignore ForageNo , it is a legacy column in the GRASP file that is not used anymore.
            </summary>
            <param name="Region"></param>
            <param name="Soil"></param>
            <param name="GrassBA"></param>
            <param name="LandCon"></param>
            <param name="StkRate"></param>
            <param name="EcolCalculationDate"></param>
            <param name="EcolCalculationInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.FileGRASP.CheckAllMonthsWereRetrieved(System.Collections.Generic.List{Models.CLEM.PastureDataType},System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Do simple error checking to make sure the data retrieved is usable
            </summary>
            <param name="Filtered"></param>
            <param name="StartDate"></param>
            <param name="EndDate"></param>
            <param name="Region"></param>
            <param name="Soil"></param>
            <param name="GrassBA"></param>
            <param name="LandCon"></param>
            <param name="StkRate"></param>
        </member>
        <member name="M:Models.CLEM.FileGRASP.GetMonthsPastureData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Searches the DataTable created from the PastureFile using the specified parameters.
            </summary>
            <param name="Region"></param>
            <param name="Soil"></param>
            <param name="ForageNo"></param>
            <param name="GrassBA"></param>
            <param name="LandCon"></param>
            <param name="StkRate"></param>
            <param name="Year"></param>
            <param name="Month"></param>
            <returns>CropDataType containg the crop data for this month</returns>
        </member>
        <member name="M:Models.CLEM.FileGRASP.OpenDataFile">
            <summary>
            Open the GRASP data file.
            </summary>
            <returns>True if the file was successfully opened</returns>
        </member>
        <member name="M:Models.CLEM.FileGRASP.CloseDataFile">
            <summary>Close the datafile.</summary>
        </member>
        <member name="T:Models.CLEM.PastureDataType">
            <summary>
            A structure containing the commonly used weather data.
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Region">
            <summary>
            Climatic Region Number
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Soil">
            <summary>
            Soil Number
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.ForageNo">
            <summary>
            Forage Number 
            nb. This column is to be ignored.
            It is a legacy column in the GRASP file and is not used any more.
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.GrassBA">
            <summary>
            Grass Basal Area
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.LandCon">
            <summary>
            Land Condition
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.StkRate">
            <summary>
            Stocking Rate
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.YearNum">
            <summary>
            Year Number (counting from start of simulation ?)
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Year">
            <summary>
            Year (eg. 2017)
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.CutNum">
            <summary>
            Cut Number in this year
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Month">
            <summary>
            Month (eg. 1 is Jan, 2 is Feb)
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Growth">
            <summary>
            Amout in Kg of Biomass of the pasture
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.BP1">
            <summary>
            Amount in Kg of By Product 1 of the production of this pasture
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.BP2">
            <summary>
            Amount in Kg of By Product 2 of the production of this pasture
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Utilisn">
            <summary>
            Utilisation
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.SoilLoss">
            <summary>
            Soil Loss
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Cover">
            <summary>
            Cover
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.TreeBA">
            <summary>
            Tree Basal Area
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Rainfall">
            <summary>
            Rainfall
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.Runoff">
            <summary>
            Runoff
            </summary>
        </member>
        <member name="F:Models.CLEM.PastureDataType.CutDate">
            <summary>
            Combine Year and Month to create a DateTime. 
            Day is set to the 1st of the month.
            </summary>
        </member>
        <member name="T:Models.CLEM.IActivityTimer">
            <summary>
            Event timer interface
            </summary>
        </member>
        <member name="P:Models.CLEM.IActivityTimer.ActivityDue">
            <summary>
            Method to determine whether the activity is due
            </summary>
            <returns>Whether the activity is due in the current month</returns>
        </member>
        <member name="T:Models.CLEM.StoresForCrops">
            <summary>
            Crop payment style
            </summary>
        </member>
        <member name="F:Models.CLEM.StoresForCrops.HumanFoodStore">
            <summary>
            Food Store for Humans
            </summary>
        </member>
        <member name="F:Models.CLEM.StoresForCrops.AnimalFoodStore">
            <summary>
            Food Store for Animals
            </summary>
        </member>
        <member name="F:Models.CLEM.StoresForCrops.GrazeFoodStore">
            <summary>
            Store for forage/pasture crops
            </summary>
        </member>
        <member name="F:Models.CLEM.StoresForCrops.ProductStore">
            <summary>
            Store for inedible crop products
            </summary>
        </member>
        <member name="T:Models.CLEM.HerdChangeReason">
            <summary>
            Reasons for a change in herd
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.None">
            <summary>
            This individual remains in herd
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.DiedUnderweight">
            <summary>
            Individual died due to loss of weight
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.DiedMortality">
            <summary>
            Individual died due to mortality rate
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.Born">
            <summary>
            Individual born
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.TradeSale">
            <summary>
            Trade individual sold weight/age
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.DryBreederSale">
            <summary>
            Dry breeder sold
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.ExcessBreederSale">
            <summary>
            Excess breeder sold
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.ExcessHeiferSale">
            <summary>
            Excess heifer sold
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.ExcessBullSale">
            <summary>
            Excess bull sold
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.MaxAgeSale">
            <summary>
            Individual reached maximim age and sold
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.AgeWeightSale">
            <summary>
            Individual reached sale weight or age
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.TradePurchase">
            <summary>
            Trade individual purchased
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.HeiferPurchase">
            <summary>
            Heifer purchased
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.SirePurchase">
            <summary>
            Breeding sire purchased
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.Consumed">
            <summary>
            Individual consumed by household
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.DestockSale">
            <summary>
            Destocking sale
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.RestockPurchase">
            <summary>
            Restocking purchase
            </summary>
        </member>
        <member name="F:Models.CLEM.HerdChangeReason.InitialHerd">
            <summary>
            Initial herd
            </summary>
        </member>
        <member name="T:Models.CLEM.PricingStyleType">
            <summary>
            Animal pricing style
            </summary>
        </member>
        <member name="F:Models.CLEM.PricingStyleType.perHead">
            <summary>
            Value per head
            </summary>
        </member>
        <member name="F:Models.CLEM.PricingStyleType.perKg">
            <summary>
            Value per kg live weight
            </summary>
        </member>
        <member name="T:Models.CLEM.CropPaymentStyleType">
            <summary>
            Crop payment style
            </summary>
        </member>
        <member name="F:Models.CLEM.CropPaymentStyleType.Fixed">
            <summary>
            Fixed price
            </summary>
        </member>
        <member name="F:Models.CLEM.CropPaymentStyleType.perHa">
            <summary>
            Amount per hectare
            </summary>
        </member>
        <member name="F:Models.CLEM.CropPaymentStyleType.perTree">
            <summary>
            Amount per tree
            </summary>
        </member>
        <member name="T:Models.CLEM.AnimalPaymentStyleType">
            <summary>
            Animal payment style
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.Fixed">
            <summary>
            Fixed price
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.perHead">
            <summary>
            Amount per head
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.perAE">
            <summary>
            Amount per adult equivilant
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.ProportionOfTotalSales">
            <summary>
            Proportion of total sales
            </summary>
        </member>
        <member name="F:Models.CLEM.AnimalPaymentStyleType.perHa">
            <summary>
            Amount per hectare
            </summary>
        </member>
        <member name="T:Models.CLEM.LabourUnitType">
            <summary>
            Labour allocation unit type
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.Fixed">
            <summary>
            Fixed price
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perHa">
            <summary>
            Labour per hectare
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perTree">
            <summary>
            Labour per Tree
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perHead">
            <summary>
            Labour per head
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perAE">
            <summary>
            Labour per adult equivilant
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perKg">
            <summary>
            Labour per kg
            </summary>
        </member>
        <member name="F:Models.CLEM.LabourUnitType.perUnit">
            <summary>
            Labour per unit
            </summary>
        </member>
        <member name="T:Models.CLEM.RuminantFeedActivityTypes">
            <summary>
            Ruminant feeding styles
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantFeedActivityTypes.SpecifiedDailyAmount">
            <summary>
            Feed specified amount daily in selected months
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantFeedActivityTypes.ProportionOfWeight">
            <summary>
            Feed proportion of animal weight in selected months
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantFeedActivityTypes.ProportionOfPotentialIntake">
            <summary>
            Feed proportion of potential intake
            </summary>
        </member>
        <member name="F:Models.CLEM.RuminantFeedActivityTypes.ProportionOfRemainingIntakeRequired">
            <summary>
            Feed proportion of remaining amount required
            </summary>
        </member>
        <member name="T:Models.CLEM.OnPartialResourcesAvailableActionTypes">
            <summary>
            Possible actions when only partial requested resources are available
            </summary>
        </member>
        <member name="F:Models.CLEM.OnPartialResourcesAvailableActionTypes.ReportErrorAndStop">
            <summary>
            Report error and stop simulation
            </summary>
        </member>
        <member name="F:Models.CLEM.OnPartialResourcesAvailableActionTypes.SkipActivity">
            <summary>
            Do not perform activity in this time step
            </summary>
        </member>
        <member name="F:Models.CLEM.OnPartialResourcesAvailableActionTypes.UseResourcesAvailable">
            <summary>
            Receive resources available and perform activity
            </summary>
        </member>
        <member name="T:Models.CLEM.OnMissingResourceActionTypes">
            <summary>
            Possible actions when only partial requested resources are available
            </summary>
        </member>
        <member name="F:Models.CLEM.OnMissingResourceActionTypes.ReportErrorAndStop">
            <summary>
            Report error and stop simulation
            </summary>
        </member>
        <member name="F:Models.CLEM.OnMissingResourceActionTypes.ReportWarning">
            <summary>
            Report warning to summary
            </summary>
        </member>
        <member name="F:Models.CLEM.OnMissingResourceActionTypes.Ignore">
            <summary>
            Ignore missing resources and return null
            </summary>
        </member>
        <member name="T:Models.CLEM.IFeedType">
            <summary>
            Interface for feet types
            </summary>
        </member>
        <member name="P:Models.CLEM.IFeedType.DryMatter">
            <summary>
            Dry Matter (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.IFeedType.DMD">
            <summary>
            Dry Matter Digestibility (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.IFeedType.Nitrogen">
            <summary>
            Nitrogen (%)
            </summary>
        </member>
        <member name="P:Models.CLEM.IFeedType.StartingAmount">
            <summary>
            Starting Amount (kg)
            </summary>
        </member>
        <member name="P:Models.CLEM.IFeedType.Amount">
            <summary>
            Amount (kg)
            </summary>
        </member>
        <member name="T:Models.CLEM.ILabourFilterGroup">
            <summary>
            Interface of a labour activity group.
            </summary>
        </member>
        <member name="P:Models.CLEM.ILabourFilterGroup.Priority">
            <summary>
            Labour priority (1 high, 10 low)
            </summary>
        </member>
        <member name="P:Models.CLEM.ILabourFilterGroup.AmountProvided">
            <summary>
            Amount provided from resource or arbitrator
            </summary>
        </member>
        <member name="T:Models.CLEM.IResourceWithTransactionType">
            <summary>
            Interface to add transaction tracking ability to a Resource Type.
            </summary>
        </member>
        <member name="E:Models.CLEM.IResourceWithTransactionType.TransactionOccurred">
            <summary>
            Resource transaction occured event handler
            </summary>
        </member>
        <member name="P:Models.CLEM.IResourceWithTransactionType.LastTransaction">
            <summary>
            Last transaction received
            </summary>
        </member>
        <member name="T:Models.CLEM.IResourceType">
            <summary>
            Interface of a Resource Type.
            </summary>
        </member>
        <member name="M:Models.CLEM.IResourceType.Add(System.Object,System.String,System.String)">
            <summary>
            Add this Amount to the existing Amount.
            </summary>
            <param name="ResourceAmount">Object to add. This object can be double or contain additional information (e.g. Nitrogen) of food being added</param>
            <param name="ActivityName">Name of activity requesting resource</param>
            <param name="Reason">Name of individual requesting resource</param>
        </member>
        <member name="M:Models.CLEM.IResourceType.Remove(Models.CLEM.Resources.ResourceRequest)">
            <summary>
            Remove this Amount from the existing Amount
            </summary>
            <param name="Request">The resource request object that hold information</param>
        </member>
        <member name="M:Models.CLEM.IResourceType.Set(System.Double)">
            <summary>
            Set the amount to this new value.
            </summary>
        </member>
        <member name="M:Models.CLEM.IResourceType.Initialise">
            <summary>
            Initialise the variables that store the current state of the resource.
            </summary>
        </member>
        <member name="P:Models.CLEM.IResourceType.Amount">
            <summary>
            Get the current amount of this resource available.
            </summary>
        </member>
        <member name="T:Models.CLEM.ResourceTransaction">
            <summary>
            Class for tracking Resource transactions
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.ResourceType">
            <summary>
            Type of resource in transaction
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.Activity">
            <summary>
            Name of sender or activity
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.Reason">
            <summary>
            Reason or cateogry
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.Debit">
            <summary>
            Amount removed
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.Credit">
            <summary>
            Amount added
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.DebitStandardised">
            <summary>
            Standardised amount removed
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.CreditStandardised">
            <summary>
            Standardised amount added
            </summary>
        </member>
        <member name="P:Models.CLEM.ResourceTransaction.ExtraInformation">
            <summary>
            Object to sotre specific extra information such as cohort details
            </summary>
        </member>
        <member name="T:Models.CLEM.TransactionEventArgs">
            <summary>
            Class for reporting transaction details in OnTransactionEvents
            </summary>
        </member>
        <member name="P:Models.CLEM.TransactionEventArgs.Transaction">
            <summary>
            Transaction details
            </summary>
        </member>
        <member name="T:Models.CLEM.SummariseRuminantHerd">
            <summary>Ruminant summary</summary>
            <summary>This activity summarizes ruminant herds for reporting</summary>
            <summary>Remove if you do not need monthly herd summaries</summary>
        </member>
        <member name="E:Models.CLEM.SummariseRuminantHerd.OnReportItemGenerated">
            <summary>
            Report item was generated event handler
            </summary>
        </member>
        <member name="P:Models.CLEM.SummariseRuminantHerd.ReportDetails">
            <summary>
            The details of the summary group for reporting
            </summary>
        </member>
        <member name="M:Models.CLEM.SummariseRuminantHerd.ReportItemGenerated(Models.CLEM.HerdReportItemGeneratedEventArgs)">
            <summary>
            Report item generated and ready for reporting 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Models.CLEM.SummariseRuminantHerd.OnCLEMHerdSummary(System.Object,System.EventArgs)">
            <summary>
            Function to summarise the herd based on cohorts each month
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.CLEM.HerdReportItemGeneratedEventArgs">
            <summary>
            New herd report item generated event args
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.TimeStep">
            <summary>
            Timestep
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Breed">
            <summary>
            Breed of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Herd">
            <summary>
            Herd of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Age">
            <summary>
            Age of individuals (lower bound of year class)
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Sex">
            <summary>
            Sex of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.Number">
            <summary>
            Number of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AverageWeight">
            <summary>
            Average weight of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AverageWeightGain">
            <summary>
            Average weight gain of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AverageIntake">
            <summary>
            Average intake of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.AdultEquivalents">
            <summary>
            Adult equivalent of individuals
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.NumberOfBirths">
            <summary>
            Births of individual
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.NumberPregnant">
            <summary>
            Number pregnant
            </summary>
        </member>
        <member name="P:Models.CLEM.HerdReportItemGeneratedEventArgs.NumberLactating">
            <summary>
            Number lactating
            </summary>
        </member>
        <member name="T:Models.CLEM.Transmutation">
            <summary>
             Resource transmutation
             Will convert one resource into another (e.g. $ => labour) 
             These re defined under each ResourceType in the Resources section of the UI tree
            </summary> 
        </member>
        <member name="P:Models.CLEM.Transmutation.AmountPerUnitPurchase">
            <summary>
            Amount of this resource per unit purchased
            </summary>
        </member>
        <member name="M:Models.CLEM.Transmutation.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.TransmutationCost">
            <summary>
             Resource transmutation cost item
             Determines the amount of resource required for the transmutation
            </summary> 
        </member>
        <member name="P:Models.CLEM.TransmutationCost.ResourceName">
            <summary>
            Name of resource to use
            </summary>
        </member>
        <member name="P:Models.CLEM.TransmutationCost.ResourceType">
            <summary>
            Type of resource to use
            </summary>
        </member>
        <member name="P:Models.CLEM.TransmutationCost.ResourceTypeName">
            <summary>
            Name of resource type to use
            </summary>
        </member>
        <member name="P:Models.CLEM.TransmutationCost.CostPerUnit">
            <summary>
            Cost of transmutation
            </summary>
        </member>
        <member name="M:Models.CLEM.TransmutationCost.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate this object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.TransmutationCost.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.CLEM.DateGreaterThanAttribute">
            <summary>
            Tests if date greater than specified property name
            </summary>
        </member>
        <member name="M:Models.CLEM.DateGreaterThanAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="dateToCompareToFieldName"></param>
        </member>
        <member name="M:Models.CLEM.DateGreaterThanAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.PercentageAttribute">
            <summary>
            Tests if double/int is percentage
            </summary>
        </member>
        <member name="M:Models.CLEM.PercentageAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.CLEM.PercentageAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.ProportionAttribute">
            <summary>
            Tests if double/int is percentage
            </summary>
        </member>
        <member name="M:Models.CLEM.ProportionAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.CLEM.ProportionAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.MonthAttribute">
            <summary>
            Tests if int is month range
            </summary>
        </member>
        <member name="M:Models.CLEM.MonthAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.CLEM.MonthAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.GreaterThanValueAttribute">
            <summary>
            Tests if double/int greater than specified value
            </summary>
        </member>
        <member name="M:Models.CLEM.GreaterThanValueAttribute.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Models.CLEM.GreaterThanValueAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.GreaterThanEqualValueAttribute">
            <summary>
            Tests if double/int greater than specified value
            </summary>
        </member>
        <member name="M:Models.CLEM.GreaterThanEqualValueAttribute.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Models.CLEM.GreaterThanEqualValueAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.GreaterThanAttribute">
            <summary>
            Tests if date greater than specified property name
            </summary>
        </member>
        <member name="M:Models.CLEM.GreaterThanAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="compareToFieldName"></param>
        </member>
        <member name="M:Models.CLEM.GreaterThanAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.GreaterThanEqualAttribute">
            <summary>
            Tests if date greater than specified property name
            </summary>
        </member>
        <member name="M:Models.CLEM.GreaterThanEqualAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="compareToFieldName"></param>
        </member>
        <member name="M:Models.CLEM.GreaterThanEqualAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.ArrayItemCountAttribute">
            <summary>
            Tests if date greater than specified property name
            </summary>
        </member>
        <member name="M:Models.CLEM.ArrayItemCountAttribute.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="arrayItems"></param>
        </member>
        <member name="M:Models.CLEM.ArrayItemCountAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Models.CLEM.CLEMModel">
            <summary>
             CLEM base model
            </summary> 
        </member>
        <member name="P:Models.CLEM.CLEMModel.ID">
            <summary>
            Model identifier
            </summary>
        </member>
        <member name="M:Models.CLEM.CLEMModel.SetDefaults">
            <summary>
            Method to set defaults from   
            </summary>
        </member>
        <member name="T:Models.CLEM.ZoneCLEM">
            <summary>
            CLEM Zone to control simulation
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.RandomSeed">
            <summary>
            Seed for random number generator (0 uses clock)
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.RandomGenerator">
            <summary>
            Access the CLEM random number generator
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.ClimateRegion">
            <summary>
            Index of the simulation Climate Region
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.EcologicalIndicatorsCalculationInterval">
            <summary>
            Ecological indicators calculation interval (in months, 1 monthly, 12 annual)
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.EcologicalIndicatorsCalculationMonth">
            <summary>
            End of month to calculate ecological indicators
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.EcologicalIndicatorsNextDueDate">
            <summary>
            Month this overhead is next due.
            </summary>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.Area">
            <summary>Area of the zone.</summary>
            <value>The area.</value>
        </member>
        <member name="P:Models.CLEM.ZoneCLEM.Slope">
            <summary>Gets or sets the slope.</summary>
            <value>The slope.</value>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate object
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.Validate(Models.Core.Model,System.String)">
            <summary>
            Internal method to iterate through all children in CLEM and report any parameter setting errors
            </summary>
            <param name="model"></param>
            <param name="ModelPath">Pass blank string. Used for tracking model path</param>
            <returns>Boolean indicating whether validation was successful</returns>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.SetDefaults">
            <summary>
            Method to set defaults from   
            </summary>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.IsEcologicalIndicatorsCalculationMonth">
            <summary>
            Method to determine if this is the month to calculate ecological indicators
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.CLEM.ZoneCLEM.OnEndOfMonth(System.Object,System.EventArgs)">
            <summary>Data stores to clear at start of month</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Functions.DailyMeanVPD">
            <summary>
            This Function calculates a mean daily VPD from Max and Min weighted toward Max according to the specified MaximumVPDWeight factor.  
            This is then passed into the XY matrix as the x property and the function returns the y value
            </summary>
        </member>
        <member name="P:Models.Functions.DailyMeanVPD.MaximumVPDWeight">
            <summary>The maximum temperature weighting</summary>
        </member>
        <member name="F:Models.Functions.DailyMeanVPD.MetData">
            <summary>The met data</summary>
        </member>
        <member name="M:Models.Functions.DailyMeanVPD.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DailyMeanVPD.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.DemandFunctions.StorageDMDemandFunction">
            <summary>
            The partitioning of daily growth to storage biomass is based on a storage fraction.
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.StorageDMDemandFunction.storageFraction">
            <summary>The Storage Fraction</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageDMDemandFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageDMDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageDMDemandFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.DemandFunctions.StorageNDemandFunction">
            <summary>
            The partitioning of daily growth to storage biomass attempts to bring the organ's N content to the maximum concentration.
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.StorageNDemandFunction.maxNConc">
            <summary>The maximum N concentration of the organ</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.StorageNDemandFunction.nitrogenDemandSwitch">
            <summary>Switch to modulate N demand</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageNDemandFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageNDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.StorageNDemandFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.DemandFunctions.InternodeCohortDemandFunction">
            <summary>
            # [Name]
            Calculate individual internode demand base on age and maxSize
            </summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.#ctor">
            <summary>YinBetaFunction Constructor</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.Lmax">
            <summary>Lmax</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.te">
            <summary>te</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.tm">
            <summary>The tm</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.Leaf">
            <summary>The leaf </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.Structure">
            <summary>The structure</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.InternodeCohortDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.DemandFunctions.BerryFillingRateFunction">
            <summary>
            # [Name]
            Filling rate is calculated from grain number, a maximum mass to be filled and the duration of the filling process.
            </summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.FirstPhase">
            <summary>InitialGrowthPhase</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.SecondPhase">
            <summary>SecondaryGrowthPhase</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Wo1">
            <summary>Wo1</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Wf1">
            <summary>Wf1</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Mu1">
            <summary>Mu1</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Wo2">
            <summary>Wo2</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Wf2">
            <summary>Wf2</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.BerryFillingRateFunction.Mu2">
            <summary>Mu2</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.BerryFillingRateFunction.Phenology">
            <summary>
            Link to phenology
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.BerryFillingRateFunction.TT">
            <summary>
            Thermal time that drives berry development
            </summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.BerryFillingRateFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.BerryFillingRateFunction.OnPruning(System.Object,System.EventArgs)">
            <summary>Called when crop is being prunned.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Functions.DemandFunctions.TEWaterDemandFunction">
            <summary>
            # [Name]
            Water demand is calculated using the Transpiration Efficiency (TE) approach (ie TE=Coefficient/VDP).
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.TEWaterDemandFunction.SVPFrac">
            <summary>Average Daily Vapour Pressure Deficit as a proportion of daily Maximum.</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.TEWaterDemandFunction.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.TEWaterDemandFunction.Photosynthesis">
            <summary>The photosynthesis</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.TEWaterDemandFunction.TranspirationEfficiencyCoefficient">
            <summary>Transpiration Efficiency Coefficient to relate TE to daily VPD</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.TEWaterDemandFunction.VPD">
            <summary>Computes the vapour pressure deficit.</summary>
            <value>The vapour pressure deficit (hPa?)</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.TEWaterDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.DemandFunctions.FillingRateFunction">
            <summary>
            # [Name]
            Filling rate is calculated from grain number, a maximum mass to be filled and the duration of the filling process.
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.FillingRateFunction.FillingDuration">
            <summary>The partition fraction</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.FillingRateFunction.NumberFunction">
            <summary>The filling rate</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.FillingRateFunction.ThermalTime">
            <summary>The arbitrator</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.FillingRateFunction.PotentialSizeIncrement">
            <summary>The maximum weight or maximum amount of N incremented for individual grains in a given phase</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.FillingRateFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.DemandFunctions.AllometricDemandFunction">
            <summary>
            # [Name]
            Calculate partitioning of daily growth based upon allometric relationship
            </summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.AllometricDemandFunction.Const">
            <summary>The constant</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.AllometricDemandFunction.Power">
            <summary>The power</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.AllometricDemandFunction.XProperty">
            <summary>The x property</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.AllometricDemandFunction.YProperty">
            <summary>The y property</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.AllometricDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">
            Cannot find variable:  + XProperty +  in function:  + this.Name
            or
            Cannot find variable:  + YProperty +  in function:  + this.Name
            </exception>
        </member>
        <member name="T:Models.Functions.DemandFunctions.InternodeDemandFunction">
            <summary>
            # [Name]
            Calculate internode demand
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.InternodeDemandFunction.InterNodeWt">
            <summary>The inter node wt</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.InternodeDemandFunction.Structure">
            <summary>The structure</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.InternodeDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.DemandFunctions.PartitionFractionDemandFunction">
            <summary>
            Returns the product of its PartitionFraction and the total DM supplied to the arbitrator by all organs.
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PartitionFractionDemandFunction.PartitionFraction">
            <summary>The partition fraction</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PartitionFractionDemandFunction.Arbitrator">
            <summary>The arbitrator</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PartitionFractionDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PartitionFractionDemandFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.DemandFunctions.PopulationBasedDemandFunction">
            <summary>
            # [Name]
            Demand is calculated from the product of growth rate, thermal time and population.
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.ThermalTime">
            <summary>The thermal time</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.OrganPopulation">
            <summary>The number of growing organs</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.ExpansionStress">
            <summary>The expansion stress</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.MaximumOrganWt">
            <summary>The maximum organ wt</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.StartStage">
            <summary>The start stage</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.GrowthDuration">
            <summary>The growth duration</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.AccumulatedThermalTime">
            <summary>The accumulated thermal time</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.ThermalTimeToday">
            <summary>The thermal time today</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when DoDailyInitialisation invoked</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PopulationBasedDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.DemandFunctions.PotentialSizeDemandFunction">
            <summary>
            # [Name]
            Potential size demand function
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.StartStageName">
            <summary>The start stage name</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.EndStageName">
            <summary>The end stage name</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.PotentialGrowthIncrement">
            <summary>The potential growth increment</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.OrganNumber">
            <summary>The organ number</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.ThermalTime">
            <summary>The thermal time</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.AccumThermalTime">
            <summary>The accum thermal time</summary>
        </member>
        <member name="P:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.AccumulatedThermalTime">
            <summary>Gets the accumulated thermal time.</summary>
            <value>The accumulated thermal time.</value>
        </member>
        <member name="M:Models.Functions.DemandFunctions.PotentialSizeDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction">
            <summary>
            # [Name]
            Relative growth rate demand function
            </summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.InitialWt">
            <summary>The initial wt</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.InitialStageName">
            <summary>The initial stage name</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.RelativeGrowthRate">
            <summary>The relative growth rate</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.OrganNumber">
            <summary>The organ number</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.Live">
            <summary>The live</summary>
        </member>
        <member name="F:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.StartWt">
            <summary>The start wt</summary>
        </member>
        <member name="M:Models.Functions.DemandFunctions.RelativeGrowthRateDemandFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.StringComparisonFunction">
            <summary>Value returned is determined according to given criteria</summary>
        </member>
        <member name="P:Models.Functions.StringComparisonFunction.PropertyName">
            <summary>The propertyname</summary>
        </member>
        <member name="P:Models.Functions.StringComparisonFunction.StringValue">
            <summary>The string value</summary>
        </member>
        <member name="F:Models.Functions.StringComparisonFunction.TrueValue">
            <summary>The True Value</summary>
        </member>
        <member name="F:Models.Functions.StringComparisonFunction.FalseValue">
            <summary>The False Value</summary>
        </member>
        <member name="M:Models.Functions.StringComparisonFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.StringComparisonFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.AccumulateByDate">
            <summary>
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="F:Models.Functions.AccumulateByDate.AccumulatedValue">
            <summary>The accumulated value</summary>
        </member>
        <member name="F:Models.Functions.AccumulateByDate.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="F:Models.Functions.AccumulateByDate.clock">
            <summary>The Clock</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByDate.StartDate">
            <summary>The start date</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByDate.EndDate">
            <summary>The end date</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByDate.ResetDate">
            <summary>The reset date</summary>
        </member>
        <member name="M:Models.Functions.AccumulateByDate.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByDate.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>Called at the start of each day</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.AccumulateByDate.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.AccumulateByNumericPhase">
            <summary>
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="F:Models.Functions.AccumulateByNumericPhase.AccumulatedValue">
            <summary>The accumulated value</summary>
        </member>
        <member name="F:Models.Functions.AccumulateByNumericPhase.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="F:Models.Functions.AccumulateByNumericPhase.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.StartStageName">
            <summary>The start stage name in numeric values</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.EndStageName">
            <summary>The end stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.ResetStageName">
            <summary>The reset stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.FractionRemovedOnCut">
            <summary>The fraction removed on Cut event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.FractionRemovedOnHarvest">
            <summary>The fraction removed on Harvest event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.FractionRemovedOnGraze">
            <summary>The fraction removed on Graze event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateByNumericPhase.FractionRemovedOnPrune">
            <summary>The fraction removed on Prun event</summary>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.PostPhenology(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs when phenology routines are complete.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnCut(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnHarvest(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnGraze(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnPrune(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateByNumericPhase.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Functions.TrackerFunction">
            <summary>
            # [Name]
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.variableValues">
            <summary>Values we have kept</summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.referenceValues">
            <summary>Reference values we have kept</summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.inTrackingWindow">
            <summary>Should we be keeping track of the variable?</summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.events">
            <summary>Link to an event service.</summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.variable">
            <summary>The variable to track</summary>
        </member>
        <member name="F:Models.Functions.TrackerFunction.referenceVariable">
            <summary>The variable to track</summary>
        </member>
        <member name="P:Models.Functions.TrackerFunction.Statistic">
            <summary>The statistic to return e.g. value back 300</summary>
        </member>
        <member name="P:Models.Functions.TrackerFunction.StartEventName">
            <summary>Event name to start accumulation</summary>
        </member>
        <member name="P:Models.Functions.TrackerFunction.EndEventName">
            <summary>Event name to stop accumulation</summary>
        </member>
        <member name="M:Models.Functions.TrackerFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.TrackerFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Invoked when simulation commences</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.TrackerFunction.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Invoked when simulation has completed.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.TrackerFunction.OnDoDailyTracking(System.Object,System.EventArgs)">
            <summary>
            Invoked when simulation has completed.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.TrackerFunction.OnStartEvent(System.Object,System.EventArgs)">
            <summary>
            Called to begin keeping track of variable
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.TrackerFunction.OnEndEvent(System.Object,System.EventArgs)">
            <summary>
            Called to end keeping track of variable
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Functions.ArrayFunction">
            <summary>
            Returns the value at the given index. If the index is outside the array, the last value will be returned.
            </summary>
        </member>
        <member name="P:Models.Functions.ArrayFunction.Values">
            <summary>Gets the value.</summary>
        </member>
        <member name="P:Models.Functions.ArrayFunction.Units">
            <summary>Gets the optional units</summary>
        </member>
        <member name="M:Models.Functions.ArrayFunction.Value(System.Int32)">
            <summary>Gets the value of the function.</summary>
        </member>
        <member name="M:Models.Functions.ArrayFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.LeafLightUseEfficiency">
            <summary>
            # [Name]
            This function calculate the light use efficiency (LUE) of leaf at low light (Eff).
            For C3 crops, LUE increases with CO2 concentration while decreases with rising temperature.
            For C4 crops, LUE does not change with CO2 concentration and temperature.
            The current version for C3 crop was based on Bauman et al (2001) ORYZA2000.
            </summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LeafLightUseEfficiency.LUEref">
            <summary>LUE at low light at 340ppm and 20C </summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LeafLightUseEfficiency.pathway">
            <summary>Photosynthesis pathway (C3/C4)</summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.LeafLightUseEfficiency.Value(System.Double,System.Double)">
            <param name="Temp"></param>
            <param name="fCO2"></param>
            <returns></returns>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis">
            <summary>
            # [Name]
            Leaf gross photosynthesis rate is determined using an input gross photosynthesis rate at reference CO2 concentration (340~350ppm) and at optimal temperature of 27.5C, 
            together with the CO2 concentrartion in the air and the daily daytime temperature. 
            For C3 crop, the Ps-CO2 relationship used is from ORYZA2000 Bauman et al (2001)
            For C4 crop, the Ps-CO2 relationship is based on what used for AgPasture Proposed by Cullen et al. (2009) based on FACE experiments
            The temperature response function is the WangEngel fucntion with cardinal tempearture of 0, 27.5 and 35C based on Wang et al (2017)
            </summary>
            
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis.Pgmmax">
            <summary>Leaf gross photosynthesis rate at 340ppm CO2 </summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis.pathway">
            <summary>Photosynthesis pathway (C3/C4)</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis.TemperatureResponse">
            <summary>Function to return a temperature factor for a given function </summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.LeafMaxGrossPhotosynthesis.Value(System.Double,System.Double)">
            <param name="CO2"></param>
            <param name="Fact"></param>
            <returns></returns>
            
        </member>
        <member name="T:Models.Functions.SupplyFunctions.CanopyGrossPhotosynthesisHourly">
            <summary>
             # [Name]
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            float DLL CanopyGrossPhotosynthesis(float fPgMax, float fLUE, float fLAI,
                                            float fLatitude,int nDay,float fHour, float fPARdir,float fPARdif)
            Author:   Enli Wang
            Date:      10.11.1996
            Purpose:   This function calculates the canopy gross photosynthesis rate for a given crop with fPgMax,fLUE,fLAI
                     at latitude (fLatitude) on day (julian day fDay) at fHour
            Inputs:   1. fPgMax   - Maximum leaf gross photosynthesis rate at light saturation (kgCO2/ha.hr)
                     2. fLUE      - Light use efficiency of the leaf at current conditions ((kgCO2/ha leaf.hr)/(W/m2))
                     3. fLAI      - Effective LAI (-)
                     4. fLatitude- Location latitude (Degree)
                     5. nDay      - Julain day (-)
                     6. fHour   - Current time (Hour)
                     7. fPARdir   - Direct component of incident photosynthetic active radiation (W/m2)
                     7. fPARdif   - Diffuse component of incident photosynthetic active radiation (W/m2)
            Outputs:   1. Return   - Calculated canopy photosynthesis rate (kgCO2/ha.hr)
            Functions Called:
                     None
            Comments:   The input variable fPgMax and fLUE should be calculated using the following functions:
                     fPgMax = LeafMaxGrossPhotosynthesis(...);
                     fLUE   = LeafLightUseEfficiency(...)
            Reference:1. Wang,Enli. xxxx.
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</summary>
             <summary>Daily growth increment of total plant biomass</summary>
             <returns>g dry matter/m2 soil/day</returns>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.CanopyGrossPhotosynthesisHourly.KDIF">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.CanopyGrossPhotosynthesisHourly.Value(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="fPgMax"></param>
            <param name="fLUE"></param>
            <param name="fLAI"></param>
            <param name="fLatitude"></param>
            <param name="nDay"></param>
            <param name="fHour"></param>
            <param name="fPARdir"></param>
            <param name="fPARdif"></param>
            <returns></returns>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.CanopyPhotosynthesis">
            <summary>
            # [Name]
            Daily gross CO2 assimilation and biomass growth is simulated using a canopy photosynthesis model adopted from SPASS, which was a modified version of the original SUCROS model.
            The daily gross photosynthesis is called in reponse to event DoPotentialPlantGrowth.
            </summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Plant">
            <summary>The Plant</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Canopy">
            <summary>The Canopy</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Weather">
            <summary>The Weather file</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Clock">
            <summary>The Weather file</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.HourlyGrossCanopyPhotosythesis">
            <summary>Link to the hourly photosynthesis model </summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.LightUseEfficiencyLeaf">
            <summary>Link to the light use efficiency at low light </summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.MaxGrossPhotosynthesisLeaf">
            <summary>Link to the leaf maximum gross photosynthesis rate</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.GrossPhotosynthesis">
            <summary> The amount of DM that is fixed by photosynthesis </summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.DailyCanopyGrossPhotosythesis(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            float DLL DailyCanopyGrossPhotosythesis(LPSTR pCrop,float fLAI, float fLatitude,int nDay,
                                                    float fRad,float fTmpMax,float fTmpMin,float fCO2,
                                                    PZN pLfN,PZRESPONSE pTmpRsp)
            Author:   Enli Wang
            Date:      10.11.1996
            Purpose:   This function calculates the daily canopy photosynthesis rate under optimal water condition
            Inputs:   1. pCROP      - Pointer to a string containing the crop name,use the following names:
                                   WHEAT,BARLEY,MAIZE,MILLET,SOGHUM,POTATO,SUGARBEET,SOYBEAN,COTTON,C3,C4,CAM
                     2. fLAI         - Effective leaf area index (-)
                      3. fLatitude   - Location latitude (Degree)
                      4. nDay         - Julain day (-)
                      5. fRad         - Daily global radiation (MJ/d)
                      6. fTmpMax      - Daily maximum air temperature(C)
                      7. fTmpMin      - Daily minimum air temperature(C)
                      8. fCO2         - Current CO2 concentration in the air (vppm)
                     9. pLfN      - Pointer to a ORGANNC structure containing leaf nitrogen concentration
                     10. pTmpRsp      - Pointer to a ZRESPONSE structure containing temperature response data for photosynthesis
            Outputs:   1. Return      - Calculated daily gross photosynthesis rate of unit leaf area (kgCO2/ha.day)
            Functions Called:
                     LeafMaxGrossPhotosynthesis
                     LeafLightUseEfficiency
                     CanopyGrossPhotosynthesis
            Comments:   This function checks at first the data contained under pResp. If these data are valid, they will be
                     used to construct the temperature response function for photosynthesis. If not, the cardinal temperatures
                     at pCardTemp will be used to construct the temperature response function. If pCardTemp equals NULL,
                     a minimum, optimum and maximum temperature of 0, 22 and 35C will be assumed respectively.
                     If pLfN equals NULL, no nitrogen stress will be considered.
            Reference:1. Wang,Enli. xxxx.
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% </summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.CanopyPhotosynthesis.Value(System.Int32)">
            <summary>Daily growth increment of total plant biomass</summary>
            <returns>g dry matter/m2 soil/day</returns>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.RUECO2Function">
            <summary>
            This model calculates the CO<sub>2</sub> impact on RUE using the approach of [Reyenga1999].
            </summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.RUECO2Function.PhotosyntheticPathway">
            <summary>The photosynthetic pathway</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUECO2Function.MetData">
            <summary>The met data</summary>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.RUECO2Function.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">
            Average daily temperature too high for RUE CO2 Function
            or
            CO2 concentration too low for RUE CO2 Function
            or
            Unknown photosynthetic pathway in RUECO2Function
            </exception>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.RUECO2Function.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.SupplyFunctions.RUEModel">
            <summary>
            # [Name]
            Biomass fixation is modelled as the product of intercepted radiation and its conversion efficiency, the radiation use efficiency (RUE) ([Monteith1977]).  
              This approach simulates net photosynthesis rather than providing separate estimates of growth and respiration.  
              The potential photosynthesis calculated using RUE is then adjusted according to stress factors, these account for plant nutrition (FN), air temperature (FT), vapour pressure deficit (FVPD), water supply (FW) and atmospheric CO<sub>2</sub> concentration (FCO2).  
              NOTE: RUE in this model is expressed as g/MJ for a whole plant basis, including both above and below ground growth.
            </summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.RUE">
            <summary>The rue</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.FCO2">
            <summary>The fc o2</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.FN">
            <summary>The function</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.FT">
            <summary>The ft</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.FW">
            <summary>The fw</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.FVPD">
            <summary>The FVPD</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.SupplyFunctions.RUEModel.RadnInt">
            <summary>The radiation interception data</summary>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.RUEModel.VPD">
            <summary>Gets the VPD.</summary>
            <value>The VPD.</value>
        </member>
        <member name="P:Models.Functions.SupplyFunctions.RUEModel.RueAct">
            <summary>
            Total plant "actual" radiation use efficiency (for the day) corrected by reducing factors (g biomass/MJ global solar radiation) CHCK-EIT
            </summary>
            <value>The rue act.</value>
        </member>
        <member name="M:Models.Functions.SupplyFunctions.RUEModel.Value(System.Int32)">
            <summary>Daily growth increment of total plant biomass</summary>
            <returns>g dry matter/m2 soil/day</returns>
        </member>
        <member name="T:Models.Functions.WangEngelTempFunction">
            <summary>
            # [Name]
            A function that adds values from child functions
            </summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.MinTemp">
            <summary>Minimum Temperature.</summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.OptTemp">
            <summary>Optimum Temperature</summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.MaxTemp">
            <summary>Maximum Temperature</summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.RefTemp">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.WangEngelTempFunction.MetData">
            <summary>The met data</summary>
        </member>
        <member name="P:Models.Functions.WangEngelTempFunction.MaximumTemperatureWeighting">
            <summary>The maximum temperature weighting</summary>
        </member>
        <member name="M:Models.Functions.WangEngelTempFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.WangEngelTempFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.BoundFunction">
            <summary>
            Bounds the child function between lower and upper bounds
            </summary>
        </member>
        <member name="F:Models.Functions.BoundFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.BoundFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.BoundFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.LinearAfterThresholdFunction">
            <summary>
            Function to return the value for a function with a trigger and slope from it
                           /
                          /
            -------------/
                        x
            </summary>
        </member>
        <member name="P:Models.Functions.LinearAfterThresholdFunction.XProperty">
            <summary>The x property</summary>
        </member>
        <member name="P:Models.Functions.LinearAfterThresholdFunction.XTrigger">
            <summary>
            The trigger value on the X axis
            </summary>
        </member>
        <member name="P:Models.Functions.LinearAfterThresholdFunction.Slope">
            <summary>
            The slope or gradient of the linear series
            </summary>
        </member>
        <member name="M:Models.Functions.LinearAfterThresholdFunction.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Functions.LinearAfterThresholdFunction.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="xproperty"></param>
        </member>
        <member name="M:Models.Functions.LinearAfterThresholdFunction.Value(System.Int32)">
            <summary>
            Get the value of the function
            </summary>
            <param name="arrayIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.LinearAfterThresholdFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.SoilWaterScale">
            <summary>
            # [Name]
            A simple scale to convert soil water content into a value between 0 and 2
            </summary>
        </member>
        <member name="M:Models.Functions.SoilWaterScale.Value(System.Int32)">
            <summary>Gets the value of the function.</summary>
        </member>
        <member name="T:Models.Functions.MovingAverageFunction">
            <summary>
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="P:Models.Functions.MovingAverageFunction.NumberOfDays">
            <summary>The number of days over which to calculate the moving average</summary>
        </member>
        <member name="P:Models.Functions.MovingAverageFunction.StageToStartMovingAverage">
            <summary>The stage to start calculating moving average</summary>
        </member>
        <member name="F:Models.Functions.MovingAverageFunction.AccumulatedValues">
            <summary>The accumulated value</summary>
        </member>
        <member name="P:Models.Functions.MovingAverageFunction.InitialisedToday">
            <summary>Was the moving average array initialised today</summary>
        </member>
        <member name="P:Models.Functions.MovingAverageFunction.Calculate">
            <summary>Was the moving average array initialised today</summary>
        </member>
        <member name="P:Models.Functions.MovingAverageFunction.ChildFunction">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.MovingAverageFunction.OnSowing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.MovingAverageFunction.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.Functions.MovingAverageFunction.EndOfDay(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs at the end of the day.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.MovingAverageFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.MovingAverageFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.HoldFunction">
            <summary>
            Returns the a value which is updated daily until a given stage is reached, beyond which it is held constant
            </summary>
        </member>
        <member name="F:Models.Functions.HoldFunction._Value">
            <summary>The _ value</summary>
        </member>
        <member name="P:Models.Functions.HoldFunction.WhenToHold">
            <summary>The set event</summary>
        </member>
        <member name="F:Models.Functions.HoldFunction.ValueToHold">
            <summary>The value to hold after event</summary>
        </member>
        <member name="F:Models.Functions.HoldFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="M:Models.Functions.HoldFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.HoldFunction.OnDoUpdate(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs when phenology routines are complete.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.HoldFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.HoldFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.DeltaFunction">
            <summary>
            This function returns the daily delta for its child function
            </summary>
        </member>
        <member name="F:Models.Functions.DeltaFunction.YesterdaysValue">
            <summary>The accumulated value</summary>
        </member>
        <member name="P:Models.Functions.DeltaFunction.StartStageName">
            <summary>The start stage name</summary>
        </member>
        <member name="F:Models.Functions.DeltaFunction.Integral">
            <summary>The child function to return a delta for</summary>
        </member>
        <member name="F:Models.Functions.DeltaFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="M:Models.Functions.DeltaFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DeltaFunction.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.DeltaFunction.OnStageReset(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.DeltaFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.MovingSumFunction">
            <summary>
            # [Name]
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="P:Models.Functions.MovingSumFunction.NumberOfDays">
            <summary>The number of days over which to calculate the moving sum</summary>
        </member>
        <member name="F:Models.Functions.MovingSumFunction.AccumulatedValues">
            <summary>The accumulated value</summary>
        </member>
        <member name="P:Models.Functions.MovingSumFunction.ChildFunction">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.MovingSumFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.MovingSumFunction.EndOfDay(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs when phenology routines are complete.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.MovingSumFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.MovingSumFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.IFunction">
            <summary>Interface for a function</summary>
        </member>
        <member name="M:Models.Functions.IFunction.Value(System.Int32)">
            <summary>Gets the value of the function.</summary>
        </member>
        <member name="T:Models.Functions.QualitativePPEffect">
            <summary>
             # [Name]
             Qualitative Photoperiod effect on developmental rate
            </summary>
        </member>
        <member name="F:Models.Functions.QualitativePPEffect.Photoperiod">
            <summary>The photoperiod</summary>
        </member>
        <member name="P:Models.Functions.QualitativePPEffect.OptimumPhotoperiod">
            <summary>Gets or sets the Optimum Photoperiod</summary>
            <value>Optimum Photoperiod</value>
        </member>
        <member name="P:Models.Functions.QualitativePPEffect.CriticalPhotoperiod">
            <summary>Gets or sets the Critical Photoperiod</summary>
            <value>Critical Photoperiod</value>
        </member>
        <member name="M:Models.Functions.QualitativePPEffect.Value(System.Int32)">
            <summary>Photoperiod factor</summary>
        </member>
        <member name="T:Models.Functions.AccumulateFunction">
            <summary>
            A function that accumulates values from child functions
            </summary>
        </member>
        <member name="F:Models.Functions.AccumulateFunction.AccumulatedValue">
            <summary>The accumulated value</summary>
        </member>
        <member name="F:Models.Functions.AccumulateFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="F:Models.Functions.AccumulateFunction.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.StartStageName">
            <summary>The start stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.EndStageName">
            <summary>The end stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.ResetStageName">
            <summary>The reset stage name</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.FractionRemovedOnCut">
            <summary>The fraction removed on Cut event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.FractionRemovedOnHarvest">
            <summary>The fraction removed on Harvest event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.FractionRemovedOnGraze">
            <summary>The fraction removed on Graze event</summary>
        </member>
        <member name="P:Models.Functions.AccumulateFunction.FractionRemovedOnPrune">
            <summary>The fraction removed on Prun event</summary>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.PostPhenology(System.Object,System.EventArgs)">
            <summary>Called by Plant.cs when phenology routines are complete.</summary>
            <param name="sender">Plant.cs</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnCut(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnHarvest(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnGraze(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnPrune(System.Object,System.EventArgs)">
            <summary>Called when [cut].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when [EndCrop].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AccumulateFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.AddFunction">
            <summary>
            A function that adds values from child functions
            </summary>
        </member>
        <member name="F:Models.Functions.AddFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.AddFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.AddFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.AgeCalculatorFunction">
            <summary>
            # [Name]
            An age calculator function
            </summary>
        </member>
        <member name="M:Models.Functions.AgeCalculatorFunction.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.AgeCalculatorFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="T:Models.Functions.AirTemperatureFunction">
            <summary>
            A value is calculated from the mean of 3-hourly estimates of air temperature based on daily max and min temperatures.  
            </summary>
        </member>
        <member name="F:Models.Functions.AirTemperatureFunction.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.AirTemperatureFunction.XYPairs">
            <summary>Gets or sets the xy pairs.</summary>
            <value>The xy pairs.</value>
        </member>
        <member name="F:Models.Functions.AirTemperatureFunction.num3hr">
            <summary>Number of 3 hourly temperatures</summary>
        </member>
        <member name="F:Models.Functions.AirTemperatureFunction.t_range_fract">
            <summary>Fraction_of of day's range_of for this 3 hr period</summary>
        </member>
        <member name="M:Models.Functions.AirTemperatureFunction.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.Functions.AirTemperatureFunction"/> class.</summary>
        </member>
        <member name="M:Models.Functions.AirTemperatureFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.AirTemperatureFunction.Linint3hrlyTemp(System.Double,System.Double,Models.Functions.XYPairs)">
            <summary>Linint3hrlies the temporary.</summary>
            <param name="tmax">The tmax.</param>
            <param name="tmin">The tmin.</param>
            <param name="ttFn">The tt function.</param>
        </member>
        <member name="M:Models.Functions.AirTemperatureFunction.temp_3hr(System.Double,System.Double,System.Int32)">
            <summary>Temp_3hrs the specified tmax.</summary>
            <param name="tmax">The tmax.</param>
            <param name="tmin">The tmin.</param>
            <param name="period">The period.</param>
        </member>
        <member name="M:Models.Functions.AirTemperatureFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.BellCurveFunction">
            <summary>
            # [Name]
            Calculates the maximum leaf size (mm2/leaf) given its node position (Elings, 2000 - Agronomy Journal 92, 436-444)
            </summary>
        </member>
        <member name="F:Models.Functions.BellCurveFunction.LargestLeafPosition">
            <summary>The largest leaf position</summary>
        </member>
        <member name="F:Models.Functions.BellCurveFunction.AreaMax">
            <summary>The area maximum</summary>
        </member>
        <member name="F:Models.Functions.BellCurveFunction.Breadth">
            <summary>The breadth</summary>
        </member>
        <member name="F:Models.Functions.BellCurveFunction.Skewness">
            <summary>The skewness</summary>
        </member>
        <member name="F:Models.Functions.BellCurveFunction.Structure">
            <summary>The structure</summary>
        </member>
        <member name="M:Models.Functions.BellCurveFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="T:Models.Functions.Constant">
            <summary>
            A constant value function
            </summary>
        </member>
        <member name="P:Models.Functions.Constant.FixedValue">
            <summary>Gets the value.</summary>
        </member>
        <member name="P:Models.Functions.Constant.Units">
            <summary>Gets the optional units</summary>
        </member>
        <member name="M:Models.Functions.Constant.Value(System.Int32)">
            <summary>Gets the value of the function.</summary>
        </member>
        <member name="M:Models.Functions.Constant.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.DivideFunction">
            <summary>
            Starting with the first child function, recursively divide by the values of the subsequent child functions
            </summary>
        </member>
        <member name="F:Models.Functions.DivideFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.DivideFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.DivideFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.ExponentialFunction">
            <summary>
            # [Name]
            An exponential function
            </summary>
        </member>
        <member name="M:Models.Functions.ExponentialFunction.#ctor">
            <summary>ExponentialFunction Constructor</summary>
        </member>
        <member name="P:Models.Functions.ExponentialFunction.A">
            <summary>a</summary>
        </member>
        <member name="P:Models.Functions.ExponentialFunction.B">
            <summary>The b</summary>
        </member>
        <member name="P:Models.Functions.ExponentialFunction.C">
            <summary>The c</summary>
        </member>
        <member name="F:Models.Functions.ExponentialFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.ExponentialFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Sigmoid function must have only one argument</exception>
        </member>
        <member name="T:Models.Functions.ExpressionFunction">
            <summary>
            A mathematical expression is evaluated using variables exposed within the Plant Modelling Framework.
            </summary>
        </member>
        <member name="F:Models.Functions.ExpressionFunction.expression">
            <summary>The expression.</summary>
        </member>
        <member name="P:Models.Functions.ExpressionFunction.Expression">
            <summary>The expression.</summary>
        </member>
        <member name="F:Models.Functions.ExpressionFunction.fn">
            <summary>The function</summary>
        </member>
        <member name="F:Models.Functions.ExpressionFunction.parsed">
            <summary>The parsed</summary>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.Parse(APSIM.Shared.Utilities.ExpressionEvaluator,System.String)">
            <summary>Parses the specified function.</summary>
            <param name="fn">The function.</param>
            <param name="ExpressionProperty">The expression property.</param>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.FillVariableNames(APSIM.Shared.Utilities.ExpressionEvaluator,Models.Core.Model,System.Int32)">
            <summary>Fills the variable names.</summary>
            <param name="fn">The function.</param>
            <param name="RelativeTo">The relative to.</param>
            <param name="arrayIndex">The array index</param>
            <exception cref="T:System.Exception">Cannot find variable:  + sym.m_name +  in function:  + RelativeTo.Name</exception>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.Evaluate(APSIM.Shared.Utilities.ExpressionEvaluator)">
            <summary>Evaluates the specified function.</summary>
            <param name="fn">The function.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.Evaluate(System.String,Models.Core.Model)">
            <summary>
            Return the value of the specified property as an object. The PropertyName
            is relative to the RelativeTo argument (usually Plant).
            Format:
            [function(]VariableName[)]
            Where:
            function is optional and can be one of Sum, subtract, multiply, divide, max, min
            VariableName is the name of a Plant variable. It can also include an array. Array can
            have a filter inside of square brackets. Filter can be an array index (0 based)
            or be the name of a class or base class.
            e.g. Leaf.MinT
            sum(Leaf.Leaves[].Live.Wt)              - sums all live weights of all objects in leaves array.
            subtract(Leaf.Leaves[].Live.Wt)         - subtracts all live weights of all objects in leaves array.
            Leaf.Leaves[1].Live.Wt                  - returns the live weight of the 2nd element of the leaves array.
            sum(Leaf.Leaves[AboveGround].Live.Wt)   - returns the live weight of the 2nd element of the leaves array.
            </summary>
            <param name="Expression">The expression.</param>
            <param name="RelativeTo">The relative to.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.ExpressionFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.ExternalVariable">
            <summary>
            # [Name]
            Returns the value of a nominated external APSIM numerical variable.
            Note: This should be merged with the variable function when naming convention
            to refer to internal and external variable is standardized. FIXME
            </summary>
        </member>
        <member name="P:Models.Functions.ExternalVariable.VariableName">
            <summary>The variable name</summary>
        </member>
        <member name="M:Models.Functions.ExternalVariable.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="T:Models.Functions.LessThanFunction">
            <summary>Value returned is determined according to given criteria</summary>
        </member>
        <member name="F:Models.Functions.LessThanFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.LessThanFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.LessThanFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.LinearInterpolationFunction">
            <summary>
            Linear interpolation function
            </summary>
        </member>
        <member name="F:Models.Functions.LinearInterpolationFunction.YsAreAllTheSame">
            <summary>The ys are all the same</summary>
        </member>
        <member name="F:Models.Functions.LinearInterpolationFunction.XYPairs">
            <summary>Gets the xy pairs.</summary>
        </member>
        <member name="P:Models.Functions.LinearInterpolationFunction.XProperty">
            <summary>The x property</summary>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.#ctor(System.String,System.Double[],System.Double[])">
            <summary>Constructor</summary>
            <param name="xproperty">x property</param>
            <param name="x">x values.</param>
            <param name="y">y values.</param>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.OnCreated">
            <summary>Called when model has been created.</summary>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Cannot find value for  + Name +  XProperty:  + XProperty</exception>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.ValueForX(System.Double)">
            <summary>Values for x.</summary>
            <param name="XValue">The x value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="M:Models.Functions.LinearInterpolationFunction.LookForYAxisTitle(Models.Core.IModel)">
            <summary>
            Return the y axis title.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.Functions.MaximumFunction">
            <summary>Maximize the values of the children of this node</summary>
            \pre All children have to contain a public function "Value"
            \retval Maximum value of all children of this node. Return -999999999 if no child.
        </member>
        <member name="F:Models.Functions.MaximumFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.MaximumFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.MaximumFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.MinimumFunction">
            <summary>Minimize the values of the children of this node</summary>
            \pre All children have to contain a public function "Value"
            \retval Minimum value of all children of this node. Return 999999999 if no child.
        </member>
        <member name="F:Models.Functions.MinimumFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.MinimumFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.MinimumFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.MultiplyFunction">
            <summary>Multiplies the values of the children of this node</summary>
            \pre All children have to contain a public function "Value"
            \retval Product of value of all children of this node. Return 1 if no child.
        </member>
        <member name="F:Models.Functions.MultiplyFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.MultiplyFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.MultiplyFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.OnEventFunction">
            <summary>
            Returns the a value depending on whether an event has occurred.
            </summary>
        </member>
        <member name="F:Models.Functions.OnEventFunction._Value">
            <summary>The _ value</summary>
        </member>
        <member name="P:Models.Functions.OnEventFunction.SetEvent">
            <summary>The set event</summary>
        </member>
        <member name="P:Models.Functions.OnEventFunction.ReSetEvent">
            <summary>The re set event</summary>
        </member>
        <member name="F:Models.Functions.OnEventFunction.PreEventValue">
            <summary>The pre event value</summary>
        </member>
        <member name="F:Models.Functions.OnEventFunction.PostEventValue">
            <summary>The post event value</summary>
        </member>
        <member name="M:Models.Functions.OnEventFunction.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.OnEventFunction.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.Functions.OnEventFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.OnEventFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.PhaseBasedSwitch">
            <summary>
            # [Name]
            Returns a value of 1 if phenology is between start and end phases and otherwise a value of 0.
            </summary>
        </member>
        <member name="F:Models.Functions.PhaseBasedSwitch.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="P:Models.Functions.PhaseBasedSwitch.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.Functions.PhaseBasedSwitch.End">
            <summary>The end</summary>
        </member>
        <member name="M:Models.Functions.PhaseBasedSwitch.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">
            Phase start name not set: + Name
            or
            Phase end name not set: + Name
            </exception>
        </member>
        <member name="M:Models.Functions.PhaseBasedSwitch.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.PhaseLookup">
            <summary>
            Look up a value based upon the current growth phase.
            </summary>
        </member>
        <member name="F:Models.Functions.PhaseLookup.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.PhaseLookup.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.PhaseLookup.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.PhaseLookupValue">
            <summary>
            Returns the value of it child function to the PhaseLookup parent function if current phenology is between Start and end stages specified.
            </summary>
        </member>
        <member name="F:Models.Functions.PhaseLookupValue.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.Functions.PhaseLookupValue.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="P:Models.Functions.PhaseLookupValue.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.Functions.PhaseLookupValue.End">
            <summary>The end</summary>
        </member>
        <member name="M:Models.Functions.PhaseLookupValue.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">
            Phase start name not set: + Name
            or
            Phase end name not set: + Name
            </exception>
        </member>
        <member name="P:Models.Functions.PhaseLookupValue.InPhase">
            <summary>Gets a value indicating whether [in phase].</summary>
            <value><c>true</c> if [in phase]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Models.Functions.PhaseLookupValue.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.PhotoperiodDeltaFunction">
            <summary>
            # [Name]
            Returns the difference between today's and yesterday's photoperiods in hours.
            </summary>
        </member>
        <member name="F:Models.Functions.PhotoperiodDeltaFunction.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.Functions.PhotoperiodDeltaFunction.Clock">
            <summary>The clock</summary>
        </member>
        <member name="F:Models.Functions.PhotoperiodDeltaFunction.Twilight">
            <summary>The twilight</summary>
        </member>
        <member name="M:Models.Functions.PhotoperiodDeltaFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.PhotoperiodFunction">
            <summary>
            Returns the duration of the day, or photoperiod, in hours.  This is calculated using the specified latitude (given in the weather file)
            and twilight sun angle threshold.  If a variable called ClimateControl.PhotoPeriod is found in the simulation, it will be used instead.
            </summary>
            <remarks>The day length is calculated with \ref MathUtilities.DayLength.</remarks>
            \pre A \ref Models.WeatherFile function has to exist.
            \pre A \ref Models.Clock function has to be existed to retrieve day of year
            \param Twilight The interval between sunrise or sunset and the time when the true centre of the sun is below the horizon as a specified angle.
            \retval The day length of a specified day and location. Variable "photoperiod" will be returned if simulation environment has a variable called ClimateControl.PhotoPeriod.
        </member>
        <member name="F:Models.Functions.PhotoperiodFunction.MetData">
            <summary>The met data.</summary>
        </member>
        <member name="F:Models.Functions.PhotoperiodFunction.Clock">
            <summary>The clock.</summary>
        </member>
        <member name="P:Models.Functions.PhotoperiodFunction.Twilight">
            <summary>The twilight angle.</summary>
        </member>
        <member name="P:Models.Functions.PhotoperiodFunction.DayLength">
            <summary>The daylight length.</summary>
        </member>
        <member name="M:Models.Functions.PhotoperiodFunction.Value(System.Int32)">
            <summary>Gets the main output of this function.</summary>
            <param name="arrayIndex">Not expected for this function.</param>
            <returns>The daylight duration (hours).</returns>
        </member>
        <member name="M:Models.Functions.PhotoperiodFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.PowerFunction">
            <summary>
            # [Name]
            Raises the value of the child to the power of the exponent specified
            </summary>
        </member>
        <member name="M:Models.Functions.PowerFunction.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="P:Models.Functions.PowerFunction.Exponent">
            <summary>The exponent</summary>
        </member>
        <member name="F:Models.Functions.PowerFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.PowerFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Power function must have only one argument</exception>
        </member>
        <member name="T:Models.Functions.SigmoidFunction">
            <summary>
            Takes the value of the child as the x value and returns the y value from a sigmoid of the form y = Xmax * 1/1+exp(-(x-Xo)/b)
            </summary>
        </member>
        <member name="F:Models.Functions.SigmoidFunction.Ymax">
            <summary>The ymax</summary>
        </member>
        <member name="F:Models.Functions.SigmoidFunction.XValue">
            <summary>The x value</summary>
        </member>
        <member name="F:Models.Functions.SigmoidFunction.Xo">
            <summary>The Xo</summary>
        </member>
        <member name="F:Models.Functions.SigmoidFunction.b">
            <summary>The b</summary>
        </member>
        <member name="M:Models.Functions.SigmoidFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Error with values to Sigmoid function</exception>
        </member>
        <member name="M:Models.Functions.SigmoidFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.SoilTemperatureDepthFunction">
            <summary>
            # [Name]
            Return soil temperature (oC) from a specified soil profile layer.
            The source of soil temperature array can be either SoilN ("st" property) or SoilTemp ("ave_soil_temp" property)
            </summary>
        </member>
        <member name="F:Models.Functions.SoilTemperatureDepthFunction.Soil">
            <summary>The soil</summary>
        </member>
        <member name="P:Models.Functions.SoilTemperatureDepthFunction.Depth">
            <summary>The depth</summary>
        </member>
        <member name="M:Models.Functions.SoilTemperatureDepthFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:Models.Functions.SoilTemperatureDepthFunction.LayerIndex(System.Double,System.Double[])">
            <summary>Returns the soil layer index for a specified soil depth (mm)</summary>
            <param name="depth">Soil depth (mm)</param>
            <param name="dlayer">Array of soil layer depths in the profile (mm)</param>
            <returns>soil layer index</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Models.Functions.SoilTemperatureFunction">
            <summary>
            Returns the temperature of the surface soil layer
            </summary>
        </member>
        <member name="F:Models.Functions.SoilTemperatureFunction.XYPairs">
            <summary>The xy pairs</summary>
        </member>
        <member name="P:Models.Functions.SoilTemperatureFunction.maxt_soil_surface">
            <summary>The maxt_soil_surface</summary>
        </member>
        <member name="P:Models.Functions.SoilTemperatureFunction.mint_soil_surface">
            <summary>The mint_soil_surface</summary>
        </member>
        <member name="M:Models.Functions.SoilTemperatureFunction.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="M:Models.Functions.SoilTemperatureFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.Functions.SoilTemperatureFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.SoilTemperatureWeightedFunction">
            <summary>
            # [Name]
            Returns the temperature of the surface soil layer with the weighting: " +
            0.25*DayBeforeYesterday + 0.5*Yesterday + 0.25*Today
            </summary>
        </member>
        <member name="M:Models.Functions.SoilTemperatureWeightedFunction.#ctor">
            <summary>constructor</summary>
        </member>
        <member name="F:Models.Functions.SoilTemperatureWeightedFunction.DayBeforeYesterday">
            <summary>The day before yesterday</summary>
        </member>
        <member name="F:Models.Functions.SoilTemperatureWeightedFunction.Yesterday">
            <summary>The yesterday</summary>
        </member>
        <member name="F:Models.Functions.SoilTemperatureWeightedFunction.Today">
            <summary>The today</summary>
        </member>
        <member name="F:Models.Functions.SoilTemperatureWeightedFunction.XYPairs">
            <summary>Gets or sets the xy pairs.</summary>
            <value>The xy pairs.</value>
        </member>
        <member name="P:Models.Functions.SoilTemperatureWeightedFunction.maxt_soil_surface">
            <summary>The maxt_soil_surface</summary>
        </member>
        <member name="M:Models.Functions.SoilTemperatureWeightedFunction.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>EventHandler for OnPrepare.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.SoilTemperatureWeightedFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Models.Functions.SplineInterpolationFunction">
            <summary>
            # [Name]
            A value is returned via Akima spline interpolation of a given set of XY pairs
            </summary>
        </member>
        <member name="F:Models.Functions.SplineInterpolationFunction.XYPairs">
            <summary>Gets the xy pairs.</summary>
            <value>The xy pairs.</value>
        </member>
        <member name="P:Models.Functions.SplineInterpolationFunction.XProperty">
            <summary>The x property</summary>
        </member>
        <member name="F:Models.Functions.SplineInterpolationFunction.spline">
            <summary>The spline</summary>
        </member>
        <member name="M:Models.Functions.SplineInterpolationFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Functions.SplineInterpolationFunction"/> class.
            </summary>
        </member>
        <member name="M:Models.Functions.SplineInterpolationFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Cannot find value for  + Name +  XProperty:  + XProperty</exception>
        </member>
        <member name="M:Models.Functions.SplineInterpolationFunction.Interpolate(System.Double)">
            <summary>Interpolates the specified x.</summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Functions.StageBasedInterpolation">
            <summary>
            # [Name]
            A value is linearly interpolated between phenological growth stages
            </summary>
        </member>
        <member name="F:Models.Functions.StageBasedInterpolation._Proportional">
            <summary>The _ proportional</summary>
        </member>
        <member name="F:Models.Functions.StageBasedInterpolation.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="P:Models.Functions.StageBasedInterpolation.Stages">
            <summary>Gets or sets the stages.</summary>
            <value>The stages.</value>
        </member>
        <member name="P:Models.Functions.StageBasedInterpolation.Codes">
            <summary>Gets or sets the codes.</summary>
            <value>The codes.</value>
        </member>
        <member name="F:Models.Functions.StageBasedInterpolation.StageCodes">
            <summary>The stage codes</summary>
        </member>
        <member name="P:Models.Functions.StageBasedInterpolation.Proportional">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Models.Functions.StageBasedInterpolation"/> is proportional.
            </summary>
            <value><c>true</c> if proportional; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Models.Functions.StageBasedInterpolation.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Functions.StageBasedInterpolation.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Something is a miss here.  Specifically, the number of values in your StageCode function don't match the number of stage names.  Sort it out numb nuts!!</exception>
        </member>
        <member name="T:Models.Functions.SubtractFunction">
            <summary>
            From the value of the first child function, subtract the values of the subsequent children functions
            </summary>
        </member>
        <member name="F:Models.Functions.SubtractFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="M:Models.Functions.SubtractFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.SubtractFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="M:Models.Functions.SubtractFunction.DocumentMathFunction(Models.Core.IModel,System.Char,System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>
            Document the mathematical function.
            </summary>
            <param name="function">The IModel function.</param>
            <param name="op">The operator</param>
            <param name="tags">The tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="M:Models.Functions.SubtractFunction.AddChildToMsg(Models.Core.IModel,System.String@)">
            <summary>
            Return the name of the child or it's value if the name of the child is equal to 
            the written value of the child. i.e. if the value is 1 and the name is 'one' then
            return the value, instead of the name.
            </summary>
            <param name="child">The child model.</param>
            <param name="msg">The message to add to.</param>
            <returns>True if child's value was added to msg.</returns>
        </member>
        <member name="T:Models.Functions.VariableReference">
            <summary>
            # [Name]
            Return the value of a nominated internal \ref Models.PMF.Plant "Plant" numerical variable
            </summary>
            \warning You have to specify the full path of numerical variable, which starts from the child of \ref Models.PMF.Plant "Plant".
            For example,  <b>[Phenology].ThermalTime.Value</b> refers to value of ThermalTime under phenology function.
        </member>
        <member name="P:Models.Functions.VariableReference.VariableName">
            <summary>The variable name</summary>
        </member>
        <member name="M:Models.Functions.VariableReference.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.VariableReference.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.WeightedTemperatureFunction">
            <summary>
            This Function calculates a mean daily temperature from Max and Min weighted toward Max according to the specified MaximumTemperatureWeighting factor.  This is then passed into the XY matrix as the x property and the function returns the y value
            </summary>
        </member>
        <member name="F:Models.Functions.WeightedTemperatureFunction.XYPairs">
            <summary>Gets the xy pairs.</summary>
            <value>The xy pairs.</value>
        </member>
        <member name="P:Models.Functions.WeightedTemperatureFunction.MaximumTemperatureWeighting">
            <summary>The maximum temperature weighting</summary>
        </member>
        <member name="F:Models.Functions.WeightedTemperatureFunction.MetData">
            <summary>The met data</summary>
        </member>
        <member name="M:Models.Functions.WeightedTemperatureFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="M:Models.Functions.WeightedTemperatureFunction.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Functions.XYPairs">
            <summary>
            Returns a y value from the specified xy matrix corresponding to the current value of the Xproperty
            </summary>
        </member>
        <member name="P:Models.Functions.XYPairs.X">
            <summary>Gets or sets the x.</summary>
            <value>The x.</value>
        </member>
        <member name="P:Models.Functions.XYPairs.Y">
            <summary>Gets or sets the y.</summary>
            <value>The y.</value>
        </member>
        <member name="M:Models.Functions.XYPairs.Value(System.Int32)">
            <summary>Gets the value.</summary>
            <value>The value.</value>
            <exception cref="T:System.Exception">Cannot call Value on XYPairs function. Must be indexed.</exception>
        </member>
        <member name="M:Models.Functions.XYPairs.ValueIndexed(System.Double)">
            <summary>Values the indexed.</summary>
            <param name="dX">The d x.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Graph.Node">
            <summary>Encapsulates a node on a directed graph</summary>
        </member>
        <member name="P:Models.Graph.Node.Name">
            <summary>Name of node</summary>
        </member>
        <member name="P:Models.Graph.Node.Location">
            <summary>Location of node (centre point)</summary>
        </member>
        <member name="P:Models.Graph.Node.Colour">
            <summary>Fill colour of node</summary>
        </member>
        <member name="P:Models.Graph.Node.OutlineColour">
            <summary>Outline colour of node</summary>
        </member>
        <member name="M:Models.Graph.Node.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:Models.Graph.Arc">
            <summary>Encapsulates an arc on a directed graph</summary>
        </member>
        <member name="P:Models.Graph.Arc.SourceName">
            <summary>Source node (where arc starts)</summary>
        </member>
        <member name="P:Models.Graph.Arc.DestinationName">
            <summary>Destination node (where arc finishes)</summary>
        </member>
        <member name="P:Models.Graph.Arc.Location">
            <summary>Location of arc (centre/control point)</summary>
        </member>
        <member name="P:Models.Graph.Arc.Colour">
            <summary>Colour of arc</summary>
        </member>
        <member name="P:Models.Graph.Arc.Text">
            <summary>Text to show on arc</summary>
        </member>
        <member name="T:Models.Graph.DirectedGraph">
            <summary>Encapsulates a directed graph</summary>
        </member>
        <member name="P:Models.Graph.DirectedGraph.Nodes">
            <summary>A collection of nodes</summary>
        </member>
        <member name="P:Models.Graph.DirectedGraph.Arcs">
            <summary>A collection of arcs</summary>
        </member>
        <member name="M:Models.Graph.DirectedGraph.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Graph.DirectedGraph.Begin">
            <summary>Begin constrction of graph</summary>
        </member>
        <member name="M:Models.Graph.DirectedGraph.End">
            <summary>End constrction of graph</summary>
        </member>
        <member name="M:Models.Graph.DirectedGraph.AddNode(System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>Add a new node to the graph</summary>
        </member>
        <member name="M:Models.Graph.DirectedGraph.AddArc(System.String,System.String,System.String,System.Drawing.Color)">
            <summary>Add a new arc to the graph</summary>
        </member>
        <member name="T:Models.Graph.GraphPage">
            <summary>Descibes a page of graphs for the tags system.</summary>
        </member>
        <member name="F:Models.Graph.GraphPage.graphs">
            <summary>The image to put into the doc.</summary>
        </member>
        <member name="F:Models.Graph.GraphPage.name">
            <summary>Unique name for image. Used to save image to temp folder.</summary>
        </member>
        <member name="T:Models.Graph.IGraphable">
            <summary>
            An interface for a model that can graph itself.
            </summary>
        </member>
        <member name="M:Models.Graph.IGraphable.GetSeriesToPutOnGraph(Models.Core.IStorageReader,System.Collections.Generic.List{Models.Graph.SeriesDefinition})">
            <summary>Called by the graph presenter to get a list of all actual series to put on the graph.</summary>
            <param name="definitions">A list of definitions to add to.</param>
            <param name="storage">Storage service</param>
        </member>
        <member name="M:Models.Graph.IGraphable.GetAnnotationsToPutOnGraph(System.Collections.Generic.List{Models.Graph.Annotation})">
            <summary>Called by the graph presenter to get a list of all annotations to put on the graph.</summary>
            <param name="annotations">A list of annotations to add to.</param>
        </member>
        <member name="T:Models.Graph.SeriesType">
            <summary>An enumeration for the different types of graph series</summary>
        </member>
        <member name="F:Models.Graph.SeriesType.Bar">
            <summary>A bar series</summary>
        </member>
        <member name="F:Models.Graph.SeriesType.Scatter">
            <summary>A scatter series</summary>
        </member>
        <member name="F:Models.Graph.SeriesType.Area">
            <summary>An area series</summary>
        </member>
        <member name="T:Models.Graph.MarkerType">
            <summary>An enumeration for the different types of markers</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.FilledCircle">
            <summary>A filled circle marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.FilledDiamond">
            <summary>A filled diamond marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.FilledSquare">
            <summary>A filled square marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.FilledTriangle">
            <summary>A filled triangle marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.Circle">
            <summary>A circle marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.Diamond">
            <summary>A diamond marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.Square">
            <summary>A square marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.Triangle">
            <summary>A triangle marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.Cross">
            <summary>A cross marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.Plus">
            <summary>A plus marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.Star">
            <summary>A star marker</summary>
        </member>
        <member name="F:Models.Graph.MarkerType.None">
            <summary>No marker should be display</summary>
        </member>
        <member name="T:Models.Graph.MarkerSizeType">
            <summary>An enumeration for the different sizes of markers</summary>
        </member>
        <member name="F:Models.Graph.MarkerSizeType.Normal">
            <summary>Normal size markers.</summary>
        </member>
        <member name="F:Models.Graph.MarkerSizeType.Small">
            <summary>Small markers</summary>
        </member>
        <member name="T:Models.Graph.LineType">
            <summary>An enumeration representing the different types of lines</summary>
        </member>
        <member name="F:Models.Graph.LineType.Solid">
            <summary>A solid line</summary>
        </member>
        <member name="F:Models.Graph.LineType.Dash">
            <summary>A dashed line</summary>
        </member>
        <member name="F:Models.Graph.LineType.Dot">
            <summary>A dotted line</summary>
        </member>
        <member name="F:Models.Graph.LineType.DashDot">
            <summary>A dash dot line</summary>
        </member>
        <member name="F:Models.Graph.LineType.None">
            <summary>No line</summary>
        </member>
        <member name="T:Models.Graph.LineThicknessType">
            <summary>An enumeration for the different thicknesses of lines.</summary>
        </member>
        <member name="F:Models.Graph.LineThicknessType.Normal">
            <summary>Normal line thickness</summary>
        </member>
        <member name="F:Models.Graph.LineThicknessType.Thin">
            <summary>Thin line thickess</summary>
        </member>
        <member name="T:Models.Graph.SeriesDefinition">
            <summary>
            A class for defining a graph series. A list of these is given to graph when graph is drawing itself.
            </summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.SimulationNames">
            <summary>A list of simulation names.</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.Filter">
            <summary>Series definition filter.</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.type">
            <summary>Gets the series type</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.marker">
            <summary>Gets the marker to show</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.line">
            <summary>Gets the line type to show</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.markerSize">
            <summary>Gets the marker size</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.lineThickness">
            <summary>Gets the line thickness</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.colour">
            <summary>Gets the colour.</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.xAxis">
            <summary>Gets the associated x axis</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.yAxis">
            <summary>Gets the associated y axis</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.xFieldName">
            <summary>Gets the x field name.</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.yFieldName">
            <summary>Gets the t field name.</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.xFieldUnits">
            <summary>
            Units of measurement for X
            </summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.yFieldUnits">
            <summary>
            Units of measurement for Y
            </summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.showInLegend">
            <summary>Gets a value indicating whether this series should be shown in the level.</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.title">
            <summary>Gets the title of the series</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.data">
            <summary>Gets the dataview</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.x">
            <summary>Gets the x values</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.y">
            <summary>Gets the y values</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.x2">
            <summary>Gets the x2 values</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.y2">
            <summary>Gets the y2 values</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.simulationNamesForEachPoint">
            <summary>The simulation names for each point.</summary>
        </member>
        <member name="F:Models.Graph.SeriesDefinition.error">
            <summary>Gets the error values</summary>
        </member>
        <member name="T:Models.Graph.Annotation">
            <summary>Base interface for all annotations</summary>
        </member>
        <member name="T:Models.Graph.TextAnnotation">
            <summary>
            A class for defining a text annotation
            </summary>
        </member>
        <member name="F:Models.Graph.TextAnnotation.x">
            <summary>X position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.Graph.TextAnnotation.y">
            <summary>Y position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.Graph.TextAnnotation.text">
            <summary>A text annotation.</summary>
        </member>
        <member name="F:Models.Graph.TextAnnotation.colour">
            <summary>The colour of the text</summary>
        </member>
        <member name="F:Models.Graph.TextAnnotation.leftAlign">
            <summary>Left align the text?</summary>
        </member>
        <member name="F:Models.Graph.TextAnnotation.textRotation">
            <summary>Text rotation angle</summary>
        </member>
        <member name="T:Models.Graph.LineAnnotation">
            <summary>
            A class for defining a line annotation
            </summary>
        </member>
        <member name="F:Models.Graph.LineAnnotation.x1">
            <summary>X1 position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.Graph.LineAnnotation.y1">
            <summary>Y1 position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.Graph.LineAnnotation.x2">
            <summary>X2 position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.Graph.LineAnnotation.y2">
            <summary>Y2 position - can be double.MinValue for autocalculated</summary>
        </member>
        <member name="F:Models.Graph.LineAnnotation.colour">
            <summary>The colour of the text</summary>
        </member>
        <member name="F:Models.Graph.LineAnnotation.type">
            <summary>Gets the line type to show</summary>
        </member>
        <member name="F:Models.Graph.LineAnnotation.thickness">
            <summary>Gets the line thickness</summary>
        </member>
        <member name="T:Models.Graph.EventNamesOnGraph">
            <summary>
            A class for putting text annotations on a graph.
            </summary>
        </member>
        <member name="F:Models.Graph.EventNamesOnGraph.data">
            <summary>The table to search for phenological stage names.</summary>
        </member>
        <member name="F:Models.Graph.EventNamesOnGraph.xFieldName">
            <summary>The x variable name</summary>
        </member>
        <member name="P:Models.Graph.EventNamesOnGraph.ColumnName">
            <summary>
            Gets or sets the column name to plot.
            </summary>
        </member>
        <member name="M:Models.Graph.EventNamesOnGraph.GetSeriesToPutOnGraph(Models.Core.IStorageReader,System.Collections.Generic.List{Models.Graph.SeriesDefinition})">
            <summary>Called by the graph presenter to get a list of all actual series to put on the graph.</summary>
            <param name="definitions">A list of definitions to add to.</param>
            <param name="storage">Storage service</param>
        </member>
        <member name="M:Models.Graph.EventNamesOnGraph.GetAnnotationsToPutOnGraph(System.Collections.Generic.List{Models.Graph.Annotation})">
            <summary>Called by the graph presenter to get a list of all annotations to put on the graph.</summary>
            <param name="annotations">A list of annotations to add to.</param>
        </member>
        <member name="M:Models.Graph.EventNamesOnGraph.FindPhenologyStageColumn(System.Data.DataTable)">
            <summary>Find and return the phenology stage column name.</summary>
            <param name="data">The data table to search</param>
        </member>
        <member name="T:Models.Graph.Regression">
            <summary>
            A regression model.
            </summary>
        </member>
        <member name="F:Models.Graph.Regression.stats">
            <summary>The stats from the regression</summary>
        </member>
        <member name="F:Models.Graph.Regression.equationColours">
            <summary>The colours to use for each equation.</summary>
        </member>
        <member name="P:Models.Graph.Regression.ForEachSeries">
            <summary>
            Gets or sets a value indicating whether a regression should be shown for each series.
            </summary>
            <value><c>true</c> if [for each series]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Models.Graph.Regression.showOneToOne">
            <summary>
            Gets or sets a value indicating whether a regression should be shown for each series.
            </summary>
            <value><c>true</c> if [for each series]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Models.Graph.Regression.showEquation">
            <summary>
            Gets or sets a value indicating whether a regression should be shown for each series.
            </summary>
            <value><c>true</c> if [for each series]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Models.Graph.Regression.GetSeriesToPutOnGraph(Models.Core.IStorageReader,System.Collections.Generic.List{Models.Graph.SeriesDefinition})">
            <summary>Called by the graph presenter to get a list of all actual series to put on the graph.</summary>
            <param name="definitions">A list of definitions to add to.</param>
            <param name="storage">Storage service</param>
        </member>
        <member name="M:Models.Graph.Regression.PutRegressionLineOnGraph(System.Collections.Generic.List{Models.Graph.SeriesDefinition},System.Collections.IEnumerable,System.Collections.IEnumerable,System.Drawing.Color,System.String)">
            <summary>Puts the regression line and 1:1 line on graph.</summary>
            <param name="definitions">The definitions.</param>
            <param name="x">The x data.</param>
            <param name="y">The y data.</param>
            <param name="colour">The colour of the regresion line.</param>
            <param name="title">The title to put in the legen.</param>
        </member>
        <member name="M:Models.Graph.Regression.Put1To1LineOnGraph(System.Collections.Generic.List{Models.Graph.SeriesDefinition},System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Puts the 1:1 line on graph.</summary>
            <param name="definitions">The definitions.</param>
            <param name="x">The x data.</param>
            <param name="y">The y data.</param>
        </member>
        <member name="M:Models.Graph.Regression.GetAnnotationsToPutOnGraph(System.Collections.Generic.List{Models.Graph.Annotation})">
            <summary>Called by the graph presenter to get a list of all annotations to put on the graph.</summary>
            <param name="annotations">A list of annotations to add to.</param>
        </member>
        <member name="T:Models.Graph.Axis">
            <summary>
            A class representing an axis on a graph.
            </summary>
        </member>
        <member name="M:Models.Graph.Axis.#ctor">
            <summary>
            Constructor for axis class.
            </summary>
        </member>
        <member name="T:Models.Graph.Axis.AxisType">
            <summary>
            An enumeration for different axis orientations
            </summary>
        </member>
        <member name="F:Models.Graph.Axis.AxisType.Left">
            <summary>
            Left orientation
            </summary>
        </member>
        <member name="F:Models.Graph.Axis.AxisType.Top">
            <summary>
            Top orientation
            </summary>
        </member>
        <member name="F:Models.Graph.Axis.AxisType.Right">
            <summary>
            Right orientation
            </summary>
        </member>
        <member name="F:Models.Graph.Axis.AxisType.Bottom">
            <summary>
            Bottom orientation
            </summary>
        </member>
        <member name="P:Models.Graph.Axis.Type">
            <summary>
            Gets or sets the 'type' of axis - left, top, right or bottom.
            </summary>
        </member>
        <member name="P:Models.Graph.Axis.Title">
            <summary>
            Gets or sets the title of the axis.
            </summary>
        </member>
        <member name="P:Models.Graph.Axis.Inverted">
            <summary>
            Gets or sets a value indicating whether the axis is inverted?
            </summary>
        </member>
        <member name="P:Models.Graph.Axis.Minimum">
            <summary>
            Gets or sets the minimum axis scale
            </summary>
        </member>
        <member name="P:Models.Graph.Axis.Maximum">
            <summary>
            Gets or sets the maximum axis scale
            </summary>
        </member>
        <member name="P:Models.Graph.Axis.Interval">
            <summary>
            Gets or sets the interval axis scale
            </summary>
        </member>
        <member name="T:Models.Graph.Series">
            <summary>The class represents a single series on a graph</summary>
        </member>
        <member name="M:Models.Graph.Series.#ctor">
            <summary>Constructor for a series</summary>
        </member>
        <member name="P:Models.Graph.Series.Type">
            <summary>Gets or sets the series type</summary>
        </member>
        <member name="P:Models.Graph.Series.XAxis">
            <summary>Gets or sets the associated x axis</summary>
        </member>
        <member name="P:Models.Graph.Series.YAxis">
            <summary>Gets or sets the associated y axis</summary>
        </member>
        <member name="P:Models.Graph.Series.ColourArgb">
            <summary>
            Gets or sets the color represented as a red, green, blue integer
            </summary>
        </member>
        <member name="P:Models.Graph.Series.Colour">
            <summary>Gets or sets the color</summary>
        </member>
        <member name="P:Models.Graph.Series.FactorToVaryColours">
            <summary>The factor to vary for colours.</summary>
        </member>
        <member name="P:Models.Graph.Series.FactorToVaryMarkers">
            <summary>The factor to vary for markers types.</summary>
        </member>
        <member name="P:Models.Graph.Series.FactorToVaryLines">
            <summary>The factor to vary for line types.</summary>
        </member>
        <member name="P:Models.Graph.Series.Marker">
            <summary>Gets or sets the marker size</summary>
        </member>
        <member name="P:Models.Graph.Series.MarkerSize">
            <summary>Marker size.</summary>
        </member>
        <member name="P:Models.Graph.Series.Line">
            <summary>Gets or sets the line type to show</summary>
        </member>
        <member name="P:Models.Graph.Series.LineThickness">
            <summary>Gets or sets the line thickness</summary>
        </member>
        <member name="P:Models.Graph.Series.Checkpoint">
            <summary>Gets or sets the checkpoint to get data from.</summary>
        </member>
        <member name="P:Models.Graph.Series.TableName">
            <summary>Gets or sets the name of the table to get data from.</summary>
        </member>
        <member name="P:Models.Graph.Series.XFieldName">
            <summary>Gets or sets the name of the x field</summary>
        </member>
        <member name="P:Models.Graph.Series.YFieldName">
            <summary>Gets or sets the name of the y field</summary>
        </member>
        <member name="P:Models.Graph.Series.X2FieldName">
            <summary>Gets or sets the name of the x2 field</summary>
        </member>
        <member name="P:Models.Graph.Series.Y2FieldName">
            <summary>Gets or sets the name of the y2 field</summary>
        </member>
        <member name="P:Models.Graph.Series.ShowInLegend">
            <summary>Gets or sets a value indicating whether the series should be shown in the legend</summary>
        </member>
        <member name="P:Models.Graph.Series.IncludeSeriesNameInLegend">
            <summary>Gets or sets a value indicating whether the series name should be shown in the legend</summary>
        </member>
        <member name="P:Models.Graph.Series.Cumulative">
            <summary>Gets or sets a value indicating whether the Y variables should be cumulative.</summary>
        </member>
        <member name="P:Models.Graph.Series.CumulativeX">
            <summary>Gets or sets a value indicating whether the X variables should be cumulative.</summary>
        </member>
        <member name="P:Models.Graph.Series.Filter">
            <summary>Optional data filter.</summary>
        </member>
        <member name="P:Models.Graph.Series.FactorNamesForVarying">
            <summary>A list of all factors that can be listed as 'vary by' in markers/line types etc.</summary>
        </member>
        <member name="M:Models.Graph.Series.GetSeriesToPutOnGraph(Models.Core.IStorageReader,System.Collections.Generic.List{Models.Graph.SeriesDefinition})">
            <summary>Called by the graph presenter to get a list of all actual series to put on the graph.</summary>
            <param name="definitions">A list of definitions to add to.</param>
            <param name="storage">Storage service</param>
        </member>
        <member name="M:Models.Graph.Series.GetFactorList(System.Collections.Generic.List{Models.Core.ISimulationGeneratorFactors})">
            <summary>
            Go through all factor objects and get a list of factor names
            </summary>
            <param name="factors">A list of simulation zones.</param>
        </member>
        <member name="M:Models.Graph.Series.RemoveFactorsThatDontVary(System.Collections.Generic.List{Models.Core.ISimulationGeneratorFactors})">
            <summary>
            Go through all simulation zone objects and remove factors that don't vary between objects.
            </summary>
            <param name="factors">A list of factors.</param>
        </member>
        <member name="M:Models.Graph.Series.RemoveFactorsNotBeingUsed(System.Collections.Generic.List{Models.Core.ISimulationGeneratorFactors})">
            <summary>
            Remove factors that aren't being used to vary visual elements (e.g. line/marker etc)
            </summary>
            <param name="factors">A list of simulation zones.</param>
        </member>
        <member name="M:Models.Graph.Series.MergeFactors(System.Collections.Generic.List{Models.Core.ISimulationGeneratorFactors})">
            <summary>
            Go through all factors and try to merge the ones that have the same Name, Value and ColumnName
            </summary>
            <param name="factors">A list of factors to potentially merge.</param>
            <returns>A new list of factors</returns>
        </member>
        <member name="M:Models.Graph.Series.FindParent">
            <summary>Find a parent to base our series on.</summary>
        </member>
        <member name="M:Models.Graph.Series.BuildListFromModel(Models.Core.IModel)">
            <summary>
            Create graph definitions for the specified model
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Models.Graph.Series.ConvertToSeriesDefinitions(System.Collections.Generic.List{Models.Core.ISimulationGeneratorFactors},Models.Core.IStorageReader,System.Data.DataTable)">
            <summary>
            Paint the visual elements (colour, line and marker) of all simulation / zone pairs.
            </summary>
            <param name="factors">The simulation/zone pairs to change</param>
            <param name="storage">Storage reader</param>
            <param name="baseData">Base data</param>
        </member>
        <member name="M:Models.Graph.Series.CreateDefinition(System.String,System.String,System.Drawing.Color,Models.Graph.MarkerType,Models.Graph.LineType,System.String[])">
            <summary>Creates a series definition.</summary>
            <param name="title">The title.</param>
            <param name="filter">The filter. Can be null.</param>
            <param name="colour">The colour.</param>
            <param name="line">The line type.</param>
            <param name="marker">The marker type.</param>
            <param name="simulationNames">A list of simulations to include in data.</param>
            <returns>The newly created definition.</returns>
        </member>
        <member name="M:Models.Graph.Series.GetDataFromTable(System.Data.DataTable,System.String)">
            <summary>Gets a column of data from a table.</summary>
            <param name="data">The table</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The column of data.</returns>
        </member>
        <member name="M:Models.Graph.Series.GetErrorDataFromTable(System.Data.DataTable,System.String)">
            <summary>Gets a column of error data from a table.</summary>
            <param name="data">The table</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The column of data.</returns>
        </member>
        <member name="M:Models.Graph.Series.GetDataFromModels(System.String)">
            <summary>Return data using reflection</summary>
            <param name="fieldName">The field name to get data for.</param>
            <returns>The return data or null if not found</returns>
        </member>
        <member name="M:Models.Graph.Series.GetAnnotationsToPutOnGraph(System.Collections.Generic.List{Models.Graph.Annotation})">
            <summary>Called by the graph presenter to get a list of all annotations to put on the graph.</summary>
            <param name="annotations">A list of annotations to add to.</param>
        </member>
        <member name="M:Models.Graph.Series.GetBaseData(Models.Core.IStorageReader,System.Collections.Generic.List{Models.Core.ISimulationGeneratorFactors})">
            <summary>
            Create a data view from the specified table and filter.
            </summary>
            <param name="factors">The list of simulation / zone pairs.</param>
            <param name="storage">Storage service</param>
        </member>
        <member name="M:Models.Graph.Series.CreateRowFilter(Models.Core.IStorageReader,System.Collections.Generic.IEnumerable{Models.Core.ISimulationGeneratorFactors},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a row filter for the specified factors.
            </summary>
            <param name="storage">Storage service</param>
            <param name="factors">A list of factors to build a filter for.</param>
            <param name="columnsInTable">Columns in table</param>
        </member>
        <member name="T:Models.Graph.Series.VisualElements">
            <summary>
            Represents the visual elements of a series.
            </summary>
        </member>
        <member name="P:Models.Graph.Series.VisualElements.colour">
            <summary>Gets or set the colour</summary>
        </member>
        <member name="P:Models.Graph.Series.VisualElements.Marker">
            <summary>Gets or sets the marker size</summary>
        </member>
        <member name="P:Models.Graph.Series.VisualElements.MarkerSize">
            <summary>Marker size.</summary>
        </member>
        <member name="P:Models.Graph.Series.VisualElements.Line">
            <summary>Gets or sets the line type to show</summary>
        </member>
        <member name="P:Models.Graph.Series.VisualElements.LineThickness">
            <summary>Gets or sets the line thickness</summary>
        </member>
        <member name="M:Models.Graph.Series.VisualElements.SetColour(Models.Graph.Series.VisualElements,System.Int32)">
            <summary>A static setter function for colour from an index</summary>
            <param name="visualElement">The visual element to change</param>
            <param name="index">The index</param>
        </member>
        <member name="M:Models.Graph.Series.VisualElements.SetLineType(Models.Graph.Series.VisualElements,System.Int32)">
            <summary>A static setter function for line type from an index</summary>
            <param name="visualElement">The visual element to change</param>
            <param name="index">The index</param>
        </member>
        <member name="M:Models.Graph.Series.VisualElements.SetMarker(Models.Graph.Series.VisualElements,System.Int32)">
            <summary>A static setter function for marker from an index</summary>
            <param name="visualElement">The visual element to change</param>
            <param name="index">The index</param>
        </member>
        <member name="T:Models.Graph.Series.SimulationZonePainter">
            <summary>
            This class paints (sets visual elements) of a group of simulation zone objects.
            </summary>
        </member>
        <member name="T:Models.Graph.Series.SimulationZonePainter.SetFunction">
            <summary>A delegate setter function.</summary>
            <param name="visualElement">The visual element to change</param>
            <param name="index">The index</param>
        </member>
        <member name="T:Models.Graph.Series.SimulationZonePainter.IPainter">
            <summary>A painter interface for setting visual elements of a simulation/zone pair</summary>
        </member>
        <member name="T:Models.Graph.Series.SimulationZonePainter.DefaultPainter">
            <summary>A default painter for setting a simulation / zone pair to default values.</summary>
        </member>
        <member name="T:Models.Graph.Series.SimulationZonePainter.SequentialPainter">
            <summary>A painter for setting a simulation / zone pair to consecutive values of a visual element.</summary>
        </member>
        <member name="T:Models.Graph.Series.SimulationZonePainter.SequentialPainterTwoFactors">
            <summary>A painter for setting a simulation / zone pair to consecutive values of two visual elements.</summary>
        </member>
        <member name="T:Models.Graph.Series.SimulationZonePainter.DualPainter">
            <summary>A painter for setting a simulation / zone pair to values of two visual elements.</summary>
        </member>
        <member name="T:Models.Graph.Graph">
            <summary>
            Represents a graph
            </summary>
        </member>
        <member name="F:Models.Graph.Graph.tables">
            <summary>The data tables on the graph.</summary>
        </member>
        <member name="T:Models.Graph.Graph.LegendPositionType">
            <summary>
            An enumeration for the position of the legend
            </summary>
        </member>
        <member name="F:Models.Graph.Graph.LegendPositionType.TopLeft">
            <summary>
            Top left corner of the graph
            </summary>
        </member>
        <member name="F:Models.Graph.Graph.LegendPositionType.TopRight">
            <summary>
            Top right corner of the graph
            </summary>
        </member>
        <member name="F:Models.Graph.Graph.LegendPositionType.BottomLeft">
            <summary>
            Bottom left corner of the graph
            </summary>
        </member>
        <member name="F:Models.Graph.Graph.LegendPositionType.BottomRight">
            <summary>
            Bottom right corner of the graph
            </summary>
        </member>
        <member name="P:Models.Graph.Graph.Caption">
            <summary>
            Gets or sets the caption at the bottom of the graph
            </summary>
        </member>
        <member name="P:Models.Graph.Graph.Axis">
            <summary>
            Gets or sets a list of all axes
            </summary>
        </member>
        <member name="P:Models.Graph.Graph.Series">
            <summary>
            Gets or sets a list of all series
            </summary>
        </member>
        <member name="P:Models.Graph.Graph.LegendPosition">
            <summary>
            Gets or sets the location of the legend
            </summary>
        </member>
        <member name="P:Models.Graph.Graph.DisabledSeries">
            <summary>
            Gets or sets a list of raw grpah series that should be disabled.
            </summary>
        </member>
        <member name="M:Models.Graph.Graph.GetDefinitionsToGraph(Models.Core.IStorageReader)">
            <summary>Gets the definitions to graph.</summary>
            <returns>A list of series definitions.</returns>
            <param name="storage">Storage service</param>
        </member>
        <member name="M:Models.Graph.Graph.GetAnnotationsToGraph">
            <summary>Gets the annotations to graph.</summary>
            <returns>A list of series annotations.</returns>
        </member>
        <member name="M:Models.Graph.Graph.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>
            Writes documentation for this function by adding to the list of documentation tags.
            </summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="M:Models.Graph.Graph.EnsureAllAxesExist">
            <summary>
            Ensure that we have all necessary axis objects.
            </summary>
        </member>
        <member name="T:Models.Interfaces.IModelAsTable">
            <summary>This interface describes the way a grid presenter talks to a model via a data table.</summary>
        </member>
        <member name="P:Models.Interfaces.IModelAsTable.Tables">
            <summary>
            Gets or sets the tables of values.
            </summary>
        </member>
        <member name="T:Models.Interfaces.IVisualiseAsDirectedGraph">
            <summary>
            This interface defines the communications between a soil arbitrator and
            and crop.
            </summary>
        </member>
        <member name="P:Models.Interfaces.IVisualiseAsDirectedGraph.DirectedGraphInfo">
            <summary>Get directed graph from model</summary>
        </member>
        <member name="T:Models.Interfaces.ILeaf">
            <summary>This interface describes interface for leaf interaction with Structure.</summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.CohortsInitialised">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.PlantAppearedLeafNo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.InitialisedCohortNo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.AppearedCohortNo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.TipsAtEmergence">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.CohortsAtInitialisation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Interfaces.ILeaf.DoThin(System.Double)">
            <summary>
            
            </summary>
            <param name="ProportionRemoved"></param>
        </member>
        <member name="M:Models.Interfaces.ILeaf.RemoveHighestLeaf">
            <summary>
            Method to remove 
            </summary>
        </member>
        <member name="M:Models.Interfaces.ILeaf.Reset">
            <summary>
            Method to zero leaf numbembers
            </summary>
        </member>
        <member name="P:Models.Interfaces.ILeaf.ApicalCohortNo">
            <summary>
            Then number of cohorts on the apex that are yet to expand
            </summary>
        </member>
        <member name="T:Models.Interfaces.ISoilTemperature">
            <summary>
            This interface describes a soil temperature model.
            </summary>
        </member>
        <member name="P:Models.Interfaces.ISoilTemperature.Value">
            <summary>Returns soil temperature for each layer (oc)</summary>
        </member>
        <member name="T:Models.Interfaces.ISoil">
            <summary>
            This interface defines a soil.
            </summary>
        </member>
        <member name="P:Models.Interfaces.ISoil.Thickness">
            <summary>Layer thickess</summary>
        </member>
        <member name="T:Models.Interfaces.ISurfaceOrganicMatter">
            <summary>Surface organic matter interface.</summary>
        </member>
        <member name="P:Models.Interfaces.ISurfaceOrganicMatter.Cover">
            <summary>Fraction of ground covered by all surface OMs</summary>
        </member>
        <member name="M:Models.Interfaces.ISurfaceOrganicMatter.Add(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>Adds material to the surface organic matter pool.</summary>
            <param name="biomass">The amount of biomass added (kg/ha).</param>
            <param name="N">The amount of N added (ppm).</param>
            <param name="P">The amount of P added (ppm).</param>
            <param name="type">Type of the biomass.</param>
            <param name="name">Name of the biomass written to summary file</param>
        </member>
        <member name="T:Models.Interfaces.ICanopy">
            <summary>This interface describes MicroClimate / canopy comms.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.LAI">
            <summary>Gets the LAI (m^2/m^2)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.LAITotal">
            <summary>Gets the maximum LAI (m^2/m^2)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.CoverGreen">
            <summary>Gets the cover green (0-1)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.CoverTotal">
            <summary>Gets the cover total (0-1)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.Height">
            <summary>Gets the canopy height (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.Depth">
            <summary>Gets the canopy depth (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.FRGR">
            <summary>Gets  FRGR.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.PotentialEP">
            <summary>Sets the potential evapotranspiration.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.Interfaces.ICanopy.LightProfile">
            <summary>Sets the light profile.</summary>
        </member>
        <member name="T:Models.Interfaces.CanopyEnergyBalanceInterceptionlayerType">
            <summary>
            A canopy energy balance type
            </summary>
        </member>
        <member name="F:Models.Interfaces.CanopyEnergyBalanceInterceptionlayerType.thickness">
            <summary>The thickness</summary>
        </member>
        <member name="F:Models.Interfaces.CanopyEnergyBalanceInterceptionlayerType.amount">
            <summary>The amount</summary>
        </member>
        <member name="T:Models.Interfaces.ISoilWater">
            <summary>
            This interface defines the communications between a soil arbitrator and
            and crop.
            </summary>
        </member>
        <member name="M:Models.Interfaces.ISoilWater.RemoveWater(System.Double[])">
            <summary>Remove water from the profile</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Thickness">
            <summary>Gets or sets soil thickness for each layer (mm)(</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.SW">
            <summary>Gets or sets volumetric soil water content (mm/mm)(</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.SWmm">
            <summary>Gets soil water content (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.ESW">
            <summary>Gets extractable soil water relative to LL15(mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Eos">
            <summary>Gets potential evaporation from soil surface (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Es">
            <summary>Gets the actual (realised) soil water evaporation (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Eo">
            <summary>Gets potential evapotranspiration of the whole soil-plant system (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Runoff">
            <summary>Gets the amount of water runoff (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Drainage">
            <summary>Gets the amount of water drainage from bottom of profile(mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Salb">
            <summary>Fraction of incoming radiation reflected from bare soil</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.LateralOutflow">
            <summary>Amount of water moving laterally out of the profile (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.LeachNO3">
            <summary>Amount of N leaching as NO3-N from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.LeachNH4">
            <summary>Amount of N leaching as NH4-N from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.LeachUrea">
            <summary>Amount of N leaching as urea-N  from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.FlowNO3">
            <summary>Amount of N leaching as NO3 from each soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.FlowNH4">
            <summary>Amount of N leaching as NH4 from each soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Flow">
            <summary>Amount of water moving upward from each soil layer during unsaturated flow (negative value means downward movement) (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.Flux">
            <summary>Amount of water moving downward out of each soil layer due to gravity drainage (above DUL) (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.ISoilWater.ResidueInterception">
            <summary>Loss of precipitation due in interception of surface residues (mm)</summary>
        </member>
        <member name="M:Models.Interfaces.ISoilWater.SetWaterTable(System.Double)">
            <summary>Sets the water table.</summary>
            <param name="InitialDepth">The initial depth.</param>
        </member>
        <member name="M:Models.Interfaces.ISoilWater.Reset">
            <summary>Perform a reset</summary>
        </member>
        <member name="M:Models.Interfaces.ISoilWater.Tillage(Models.Soils.TillageType)">
            <summary>Perform tillage</summary>
        </member>
        <member name="M:Models.Interfaces.ISoilWater.Tillage(System.String)">
            <summary>Perform tillage</summary>
        </member>
        <member name="T:Models.Interfaces.ISolute">
            <summary>
            This interface defines a model as having solutes.
            </summary>
        </member>
        <member name="T:Models.Interfaces.INutrient">
            <summary>
            This interface defines the communications between a soil arbitrator and
            and crop.
            </summary>
        </member>
        <member name="M:Models.Interfaces.INutrient.CalculateActualSOMDecomp">
            <summary>
            Calculate actual decomposition
            </summary>
        </member>
        <member name="M:Models.Interfaces.INutrient.DoIncorpFOM(Models.Soils.FOMLayerType)">
            <summary>
            Incorporate FOM
            </summary>
        </member>
        <member name="M:Models.Interfaces.INutrient.Reset">
            <summary>
            Reset all Pools
            </summary>
        </member>
        <member name="T:Models.Interfaces.IWeather">
            <summary>A weather interface.</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.StartDate">
            <summary>Gets the start date of the weather file.</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.EndDate">
            <summary>Gets the end date of the weather file.</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.MaxT">
            <summary>Gets or sets the maximum temperature (oc)</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.MinT">
            <summary>Gets or sets the minimum temperature (oc)</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.MeanT">
            <summary>Mean temperature  /// </summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.VPD">
            <summary>Daily mean VPD  /// </summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Rain">
            <summary>Gets or sets the rainfall (mm)</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Radn">
            <summary>Gets or sets the solar radiation. MJ/m2/day</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.VP">
            <summary>Gets or sets the vapor pressure</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Wind">
            <summary>
            Gets or sets the wind value found in weather file or zero if not specified.
            </summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.CO2">
            <summary>
            Gets or sets the CO2 level. If not specified in the weather file the default is 350.
            </summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.AirPressure">
            <summary>
            Gets or sets the atmospheric air pressure. If not specified in the weather file the default is 1010 hPa.
            </summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Latitude">
            <summary>Gets the latitude</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Tav">
            <summary>Gets the average temperature</summary>
        </member>
        <member name="P:Models.Interfaces.IWeather.Amp">
            <summary>Gets the temperature amplitude.</summary>
        </member>
        <member name="M:Models.Interfaces.IWeather.CalculateDayLength(System.Double)">
            <summary>
            Gets the duration of the day in hours.
            </summary>
        </member>
        <member name="T:Models.Interfaces.IUptake">
            <summary>
            This interface defines the communications between a soil arbitrator and
            and crop.
            </summary>
        </member>
        <member name="M:Models.Interfaces.IUptake.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Calculate the potential sw uptake for today. Should return null if crop is not in the ground.
            </summary>
        </member>
        <member name="M:Models.Interfaces.IUptake.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Calculate the potential sw uptake for today. Should return null if crop is not in the ground.
            </summary>
        </member>
        <member name="M:Models.Interfaces.IUptake.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today.
            </summary>
        </member>
        <member name="M:Models.Interfaces.IUptake.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="T:Models.Sensitivity.Parameter">
            <summary>A encapsulation of a parameter to analyse</summary>
        </member>
        <member name="F:Models.Sensitivity.Parameter.Name">
            <summary>Name of parameter</summary>
        </member>
        <member name="F:Models.Sensitivity.Parameter.Path">
            <summary>Model path of parameter</summary>
        </member>
        <member name="F:Models.Sensitivity.Parameter.LowerBound">
            <summary>Lower bound of parameter</summary>
        </member>
        <member name="F:Models.Sensitivity.Parameter.UpperBound">
            <summary>Upper bound of parameter</summary>
        </member>
        <member name="T:Models.Sobol">
            <summary>
            # [Name]
            Encapsulates a SOBOL parameter sensitivity analysis.
            </summary>
        </member>
        <member name="F:Models.Sobol.allCombinations">
            <summary>A list of factors that we are to run</summary>
        </member>
        <member name="F:Models.Sobol.simulationNumber">
            <summary>A number of the currently running sim</summary>
        </member>
        <member name="P:Models.Sobol.ParameterValues">
            <summary>Parameter values coming back from R</summary>
        </member>
        <member name="P:Models.Sobol.X1">
            <summary>X1 values coming back from R</summary>
        </member>
        <member name="P:Models.Sobol.X2">
            <summary>X2 values coming back from R</summary>
        </member>
        <member name="P:Models.Sobol.NumPaths">
            <summary>The number of paths to run</summary>
        </member>
        <member name="P:Models.Sobol.Parameters">
            <summary>
            List of parameters
            </summary>
            <remarks>
            Needs to be public so that it gets written to .apsimx file
            </remarks>
        </member>
        <member name="P:Models.Sobol.simulationNames">
            <summary>List of simulation names from last run</summary>
        </member>
        <member name="M:Models.Sobol.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.Sobol.Tables">
            <summary>
            Gets or sets the table of values.
            </summary>
        </member>
        <member name="M:Models.Sobol.OnBeginRun">
            <summary>Simulation runs are about to begin.</summary>
        </member>
        <member name="M:Models.Sobol.NextSimulationToRun(System.Boolean)">
            <summary>Gets the next job to run</summary>
        </member>
        <member name="M:Models.Sobol.PushFactorsToReportModels(Models.Core.Simulation,System.Collections.Generic.List{Models.Factorial.FactorValue})">
            <summary>Find all report models and give them the factor values.</summary>
            <param name="factorValues">The factor values to send to each report model.</param>
            <param name="simulation">The simulation to search for report models.</param>
        </member>
        <member name="M:Models.Sobol.GenerateApsimXFile(System.String)">
            <summary>
            Generates an .apsimx file for each simulation in the experiment and returns an error message (if it fails).
            </summary>
            <param name="path">Full path including filename and extension.</param>
            <returns>Empty string if successful, error message if it fails.</returns>
        </member>
        <member name="M:Models.Sobol.GetSimulationNames(System.Boolean)">
            <summary>Gets a list of simulation names</summary>
        </member>
        <member name="M:Models.Sobol.GetFactors">
            <summary>Gets a list of factors</summary>
        </member>
        <member name="M:Models.Sobol.Initialise">
            <summary>
            Initialise the experiment ready for creating simulations.
            </summary>
        </member>
        <member name="M:Models.Sobol.CalculateFactors">
            <summary>
            Calculate factors that we need to run. Put combinations into allCombinations
            </summary>
        </member>
        <member name="P:Models.Sobol.BaseSimulation">
            <summary>
            Gets the base simulation
            </summary>
        </member>
        <member name="M:Models.Sobol.Run(Models.Core.IStorageReader)">
            <summary>Main run method for performing our post simulation calculations</summary>
            <param name="dataStore">The data store.</param>
        </member>
        <member name="M:Models.Sobol.RunR(System.String)">
            <summary>
            Get a list of parameter values that we are to run. Call R to do this.
            </summary>
        </member>
        <member name="M:Models.Sobol.GetSobolRScript">
            <summary>
            Return the base R script for running morris.
            </summary>
        </member>
        <member name="M:Models.Sobol.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Morris">
            <summary>
            # [Name]
            Encapsulates a Morris analysis.
            </summary>
        </member>
        <member name="F:Models.Morris.allCombinations">
            <summary>A list of factors that we are to run</summary>
        </member>
        <member name="F:Models.Morris.simulationNumber">
            <summary>A number of the currently running sim</summary>
        </member>
        <member name="F:Models.Morris.hasRun">
            <summary>Used to track whether this particular Morris has been run.</summary>
        </member>
        <member name="P:Models.Morris.ParameterValues">
            <summary>Parameter values coming back from R</summary>
        </member>
        <member name="P:Models.Morris.NumPaths">
            <summary>The number of paths to run</summary>
        </member>
        <member name="P:Models.Morris.NumIntervals">
            <summary>The number of intervals</summary>
        </member>
        <member name="P:Models.Morris.Jump">
            <summary>The jump parameter</summary>
        </member>
        <member name="P:Models.Morris.Parameters">
            <summary>
            List of parameters
            </summary>
            <remarks>
            Needs to be public so that it gets written to .apsimx file
            </remarks>
        </member>
        <member name="P:Models.Morris.Years">
            <summary>
            List of years
            </summary>
            <remarks>
            Needs to be public so that it gets written to .apsimx file
            </remarks>
        </member>
        <member name="P:Models.Morris.simulationNames">
            <summary>List of simulation names from last run</summary>
        </member>
        <member name="M:Models.Morris.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.Morris.Tables">
            <summary>
            Gets or sets the table of values.
            </summary>
        </member>
        <member name="M:Models.Morris.OnBeginRun">
            <summary>Simulation runs are about to begin.</summary>
        </member>
        <member name="M:Models.Morris.NextSimulationToRun(System.Boolean)">
            <summary>Gets the next job to run</summary>
        </member>
        <member name="M:Models.Morris.PushFactorsToReportModels(Models.Core.Simulation,System.Collections.Generic.List{Models.Factorial.FactorValue})">
            <summary>Find all report models and give them the factor values.</summary>
            <param name="factorValues">The factor values to send to each report model.</param>
            <param name="simulation">The simulation to search for report models.</param>
        </member>
        <member name="M:Models.Morris.GenerateApsimXFile(System.String)">
            <summary>
            Generates an .apsimx file for each simulation in the experiment and returns an error message (if it fails).
            </summary>
            <param name="path">Full path including filename and extension.</param>
            <returns>Empty string if successful, error message if it fails.</returns>
        </member>
        <member name="M:Models.Morris.GetSimulationNames(System.Boolean)">
            <summary>Gets a list of simulation names</summary>
        </member>
        <member name="M:Models.Morris.GetFactors">
            <summary>Gets a list of factors</summary>
        </member>
        <member name="M:Models.Morris.Initialise">
            <summary>
            Initialise the experiment ready for creating simulations.
            </summary>
        </member>
        <member name="M:Models.Morris.CalculateFactors">
            <summary>
            Calculate factors that we need to run. Put combinations into allCombinations
            </summary>
        </member>
        <member name="P:Models.Morris.BaseSimulation">
            <summary>
            Gets the base simulation
            </summary>
        </member>
        <member name="M:Models.Morris.Run(Models.Core.IStorageReader)">
            <summary>Main run method for performing our post simulation calculations</summary>
            <param name="dataStore">The data store.</param>
        </member>
        <member name="M:Models.Morris.RunRToGetParameterValues">
            <summary>
            Get a list of parameter values that we are to run. Call R to do this.
            </summary>
        </member>
        <member name="M:Models.Morris.RunRPostSimulation(System.Data.DataTable,System.Data.DataTable@,System.Data.DataTable@)">
            <summary>
            Get a list of parameter values that we are to run. Call R to do this.
            </summary>
        </member>
        <member name="M:Models.Morris.GetMorrisRScript">
            <summary>
            Return the base R script for running morris.
            </summary>
        </member>
        <member name="M:Models.Morris.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.LifeCycle.LifeStageImmigrationProcess">
            <summary>
            # [Name]
            An immigration process within a Lifestage.
            Immigration process that brings in new numbers for a new cohort in the linked lifestage
            </summary>
        </member>
        <member name="F:Models.LifeCycle.LifeStageImmigrationProcess.immigrantNumbers">
            <summary>
            The number of immigrants during this process
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStageImmigrationProcess.Immigrants">
            <summary>
            Report the number of immigrants at this timestep
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStageImmigrationProcess.Process(Models.LifeCycle.LifeStage)">
            <summary>
            Process this lifestage before cohorts are processed.
            This process is immigration.
            </summary>
            <param name="host">The host LifeStage</param>
        </member>
        <member name="M:Models.LifeCycle.LifeStageImmigrationProcess.ProcessCohort(Models.LifeCycle.Cohort)">
            <summary>
            Applies each function in this Lifestage process to a cohort item that is owned by a Lifestage
            </summary>
            <param name="cohortItem">An existing cohort</param>
        </member>
        <member name="M:Models.LifeCycle.LifeStageImmigrationProcess.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            At the start of the simulation get the functions required
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="T:Models.LifeCycle.Cohort">
            <summary>
            # [Name]
            A generic cohort item that exists in a LifeStage within a LifeCycle
            </summary>
        </member>
        <member name="F:Models.LifeCycle.Cohort.Ident">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.PhenoAge">
            <summary>
            Developmental level (within a lifestage). In timesteps.
            </summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.ChronoAge">
            <summary>
            Period of existence since start of egg(?) stage. In timesteps.
            </summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.PhysiologicalAge">
            <summary>
            The fraction of maturity for the cohort. 0-1
            </summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.Count">
            <summary>
            Count of creatures/spores in this cohort.
            </summary>
        </member>
        <member name="F:Models.LifeCycle.Cohort.Fecundity">
            <summary>
            The fecundity for the timestep.
            </summary>
        </member>
        <member name="P:Models.LifeCycle.Cohort.Mortality">
            <summary>
            Mortality for the timestep.
            </summary>
        </member>
        <member name="F:Models.LifeCycle.Cohort.OwningStage">
            <summary>
            The Lifestage that owns this cohort.
            </summary>
        </member>
        <member name="M:Models.LifeCycle.Cohort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Models.LifeCycle.Cohort.#ctor(Models.LifeCycle.LifeStage)">
            <summary>
            Construct and store reference to owner.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Models.LifeCycle.Cohort.AgeCohort">
            <summary>
            Increment the timestep age of this cohort.
            </summary>
        </member>
        <member name="T:Models.LifeCycle.LifeCycle">
            <summary>
            # [Name]
            A LifeCycle that contains LifeStages. 
            </summary>
        </member>
        <member name="F:Models.LifeCycle.LifeCycle.ChildStages">
            <summary>
            List of child LifeStages
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCycle.CurrentLifeStage">
            <summary>
            Current Lifestage being processed.
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeCycle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCycle.InitialPopulation">
            <summary>
            Population of the initial cohort at each lifestage. e.g. [2,6,3]
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeCycle.TotalPopulation">
            <summary>
            Total population of all the cohorts in this lifecycle
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeCycle.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            At the start of the simulation construct the list of child LifeStages
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.LifeCycle.LifeCycle.OnDoLifecycle(System.Object,System.EventArgs)">
            <summary>
            Handle the DoLifeCycle event and process each LifeStage
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Models.LifeCycle.LifeStage">
            <summary>
            # [Name]
            A lifestage is a developmental segment of a lifecycle. It contains cohorts.
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStage.CurrentCohort">
            <summary>
            Reference to the current cohort
            </summary>
        </member>
        <member name="F:Models.LifeCycle.LifeStage.OwningCycle">
            <summary>
            Owning lifecycle
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.#ctor">
            <summary>
            Default LifeStage constructor
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStage.CohortCount">
            <summary>
            Return the count of cohorts in this Lifestage
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStage.TotalPopulation">
            <summary>
            Population of all the cohorts in this lifestage
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStage.Populations">
            <summary>
            Gets the array of cohort populations for this LifeStage
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStage.Mortality">
            <summary>
            The current mortality numbers for this timestep
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.AddImmigrants(System.Double)">
            <summary>
            Add the number of immigrants to this LifeStage
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.Process">
            <summary>
            Process the lifestage which involves configured functions and promoting cohorts to linked stages.
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.PromoteGraduates(Models.LifeCycle.Cohort,Models.LifeCycle.LifeStage,System.Double)">
            <summary>
            Move cohort on to the next stage
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.Reproduce(Models.LifeCycle.Cohort,Models.LifeCycle.LifeStage,System.Double)">
            <summary>
            The source cohort reproduces and sends count creatures to the destination stage.
            </summary>
            <param name="srcCohort">The source cohort</param>
            <param name="destStage">The destination LifeStage</param>
            <param name="count">The population for the migrated cohort</param>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.NewCohort">
            <summary>
            Construct a new cohort, add it to the list and return a reference to it.
            </summary>
            <returns>A new initialised cohort object</returns>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.RemoveLastCohort">
            <summary>
            Remove the cohort at the end of the list
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.RemoveEmptyCohorts">
            <summary>
            Cleanup the list of cohorts by removing any that have no population.
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.Remove(Models.LifeCycle.Cohort)">
            <summary>
            Remove a specified cohort item
            </summary>
            <param name="aCohort">The cohort object to be removed</param>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.Clear">
            <summary>
            Empty the cohort list
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStage.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Handle the start event and add LifeStage processes to the internal list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Models.LifeCycle.ProcessType">
            <summary>
            # [Name]
            Specifies the type of lifestage process
            </summary>
        </member>
        <member name="F:Models.LifeCycle.ProcessType.Transfer">
            <summary>
            Transfer process that will move cohort numbers to another lifestage
            </summary>
        </member>
        <member name="F:Models.LifeCycle.ProcessType.PhysiologicalGrowth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.LifeCycle.ProcessType.Mortality">
            <summary>
            Calculates and adjusts the cohort numbers based on a mortality function
            </summary>
        </member>
        <member name="T:Models.LifeCycle.ILifeStageProcess">
            <summary>
            The general description of a lifestage process. A Lifestage can contain a number of these.
            </summary>
        </member>
        <member name="T:Models.LifeCycle.LifeStageProcess">
            <summary>
            A process within a Lifestage which will be of ProcessType.
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStageProcess.ProcessAction">
            <summary>
            The process type of this Process
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStageProcess.TransferTo">
            <summary>
            The name of the LifeStage to transfer cohorts to
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStageProcess.Process(Models.LifeCycle.LifeStage)">
            <summary>
            Process this lifestage before cohorts are processed
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStageProcess.ProcessCohort(Models.LifeCycle.Cohort)">
            <summary>
            Applies each function in this Lifestage process to a cohort item that is owned by a Lifestage
            </summary>
            <param name="cohortItem"></param>
        </member>
        <member name="M:Models.LifeCycle.LifeStageProcess.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            At the start of the simulation get the functions required
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="T:Models.LifeCycle.LifeStageReproductionProcess">
            <summary>
            # [Name]
            A Reproduction process within a Lifestage.
            Reproduction process that creates new numbers for a new cohort in the linked lifestage
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStageReproductionProcess.TransferTo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStageReproductionProcess.FecundityFunctionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.LifeCycle.LifeStageReproductionProcess.ProgenyFunctonName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStageReproductionProcess.Process(Models.LifeCycle.LifeStage)">
            <summary>
            Process this lifestage before cohorts are processed
            </summary>
        </member>
        <member name="M:Models.LifeCycle.LifeStageReproductionProcess.ProcessCohort(Models.LifeCycle.Cohort)">
            <summary>
            Applies each function in this Lifestage process to a cohort item that is owned by a Lifestage
            </summary>
            <param name="cohortItem"></param>
        </member>
        <member name="M:Models.LifeCycle.LifeStageReproductionProcess.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            At the start of the simulation get the functions required
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Models.PMF.BiomassDemand">
            <summary>
            This class holds the functions for calculating the demands for each biomass fraction
            </summary>
        </member>
        <member name="F:Models.PMF.BiomassDemand.Structural">
            <summary>The demand for the structural fraction.</summary>
        </member>
        <member name="F:Models.PMF.BiomassDemand.Metabolic">
            <summary>The demand for the metabolic fraction.</summary>
        </member>
        <member name="F:Models.PMF.BiomassDemand.Storage">
            <summary>The demand for the storage fraction.</summary>
        </member>
        <member name="M:Models.PMF.BiomassDemand.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Phen.PhotoperiodPhase">
            <summary>Describe the phenological development through a photoperiod-determined phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.CricialPhotoperiod">
            <summary>Critical photoperiod to move into next phase</summary>
        </member>
        <member name="T:Models.PMF.Phen.PhotoperiodPhase.PPType">
            <summary>
             Photoperiod Type
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.PhotoperiodPhase.PPType.Increasing">
            <summary>
            Increasing Photoperiod
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.PhotoperiodPhase.PPType.Decreasing">
            <summary>
            Decreasing Photoperiod
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.PPDirection">
            <summary>Flag to specify whether photoperiod should be increasing</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.Start">
            <summary>The phenological stage at the start of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.End">
            <summary>The phenological stage at the end of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.FractionComplete">
            <summary>Fraction of phase that is complete (0-1).</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.ProgressionForTimeStep">
            <summary>Units of progress through phase on this time step.</summary>
        </member>
        <member name="P:Models.PMF.Phen.PhotoperiodPhase.ProgressThroughPhase">
            <summary>Accumulated units of progress through this phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.PhotoperiodPhase.DoTimeStep(System.Double@)">
            <summary>Compute the phenological development during one time-step.</summary>
            <remarks>Returns true when target is met.</remarks>
        </member>
        <member name="M:Models.PMF.Phen.PhotoperiodPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.PhotoperiodPhase.WriteSummary(System.IO.TextWriter)">
            <summary>Writes the summary.</summary>
            <param name="writer">The text writer.</param>
        </member>
        <member name="M:Models.PMF.Phen.PhotoperiodPhase.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Phen.IPhaseWithTarget">
            <summary>Interface for a function</summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhaseWithTarget.Target">
            <summary> ThermalTimeTarget</summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhaseWithTarget.ProgressThroughPhase">
            <summary>Gets the t tin phase.</summary>
        </member>
        <member name="T:Models.PMF.Phen.PhaseChangedType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.PhaseChangedType.StageName">
            <summary>The stage at phase change</summary>
        </member>
        <member name="T:Models.PMF.Phen.IPhase">
            <summary>Interface for a function</summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhase.Name">
            <summary>The plases name</summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhase.End">
            <summary>The end</summary>
        </member>
        <member name="M:Models.PMF.Phen.IPhase.DoTimeStep(System.Double@)">
            <summary>This function returns a non-zero value if the phase target is met today </summary>
        </member>
        <member name="P:Models.PMF.Phen.IPhase.FractionComplete">
            <summary> Fraction of progress through the phase</summary>
        </member>
        <member name="M:Models.PMF.Phen.IPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.IPhase.WriteSummary(System.IO.TextWriter)">
            <summary> Write summary to file each time a phase completes  /// </summary>
        </member>
        <member name="T:Models.PMF.Phen.Vernalisation">
            <summary>
            Vernalisation model
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.Vernalisation.vernalisingRecord">
            <summary>Record of vernalising days during stabilisation period</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.StartStage">
            <summary>The start stage</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.EndStage">
            <summary>The end stage</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.ResetStage">
            <summary>The end stage</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.TodaysVernalisation">
            <summary>Gets the value vernalisation days.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.DaysVernalised">
            <summary>Gets the cummulative number of days vernalised.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Vernalisation.DaysVernalising">
            <summary>Gets the value number of days under temporary vernalisation.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Vernalisation.DoVernalisation">
            <summary>Compute the vernalisation</summary>
        </member>
        <member name="T:Models.PMF.Phen.BBCH">
             <summary>
             # [Name]
             This model calculates a BBCH growth stage value based upon the current phenological growth stage within the model. 
             The model uses information regarding germination, emergence and leaf appearance for early growth stages (BBCH stages 0 to 39).
             
            |BeginStage |Growth Phase     |Description                             |
            |-----------|-----------------|:---------------------------------------|
            |1          |Germinating      |BBCH = 5 x FractionThroughPhase         |
            |2          |Emerging         |BBCH = 5 + 5 x FractionThroughPhase     |
            |3          |Juvenile         |BBCH = 10 + (Leaf.AppearedCohortNo - 1) |
            |4          |PhotoSensitive   |BBCH = 10 + (Leaf.AppearedCohortNo - 1) |
            |5          |LeafAppearance   |BBCH = 30 + LeavesAppearedInPhase       |
            
             BBCHSTages 11-19 assume the dropy leaf method of measuring leaf appearance and to translate this to a model variable we assum droopy leaves are one fewer than the number of tips visiable
             WE assume that the begining of stem extension (BBCH 30) corresponds to the floral initiation stage in the model (Stage 5).  Scores between 31 and 39 depend on the number of nodes visiable.
             The model does not simulate nodes explicitly so we assume that node apparance occurs at the same rate as leaf appearance an add the number of leaves that have appeared in the LeafAppearance Phase to give an estimate of BBCH score
             BBCH stage 50 occurs when the tastle is just visiable.  This is assumed to occur at the same time as the appearance of the tip of the flag leaf.  This occurs toward the end of the leaf appearance phase 
             While still in the leaf apperance phase after flag leaf tip appearance BBCH score is calculated as:
             BBCH = 50 + 5 * FractionFlagLeafExpansion
             This assumes the tassel will be half emerged when the flaf leaf is full expanded   
             The model then uses simulated phenological growth stages for BBCH stages 55 to 99.
             
            |Stage   |APSIM Name              |BBCH translation
            |--------|------------------------|-------------------------------------|
            |6.0     |FlagLeafFullyExpanded   |55 - Mid Tassel Emergence
            |7.0     |Flowering               |65 - Mid flowering
            |8.0     |StartGrainFill          |70 - Begining of Grain development
            |9.0     |EndGrainFill            |87 - Physiological maturity
            |10      |Maturity                |99 - Harvest Product
            
             </summary>
        </member>
        <member name="F:Models.PMF.Phen.BBCH.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.PMF.Phen.BBCH.leaf">
            <summary>
            The Leaf class
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.BBCH.structure">
            <summary>
            The Structure class
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.BBCH.Stage">
            <summary>Gets the stage.</summary>
            <value>The stage.</value>
        </member>
        <member name="T:Models.PMF.Phen.NodeNumberPhase">
            <summary>
            Leaf appearance phenological phase
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.NodeNumberPhase.NodeNoAtStart">
            <summary>The cohort no at start</summary>
        </member>
        <member name="F:Models.PMF.Phen.NodeNumberPhase.First">
            <summary>The first</summary>
        </member>
        <member name="F:Models.PMF.Phen.NodeNumberPhase.FractionCompleteYesterday">
            <summary>The fraction complete yesterday</summary>
        </member>
        <member name="P:Models.PMF.Phen.NodeNumberPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.NodeNumberPhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.NodeNumberPhase.FractionComplete">
            <summary>Return a fraction of phase complete.</summary>
        </member>
        <member name="M:Models.PMF.Phen.NodeNumberPhase.DoTimeStep(System.Double@)">
            <summary>Do our timestep development</summary>
        </member>
        <member name="M:Models.PMF.Phen.NodeNumberPhase.ResetPhase">
            <summary>Reset phase</summary>
        </member>
        <member name="M:Models.PMF.Phen.NodeNumberPhase.WriteSummary(System.IO.TextWriter)">
            <summary>Writes the summary.</summary>
        </member>
        <member name="M:Models.PMF.Phen.NodeNumberPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="M:Models.PMF.Phen.NodeNumberPhase.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.PMF.Phen.ZadokPMF">
             <summary>
             # [Name]
             This model calculates a Zadok growth stage value based upon the current phenological growth stage within the model. 
             The model uses information regarding germination, emergence, leaf appearance and tiller appearance for early growth stages (Zadok stages 0 to 30).
             The model then uses simulated phenological growth stages for Zadok stages 30 to 100.
             
            |Growth Phase     |Description                                   |
            |-----------------|:---------------------------------------------|
            |Germinating      |ZadokStage = 5 x FractionThroughPhase         |
            |Emerging         |ZadokStage = 5 + 5 x FractionThroughPhase     |
            |Vegetative       |ZadokStage = 10 + Structure.LeafTipsAppeared  |
            |Reproductive     |ZadokStage is interpolated from values of     |
            |                 |stage number using the following table.       |
            
            |   Growth Stage  |   ZadokStage      |
            |-----------------|:------------------|
            |       3.9       |         30        |
            |       4.9       |         33        |
            |       5.0       |         39        |
            |       6.0       |         65        |
            |       7.0       |         71        |
            |       8.0       |         87        |
            |       9.0       |         90        |
            
             </summary>
        </member>
        <member name="F:Models.PMF.Phen.ZadokPMF.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.PMF.Phen.ZadokPMF.Structure">
            <summary>
            The Structure class
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.ZadokPMF.Stage">
            <summary>Gets the stage.</summary>
            <value>The stage.</value>
        </member>
        <member name="T:Models.PMF.Phen.EmergingPhase">
            <summary>Describe the phenological development through the emerging phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.ShootLag">
            <summary>Gets or sets the lag for shoot development.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.ShootRate">
            <summary>Gets or sets the shoot growth rate.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.Start">
            <summary>The phenological stage at the start of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.End">
            <summary>The phenological stage at the end of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.FractionComplete">
            <summary>Fraction of phase that is complete (0-1).</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.Target">
            <summary>Thermal time target to end this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.TTForTimeStep">
            <summary>Thermal time for this time-step.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EmergingPhase.ProgressThroughPhase">
            <summary>Accumulated units of thermal time as progress through phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.DoTimeStep(System.Double@)">
            <summary>Computes the phenological development during one time-step.</summary>
            <remarks>Returns true when target is met.</remarks>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.WriteSummary(System.IO.TextWriter)">
            <summary>Writes the summary.</summary>
            <param name="writer">The text writer.</param>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Phen.EmergingPhase.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Phen.EndPhase">
            <summary>It is the end phase in phenology and the crop will sit, unchanging, in this phase until it is harvested or removed by other method</summary>
        </member>
        <member name="P:Models.PMF.Phen.EndPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.EndPhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.EndPhase.FractionComplete">
            <summary>Return a fraction of phase complete.</summary>
        </member>
        <member name="P:Models.PMF.Phen.EndPhase.Target">
            <summary>Thermal time target.</summary>
        </member>
        <member name="M:Models.PMF.Phen.EndPhase.DoTimeStep(System.Double@)">
            <summary>Do our timestep development</summary>
        </member>
        <member name="M:Models.PMF.Phen.EndPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.EndPhase.WriteSummary(System.IO.TextWriter)">
            <summary>Writes the summary.</summary>
        </member>
        <member name="T:Models.PMF.Phen.GenericPhase">
            <summary>Describe the phenological development through a generic phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.Start">
            <summary>The phenological stage at the start of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.End">
            <summary>The phenological stage at the end of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.FractionComplete">
            <summary>Fraction of phase that is complete (0-1).</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.ProgressionForTimeStep">
            <summary>Units of progress through phase on this time step.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.ProgressThroughPhase">
            <summary>Accumulated units of progress through this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GenericPhase.Target">
            <summary>Thermal time target to end this phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GenericPhase.DoTimeStep(System.Double@)">
            <summary>Compute the phenological development during one time-step.</summary>
            <remarks>Returns true when target is met.</remarks>
        </member>
        <member name="M:Models.PMF.Phen.GenericPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GenericPhase.WriteSummary(System.IO.TextWriter)">
            <summary>Writes the summary.</summary>
            <param name="writer">The text writer.</param>
        </member>
        <member name="M:Models.PMF.Phen.GenericPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="M:Models.PMF.Phen.GenericPhase.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Phen.GerminatingPhase">
            <summary>Describe the phenological development through the germination.</summary>
        </member>
        <member name="F:Models.PMF.Phen.GerminatingPhase.SowLayer">
            <summary>The soil layer in which the seed is sown.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GerminatingPhase.Start">
            <summary>The phenological stage at the start of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GerminatingPhase.End">
            <summary>The phenological stage at the end of this phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GerminatingPhase.FractionComplete">
            <summary>Fraction of phase that is complete (0-1).</summary>
        </member>
        <member name="M:Models.PMF.Phen.GerminatingPhase.DoTimeStep(System.Double@)">
            <summary>Compute the phenological development during one time-step.</summary>
            <remarks>Returns true when target is met.</remarks>
        </member>
        <member name="M:Models.PMF.Phen.GerminatingPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GerminatingPhase.WriteSummary(System.IO.TextWriter)">
            <summary>Writes the summary.</summary>
            <param name="writer">The text writer.</param>
        </member>
        <member name="M:Models.PMF.Phen.GerminatingPhase.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GerminatingPhase.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this class by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Phen.GotoPhase">
            <summary>
            A special phase that jumps to another phase.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.GotoPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.GotoPhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.GotoPhase.PhaseNameToGoto">
            <summary>The phase name to goto</summary>
        </member>
        <member name="P:Models.PMF.Phen.GotoPhase.FractionComplete">
            <summary>Gets the fraction complete.</summary>
        </member>
        <member name="P:Models.PMF.Phen.GotoPhase.Target">
            <summary>Thermal time target</summary>
        </member>
        <member name="M:Models.PMF.Phen.GotoPhase.DoTimeStep(System.Double@)">
            <summary>Should not be called in this class</summary>
        </member>
        <member name="M:Models.PMF.Phen.GotoPhase.WriteSummary(System.IO.TextWriter)">
            <summary>Writes the summary.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GotoPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.GotoPhase.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Phen.LeafAppearancePhase">
            <summary> It continues until the final main-stem leaf has finished expansion.  The duration of this phase is determined by leaf appearance rate (Structure.Phyllochron) and the number of leaves produced on the mainstem (Structure.FinalLeafNumber). As such, the model parameterisation of leaf appearance and final leaf number (set in the Structure model) are important for predicting the duration of the crop correctly.</summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafAppearancePhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafAppearancePhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafAppearancePhase.FractionComplete">
            <summary>Return a fraction of phase complete.</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafAppearancePhase.DoTimeStep(System.Double@)">
            <summary>Do our timestep development</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafAppearancePhase.ResetPhase">
            <summary>Reset phase</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafAppearancePhase.WriteSummary(System.IO.TextWriter)">
            <summary>Writes the summary.</summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Models.PMF.Phen.LeafAppearancePhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafAppearancePhase.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.PMF.Phen.LeafDeathPhase">
            <summary>
            It proceeds until the last leaf on the main-stem has fully senessced.  Therefore its duration depends on the number of main-stem leaves that are produced and the rate at which they seness following final leaf appearance.
            </summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafDeathPhase.Start">
            <summary>The start</summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafDeathPhase.End">
            <summary>The end</summary>
        </member>
        <member name="P:Models.PMF.Phen.LeafDeathPhase.FractionComplete">
            <summary>Return a fraction of phase complete.</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafDeathPhase.DoTimeStep(System.Double@)">
            <summary>Do our timestep development</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafDeathPhase.ResetPhase">
            <summary>Resets the phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.LeafDeathPhase.WriteSummary(System.IO.TextWriter)">
            <summary>Writes the summary.</summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Models.PMF.Phen.LeafDeathPhase.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="T:Models.PMF.Phen.Phenology">
            <summary>
            This model simulates the development of the crop through successive developmental <i>phases</i>. Each phase is bound by distinct growth <i>stages</i>. Phases often require a target to be reached to signal movement to the next phase. Differences between cultivars are specified by changing the values of the default parameters shown below.
            </summary>
        </member>
        <member name="F:Models.PMF.Phen.Phenology.plant">
            1. Links
            ------------------------------------------------------------------------------------------------
        </member>
        <member name="F:Models.PMF.Phen.Phenology.thermalTime">
            <summary>The thermal time</summary>
        </member>
        <member name="F:Models.PMF.Phen.Phenology.phases">
            2. Private And Protected Fields
             -------------------------------------------------------------------------------------------------
            <summary>The phases</summary>
        </member>
        <member name="F:Models.PMF.Phen.Phenology.currentPhaseIndex">
            <summary>The current phase index</summary>
        </member>
        <member name="F:Models.PMF.Phen.Phenology.stagesPassedToday">
            <summary>This lists all the stages that are pased on this day</summary>
        </member>
        <member name="E:Models.PMF.Phen.Phenology.PhaseChanged">
            4. Public Events And Enums
             -------------------------------------------------------------------------------------------------
            <summary>Occurs when [phase changed].</summary>
        </member>
        <member name="E:Models.PMF.Phen.Phenology.StageWasReset">
            <summary>Occurs when phase is set externally.</summary>
        </member>
        <member name="E:Models.PMF.Phen.Phenology.PostPhenology">
            <summary>Occurs when daily phenology timestep completed</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.AccumulatedTT">
            5. Public Properties
             --------------------------------------------------------------------------------------------------
            <summary>The Thermal time accumulated tt</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.AccumulatedEmergedTT">
            <summary>The Thermal time accumulated tt following emergence</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.Emerged">
            <summary>The emerged</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.Stage">
            <summary>A one based stage number.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.CurrentPhaseName">
            <summary>This property is used to retrieve or set the current phase name.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.CurrentStageName">
            <summary>Return current stage name.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.FractionInCurrentPhase">
            <summary>Gets the fraction in current phase.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.DaysAfterSowing">
            <summary>Gets the days after sowing.</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.CurrentPhase">
            <summary>A utility property to return the current phase.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.IndexFromPhaseName(System.String)">
            6. Public methods
             -----------------------------------------------------------------------------------------------------------
            <summary>Look for a particular phase and return it's index or -1 if not found.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.SetToStage(System.Double)">
            <summary>A function that resets phenology to a specified stage</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnStartDayOf(System.String)">
            <summary> A utility function to return true if the simulation is on the first day of the specified stage. </summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.InPhase(System.String)">
            <summary> A utility function to return true if the simulation is currently in the specified phase. </summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.Between(System.String,System.String)">
            <summary> A utility function to return true if the simulation is currently betweenthe specified start and end stages. </summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.Beyond(System.String)">
            <summary> A utility function to return true if the simulation is at or past the specified startstage.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.PhaseStartingWith(System.String)">
            <summary>A utility function to return the phenological phase that starts with the specified start stage name.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnCreated">
            7. Private methods
             -----------------------------------------------------------------------------------------------------------
            <summary>Called when model has been created.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnDoPhenology(System.Object,System.EventArgs)">
            <summary>Called by sequencer to perform phenology.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnHarvesting(System.Object,System.EventArgs)">
            <summary>Called when crop is being harvested.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnPruning(System.Object,System.EventArgs)">
            <summary>Called when crop is being prunned.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>Called at the start of each day</summary>
        </member>
        <member name="P:Models.PMF.Phen.Phenology.PlantIsAlive">
            <summary> /// A helper property that checks the parent plant (old or new) to see if it is alive. /// </summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.WriteSummary(System.IO.TextWriter)">
            <summary>Write phenology info to summary file.</summary>
        </member>
        <member name="M:Models.PMF.Phen.Phenology.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IRemovableBiomass">
            <summary>
            Interface used by code (e.g. STOCK) to remove biomass from an organ.
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IRemovableBiomass.Live">
            <summary>Gets the live biomass</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IRemovableBiomass.Dead">
            <summary>Gets the dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IRemovableBiomass.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IRemovableBiomass.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            Biomass removal logic for this organ.
            </summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="biomassToRemove">Biomass to remove</param>
        </member>
        <member name="T:Models.PMF.Interfaces.IApex">
            <summary>
            An interface for an apex model.
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IApex.Number">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IApex.GroupSize">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IApex.GroupAge">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IApex.LeafTipAppearance(System.Double,System.Double)">
            <summary>
            Calculate apex data during leaf tip appearance
            </summary>
            <param name="population">Current plant population</param>
            <param name="totalStemPopn">Current total stem populatin</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IApex.Appearance(System.Double,System.Double)">
            <summary>
            Calculate apex data during leaf appearance
            </summary>
            <param name="population">Current plant population</param>
            <param name="totalStemPopn">Current total stem populatin</param>
            <returns>Cohort population.</returns>
        </member>
        <member name="M:Models.PMF.Interfaces.IApex.Reset">
            <summary>
            Reset the apex instance
            </summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IWaterNitrogenUptake">
            <summary>An interface that defines what needs to be implemented by an organthat has a water demand.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IWaterNitrogenUptake.CalculateWaterSupply(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Calculate the water supply for the specified zone.</summary>
            <param name="zone">The zone.</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IWaterNitrogenUptake.CalculateNitrogenSupply(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double[]@,System.Double[]@)">
            <summary>Calculate the nitrogen supply from the specified zone.</summary>
            <param name="zone">The zone.</param>
            <param name="NO3Supply">The returned NO3 supply</param>
            <param name="NH4Supply">The returned NH4 supply</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IWaterNitrogenUptake.DoWaterUptake(System.Double[],System.String)">
            <summary>Does the water uptake.</summary>
            <param name="amount">The amount - layered mm.</param>
            <param name="zoneName">Zone name to do water uptake in</param>
        </member>
        <member name="M:Models.PMF.Interfaces.IWaterNitrogenUptake.DoNitrogenUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>Does the Nitrogen uptake.</summary>
            <param name="zonesFromSoilArbitrator">List of zones from soil arbitrator</param>
        </member>
        <member name="T:Models.PMF.Interfaces.IHasWaterDemand">
            <summary>An interface that defines what needs to be implemented by an organthat has a water demand.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IHasWaterDemand.CalculateWaterDemand">
            <summary>Gets or sets the water demand.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IHasWaterDemand.WaterAllocation">
            <summary>Sets the organs water allocation.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IHasWaterDemand.MicroClimatePresent">
            <summary> Flag to test is Microclimate is setting PotentialEP value </summary>
        </member>
        <member name="T:Models.PMF.Interfaces.IArbitration">
            <summary>
            An interface that defines what needs to be implemented by an organ
            that communicates to the OrganArbitrator.
            </summary>
            <remarks>
             PFM considers four types of biomass supply, i.e.
             - fixation
             - reallocation
             - uptake
             - retranslocation
            PFM considers eight types of biomass allocation, i.e.
             - structural
             - non-structural
             - metabolic
             - retranslocation
             - reallocation
             - respired
             - uptake
             - fixation
            </remarks>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.DMDemand">
            <summary>Returns the organs dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.DMSupply">
            <summary>Returns the organs dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.NDemand">
            <summary>Returns the organs N demand</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.NSupply">
            <summary>Returns the organs N supply</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.potentialDMAllocation">
            <summary>Returns the DM that can be paritioned to the organ of N is not limited </summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IArbitration.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IArbitration.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IArbitration.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.MinNconc">
            <summary>Gets or sets the minimum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.Live">
            <summary>Gets the live biomass</summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IArbitration.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="M:Models.PMF.Interfaces.IArbitration.RemoveMaintenanceRespiration(System.Double)">
            <summary>Remove maintenance respiration from live component of organs.</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.BiomassPoolType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.Structural">
            <summary>Gets or sets the structural.</summary>
            <value>The structural.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.Storage">
            <summary>Gets or sets the non structural.</summary>
            <value>The non structural.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.Metabolic">
            <summary>Gets or sets the metabolic.</summary>
            <value>The metabolic.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassPoolType.Total">
            <summary>Gets the total amount.</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.BiomassSupplyType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassSupplyType.Fixation">
            <summary>Gets or sets the fixation.</summary>
            <value>The fixation.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassSupplyType.Reallocation">
            <summary>Gets or sets the reallocation.</summary>
            <value>The reallocation.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassSupplyType.Uptake">
            <summary>Gets or sets the uptake.</summary>
            <value>The uptake.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassSupplyType.Retranslocation">
            <summary>Gets or sets the retranslocation.</summary>
            <value>The retranslocation.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassSupplyType.Total">
            <summary>Gets the total supply.</summary>
        </member>
        <member name="T:Models.PMF.Interfaces.BiomassAllocationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Structural">
            <summary>Gets or sets the structural.</summary>
            <value>The structural.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Storage">
            <summary>Gets or sets the non structural.</summary>
            <value>The non structural.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Metabolic">
            <summary>Gets or sets the metabolic.</summary>
            <value>The metabolic.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Retranslocation">
            <summary>Gets or sets the retranslocation.</summary>
            <value>The retranslocation.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Reallocation">
            <summary>Gets or sets the reallocation.</summary>
            <value>The reallocation.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Respired">
            <summary>Gets or sets the respired.</summary>
            <value>The respired.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Uptake">
            <summary>Gets or sets the uptake.</summary>
            <value>The uptake.</value>
        </member>
        <member name="P:Models.PMF.Interfaces.BiomassAllocationType.Fixation">
            <summary>Gets or sets the fixation.</summary>
            <value>The fixation.</value>
        </member>
        <member name="T:Models.PMF.Interfaces.IOrgan">
            <summary>
            Organ interface
            </summary>
        </member>
        <member name="P:Models.PMF.Interfaces.IOrgan.Name">
            <summary>
            The Name of the organ.
            </summary>
        </member>
        <member name="T:Models.PMF.Struct.BudNumberFunction">
            <summary> # [Name]
            Sets the number of buds on each mains stem to the valud of it child on the [SetStage] </summary>
        </member>
        <member name="P:Models.PMF.Struct.BudNumberFunction.SetStage">
            <summary>The stage on which bud number is set</summary>
        </member>
        <member name="M:Models.PMF.Struct.BudNumberFunction.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="T:Models.PMF.Struct.ApexGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.ApexGroup.apexGroupSize">
            <summary>The number of apex in each age group.</summary>
        </member>
        <member name="F:Models.PMF.Struct.ApexGroup.apexGroupAge">
            <summary>The age of apex in age group.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexGroup.Number">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexGroup.GroupSize">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexGroup.GroupAge">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="T:Models.PMF.Struct.ApexBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.ApexBase.apexGroupSize">
            <summary>The apex group.</summary>
        </member>
        <member name="F:Models.PMF.Struct.ApexBase.apexGroupAge">
            <summary>The age of apex in age group.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexBase.Number">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexBase.SenescenceByAge">
            <value>Senscenced by age.</value>
        </member>
        <member name="P:Models.PMF.Struct.ApexBase.GroupSize">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Struct.ApexBase.GroupAge">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.NumByAge(System.Double)">
            <summary>Apex number by age</summary>
            <param name="age">Threshold age</param>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.Appearance(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.LeafTipAppearance(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.Reset">
            <summary>
            Reset the apex instance
            </summary>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
            <param name="sender">sender of the event.</param>
            <param name="Sow">Sowing data to initialise from.</param>
        </member>
        <member name="M:Models.PMF.Struct.ApexBase.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.Struct.ApexStandard">
            <summary>
            # [Name]
            Calculate cohort population using stem population.
            </summary>
        </member>
        <member name="M:Models.PMF.Struct.ApexStandard.Appearance(System.Double,System.Double)">
            <summary>
            Calculate cohort population at leaf appearance.
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Struct.ApexStandard.LeafTipAppearance(System.Double,System.Double)">
            <summary>
            Calculate cohort population at leaf tip appearance.
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="T:Models.PMF.Struct.ApexTiller">
            <summary>
            # [Name]
            Calculate cohort populations using apex number
            </summary>
        </member>
        <member name="M:Models.PMF.Struct.ApexTiller.Appearance(System.Double,System.Double)">
            <summary>
            Calculate cohort population at leaf appearance.
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Struct.ApexTiller.LeafTipAppearance(System.Double,System.Double)">
            <summary>
            Calculate cohort population at leaf tip appearance.
            </summary>
            <param name="population"></param>
            <param name="totalStemPopn"></param>
            <returns></returns>
        </member>
        <member name="T:Models.PMF.Struct.HeightFunction">
            <summary>
            # [Name]
            Height is used by the MicroClimate model to calculate the aerodynamic resistance used for calculation of potential transpiration.
            Calculates the potential height increment and then multiplies it by the smallest of any childern functions (Child functions represent stress).
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.HeightFunction.PotentialHeight">
            <summary>The potential height</summary>
        </member>
        <member name="F:Models.PMF.Struct.HeightFunction.PotentialHeightYesterday">
            <summary>The potential height yesterday</summary>
        </member>
        <member name="F:Models.PMF.Struct.HeightFunction.Height">
            <summary>The height</summary>
        </member>
        <member name="F:Models.PMF.Struct.HeightFunction.ChildFunctions">
            <summary>The child functions</summary>
        </member>
        <member name="P:Models.PMF.Struct.HeightFunction.DeltaHeight">
            <summary>Gets or sets the height of the delta.</summary>
        </member>
        <member name="M:Models.PMF.Struct.HeightFunction.Value(System.Int32)">
            <summary>Gets the value.</summary>
        </member>
        <member name="M:Models.PMF.Struct.HeightFunction.Clear">
            <summary>Clear all variables</summary>
        </member>
        <member name="M:Models.PMF.Struct.HeightFunction.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is sowing</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Struct.HeightFunction.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.Struct.Structure">
            <summary>
            # Structure
            The structure model simulates morphological development of the plant to inform the Leaf class when 
              and how many leaves appear and to provide a hight estimate for use in calculating potential transpiration.
            ## Plant and Main-Stem Population
            The *Plant.Population* is set at sowing with information sent from a manager script in the Sow method.    
              The *PrimaryBudNumber* is also sent with the Sow method and the main-stem population (*MainStemPopn*) for the crop is calculated as:  
              *MainStemPopn* = *Plant.Population* x *PrimaryBudNumber*
              Primary bud number is > 1 for crops like potato and grape vine where there are more than one main-stem per plant
             ## Main-Stem leaf appearance
             Each day the number of main-stem leaf tips appeared (*LeafTipsAppeared*) is calculated as:  
               *LeafTipsAppeared* += *DeltaTips*
             Where *DeltaTips* is calculated as:  
               *DeltaTips* = *ThermalTime*/*Phyllochron*  
               Where *Phyllochron* is the thermal time duration between the appearance of leaf tipx given by: 
            [Document Phyllochron]
              and *ThermalTime* is given by:
            [Document ThermalTime]
            *LeafTipsAppeared* continues to increase until *FinalLeafNumber* is reached where *FinalLeafNumber* is calculated as:  
            [Document FinalLeafNumber]
            ##Branching and Branch Mortality
            The total population of stems (*TotalStemPopn*) is calculated as:  
              *TotalStemPopn* = *MainStemPopn* + *NewBranches* - *NewlyDeadBranches*   
               Where *NewBranches* = *MainStemPopn* x *BranchingRate*  
               and *BranchingRate* is given by:
            [Document BranchingRate]
              *NewlyDeadBranches* is calcualted as:  
              *NewlyDeadBranches* = (*TotalStemPopn* - *MainStemPopn*) x *BranchMortality*  
              where *BranchMortality* is given by:  
            [Document BranchMortality]
            ##Height
             The Height of the crop is calculated by the *HeightModel*:
            [Document HeightModel]
            </summary>
        </member>
        <member name="F:Models.PMF.Struct.Structure.thermalTime">
            <summary>The thermal time</summary>
        </member>
        <member name="F:Models.PMF.Struct.Structure.finalLeafNumber">
            <summary>The main stem final node number</summary>
        </member>
        <member name="F:Models.PMF.Struct.Structure.branchingRate">
            <summary>Branching rate</summary>
        </member>
        <member name="F:Models.PMF.Struct.Structure.branchMortality">
            <summary>Branch mortality</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.CohortInitialisationStage">
            <summary>The Stage that cohorts are initialised on</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.LeafInitialisationStage">
            <summary>The Stage that leaves are initialised on</summary>
        </member>
        <member name="E:Models.PMF.Struct.Structure.InitialiseLeafCohorts">
            <summary>Occurs when plant Germinates.</summary>
        </member>
        <member name="E:Models.PMF.Struct.Structure.AddLeafCohort">
            <summary>Occurs when ever an new vegetative leaf cohort is initiated on the stem apex.</summary>
        </member>
        <member name="E:Models.PMF.Struct.Structure.LeafTipAppearance">
            <summary>Occurs when ever an new leaf tip appears.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.InitParams">
            <summary>The Leaf Appearance Data </summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.CohortToInitialise">
            <summary>CohortToInitialise</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.TipToAppear">
            <summary>TipToAppear</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.TimeForAnotherLeaf">
            <summary>Did another leaf appear today?</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.AllLeavesAppeared">
            <summary>Have all leaves appeared?</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.CohortParams">
            <summary>The Leaf Appearance Data </summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.PrimaryBudNo">
            <summary>Gets or sets the primary bud no.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.TotalStemPopn">
            <summary>Gets or sets the total stem popn.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.PotLeafTipsAppeared">
            <summary>Number of mainstem nodes which have their tips appeared</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.LeafTipsAppeared">
            <summary>"Number of mainstem nodes which have their tips appeared"</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.PlantTotalNodeNo">
            <summary>Number of leaves appeared per plant including all main stem and branch leaves</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.ProportionBranchMortality">
            <summary>Gets or sets the proportion branch mortality.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.ProportionPlantMortality">
            <summary>Gets or sets the proportion plant mortality.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.DeltaHaunStage">
            <value>The change in HaunStage each day.</value>
        </member>
        <member name="P:Models.PMF.Struct.Structure.DeltaTipNumber">
            <value>The delta node number.</value>
        </member>
        <member name="P:Models.PMF.Struct.Structure.BranchNumber">
            <summary>The number of branches, used by zadoc class for calcualting zadoc score in the 20's</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.NextLeafProportion">
            <summary>The relative size of the current cohort.  Is always 1.0 apart for the final cohort where it can be less than 1.0 if final leaf number is not an interger value</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.DeltaPlantPopulation">
            <summary> The change in plant population due to plant mortality set in the plant class </summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.MainStemPopn">
            <summary>"Number of mainstems per meter"</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.RemainingNodeNo">
            <summary>Number of leaves yet to appear</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.Height">
            <summary>Gets the height.</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.PrimaryBudTotalNodeNo">
            <summary>Number of appeared leaves per primary bud unit including all main stem and branch leaves</summary>
        </member>
        <member name="P:Models.PMF.Struct.Structure.RelativeNodeApperance">
            <summary>Relative progress toward final leaf.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the actual growth.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.DoLeafTipAppearance">
            <summary>Method that calculates parameters for leaf cohort to appear and then calls event so leaf calss can make cohort appear</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.DoLeafInitilisation">
            <summary> Called on the day of emergence to get the initials leaf cohorts to appear </summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.UpdateHeight">
            <summary>Updates the height.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.ResetStemPopn">
            <summary>Resets the stem popn.</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.doThin(System.Double)">
            <summary>Called when crop recieves a remove biomass event from manager</summary>
        </member>
        <member name="M:Models.PMF.Struct.Structure.doNodeRemoval(System.Int32)">
            <summary> Removes nodes from main-stem in defoliation event  </summary>
        </member>
        <member name="T:Models.PMF.BiomassArbitrationType">
            <summary>Contains the variables need for arbitration</summary>
        </member>
        <member name="F:Models.PMF.BiomassArbitrationType.organs">
            <summary>Names of all organs</summary>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.StructuralDemand">
            <summary>Gets or sets the structural demand.</summary>
            <value>Demand for structural biomass from each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalStructuralDemand">
            <summary>Gets or sets the total structural demand.</summary>
            <value>Demand for structural biomass from the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.MetabolicDemand">
            <summary>Gets or sets the metabolic demand.</summary>
            <value>Demand for metabolic biomass from each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalMetabolicDemand">
            <summary>Gets or sets the total metabolic demand.</summary>
            <value>Demand for metabolic biomass from the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.StorageDemand">
            <summary>Gets or sets the non structural demand.</summary>
            <value>Demand for non-structural biomass from each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalStorageDemand">
            <summary>Gets or sets the total non structural demand.</summary>
            <value>Demand for non-structural biomass from the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalPlantDemand">
            <summary>Gets or sets the total crop demand.</summary>
            <value>crop demand for biomass, structural, non-sturctural and metabolic</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.ReallocationSupply">
            <summary>Gets or sets the reallocation supply.</summary>
            <value>Biomass available for reallocation for each organ as it dies</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalReallocationSupply">
            <summary>Gets or sets the total reallocation supply.</summary>
            <value>Biomass available for reallocation from the entire crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.UptakeSupply">
            <summary>Gets or sets the uptake supply.</summary>
            <value>Biomass available for uptake from each absorbing organ, generally limited to ntrient uptake in roots</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalUptakeSupply">
            <summary>Gets or sets the total uptake supply.</summary>
            <value>Biomass available for uptake by the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.FixationSupply">
            <summary>Gets or sets the fixation supply.</summary>
            <value>Biomass that may be fixed by the crop, eg DM fixed by photosynhesis in the leaves of N fixed by nodules</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalFixationSupply">
            <summary>Gets or sets the total fixation supply.</summary>
            <value>Total fixation by the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.RetranslocationSupply">
            <summary>Gets or sets the retranslocation supply.</summary>
            <value>Supply of labile biomass that can be retranslocated from each oragn</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalRetranslocationSupply">
            <summary>Gets or sets the total retranslocation supply.</summary>
            <value>The total supply of labile biomass in the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalPlantSupply">
            <summary>Gets or sets the total crop supply.</summary>
            <value>crop supply from uptake, fixation, reallocation and remobilisation</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Reallocation">
            <summary>Gets or sets the reallocation.</summary>
            <value>The amount of biomass reallocated from each organ as it dies</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalReallocation">
            <summary>Gets or sets the total reallocation.</summary>
            <value>The total amount of biomass reallocated by the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Uptake">
            <summary>Gets or sets the uptake.</summary>
            <value>The actual uptake of biomass by each organ, generally limited to nutrients in the roots</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Fixation">
            <summary>Gets or sets the fixation.</summary>
            <value>The actual uptake of biomass by the whole crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Retranslocation">
            <summary>Gets or sets the retranslocation.</summary>
            <value>The actual retranslocation or biomass from each oragan</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalRetranslocation">
            <summary>Gets or sets the total retranslocation.</summary>
            <value>The total amount of biomass retranslocated by the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Respiration">
            <summary>Gets or sets the respiration.</summary>
            <value>The amount of biomass respired by each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalRespiration">
            <summary>Gets or sets the total respiration.</summary>
            <value>Total respiration by the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.ConstrainedGrowth">
            <summary>Gets or sets the constrained growth.</summary>
            <value>Biomass growth that is possible given nutrient availability and minimum N concentratins of organs</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.StructuralAllocation">
            <summary>Gets or sets the structural allocation.</summary>
            <value>The actual amount of structural biomass allocated to each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalStructuralAllocation">
            <summary>Gets or sets the total structural allocation.</summary>
            <value>The total structural biomass allocation to the whole crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.MetabolicAllocation">
            <summary>Gets or sets the metabolic allocation.</summary>
            <value>The actual meatabilic biomass allocation to each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalMetabolicAllocation">
            <summary>Gets or sets the total metabolic allocation.</summary>
            <value>The metabolic biomass allocation to each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.StorageAllocation">
            <summary>Gets or sets the non structural allocation.</summary>
            <value>The actual non-structural biomass allocation to each organ</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalStorageAllocation">
            <summary>Gets or sets the total non structural allocation.</summary>
            <value>The total non-structural allocationed to the crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.TotalAllocation">
            <summary>Gets or sets the total allocation.</summary>
            <value>The actual biomass allocation to each organ, structural, non-structural and metabolic</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Allocated">
            <summary>Gets or sets the total allocated.</summary>
            <value>The amount of biomass allocated to the whole crop</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.NotAllocated">
            <summary>Gets or sets the not allocated.</summary>
            <value>The biomass available that was not allocated.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.SinkLimitation">
            <summary>Gets or sets the sink limitation.</summary>
            <value>The amount of biomass that could have been assimilated but was not because the demand from organs was insufficient.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.NutrientLimitation">
            <summary>Gets or sets the limitation due to nutrient shortage</summary>
            <value>The amount of biomass that could have been assimilated but was not becasue nutrient supply was insufficient to meet organs minimunn N concentrations</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.Start">
            <summary>Gets or sets the start.</summary>
            <value>The start.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.End">
            <summary>Gets or sets the end.</summary>
            <value>The end.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.BalanceError">
            <summary>Gets or sets the balance error.</summary>
            <value>The balance error.</value>
        </member>
        <member name="P:Models.PMF.BiomassArbitrationType.BiomassType">
            <summary>the type of biomass being arbitrated</summary>
            <value>The balance error.</value>
        </member>
        <member name="M:Models.PMF.BiomassArbitrationType.#ctor(System.String,System.Collections.Generic.List{Models.PMF.Interfaces.IArbitration})">
            <summary>Initializes a new instance of the <see cref="T:Models.PMF.BiomassArbitrationType"/> class.</summary>
            <param name="type">Type of biomass arbitration</param>
            <param name="allOrgans">Names of organs</param>
        </member>
        <member name="M:Models.PMF.BiomassArbitrationType.GetSupplies(Models.PMF.Interfaces.BiomassSupplyType[],System.Double)">
            <summary>Setup all supplies</summary>
            <param name="suppliesForEachOrgan">The organs supplies.</param>
            <param name="totalOfAllOrgans">The total wt or N for all organs</param>
        </member>
        <member name="M:Models.PMF.BiomassArbitrationType.GetDemands(Models.PMF.Interfaces.BiomassPoolType[])">
            <summary>Setup all demands</summary>
            <param name="demandsForEachOrgan">The organs demands</param>
        </member>
        <member name="M:Models.PMF.BiomassArbitrationType.Clear">
            <summary>Clear the arbitration type</summary>
        </member>
        <member name="T:Models.PMF.IArbitrationMethod">
            <summary>
            Interface for arbitration methods
            </summary>
        </member>
        <member name="M:Models.PMF.IArbitrationMethod.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="T:Models.PMF.PrioritythenRelativeAllocation">
            <summary>
            Priority then Relative allocation rules used to determine partitioning
            </summary>
        </member>
        <member name="M:Models.PMF.PrioritythenRelativeAllocation.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="M:Models.PMF.PrioritythenRelativeAllocation.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.PriorityAllocation">
            <summary>
            Priority allocation rules used to determine partitioning
            </summary>
        </member>
        <member name="M:Models.PMF.PriorityAllocation.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="M:Models.PMF.PriorityAllocation.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.RelativeAllocationSinglePass">
            <summary>
            Single Pass Relative allocation rules used to determine partitioning
            </summary>
        </member>
        <member name="M:Models.PMF.RelativeAllocationSinglePass.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="M:Models.PMF.RelativeAllocationSinglePass.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.RelativeAllocation">
            <summary>
            Relative allocation rules used to determine partitioning
            </summary>
        </member>
        <member name="M:Models.PMF.RelativeAllocation.DoAllocation(Models.PMF.Interfaces.IArbitration[],System.Double,System.Double@,Models.PMF.BiomassArbitrationType)">
            <summary>Relatives the allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="TotalSupply">The total supply.</param>
            <param name="TotalAllocated">The total allocated.</param>
            <param name="BAT">The bat.</param>
        </member>
        <member name="M:Models.PMF.RelativeAllocation.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.CultivarFolder">
            <summary>
            A folder of cultivars
            </summary>
        </member>
        <member name="M:Models.PMF.CultivarFolder.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Library.BiomassRemoval">
            <summary>
            # [Name]
            This class impliments biomass removal from live + dead pools.
            </summary>
        </member>
        <member name="F:Models.PMF.Library.BiomassRemoval.defaults">
            <summary>Biomass removal defaults for different event types e.g. prune, cut etc.</summary>
        </member>
        <member name="E:Models.PMF.Library.BiomassRemoval.IncorpFOM">
            <summary>Invoked when fresh organic matter needs to be incorporated into soil</summary>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType,Models.PMF.Biomass,Models.PMF.Biomass,Models.PMF.Biomass,Models.PMF.Biomass,System.Boolean)">
            <summary>Removes biomass from live and dead biomass pools, may send to surface organic matter</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass removal call.</param>
            <param name="amount">The fractions of biomass to remove</param>
            <param name="Live">Live biomass pool</param>
            <param name="Dead">Dead biomass pool</param>
            <param name="Removed">The removed pool to add to.</param>
            <param name="Detached">The detached pool to add to.</param>
            <param name="writeToSummary">Write the biomass removal to summary file?</param>
            <returns>The remaining live fraction.</returns>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.RemoveBiomassToSoil(System.String,Models.PMF.OrganBiomassRemovalType,Models.PMF.Biomass[],Models.PMF.Biomass[],Models.PMF.Biomass,Models.PMF.Biomass)">
            <summary>Removes biomass from live and dead biomass pools and send to soil</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="removal">The fractions of biomass to remove</param>
            <param name="Live">Live biomass pool</param>
            <param name="Dead">Dead biomass pool</param>
            <param name="Removed">The removed pool to add to.</param>
            <param name="Detached">The detached pool to add to.</param>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.FindDefault(System.String)">
            <summary>Finds a specific biomass removal default for the specified name</summary>
            <param name="name">Name of the removal type e.g. cut, prune etc.</param>
            <returns>Returns the default or null if not found.</returns>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.CheckRemoveFractions(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Checks whether specified biomass removal fractions are within limits</summary>
            <param name="name">Name of the removal type e.g. cut, prune etc.</param>
            <param name="amount">The removal amount fractions</param>
            <returns>Returns true if fractions are ok, false otherwise.</returns>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.RemoveBiomassFromLiveAndDead(Models.PMF.OrganBiomassRemovalType,Models.PMF.Biomass,Models.PMF.Biomass,Models.PMF.Biomass@,Models.PMF.Biomass@)">
            <summary>Removes biomass from live and dead biomass pools</summary>
            <param name="amount">The fractions of biomass to remove</param>
            <param name="Live">Live biomass pool</param>
            <param name="Dead">Dead biomass pool</param>
            <param name="removing">The removed pool to add to.</param>
            <param name="detaching">The amount of detaching material</param>
        </member>
        <member name="M:Models.PMF.Library.BiomassRemoval.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Organs.PerennialLeaf">
            <summary>
            # [Name]
            This organ is parameterised using a simple leaf organ type which provides the core functions of intercepting radiation, providing a photosynthesis supply and a transpiration demand.  It also calculates the growth, senescence and detachment of leaves.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.CarbonConcentration">
            <summary>Carbon concentration</summary>
            [Units("-")]
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Live">
            <summary>Gets the cohort live.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Dead">
            <summary>Gets the cohort live.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.SurfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.GrowthRespiration">
            <summary>Growth Respiration</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Detached">
            <summary>Gets the DM amount detached (sent to soil/surface organic matter) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.ApicalCohortNo">
            <summary>
            Number of initiated cohorts that have not appeared yet
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.Reset">
            <summary>
            reset leaf numbers
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.CohortsInitialised">
            <summary></summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.TipsAtEmergence">
            <summary></summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.CohortsAtInitialisation">
            <summary></summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.AppearedCohortNo">
            <summary></summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.PlantAppearedLeafNo">
            <summary></summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.DoThin(System.Double)">
            <summary></summary>
            <param name="proprtionRemoved"></param>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.InitialisedCohortNo">
            <summary></summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.RemoveHighestLeaf">
            <summary></summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.CanopyType">
            <summary>Gets the canopy. Should return null if no canopy present.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.LAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.LAITotal">
            <summary>Gets the LAI live + dead (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.SpecificLeafArea">
            <summary>Gets the SLA</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.CoverGreen">
            <summary>Gets the cover green.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.CoverTotal">
            <summary>Gets the cover total.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Height">
            <summary>Gets or sets the height.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Depth">
            <summary>Gets the depth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.FRGR">
            <summary>Gets or sets the FRGR.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.PotentialEP">
            <summary>Sets the potential evapotranspiration. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.MicroClimatePresent">
            <summary>
            Flag to test if Microclimate is present
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.LightProfile">
            <summary>Sets the light profile. Set by MICROCLIMATE.</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.FRGRFunction">
            <summary>The FRGR function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.dmDemands">
            <summary>The DM demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.nDemands">
            <summary>The N demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.ExtinctionCoefficient">
            <summary>The extinction coefficient function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.ExtinctionCoefficientDead">
            <summary>The extinction coefficient function for dead leaves</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Photosynthesis">
            <summary>The photosynthesis</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.HeightFunction">
            <summary>The height function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.LeafResidenceTime">
            <summary>Leaf Residence Time</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.LeafDevelopmentRate">
            <summary>Leaf Development Rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.LeafKillFraction">
            <summary>Leaf Death</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.MinimumLAI">
            <summary>Minimum LAI</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.LeafDetachmentTime">
            <summary>Leaf Detachment Time</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.SpecificLeafAreaFunction">
            <summary>SpecificLeafArea</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Structure">
            <summary>The structure</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.CalculateWaterDemand">
            <summary>Calculate the water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Transpiration">
            <summary>Gets the transpiration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.WaterSupply(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Gets or sets the water supply.</summary>
            <param name="zone">The zone.</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.DoWaterUptake(System.Double[],System.String)">
            <summary>Does the water uptake.</summary>
            <param name="Amount">The amount.</param>
            <param name="zoneName">Zone name to do water uptake in</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.CalcNSupply(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double[]@,System.Double[]@)">
            <summary>Gets the nitrogen supply from the specified zone.</summary>
            <param name="zone">The zone.</param>
            <param name="NO3Supply">The returned NO3 supply</param>
            <param name="NH4Supply">The returned NH4 supply</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.DoNitrogenUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>Does the Nitrogen uptake.</summary>
            <param name="zonesFromSoilArbitrator">List of zones from soil arbitrator</param>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Fw">
            <summary>Gets the fw.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Fn">
            <summary>Gets the function.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.LAIDead">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.CoverDead">
            <summary>Gets the cover dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.RadIntTot">
            <summary>Gets the RAD int tot.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.ApexNumByAge(System.Double)">
            <summary>Apex number by age</summary>
            <param name="age">Threshold age</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.WaterAllocation">
            <summary>Gets or sets the water allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.StartLive">
            <summary>The start live</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.NReallocationFactor">
            <summary>The n reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.NRetranslocationFactor">
            <summary>The n retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.DMRetranslocationFactor">
            <summary>The dm retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.InitialWtFunction">
            <summary>The initial wt function</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.DryMatterContent">
            <summary>The dry matter content</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.MaximumNConc">
            <summary>The maximum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.MinimumNConc">
            <summary>The minimum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.MaintenanceRespirationFunction">
            <summary>The proportion of biomass repired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.DMConversionEfficiency">
            <summary>Dry matter conversion efficiency</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.StartNRetranslocationSupply">
            <summary>The start n retranslocation supply</summary>
        </member>
        <member name="F:Models.PMF.Organs.PerennialLeaf.StartNReallocationSupply">
            <summary>The start n reallocation supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.LiveFWt">
            <summary>Gets or sets the live f wt.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.RemoveMaintenanceRespiration(System.Double)">
            <summary>Remove maintenance respiration from live component of organs.</summary>
            <param name="respiration">The respiration to remove</param>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.MaxNconc">
            <summary>Gets or sets the maximum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.MinNconc">
            <summary>Gets or sets the minimum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.Wt">
            <summary>Gets the total grain weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.PerennialLeaf.N">
            <summary>Gets the total grain N</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is sown</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.Kill(System.Double)">
            <summary>Kill a fraction of the green leaf</summary>
            <param name="fraction">The fraction of leaf to kill</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.DoPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Organs.PerennialLeaf.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="value">The fractions of biomass to remove</param>
        </member>
        <member name="T:Models.PMF.Organs.ZoneState">
            <summary>The state of each zone that root knows about.</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.soil">
            <summary>The soil in this zone</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.solutes">
            <summary>The solute manager in this zone</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.plant">
            <summary>The parent plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.root">
            <summary>The root organ</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.rootFrontVelocity">
            <summary>The root front velocity function</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.maximumRootDepth">
            <summary>The Maximum Root Depth</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.remobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.ZoneState.Name">
            <summary>Zone name</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.WaterUptake">
            <summary>The water uptake</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.DeltaNH4">
            <summary>The delta n h4</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.DeltaNO3">
            <summary>The delta n o3</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.DMAllocated">
            <summary>Holds actual DM allocations to use in allocating N to structural and Non-Structural pools</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.PotentialDMAllocated">
            <summary>Holds potential DM allocations to use in allocating N to structural and Non-Structural pools</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.StructuralNDemand">
            <summary>Demand for structural N, set when Ndemand is called and used again in N allocation</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.StorageNDemand">
            <summary>Demand for Non-structural N, set when Ndemand is called and used again in N allocation</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.NitUptake">
            <summary>The Nuptake</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.NuptakeSupply">
            <summary>Gets or sets the nuptake supply.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.LayerLive">
            <summary>Gets or sets the layer live.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.LayerDead">
            <summary>Gets or sets the layer dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.Length">
            <summary>Gets or sets the length.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ZoneState.Depth">
            <summary>Gets or sets the depth.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.#ctor(Models.PMF.Plant,Models.PMF.Organs.Root,Models.Soils.Soil,System.Double,System.Double,System.Double,System.Double,Models.Functions.IFunction,Models.Functions.IFunction,Models.Functions.IFunction)">
            <summary>Constructor</summary>
            <param name="Plant">The parant plant</param>
            <param name="Root">The parent root organ</param>
            <param name="soil">The soil in the zone.</param>
            <param name="depth">Root depth (mm)</param>
            <param name="initialDM">Initial dry matter</param>
            <param name="population">plant population</param>
            <param name="maxNConc">maximum n concentration</param>
            <param name="rfv">Root front velocity</param>
            <param name="mrd">Maximum root depth</param>
            <param name="remobCost">Remobilisation cost</param>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.Initialise(System.Double,System.Double,System.Double,System.Double)">
            <summary>Initialise the zone.</summary>
            <param name="depth">Root depth (mm)</param>
            <param name="initialDM">Initial dry matter</param>
            <param name="population">plant population</param>
            <param name="maxNConc">maximum n concentration</param>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.GrowRootDepth">
            <summary>
            Growth depth of roots in this zone
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.CalculateRootActivityValues">
            <summary>
            Calculate Root Activity Values for water and nitrogen
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.ZoneState.PartitionRootMass(System.Double,System.Double)">
            <summary>
            Partition root mass into layers
            </summary>
        </member>
        <member name="T:Models.PMF.Organs.GenericOrgan">
            <summary>
            This organ is simulated using a GenericOrgan type.  It is parameterised to calculate the growth, senescence, and detachment of any organ that does not have specific functions.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.BiomassToleranceValue">
            <summary>Tolerance for biomass comparisons</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.parentPlant">
            <summary>The parent plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.surfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.senescenceRate">
            <summary>The senescence rate function</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.detachmentRateFunction">
            <summary>The detachment rate function</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.nRetranslocationFactor">
            <summary>The N retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.nReallocationFactor">
            <summary>The N reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.dmRetranslocationFactor">
            <summary>The DM retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.dmReallocationFactor">
            <summary>The DM reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.dmDemands">
            <summary>The DM demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.nDemands">
            <summary>The N demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.initialWtFunction">
            <summary>The initial biomass dry matter weight</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.maximumNConc">
            <summary>The maximum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.minimumNConc">
            <summary>The minimum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.criticalNConc">
            <summary>The critical N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.maintenanceRespirationFunction">
            <summary>The proportion of biomass respired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.dmConversionEfficiency">
            <summary>Dry matter conversion efficiency</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.remobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.CarbonConcentration">
            <summary>Carbon concentration</summary>
            [Units("-")]
        </member>
        <member name="F:Models.PMF.Organs.GenericOrgan.startLive">
            <summary>The live biomass state at start of the computation round</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Live">
            <summary>The live biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Dead">
            <summary>The dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Detached">
            <summary>Gets the biomass detached (sent to soil/surface organic matter)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Removed">
            <summary>Gets the biomass removed from the system (harvested, grazed, etc.)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.GrowthRespiration">
            <summary>Growth Respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.DMPotentialAllocation">
            <summary>Gets the potential DM allocation for this computation round.</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.MaxNconc">
            <summary>Gets the maximum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.MinNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.CritNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Wt">
            <summary>Gets the total (live + dead) dry matter weight (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.N">
            <summary>Gets the total (live + dead) N amount (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.GenericOrgan.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.AvailableDMRetranslocation">
            <summary>Computes the amount of DM available for retranslocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.AvailableDMReallocation">
            <summary>Computes the amount of DM available for reallocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
            <param name="dryMatter">The potential amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
            <param name="dryMatter">The actual amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
            <param name="nitrogen">The nitrogen allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.RemoveMaintenanceRespiration(System.Double)">
            <summary>Remove maintenance respiration from live component of organs.</summary>
            <param name="respiration">The respiration to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.DoPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.GenericOrgan.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Organs.HIReproductiveOrgan">
            <summary>
            A harvest index reproductive organ
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.SurfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.Plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.AboveGroundWt">
            <summary>Gets or sets the above ground.</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.WaterContent">
            <summary>The water content</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.HIIncrement">
            <summary>The hi increment</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.NConc">
            <summary>The n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.HIReproductiveOrgan.DailyGrowth">
            <summary>The daily growth</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Live">
            <summary>The live biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Dead">
            <summary>The dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.GrowthRespiration">
            <summary>Growth Respiration</summary>
            [Units("CO_2")]
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Detached">
            <summary>Gets the DM amount detached (sent to soil/surface organic matter) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dm potential allocation.</summary>
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.MinNconc">
            <summary>Minimum N concentration</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.LiveFWt">
            <summary>Gets the live f wt.</summary>
            <value>The live f wt.</value>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.PMF.Organs.HIReproductiveOrgan"/> class.</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.HI">
            <summary>Gets the hi.</summary>
            <value>The hi.</value>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.Wt">
            <summary>Gets the total grain weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.HIReproductiveOrgan.N">
            <summary>Gets the total grain N</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.RemoveMaintenanceRespiration(System.Double)">
            <summary>Remove maintenance respiration from live component of organs.</summary>
            <param name="respiration">The respiration to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="value">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.HIReproductiveOrgan.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="T:Models.PMF.Organs.Leaf">
            <summary>
            # [Name]
            The leaves are modelled as a set of leaf cohorts and the properties of each of these cohorts are summed to give overall values for the leaf organ.  
              A cohort represents all the leaves of a given main stem node position including all of the branch leaves appearing at the same time as the given main-stem leaf ([lawless2005wheat]).  
              The number of leaves in each cohort is the product of the number of plants per m<sup>2</sup> and the number of branches per plant.  
              The *Structure* class models the appearance of main-stem leaves and branches.  Once cohorts are initiated the *Leaf* class models the area and biomass dynamics of each.  
              It is assumed all the leaves in each cohort have the same size and biomass properties.  The modelling of the status and function of individual cohorts is delegated to *LeafCohort* classes.  
            
            ## Dry Matter Fixation
            The most important DM supply from leaf is the photosynthetic fixation supply.  Radiation interception is calculated from
              LAI using an extinction coefficient of:
            [Document ExtinctionCoeff]
            [Document Photosynthesis]
            
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.SurfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.Plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.MetData">
            <summary>The met data</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.GrowthRespiration">
            <summary>Growth Respiration</summary>
            [Units("CO_2")]
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Detached">
            <summary>Gets the DM amount detached (sent to soil/surface organic matter) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DMSupplyPhotosynthesis">
            <summary>Gets the dm supply photosynthesis.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CanopyType">
            <summary>Gets the canopy. Should return null if no canopy present.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LAITotal">
            <summary>Gets the LAI live + dead (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CoverGreen">
            <summary>Gets the cover green.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CoverTotal">
            <summary>Gets the cover total.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Height">
            <summary>Gets the height.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Depth">
            <summary>Gets the depth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.FRGR">
            <summary>Gets  FRGR.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PotentialEP">
            <summary>Sets the potential evapotranspiration. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LightProfile">
            <summary>Sets the light profile. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.MicroClimatePresent">
            <summary>
            Flag to test if Microclimate is present
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.CalculateWaterDemand">
            <summary>Calculates the water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.WaterAllocation">
            <summary>Gets or sets the water allocation.</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.Structure">
            <summary>The structure</summary>
        </member>
        <member name="T:Models.PMF.Organs.Leaf.LeafCohortParameters">
             <summary>
             # Potential Leaf Area index
             Leaf area index is calculated as the sum of the area of each cohort of leaves 
             The appearance of a new cohort of leaves occurs each time Structure.LeafTipsAppeared increases by one.
             From tip appearance the area of each cohort will increase for a certian number of degree days defined by the <i>GrowthDuration</i>
             [Document GrowthDuration]
             
             If no stress occurs the leaves will reach a Maximum area (<i>MaxArea</i>) at the end of the <i>GrowthDuration</i>.
             The <i>MaxArea</i> is defined by:
             [Document MaxArea]
             
             In the absence of stress the leaf will remain at <i>MaxArea</i> for a number of degree days
             set by the <i>LagDuration</i> and then area will senesce to zero at the end of the <i>SenescenceDuration</i>
             [Document LagDuration]
             [Document SenescenceDuration]
             
             Mutual shading can cause premature senescence of cohorts if the leaf area above them becomes too great.
             Each cohort models the proportion of its area that is lost to shade induced senescence each day as:
             [Document ShadeInducedSenescenceRate]
             
             # Stress effects on Leaf Area Index
             Stress reduces leaf area in a number of ways.
             Firstly, stress occuring prior to the appearance of the cohort can reduce cell division, so reducing the maximum leaf size.
             Leaf captures this by multiplying the <i>MaxSize</i> of each cohort by a <i>CellDivisionStress</i> factor which is calculated as:
             [Document CellDivisionStress]
             
             Leaf.FN quantifys the N stress status of the plant and represents the concentration of metabolic N relative the maximum potentil metabolic N content of the leaf
             calculated as (<i>Leaf.NConc - MinimumNConc</i>)/(<i>CriticalNConc - MinimumNConc</i>).
             
             Leaf.FW quantifies water stress and is
             calculated as <i>Leaf.Transpiration</i>/<i>Leaf.WaterDemand</i>, where <i>Leaf.Transpiration</i> is the minimum of <i>Leaf.WaterDemand</i> and <i>Root.WaterUptake</i>
            
             Stress during the <i>GrowthDuration</i> of the cohort reduces the size increase of the cohort by
             multiplying the potential increase by a <i>ExpansionStress</i> factor:
             [Document ExpansionStress]
             
             Stresses can also acellerate the onset and rate of senescence in a number of ways.
             Nitrogen shortage will cause N to be retranslocated out of lower order leaves to support the expansion of higher order leaves and other organs
             When this happens the lower order cohorts will have their area reduced in proportion to the amount of N that is remobilised out of them.
            
             Water stress hastens senescence by increasing the rate of thermal time accumulation in the lag and senescence phases.
             This is done by multiplying thermal time accumulation by <i>DroughtInducedLagAcceleration</i> and <i>DroughtInducedSenescenceAcceleration</i> factors, respectively:
             [Document DroughtInducedLagAcceleration]
             [Document DroughtInducedSenAcceleration]
             
             # Dry matter Demand
             Leaf calculates the DM demand from each cohort as a function of the potential size increment (DeltaPotentialArea) an specific leaf area bounds.
             Under non stressed conditions the demand for non-storage DM is calculated as <i>DeltaPotentialArea</i> divided by the mean of <i>SpecificLeafAreaMax</i> and <i>SpecificLeafAreaMin</i>.
             Under stressed conditions it is calculated as <i>DeltaWaterConstrainedArea</i> divided by <i>SpecificLeafAreaMin</i>.
             [Document SpecificLeafAreaMax]
             [Document SpecificLeafAreaMin]
             
             Non-storage DM Demand is then seperated into structural and metabolic DM demands using the <i>StructuralFraction</i>:
             [Document StructuralFraction]
             
             The storage DM demand is calculated from the sum of metabolic and structural DM (including todays demands)
             multiplied by a <i>NonStructuralFraction</i>:
             [Document NonStructuralFraction]
             
             # Nitrogen Demand
             
             Leaf calculates the N demand from each cohort as a function of the potential DM increment and N concentration bounds.
             Structural N demand = <i>PotentialStructuralDMAllocation</i> * <i>MinimumNConc</i> where:
             [Document MinimumNConc]
             
             Metabolic N demand is calculated as <i>PotentialMetabolicDMAllocation</i> * (<i>CriticalNConc</i> - <i>MinimumNConc</i>) where:
             [Document CriticalNConc]
             
             Storage N demand is calculated as the sum of metabolic and structural wt (including todays demands)
             multiplied by <i>LuxaryNconc</i> (<i>MaximumNConc</i> - <i>CriticalNConc</i>) less the amount of storage N already present.  <i>MaximumNConc</i> is given by:
             [Document MaximumNConc]
            
             # Drymatter supply
             In additon to photosynthesis, the leaf can also supply DM by reallocation of senescing DM and retranslocation of storgage DM:
             Reallocation supply is a proportion of the metabolic and non-structural DM that would be senesced each day where the proportion is set by:
             [Document DMReallocationFactor]
             Retranslocation supply is calculated as a proportion of the amount of storage DM in each cohort where the proportion is set by :
             [Document DMRetranslocationFactor]
            
             # Nitrogen supply
             Nitrogen supply from the leaf comes from the reallocation of metabolic and storage N in senescing material
             and the retranslocation of metabolic and storage N.  Reallocation supply is a proportion of the Metabolic and Storage DM that would be senesced each day where the proportion is set by:
             [Document NReallocationFactor]
             Retranslocation supply is calculated as a proportion of the amount of storage and metabolic N in each cohort where the proportion is set by :
             [Document NRetranslocationFactor]
             </summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.MaxArea">
            <summary>The maximum area</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.GrowthDuration">
            <summary>The growth duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.LagDuration">
            <summary>The lag duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SenescenceDuration">
            <summary>The senescence duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.DetachmentLagDuration">
            <summary>The detachment lag duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.DetachmentDuration">
            <summary>The detachment duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SpecificLeafAreaMax">
            <summary>The specific leaf area maximum</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SpecificLeafAreaMin">
            <summary>The specific leaf area minimum</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.StructuralFraction">
            <summary>The structural fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.MaximumNConc">
            <summary>The maximum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.MinimumNConc">
            <summary>The minimum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.InitialNConc">
            <summary>The initial n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.NReallocationFactor">
            <summary>The n reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.DMReallocationFactor">
            <summary>The dm reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.NRetranslocationFactor">
            <summary>The n retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.ExpansionStress">
            <summary>The expansion stress</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LeafCohortParameters.ExpansionStressValue">
            <summary>The expansion stress</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.CriticalNConc">
            <summary>The critical n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.DMRetranslocationFactor">
            <summary>The dm retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.ShadeInducedSenescenceRate">
            <summary>The shade induced senescence rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.DroughtInducedLagAcceleration">
            <summary>The drought induced reduction of lag phase through acceleration of tt accumulation by the cohort during this phase</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.DroughtInducedSenAcceleration">
            <summary>The drought induced reduction of senescence phase through acceleration of tt accumulation by the cohort during this phase</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.StorageFraction">
            <summary>The non structural fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.CellDivisionStress">
            <summary>The cell division stress</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.LeafSizeShapeParameter">
            <summary>The Shape of the sigmoidal function of leaf area increase</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SenessingLeafRelativeSize">
            <summary>The size of leaves on senessing tillers relative to the dominant tillers in that cohort</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.MaintenanceRespirationFunction">
            <summary>The proportion of mass that is respired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.LeafSizeAgeMultiplier">
            <summary>Modify leaf size by age</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.LagDurationAgeMultiplier">
            <summary>Modify lag duration by age</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.SenescenceDurationAgeMultiplier">
            <summary>Modify senescence duration by age</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.LeafCohortParameters.RemobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.InitialLeaves">
            <summary>The initial leaves</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.CohortParameters">
            <summary>The leaf cohort parameters</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.Photosynthesis">
            <summary>The photosynthesis</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.FRGRFunction">
            <summary>The Fractional Growth Rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.ThermalTime">
            <summary>The thermal time</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.ExtinctionCoeff">
            <summary>The extinction coeff</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.FrostFraction">
            <summary>The frost fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.StructuralFraction">
            <summary>The structural fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.DMDemandFunction">
            <summary>The dm demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.DMConversionEfficiency">
            <summary>The dm demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.CarbonConcentration">
            <summary>Carbon concentration</summary>
            [Units("-")]
        </member>
        <member name="F:Models.PMF.Organs.Leaf.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.KDead">
            <summary>Gets or sets the k dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.MaximumMainStemLeafNumber">
            <summary>Gets or sets the maximum number of leaves on the main stem</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.needToRecalculateLiveDead">
            <summary>Do we need to recalculate (expensive operation) live and dead</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.Leaves">
            <summary>The leaves</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.CurrentExpandingLeaf">
            <summary>Initialise all state variables.</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.StartFractionExpanded">
            <summary>The start fraction expanded</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.FractionNextleafExpanded">
            <summary>The fraction nextleaf expanded</summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.DeadNodesYesterday">
            <summary>The dead nodes yesterday</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortCurrentRankCoverAbove">
            <summary>Return the</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.TipsAtEmergence">
            <summary>
            The number of leaves that have visiable tips on the day of emergence
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortsAtInitialisation">
            <summary>
            The number of leaf cohorts to initialised
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.SpecificNitrogen">
            <Summary>Spcific leaf nitrogen</Summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.FractionDied">
            <summary>Gets or sets the fraction died.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortsInitialised">
            <summary>
            Gets a value indicating whether [cohorts initialised].
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Leaf.MaxCover">
            <summary>The maximum cover</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ApicalCohortNo">
            <summary>The number of cohorts initiated that have not yet emerged</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.InitialisedCohortNo">
            <summary>Gets the initialised cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.AppearedCohortNo">
            <summary>Gets the appeared cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ExpandingCohortNo">
            <summary>Gets the expanding cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ExpandedCohortNo">
            <summary>Gets the expanded cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.GreenCohortNo">
            <summary>Gets the green cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.GreenCohortNoHalfSenescence">
            <summary>Gets the green cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.SenescingCohortNo">
            <summary>Gets the senescing cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DeadCohortNo">
            <summary>Gets the dead cohort no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PlantAppearedGreenLeafNo">
            <summary>Gets the plant appeared green leaf no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PlantAppearedGreenLeafNoHalfSenescence">
            <summary>Gets the plant appeared green leaf no. (matching with observation)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PlantAppearedLeafNo">
            <summary>Gets the plant appeared leaf no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PlantsenescedLeafNo">
            <summary>Gets the plant senesced leaf no.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LAIDead">
            <summary>Gets the lai dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Live">
            <summary>Gets the cohort live.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Dead">
            <summary>Gets the cohort dead.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.RecalculateLiveDead">
            <summary>Recalculate live and dead biomass if necessary</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CoverDead">
            <summary>Gets the cover dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.RadIntTot">
            <summary>Gets the RAD int tot.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.SpecificArea">
            <summary>Gets the specific area.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.NextExpandingLeafProportion">
            <summary>
            Returns the relative expansion of the next leaf to produce its ligule
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DeltaPotentialArea">
            <summary>Gets the DeltaPotentialArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DeltaStressConstrainedArea">
            <summary>Gets the DeltaStressConstrainedArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.DeltaCarbonConstrainedArea">
            <summary>Gets the DeltaCarbonConstrainedArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortStructuralDMDemand">
            <summary>Gets the DeltaCarbonConstrainedArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortMetabolicDMDemand">
            <summary>Gets the DeltaCarbonConstrainedArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortStorageDMDemand">
            <summary>Gets the DeltaCarbonConstrainedArea</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortPopulation">
            <summary>Gets the cohort population.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortSize">
            <summary>Gets the size of the cohort.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortArea">
            <summary>Gets the cohort area.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortMaxSize">
            <summary>Gets the maximum size of the cohort.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortLagDuration">
            <summary>Gets lag duration</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortSenescedFrac">
            <summary>Gets fraction of leaf senescence.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortSLA">
            <summary>Gets the cohort sla.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortMaxArea">
            <summary>Gets the cohort MaxArea.</summary> 
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CohortLiveWt">
            <summary>Gets the cohort Wt.</summary> 
        </member>
        <member name="P:Models.PMF.Organs.Leaf.AreaLargestLeaf">
            <summary>Returns the area of the largest leaf.</summary>
            <value>The area of the largest leaf</value>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LiveStemNumber">
            <summary>Gets the live stem  number to represent the observed stem numbers in an experiment.</summary>
            <value>Stem number.</value>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.LiveNConc">
            <summary>Gets the live n conc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.PotentialGrowth">
            <summary>Gets the potential growth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Transpiration">
            <summary>Gets the transpiration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.MaintenanceRespiration">
            <summary>
            The amount of mass lost to maintenance respiration
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Fw">
            <summary>Gets the fw.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Fn">
            <summary>Gets the function.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ApexNum">
            <summary>Total apex number in plant.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ApexGroupSize">
            <summary>Apex group size in plant</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.ApexGroupAge">
            <summary>Apex group age in plant</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.CurrentRank">
            <summary>1 based rank of the current leaf.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.CohortCounter(System.String)">
            <summary>Counts cohorts with a given condition.</summary>
            <param name="Condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.Reset">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnInitialiseLeafCohorts(System.Object,System.EventArgs)">
            <summary>Initialises the cohorts.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnAddLeafCohort(System.Object,Models.PMF.CohortInitParams)">
            <summary>Method to initialise new cohorts</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnLeafTipAppearance(System.Object,Models.PMF.ApparingLeafParams)">
            <summary>Method to make leaf cohort appear and start expansion</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.ZeroLeaves">
            <summary>Zeroes the leaves.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.CoverAboveCohort(System.Double)">
            <summary>Fractional interception "above" a given node position</summary>
            <param name="cohortno">cohort position</param>
            <returns>fractional interception (0-1)</returns>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>
            remove biomass from the leaf.
            </summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="value">The frations of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.DoThin(System.Double)">
            <summary>
            remove population elements from the leaf.
            </summary>
            <param name="ProportionRemoved">The proportion of stems removed by thinning</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.RemoveHighestLeaf">
            <summary>
            Called when defoliation calls for removal of main-stem nodes
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.RemoveMaintenanceRespiration(System.Double)">
            <summary>Remove maintenance respiration from live component of organs.</summary>
            <param name="respiration">The respiration to remove</param>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.MinNconc">
            <summary>Gets or sets the minimum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.Wt">
            <summary>Gets the total grain weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.Leaf.N">
            <summary>Gets the total grain N</summary>
        </member>
        <member name="E:Models.PMF.Organs.Leaf.NewLeaf">
            <summary>Occurs when [new leaf].</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnRemoveLowestLeaf">
            <summary>Called when [remove lowest leaf].</summary>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnKillLeaf(Models.PMF.KillLeafType)">
            <summary>Called when [kill leaf].</summary>
            <param name="KillLeaf">The kill leaf.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnPruning(System.Object,System.EventArgs)">
            <summary>Called when crop is being prunned.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnHarvesting(System.Object,System.EventArgs)">
            <summary>Called when crop is being cut.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Leaf.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.Organs.LeafCohort">
            <summary>
             A leaf cohort model
             </summary>
             <remarks>
             
             @startuml
             Initialized -> Appeared: Appearance 
             Appeared -> Expanded: GrowthDuration
             Expanded -> Senescing: LagDuration
             Senescing -> Senesced: SenescenceDuration
             Senesced -> Detaching: DetachmentLagDuration
             Detaching -> Detached: DetachmentDuration
             Initialized ->Expanded: IsGrowing
             Initialized -> Senesced: IsAlive
             Initialized -> Senesced: IsGreen
             Initialized -> Senescing: IsNotSenescing
             Senescing -> Senesced: IsSenescing
             Expanded -> Detached: IsFullyExpanded
             Senesced -> Detached: ShouldBeDead
             Senesced -> Detached: Finished
             Appeared -> Detached: IsAppeared
             Initialized -> Detached: IsInitialised
             @enduml
             
             Leaf death
             ------------------------
             The leaf area, structural biomass and structural nitrogen of 
             green (live) parts is subtracted by a fraction.
             
             </remarks>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Structure">
            <summary>The structure</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Leaf">
            <summary>The leaf</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Apex">
            <summary>The leaf apex model</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.ApexCohort">
            <summary>The leaf apex model</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Clock">
            <summary>The clock</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Live">
            <summary>The live</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Dead">
            <summary>The dead</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LiveStart">
            <summary>The live start</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.Rank">
            <summary>The rank</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.Area">
            <summary>The area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.Age">
            <summary>The age</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.NReallocationFactor">
            <summary>The n reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DMReallocationFactor">
            <summary>The dm reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.NRetranslocationFactor">
            <summary>The n retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DMRetranslocationFactor">
            <summary>The dm retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.FunctionalNConc">
            <summary>The functional n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LuxaryNConc">
            <summary>The luxary n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StructuralFraction">
            <summary>The structural fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StorageFraction">
            <summary>The non structural fraction</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MaxLiveArea">
            <summary>The maximum live area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MaxCohortPopulation">
            <summary>The maximum live area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.GrowthDuration">
            <summary>The growth duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LagDuration">
            <summary>The lag duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.SenescenceDuration">
            <summary>The senescence duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DetachmentLagDuration">
            <summary>The detachment lag duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DetachmentDuration">
            <summary>The detachment duration</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.SpecificLeafAreaMax">
            <summary>The specific leaf area maximum</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.SpecificLeafAreaMin">
            <summary>The specific leaf area minimum</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MaximumNConc">
            <summary>The maximum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MinimumNConc">
            <summary>The minimum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.InitialNConc">
            <summary>The initial n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LiveArea">
            <summary>The live area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DeadArea">
            <summary>The dead area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MaxArea">
            <summary>The maximum area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafSizeShape">
            <summary>The maximum area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.SenessingLeafRelativeSize">
            <summary>The size of senessing leaves relative to the other leaves in teh cohort</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.CoverAbove">
            <summary>Gets or sets the cover above.</summary>
            <value>The cover above.</value>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.ShadeInducedSenRate">
            <summary>The shade induced sen rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.SenescedFrac">
            <summary>The senesced frac</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DetachedFrac">
            <summary>The detached frac</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.CohortPopulation">
            <summary>The cohort population</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.CellDivisionStressFactor">
            <summary>The cell division stress factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.CellDivisionStressAccumulation">
            <summary>The cell division stress accumulation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.CellDivisionStressDays">
            <summary>The cell division stress days</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartNRetranslocationSupply">
            <summary>The leaf start n retranslocation supply</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartNReallocationSupply">
            <summary>The leaf start n reallocation supply</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartDMRetranslocationSupply">
            <summary>The leaf start dm retranslocation supply</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartDMReallocationSupply">
            <summary>The leaf start dm reallocation supply</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartArea">
            <summary>The leaf start area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartMetabolicNReallocationSupply">
            <summary>
            The leaf start metabolic n reallocation supply
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartStorageNReallocationSupply">
            <summary>
            The leaf start non structural n reallocation supply
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartMetabolicNRetranslocationSupply">
            <summary>
            The leaf start metabolic n retranslocation supply
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartStorageNRetranslocationSupply">
            <summary>
            The leaf start non structural n retranslocation supply
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartMetabolicDMReallocationSupply">
            <summary>
            The leaf start metabolic dm reallocation supply
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.LeafStartStorageDMReallocationSupply">
            <summary>
            The leaf start non structural dm reallocation supply
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.Detached">
            <summary>Gets the DM amount detached (send to surface OM) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DeltaPotentialArea">
            <summary>The delta potential area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DeltaStressConstrainedArea">
            <summary>The delta water constrained area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DeltaCarbonConstrainedArea">
            <summary>The delta carbon constrained area</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.PotentialStructuralDMAllocation">
            <summary>The potential structural dm allocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.PotentialMetabolicDMAllocation">
            <summary>The potential metabolic dm allocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MetabolicNReallocated">
            <summary>The metabolic n reallocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MetabolicWtReallocated">
            <summary>The metabolic wt reallocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StorageNReallocated">
            <summary>The non structural n reallocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StorageWtReallocated">
            <summary>The non structural wt reallocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MetabolicNRetranslocated">
            <summary>The metabolic n retranslocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StorageNRetrasnlocated">
            <summary>The non structural n retrasnlocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.DMRetranslocated">
            <summary>The dm retranslocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MetabolicNAllocation">
            <summary>The metabolic n allocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.StructuralDMAllocation">
            <summary>The structural dm allocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.MetabolicDMAllocation">
            <summary>The metabolic dm allocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.LeafCohort.IsInitialised">
            <summary>Has the leaf chort been initialised?</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsNotAppeared">
            <summary>Gets a value indicating whether this instance has not appeared.</summary>
            <value>
            <c>true</c> if this instance is not appeared; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsGrowing">
            <summary>Gets a value indicating whether this instance is growing.</summary>
            <value>
            <c>true</c> if this instance is growing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsAppeared">
            <summary>Gets or sets a value indicating whether this instance is appeared.</summary>
            <value>
            <c>true</c> if this instance is appeared; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsFullyExpanded">
            <summary>Gets a value indicating whether this instance is fully expanded.</summary>
            <value>
            <c>true</c> if this instance is fully expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsGreen">
            <summary>Gets a value indicating whether this instance is green.</summary>
            <value><c>true</c> if this instance is green; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsSenescing">
            <summary>Gets a value indicating whether this instance is senescing.</summary>
            <value>
            <c>true</c> if this instance is senescing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsNotSenescing">
            <summary>Gets a value indicating whether this instance is not senescing.</summary>
            <value>
            <c>true</c> if this instance is not senescing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.Finished">
            <summary>Gets a value indicating whether this <see cref="T:Models.PMF.Organs.LeafCohort"/> is finished.</summary>
            <value><c>true</c> if finished; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.IsDead">
            <summary>Gets a value indicating whether this instance is dead.</summary>
            <value><c>true</c> if this instance is dead; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.FractionExpanded">
            <summary>Gets the maximum size.</summary>
            <summary>Gets the fraction expanded.</summary>
            <value>The fraction expanded.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.SpecificArea">
            <summary>Gets the specific area.</summary>
            <value>The specific area.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.MaintenanceRespiration">
            <summary>MaintenanceRespiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.StructuralDMDemand">
            <summary>Gets the structural dm demand.</summary>
            <value>The structural dm demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.MetabolicDMDemand">
            <summary>Gets the metabolic dm demand.</summary>
            <value>The metabolic dm demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.StorageDMDemand">
            <summary>Gets the non structural dm demand.</summary>
            <value>The non structural dm demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.StructuralNDemand">
            <summary>Gets the structural n demand.</summary>
            <value>The structural n demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.StorageNDemand">
            <summary>Gets the non structural n demand.</summary>
            <value>The non structural n demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.MetabolicNDemand">
            <summary>Gets the metabolic n demand.</summary>
            <value>The metabolic n demand.</value>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.DMAllocation">
            <summary>Sets the dm allocation.</summary>
            <value>The dm allocation.</value>
            <exception cref="T:System.Exception">
            -ve DM Allocation to Leaf Cohort
            or
            DM Allocated to Leaf Cohort is in excess of its Demand
            or
            A leaf cohort cannot supply that amount for DM Reallocation
            or
            Leaf cohort given negative DM Reallocation
            or
            Negative DM retranslocation from a Leaf Cohort
            or
            A leaf cohort cannot supply that amount for DM retranslocation
            </exception>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.NAllocation">
            <summary>Sets the n allocation.</summary>
            <value>The n allocation.</value>
            <exception cref="T:System.Exception">
            A leaf cohort cannot supply that amount for N Reallocation
            or
            Leaf cohort given negative N Reallocation
            or
            A leaf cohort cannot supply that amount for N Retranslocation
            or
            Leaf cohort given negative N Retranslocation
            </exception>
        </member>
        <member name="P:Models.PMF.Organs.LeafCohort.DMPotentialAllocation">
            <summary>Sets the dm potential allocation.</summary>
            <value>The dm potential allocation.</value>
            <exception cref="T:System.Exception">
            -ve Potential DM Allocation to Leaf Cohort
            or
            Potential DM Allocation to Leaf Cohortis in excess of its Demand
            or
            -ve Potential DM Allocation to Leaf Cohort
            or
            Potential DM Allocation to Leaf Cohortis in excess of its Demand
            </exception>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.Clone">
            <summary>Returns a clone of this object</summary>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoInitialisation">
            <summary>Does the initialisation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoAppearance(Models.PMF.ApparingLeafParams,Models.PMF.Organs.Leaf.LeafCohortParameters)">
            <summary>Does the appearance.</summary>
            <param name="cohortParams">The leaf fraction.</param>
            <param name="leafCohortParameters">The leaf cohort parameters.</param>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoPotentialGrowth(System.Double,Models.PMF.Organs.Leaf.LeafCohortParameters)">
            <summary>Does the potential growth.</summary>
            <param name="tt">The tt.</param>
            <param name="leafCohortParameters">The leaf cohort parameters.</param>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoActualGrowth(System.Double,Models.PMF.Organs.Leaf.LeafCohortParameters)">
            <summary>Does the actual growth.</summary>
            <param name="tt">The tt.</param>
            <param name="leafCohortParameters">The leaf cohort parameters.</param>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoKill(System.Double)">
            <summary>Does the kill.</summary>
            <param name="fraction">The fraction.</param>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoFrost(System.Double)">
            <summary>Does the frost.</summary>
            <param name="fraction">The fraction.</param>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.DoDailyCleanup">
            <summary>Does the zeroing of some varibles.</summary>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.PotentialAreaGrowthFunction(System.Double)">
            <summary>Potential delta LAI</summary>
            <param name="tt">thermal-time</param>
            <returns>(mm2 leaf/cohort position/m2 soil/day)</returns>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.SizeFunction(System.Double)">
            <summary>Potential average leaf size for today per cohort (no stress)</summary>
            <param name="tt">Thermal-time accumulation since cohort initiation</param>
            <returns>Average leaf size (mm2/leaf)</returns>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.LiveStemNumber(Models.PMF.Organs.Leaf.LeafCohortParameters)">
            <summary>Live leaf number</summary>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.FractionSenescing(System.Double,System.Double,System.Double,Models.PMF.Organs.Leaf.LeafCohortParameters)">
            <summary>Fractions the senescing.</summary>
            <param name="tt">The tt.</param>
            <param name="stemMortality">The stem mortality.</param>
            <param name="senessingLeafRelativeSize">The relative size of senessing tillers leaves relative to the other leaves in the cohort</param>
            <param name="leafCohortParameters">The associated leaf cohort parameters</param>
            <returns></returns>
            <exception cref="T:System.Exception">Bad Fraction Senescing</exception>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.FractionDetaching(System.Double)">
            <summary>Fractions the detaching.</summary>
            <param name="tt">The thermal time.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Bad Fraction Detaching</exception>
        </member>
        <member name="M:Models.PMF.Organs.LeafCohort.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Organs.Nodule">
            <summary>
            This organ simulates the root structure associate with symbiotic N-fixing bacteria.  It provides the core functions of determining 
             N fixation supply and related costs.  It also calculates the growth, senescence and detachment of nodules.
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.FixationMetabolicCost">
            <summary>The fixation metabolic cost</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.FixationRate">
            <summary>The specific nitrogenase activity</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.RespiredWt">
            <summary>The respired wt</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.NFixed">
            <summary>Gets the n fixed.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.RespiredWtFixation">
            <summary>Gets the respired wt fixation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do phenology events.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.BiomassToleranceValue">
            <summary>Tolerance for biomass comparisons</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.parentPlant">
            <summary>The parent plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.surfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.senescenceRate">
            <summary>The senescence rate function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.detachmentRateFunction">
            <summary>The detachment rate function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.nRetranslocationFactor">
            <summary>The N retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.nReallocationFactor">
            <summary>The N reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.dmRetranslocationFactor">
            <summary>The DM retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.dmReallocationFactor">
            <summary>The DM reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.dmDemands">
            <summary>The DM demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.nDemands">
            <summary>The N demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.initialWtFunction">
            <summary>The initial biomass dry matter weight</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.maximumNConc">
            <summary>The maximum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.minimumNConc">
            <summary>The minimum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.criticalNConc">
            <summary>The critical N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.maintenanceRespirationFunction">
            <summary>The proportion of biomass respired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.dmConversionEfficiency">
            <summary>Dry matter conversion efficiency</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.remobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Nodule.CarbonConcentration">
            <summary>Carbon concentration</summary>
            [Units("-")]
        </member>
        <member name="F:Models.PMF.Organs.Nodule.startLive">
            <summary>The live biomass state at start of the computation round</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Live">
            <summary>The live biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Dead">
            <summary>The dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Detached">
            <summary>Gets the biomass detached (sent to soil/surface organic matter)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Removed">
            <summary>Gets the biomass removed from the system (harvested, grazed, etc.)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.GrowthRespiration">
            <summary>Growth Respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.DMPotentialAllocation">
            <summary>Gets the potential DM allocation for this computation round.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.MaxNconc">
            <summary>Gets the maximum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.MinNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.CritNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Wt">
            <summary>Gets the total (live + dead) dry matter weight (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.N">
            <summary>Gets the total (live + dead) N amount (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Nodule.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.AvailableDMRetranslocation">
            <summary>Computes the amount of DM available for retranslocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.AvailableDMReallocation">
            <summary>Computes the amount of DM available for reallocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
            <param name="dryMatter">The potential amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.RemoveMaintenanceRespiration(System.Double)">
            <summary>Remove maintenance respiration from live component of organs.</summary>
            <param name="respiration">The respiration to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.DoPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Nodule.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.Organs.ReproductiveOrgan">
            <summary>
            # [Name] 
            This organ uses a generic model for plant reproductive components.  Yield is calculated from its components in terms of organ number and size (for example, grain number and grain size).  
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.SurfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.Plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.GrowthRespiration">
            <summary>Growth Respiration</summary>
            [Units("CO_2")]
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Detached">
            <summary>Gets the DM amount detached (sent to soil/surface organic matter) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.WaterContent">
            <summary>The water content</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.MaximumPotentialGrainSize">
            <summary>The Maximum potential size of individual grains</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.NumberFunction">
            <summary>The number function</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.NFillingRate">
            <summary>The n filling rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.MaximumNConc">
            <summary>The maximum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.MinimumNConc">
            <summary>The minimum n conc</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.CarbonConcentration">
            <summary>Carbon concentration</summary>
            [Units("-")]
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.DMDemandFunction">
            <summary>The dm demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.DMConversionEfficiency">
            <summary>Dry matter conversion efficiency</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.MaintenanceRespirationFunction">
            <summary>The proportion of biomass repired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan.RemobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.RipeStage">
            <summary>The ripe stage</summary>
        </member>
        <member name="F:Models.PMF.Organs.ReproductiveOrgan._ReadyForHarvest">
            <summary>The _ ready for harvest</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Live">
            <summary>The live biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Dead">
            <summary>The dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Number">
            <summary>The number</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.MaximumSize">
            <summary>The maximum potential size of grains</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.LiveFWt">
            <summary>Gets the live fresh weight of grains.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Size">
            <summary>Gets the individual grain size.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.FSize">
            <summary>Gets the size of grain using the fresh weight (including water content).</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.ReadyForHarvest">
            <summary>Gets the ready for harvest.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.PMF.Organs.ReproductiveOrgan"/> class.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnCutting(System.Object,System.EventArgs)">
            <summary>Called when crop is being cut.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.MaxNconc">
            <summary>Gets or sets the maximum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.MinNconc">
            <summary>Gets or sets the minimum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Wt">
            <summary>Gets the total grain weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.N">
            <summary>Gets the total grain N</summary>
        </member>
        <member name="P:Models.PMF.Organs.ReproductiveOrgan.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.RemoveMaintenanceRespiration(System.Double)">
            <summary>Remove maintenance respiration from live component of organs.</summary>
            <param name="respiration">The respiration to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="value">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.ReproductiveOrgan.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="T:Models.PMF.Organs.Root">
            <summary>
             # [Name]
             The generic root model calculates root growth in terms of rooting depth, biomass accumulation and subsequent root length density in each soil layer. 
             
             **Root Growth**
             
             Roots grow downwards through the soil profile, with initial depth determined by sowing depth and the growth rate determined by RootFrontVelocity. 
             The RootFrontVelocity is modified by multiplying it by the soil's XF value; which represents any resistance posed by the soil to root extension. 
             Root depth is also constrained by a maximum root depth.
             
             Root length growth is calculated using the daily DM partitioned to roots and a specific root length.  Root proliferation in layers is calculated using an approach similar to the generalised equimarginal criterion used in economics.  The uptake of water and N per unit root length is used to partition new root material into layers of higher 'return on investment'.
             
             **Dry Matter Demands**
             
             A daily DM demand is provided to the organ arbitrator and a DM supply returned. By default, 100% of the dry matter (DM) demanded from the root is structural.  
             The daily loss of roots is calculated using a SenescenceRate function.  All senesced material is automatically detached and added to the soil FOM.  
             
             **Nitrogen Demands**
             
             The daily structural N demand from root is the product of total DM demand and the minimum N concentration.  Any N above this is considered Storage 
             and can be used for retranslocation and/or reallocation as the respective factors are set to values other then zero.  
             
             **Nitrogen Uptake**
             
             Potential N uptake by the root system is calculated for each soil layer (i) that the roots have extended into.  
             In each layer potential uptake is calculated as the product of the mineral nitrogen in the layer, a factor controlling the rate of extraction
             (kNO3 or kNH4), the concentration of N form (ppm), and a soil moisture factor (NUptakeSWFactor) which typically decreases as the soil dries.  
             
                 _NO3 uptake = NO3<sub>i</sub> x kNO3 x NO3<sub>ppm, i</sub> x NUptakeSWFactor_
                 
                 _NH4 uptake = NH4<sub>i</sub> x kNH4 x NH4<sub>ppm, i</sub> x NUptakeSWFactor_
             
             Nitrogen uptake demand is limited to the maximum daily potential uptake (MaxDailyNUptake) and the plants N demand. 
             The demand for soil N is then passed to the soil arbitrator which determines how much of the N uptake demand
             each plant instance will be allowed to take up.
             
             **Water Uptake**
             
             Potential water uptake by the root system is calculated for each soil layer that the roots have extended into.  
             In each layer potential uptake is calculated as the product of the available water in the layer (water above LL limit) 
             and a factor controlling the rate of extraction (KL).  The values of both LL and KL are set in the soil interface and
             KL may be further modified by the crop via the KLModifier function.  
             
             _SW uptake = (SW<sub>i</sub> - LL<sub>i</sub>) x KL<sub>i</sub> x KLModifier_
             
            </summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.BiomassToleranceValue">
            <summary>Tolerance for biomass comparisons</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.Plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.SurfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmDemands">
            <summary>The DM demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.kno3">
            <summary>Link to the KNO3 link</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.knh4">
            <summary>Link to the KNH4 link</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nUptakeSWFactor">
            <summary>Soil water factor for N Uptake</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.initialDM">
            <summary>Gets or sets the initial biomass dry matter weight</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.specificRootLength">
            <summary>Gets or sets the specific root length</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nitrogenDemandSwitch">
            <summary>The nitrogen demand switch</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nRetranslocationFactor">
            <summary>The N retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nReallocationFactor">
            <summary>The N reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmRetranslocationFactor">
            <summary>The DM retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmReallocationFactor">
            <summary>The DM reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.senescenceRate">
            <summary>The biomass senescence rate</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.rootFrontVelocity">
            <summary>The root front velocity</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.maximumNConc">
            <summary>The maximum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.minimumNConc">
            <summary>The minimum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.criticalNConc">
            <summary>The critical N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.maxDailyNUptake">
            <summary>The maximum daily N uptake</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.klModifier">
            <summary>The kl modifier</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.maximumRootDepth">
            <summary>The Maximum Root Depth</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmConversionEfficiency">
            <summary>Dry matter efficiency function</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.carbonConcentration">
            <summary>Carbon concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.remobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.maintenanceRespirationFunction">
            <summary>The proportion of biomass respired each day</summary> 
        </member>
        <member name="F:Models.PMF.Organs.Root.needToRecalculateLiveDead">
            <summary>Do we need to recalculate (expensive operation) live and dead</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.liveBiomass">
            <summary>Live biomass</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.deadBiomass">
            <summary>Dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmRetranslocationSupply">
            <summary>The DM supply for retranslocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.dmMReallocationSupply">
            <summary>The DM supply for reallocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nRetranslocationSupply">
            <summary>The N supply for retranslocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.nReallocationSupply">
            <summary>The N supply for reallocation</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.structuralNDemand">
            <summary>The structural N demand</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.storageNDemand">
            <summary>The non structural N demand</summary>
        </member>
        <member name="F:Models.PMF.Organs.Root.metabolicNDemand">
            <summary>The metabolic N demand</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.ZoneNamesToGrowRootsIn">
            <summary>A list of other zone names to grow roots in</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.ZoneRootDepths">
            <summary>The root depths for each addition zone.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.ZoneInitialDM">
            <summary>The live weights for each addition zone.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Zones">
            <summary>A list of all zones to grow roots in</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.PlantZone">
            <summary>The zone where the plant is growing</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Live">
            <summary>Gets the live biomass.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Dead">
            <summary>Gets the dead biomass.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.LengthDensity">
            <summary>Gets the root length density.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.TotalDMDemand">
            <Summary>Total DM demanded by roots</Summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NTakenUp">
            <Summary>The amount of N taken up after arbitration</Summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Depth">
            <summary>Root depth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.LayerLive">
            <summary>Layer live</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.LayerDead">
            <summary>Layer dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.WaterUptake">
            <summary>Gets or sets the water uptake.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NUptake">
            <summary>Gets or sets the water uptake.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.LayerMidPointDepth">
            <summary>Gets or sets the mid points of each layer</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.RWC">
            <summary>Gets or sets root water content</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.WaterTensionFactor">
            <summary>Gets a factor to account for root zone Water tension weighted for root mass.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.PlantWaterPotentialFactor">
            <summary>Gets a factor to account for root zone Water tension weighted for root mass.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.MinNconc">
            <summary>Gets or sets the minimum nconc.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Wt">
            <summary>Gets the total grain weight</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.N">
            <summary>Gets the total grain N</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.GrowthRespiration">
            <summary>Growth Respiration</summary>
            [Units("CO_2")]
        </member>
        <member name="P:Models.PMF.Organs.Root.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Detached">
            <summary>Gets the DM amount detached (sent to soil/surface organic matter) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.Removed">
            <summary>Gets the DM amount removed from the system (harvested, grazed, etc) (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.Root.DMPotentialAllocation">
            <summary>Gets the potential DM allocation for this computation round.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.DoWaterUptake(System.Double[],System.String)">
            <summary>Does the water uptake.</summary>
            <param name="Amount">The amount.</param>
            <param name="zoneName">Zone name to do water uptake in</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.DoNitrogenUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>Does the Nitrogen uptake.</summary>
            <param name="zonesFromSoilArbitrator">List of zones from soil arbitrator</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.CalculateNitrogenSupply(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double[]@,System.Double[]@)">
            <summary>Gets the nitrogen supply from the specified zone.</summary>
            <param name="zone">The zone.</param>
            <param name="NO3Supply">The returned NO3 supply</param>
            <param name="NH4Supply">The returned NH4 supply</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.RemoveMaintenanceRespiration(System.Double)">
            <summary>Remove maintenance respiration from live component of organs.</summary>
            <param name="respiration">The respiration to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.CalculateWaterSupply(Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Gets or sets the water supply.</summary>
            <param name="zone">The zone.</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from root layers when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="removal">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.InitialiseZones">
            <summary>Initialise all zones.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.RecalculateLiveDead">
            <summary>Recalculate live and dead biomass if necessary</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.DoSupplyCalculations">
            <summary>Computes the DM and N amounts that are made available for new growth</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.TotalExtractableWater">
            <summary>Computes root total water supply.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.AvailableDMReallocation">
            <summary>Computes the amount of DM available for reallocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.AvailableNRetranslocation">
            <summary>Computes the N amount available for retranslocation.</summary>
            <remarks>This is limited to ensure Nconc does not go below MinimumNConc</remarks>
        </member>
        <member name="M:Models.PMF.Organs.Root.AvailableNReallocation">
            <summary>Computes the N amount available for reallocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.AvailableDMRetranslocation">
            <summary>Computes the amount of DM available for retranslocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.DoPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:Models.Core.ApsimXException">Cannot find a soil crop parameterisation for  + Name</exception>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is sown</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.Root.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.PMF.Organs.SimpleLeaf">
            <summary>
            This organ is simulated using a SimpleLeaf organ type.  It provides the core functions of intercepting radiation, producing biomass
             through photosynthesis, and determining the plant's transpiration demand.  The model also calculates the growth, senescence, and
             detachment of leaves.  SimpleLeaf does not distinguish leaf cohorts by age or position in the canopy.
            
            Radiation interception and transpiration demand are computed by the MicroClimate model.  This model takes into account
             competition between different plants when more than one is present in the simulation.  The values of canopy Cover, LAI, and plant
             Height (as defined below) are passed daily by SimpleLeaf to the MicroClimate model.  MicroClimate uses an implementation of the
             Beer-Lambert equation to compute light interception and the Penman-Monteith equation to calculate potential evapotranspiration.  
             These values are then given back to SimpleLeaf which uses them to calculate photosynthesis and soil water demand.
            </summary>
            <remarks>
            NOTE: the summary above is used in the Apsim's autodoc.
            
            SimpleLeaf has two options to define the canopy: the user can either supply a function describing LAI or a function describing canopy cover directly.  From either of these functions SimpleLeaf can obtain the other property using the Beer-Lambert equation with the specified value of extinction coefficient.
            The effect of growth rate on transpiration is captured by the Fractional Growth Rate (FRGR) function, which is passed to the MicroClimate model.
            </remarks>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.Plant">
            <summary>The plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.MetData">
            <summary>The met data</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.ApicalCohortNo">
            <summary>
            Number of initiated cohorts that have not appeared yet
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.Reset">
            <summary>
            reset leaf numbers
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.InitialisedCohortNo">
            <summary></summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.RemoveHighestLeaf">
            <summary></summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CohortsInitialised">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.TipsAtEmergence">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CohortsAtInitialisation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.AppearedCohortNo">
             <summary>
             
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.PlantAppearedLeafNo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.DoThin(System.Double)">
            <summary>
            
            </summary>
            <param name="proprtionRemoved"></param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.ApexNumByAge(System.Double)">
            <summary>Apex number by age</summary>
            <param name="age">Threshold age</param>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CanopyType">
            <summary>Gets the canopy. Should return null if no canopy present.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.LAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.LAITotal">
            <summary>Gets the LAI live + dead (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CoverGreen">
            <summary>Gets the cover green.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CoverTotal">
            <summary>Gets the cover total.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Height">
            <summary>Gets or sets the height.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Depth">
            <summary>Gets the depth.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.FRGR">
            <summary>Gets or sets the FRGR.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.PotentialEP">
            <summary>Sets the potential evapotranspiration. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.MicroClimatePresent">
            <summary>
            Flag to test if Microclimate is present
            </summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.LightProfile">
            <summary>Sets the light profile. Set by MICROCLIMATE.</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.FRGRFunction">
            <summary>The FRGR function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.CoverFunction">
            <summary>The cover function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.LAIFunction">
            <summary>The lai function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.ExtinctionCoefficientFunction">
            <summary>The extinction coefficient function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.Photosynthesis">
            <summary>The photosynthesis</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.HeightFunction">
            <summary>The height function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.LaiDeadFunction">
            <summary>The lai dead function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.Structure">
            <summary>The structure</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.WaterDemandFunction">
            <summary>Water Demand Function</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.LeafInitialisationStage">
            <summary>The Stage that leaves are initialised on</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.KDead">
            <summary>Gets or sets the k dead.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.CalculateWaterDemand">
            <summary>Calculates the water demand.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Transpiration">
            <summary>Gets the transpiration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Fw">
            <summary>Gets the fw.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Fn">
            <summary>Gets the function.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.FNmetabolic">
            <summary>Gets the metabolic N concentration factor.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.LAIDead">
            <summary>Gets or sets the lai dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CoverDead">
            <summary>Gets the cover dead.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.RadIntTot">
            <summary>Gets the RAD int tot.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.WaterAllocation">
            <summary>Gets or sets the water allocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetDMSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.BiomassToleranceValue">
            <summary>Tolerance for biomass comparisons</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.parentPlant">
            <summary>The parent plant</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.surfaceOrganicMatter">
            <summary>The surface organic matter model</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.biomassRemovalModel">
            <summary>Link to biomass removal model</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.senescenceRate">
            <summary>The senescence rate function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.detachmentRateFunction">
            <summary>The detachment rate function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.nRetranslocationFactor">
            <summary>The N retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.nReallocationFactor">
            <summary>The N reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.dmRetranslocationFactor">
            <summary>The DM retranslocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.dmReallocationFactor">
            <summary>The DM reallocation factor</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.dmDemands">
            <summary>The DM demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.nDemands">
            <summary>The N demand function</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.initialWtFunction">
            <summary>The initial biomass dry matter weight</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.maximumNConc">
            <summary>The maximum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.minimumNConc">
            <summary>The minimum N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.criticalNConc">
            <summary>The critical N concentration</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.maintenanceRespirationFunction">
            <summary>The proportion of biomass respired each day</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.dmConversionEfficiency">
            <summary>Dry matter conversion efficiency</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.remobilisationCost">
            <summary>The cost for remobilisation</summary>
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.CarbonConcentration">
            <summary>Carbon concentration</summary>
            [Units("-")]
        </member>
        <member name="F:Models.PMF.Organs.SimpleLeaf.startLive">
            <summary>The live biomass state at start of the computation round</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.DMSupply">
            <summary>The dry matter supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.NSupply">
            <summary>The nitrogen supply</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.DMDemand">
            <summary>The dry matter demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.NDemand">
            <summary>Structural nitrogen demand</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.potentialDMAllocation">
            <summary>The dry matter potentially being allocated</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.IsAboveGround">
            <summary>Gets a value indicating whether the biomass is above ground or not</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Live">
            <summary>The live biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Dead">
            <summary>The dead biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Total">
            <summary>Gets the total biomass</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Allocated">
            <summary>Gets the biomass allocated (represented actual growth)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Senesced">
            <summary>Gets the biomass senesced (transferred from live to dead material)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Detached">
            <summary>Gets the biomass detached (sent to soil/surface organic matter)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Removed">
            <summary>Gets the biomass removed from the system (harvested, grazed, etc.)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.MaintenanceRespiration">
            <summary>The amount of mass lost each day from maintenance respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.GrowthRespiration">
            <summary>Growth Respiration</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.DMPotentialAllocation">
            <summary>Gets the potential DM allocation for this computation round.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.NFixationCost">
            <summary>Gets or sets the n fixation cost.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.MaxNconc">
            <summary>Gets the maximum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.MinNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.CritNconc">
            <summary>Gets the minimum N concentration.</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Wt">
            <summary>Gets the total (live + dead) dry matter weight (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.N">
            <summary>Gets the total (live + dead) N amount (g/m2)</summary>
        </member>
        <member name="P:Models.PMF.Organs.SimpleLeaf.Nconc">
            <summary>Gets the total (live + dead) N concentration (g/g)</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.RemoveBiomass(System.String,Models.PMF.OrganBiomassRemovalType)">
            <summary>Removes biomass from organs when harvest, graze or cut events are called.</summary>
            <param name="biomassRemoveType">Name of event that triggered this biomass remove call.</param>
            <param name="amountToRemove">The fractions of biomass to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.AvailableDMRetranslocation">
            <summary>Computes the amount of DM available for retranslocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.AvailableDMReallocation">
            <summary>Computes the amount of DM available for reallocation.</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetNSupply(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen supply (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetDMDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the dry matter demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetNDemand(System.Object,System.EventArgs)">
            <summary>Calculate and return the nitrogen demand (g/m2)</summary>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetDryMatterPotentialAllocation(Models.PMF.Interfaces.BiomassPoolType)">
            <summary>Sets the dry matter potential allocation.</summary>
            <param name="dryMatter">The potential amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetDryMatterAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the dry matter allocation.</summary>
            <param name="dryMatter">The actual amount of drymatter allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.SetNitrogenAllocation(Models.PMF.Interfaces.BiomassAllocationType)">
            <summary>Sets the n allocation.</summary>
            <param name="nitrogen">The nitrogen allocation</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.RemoveMaintenanceRespiration(System.Double)">
            <summary>Remove maintenance respiration from live component of organs.</summary>
            <param name="respiration">The respiration to remove</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.DoPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Organs.SimpleLeaf.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.ApparingLeafParams">
            <summary>
            Data passed to leaf tip appearance occurs.
            </summary>
        </member>
        <member name="P:Models.PMF.ApparingLeafParams.CohortToAppear">
            <summary>The numeric rank of the cohort appaeraing</summary>
        </member>
        <member name="P:Models.PMF.ApparingLeafParams.TotalStemPopn">
            <summary>The populations of leaves in the appearing cohort</summary>
        </member>
        <member name="P:Models.PMF.ApparingLeafParams.CohortAge">
            <summary>The Tt age of the the cohort appearing</summary>
        </member>
        <member name="P:Models.PMF.ApparingLeafParams.FinalFraction">
            <summary>The proportion of the cohort appearing if final cohort</summary>
        </member>
        <member name="T:Models.PMF.CohortInitParams">
            <summary>
            Data passed to leaf tip appearance occurs.
            </summary>
        </member>
        <member name="P:Models.PMF.CohortInitParams.Rank">
            <summary>The numeric rank of the cohort appaeraing</summary>
        </member>
        <member name="T:Models.PMF.WaterUptakesCalculatedUptakesType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.WaterUptakesCalculatedUptakesType.Name">
            <summary>The name</summary>
        </member>
        <member name="F:Models.PMF.WaterUptakesCalculatedUptakesType.Amount">
            <summary>The amount</summary>
        </member>
        <member name="T:Models.PMF.WaterUptakesCalculatedType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.WaterUptakesCalculatedType.Uptakes">
            <summary>The uptakes</summary>
        </member>
        <member name="T:Models.PMF.WaterUptakesCalculatedDelegate">
            <summary>
            
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.PMF.WaterChangedType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.WaterChangedType.DeltaWater">
            <summary>The delta water</summary>
        </member>
        <member name="T:Models.PMF.WaterChangedDelegate">
            <summary>
            
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.PMF.KillLeafType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.KillLeafType.KillFraction">
            <summary>The kill fraction</summary>
        </member>
        <member name="T:Models.PMF.FOMLayerDelegate">
            <summary>
            
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.PMF.NullTypeDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.PMF.BiomassRemovedDelegate">
            <summary>
            
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.PMF.SowPlant2Type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.SowPlant2Type.Plant">
            <summary>The parent plant</summary>
        </member>
        <member name="P:Models.PMF.SowPlant2Type.Cultivar">
            <summary>The cultivar</summary>
        </member>
        <member name="P:Models.PMF.SowPlant2Type.Population">
            <summary>The population</summary>
        </member>
        <member name="P:Models.PMF.SowPlant2Type.Depth">
            <summary>The depth</summary>
        </member>
        <member name="P:Models.PMF.SowPlant2Type.RowSpacing">
            <summary>The row spacing</summary>
        </member>
        <member name="P:Models.PMF.SowPlant2Type.MaxCover">
            <summary>The maximum cover</summary>
        </member>
        <member name="P:Models.PMF.SowPlant2Type.BudNumber">
            <summary>The bud number</summary>
        </member>
        <member name="P:Models.PMF.SowPlant2Type.SkipRow">
            <summary>The skip row</summary>
        </member>
        <member name="P:Models.PMF.SowPlant2Type.SkipPlant">
            <summary>The skip plant</summary>
        </member>
        <member name="M:Models.PMF.SowPlant2Type.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.PMF.SowPlant2Type"/> class.
            </summary>
        </member>
        <member name="T:Models.PMF.BiomassRemovedType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.crop_type">
            <summary>The crop_type</summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.dm_type">
            <summary>The dm_type</summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.dlt_crop_dm">
            <summary>The dlt_crop_dm</summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.dlt_dm_n">
            <summary>The DLT_DM_N</summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.dlt_dm_p">
            <summary>The DLT_DM_P</summary>
        </member>
        <member name="F:Models.PMF.BiomassRemovedType.fraction_to_residue">
            <summary>The fraction_to_residue</summary>
        </member>
        <member name="T:Models.PMF.OrganBiomassRemovalType">
            <summary>Data passed to each organ when a biomass remove event occurs.  The proportion of biomass to be removed from each organ is the sum of the FractionToRemove and the FractionToRedidues</summary>
        </member>
        <member name="P:Models.PMF.OrganBiomassRemovalType.FractionLiveToRemove">
            <summary>
            The amount of live biomass taken from each organ and removeed from the zone on harvest, cut, graze or prune.
            </summary>
        </member>
        <member name="P:Models.PMF.OrganBiomassRemovalType.FractionDeadToRemove">
            <summary>
            The amount of dead biomass taken from each organ and removeed from the zone on harvest, cut, graze or prune.
            </summary>
        </member>
        <member name="P:Models.PMF.OrganBiomassRemovalType.FractionLiveToResidue">
            <summary>
            The amount of live biomass to removed from each organ and passed to residue pool on on harvest, cut, graze or prune
            </summary>
        </member>
        <member name="P:Models.PMF.OrganBiomassRemovalType.FractionDeadToResidue">
            <summary>
            The amount of dead biomass to removed from each organ and passed to residue pool on on harvest, cut, graze or prune
            </summary>
        </member>
        <member name="T:Models.PMF.RemovalFractions">
            <summary>Data structure to hold removal and residue returns fractions for all plant organs</summary>
        </member>
        <member name="F:Models.PMF.RemovalFractions.removalValues">
             <summary>
             The list of BiomassRemovalTypes for each organ
            </summary>
        </member>
        <member name="P:Models.PMF.RemovalFractions.SetThinningProportion">
             <summary>
             The Phenological stage that biomass removal resets phenology to.
            </summary>
        </member>
        <member name="P:Models.PMF.RemovalFractions.SetPhenologyStage">
             <summary>
             The Phenological stage that biomass removal resets phenology to.
            </summary>
        </member>
        <member name="P:Models.PMF.RemovalFractions.NodesToRemove">
            <summary>
            The nunber of Main-stem nodes to remove
            </summary>
        </member>
        <member name="M:Models.PMF.RemovalFractions.SetFractionToRemove(System.String,System.Double,System.String)">
             <summary>
             Method to set the FractionToRemove for specified Organ
            </summary>
        </member>
        <member name="M:Models.PMF.RemovalFractions.SetFractionToResidue(System.String,System.Double,System.String)">
             <summary>
             Method to set the FractionToResidue for specified Organ
            </summary>
        </member>
        <member name="M:Models.PMF.RemovalFractions.GetFractionsForOrgan(System.String)">
            <summary>
            Gets the removal fractions for the specified organ or null if not found.
            </summary>
            <param name="organName">The organ name to look for.</param>
        </member>
        <member name="T:Models.PMF.Cultivar">
            <summary>
            # [Name]
            Class for holding parameter overrides that are used to define a cultivar.
            </summary>
            <remarks>
            A cultivar includes \p Aliases to indicate other common names
            and \p Commands to specify genotypic parameters.
            The format of \p Commands is "name=value". The "name" of parameter
            should include the full path under Plant function,
            e.g. [Phenology].Vernalisation.PhotopSens = 3.5.
            </remarks>
        </member>
        <member name="F:Models.PMF.Cultivar.properties">
            <summary>
            The properties for each command
            </summary>
        </member>
        <member name="F:Models.PMF.Cultivar.oldPropertyValues">
            <summary>
            The original property values before the command was applied. Allows undo.
            </summary>
        </member>
        <member name="P:Models.PMF.Cultivar.Alias">
            <summary>
            Gets or sets a collection of names this cultivar is known as.
            </summary>
        </member>
        <member name="P:Models.PMF.Cultivar.Command">
            <summary>
            Gets or sets a collection of commands that must be executed when applying this cultivar.
            </summary>
        </member>
        <member name="M:Models.PMF.Cultivar.Find(System.Collections.Generic.List{Models.PMF.Cultivar},System.String)">
            <summary>
            Find a cultivar in a list of cultivars and return it. Will throw if not found
            </summary>
            <param name="cultivars">The list of cultivars to look through</param>
            <param name="cultivarName">The cultivar name to look for</param>
            <returns>The found cultivar. Never returns null</returns>
        </member>
        <member name="M:Models.PMF.Cultivar.Apply(Models.Core.Model)">
            <summary>
            Apply commands.
            </summary>
            <param name="model">The underlying model to apply the commands to</param>
        </member>
        <member name="M:Models.PMF.Cultivar.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Simulation is now completed. Make sure that we undo any commands. i.e. reset
            back to default state.
            </summary>
        </member>
        <member name="M:Models.PMF.Cultivar.Unapply">
            <summary>
            Undo the cultivar commands. i.e. put the model back into its original state
            </summary>
        </member>
        <member name="M:Models.PMF.Cultivar.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>
            Writes documentation for this function by adding to the list of documentation tags.
            </summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.SimpleTree">
            <summary>
            # [Name]
            A model of a simple tree
            </summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.CanopyType">
            <summary>Gets the canopy. Should return null if no canopy present.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.LAI">
            <summary>Gets the LAI</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.LAITotal">
            <summary>Gets the LAI live + dead (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.CoverGreen">
            <summary>Gets the cover green.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.CoverTotal">
            <summary>Gets the cover total.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Height">
            <summary>Gets the height.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Depth">
            <summary>Gets the depth.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.FRGR">
            <summary>Gets  FRGR.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.PotentialEP">
            <summary>Sets the potential evapotranspiration. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.LightProfile">
            <summary>Sets the light profile. Set by MICROCLIMATE.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.CropType">
            <summary>
            Gets or sets the type of the crop.
            </summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Legumosity">
            <summary>Gets a value indicating how leguminous a plant is</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.IsC4">
            <summary>Gets a value indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.Soil">
            <summary>The soil</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.solutes">
            <summary>Link to Apsim's solute manager module.</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.IsAlive">
            <summary>
            Is the plant alive?
            </summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="M:Models.PMF.SimpleTree.Harvest">
            <summary>Harvest the crop</summary>
        </member>
        <member name="M:Models.PMF.SimpleTree.EndCrop">
            <summary>End the crop</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.RootDepth">
            <summary>Rooting Depth</summary>
            <value>The rooting depth.</value>
        </member>
        <member name="P:Models.PMF.SimpleTree.NDemand">
            <summary>The daily N demand</summary>
            <value>The daily N demand.</value>
        </member>
        <member name="P:Models.PMF.SimpleTree.AboveGround">
            <summary>Aboveground mass</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.plant_status">
            <summary>The plant_status</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.SWUptake">
            <summary>The sw uptake</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.NO3Uptake">
            <summary>The no3 uptake</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.NH4Uptake">
            <summary>The nh4 uptake</summary>
        </member>
        <member name="F:Models.PMF.SimpleTree.Uptakes">
            <summary>A list of uptakes generated for the soil arbitrator</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.Uptake">
            <summary>The actual uptake of the plant</summary>
            <value>The uptake.</value>
        </member>
        <member name="M:Models.PMF.SimpleTree.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.CultivarNames">
            <summary>Gets a list of cultivar names</summary>
        </member>
        <member name="P:Models.PMF.SimpleTree.EP">
            <summary>MicroClimate supplies PotentialEP</summary>
        </member>
        <member name="M:Models.PMF.SimpleTree.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Simulation start</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.SimpleTree.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Run at start of day</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.SimpleTree.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Calculate the potential sw uptake for today</summary>
            <param name="soilstate"></param>
            <returns>list of uptakes</returns>
            <exception cref="T:Models.Core.ApsimXException">Could not find root zone in Zone  + this.Parent.Name +  for SimpleTree</exception>
        </member>
        <member name="M:Models.PMF.SimpleTree.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Placeholder for SoilArbitrator</summary>
            <param name="soilstate">soil state</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.SimpleTree.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.SimpleTree.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the n uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.SimpleTree.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sows the plant</summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth.</param>
            <param name="rowSpacing">The row spacing.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
        </member>
        <member name="M:Models.PMF.SimpleTree.BiomassRemovalComplete(System.Double)">
            <summary>
            Biomass has been removed from the plant.
            </summary>
            <param name="fractionRemoved">The fraction of biomass removed</param>
        </member>
        <member name="M:Models.PMF.SimpleTree.RootProportion(System.Int32,System.Double)">
            <summary>Roots the proportion.</summary>
            <param name="layer">The layer.</param>
            <param name="root_depth">The root_depth.</param>
            <returns></returns>
        </member>
        <member name="T:Models.PMF.OrganArbitrator">
            <summary>
             The Arbitrator class determines the allocation of dry matter (DM) and Nitrogen between each of the organs in the crop model. Each organ can have up to three different pools of biomass:
             
             * **Structural biomass** which is essential for growth and remains within the organ once it is allocated there.
             * **Metabolic biomass** which generally remains within an organ but is able to be re-allocated when the organ senesces and may be retranslocated when demand is high relative to supply.
             * **Storage biomass** which is partitioned to organs when supply is high relative to demand and is available for retranslocation to other organs whenever supply from uptake, fixation, or re-allocation is lower than demand.
             
             The process followed for biomass arbitration is shown in Figure [FigureNumber]. Arbitration calculations are triggered by a series of events (shown below) that are raised every day.  For these calculations, at each step the Arbitrator exchange information with each organ, so the basic computations of demand and supply are done at the organ level, using their specific parameters. 
             
             1. **doPotentialPlantGrowth**.  When this event occurs, each organ class executes code to determine their potential growth, biomass supplies and demands.  In addition to demands for structural, non-structural and metabolic biomass (DM and N) each organ may have the following biomass supplies: 
             	* **Fixation supply**.  From photosynthesis (DM) or symbiotic fixation (N)
             	* **Uptake supply**.  Typically uptake of N from the soil by the roots but could also be uptake by other organs (eg foliage application of N).
             	* **Retranslocation supply**.  Storage biomass that may be moved from organs to meet demands of other organs.
             	* **Reallocation supply**. Biomass that can be moved from senescing organs to meet the demands of other organs.
             2. **doPotentialPlantPartitioning.** On this event the Arbitrator first executes the DoDMSetup() method to gather the DM supplies and demands from each organ, these values are computed at the organ level.  It then executes the DoPotentialDMAllocation() method which works out how much biomass each organ would be allocated assuming N supply is not limiting and sends these allocations to the organs.  Each organ then uses their potential DM allocation to determine their N demand (how much N is needed to produce that much DM) and the arbitrator calls DoNSetup() to gather the N supplies and demands from each organ and begin N arbitration.  Firstly DoNReallocation() is called to redistribute N that the plant has available from senescing organs.  After this step any unmet N demand is considered as plant demand for N uptake from the soil (N Uptake Demand).
             3. **doNutrientArbitration.** When this event occurs, the soil arbitrator gets the N uptake demands from each plant (where multiple plants are growing in competition) and their potential uptake from the soil and determines how much of their demand that the soil is able to provide.  This value is then passed back to each plant instance as their Nuptake and doNUptakeAllocation() is called to distribute this N between organs.  
             4. **doActualPlantPartitioning.**  On this event the arbitrator call DoNRetranslocation() and DoNFixation() to satisfy any unmet N demands from these sources.  Finally, DoActualDMAllocation is called where DM allocations to each organ are reduced if the N allocation is insufficient to achieve the organs minimum N concentration and final allocations are sent to organs. 
             
             ![Alt Text](ArbitrationDiagram.PNG)
             
             **Figure [FigureNumber]:**  Schematic showing the procedure for arbitration of biomass partitioning.  Pink boxes represent events that occur every day and their numbering shows the order of calculations. Blue boxes represent the methods that are called when these events occur.  Orange boxes contain properties that make up the organ/arbitrator interface.  Green boxes are organ specific properties.
             </summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.Clock">
            <summary>APSIMs clock model</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.Plant">
            <summary>The top level plant object in the Plant Modelling Framework</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.Soil">
            <summary>The soil</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.NArbitrator">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.DMArbitrator">
            <summary>The method used to arbitrate N allocations</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.kgha2gsm">
            <summary>The kgha2gsm</summary>
        </member>
        <member name="F:Models.PMF.OrganArbitrator.Organs">
            <summary>The list of organs</summary>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.DM">
            <summary>The variables for DM</summary>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.N">
            <summary>The variables for N</summary>
        </member>
        <member name="E:Models.PMF.OrganArbitrator.SetDMSupply">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="E:Models.PMF.OrganArbitrator.SetNSupply">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="E:Models.PMF.OrganArbitrator.SetDMDemand">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="E:Models.PMF.OrganArbitrator.SetNDemand">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.FDM">
            <summary>Gets the dry mass supply relative to dry mass demand.</summary>
            <value>The dry mass supply.</value>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.StructuralCarbonSupplyDemand">
            <summary>Gets the dry mass supply relative to dry structural demand plus metabolic demand.</summary>
            <value>The dry mass supply.</value>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.DeltaWt">
            <summary>Gets the delta wt.</summary>
            <value>The delta wt.</value>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.FN">
            <summary>Gets the n supply relative to N demand.</summary>
            <value>The n supply.</value>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.WDemand">
            <summary>Gets the water demand.</summary>
            <value>The water demand.</value>
        </member>
        <member name="P:Models.PMF.OrganArbitrator.WAllocated">
            <summary>Gets the water allocated in the plant (taken up).</summary>
            <value>The water uptake.</value>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Calculate the potential sw uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Calculate the potential sw uptake for today. Should return null if crop is not in the ground.
            </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Things the plant model does when the simulation starts</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.OnPlantSowing(System.Object,Models.PMF.SowPlant2Type)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="data">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.OnDoPotentialPlantPartioning(System.Object,System.EventArgs)">
            <summary>Does the water limited dm allocations.  Water constaints to growth are accounted for in the calculation of DM supply
            and does initial N calculations to work out how much N uptake is required to pass to SoilArbitrator</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.SubtractMaintenanceRespiration(System.Double)">
            <summary>Subtract maintenance respiration from daily fixation</summary>
            <param name="respiration">The toal maintenance respiration</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.OnDoActualPlantPartioning(System.Object,System.EventArgs)">
            <summary>Does the nutrient allocations.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.OnPlantEnding(System.Object,System.EventArgs)">
            <summary>Called when crop is ending</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.SendPotentialDMAllocations(Models.PMF.Interfaces.IArbitration[])">
            <summary>Sends the potential dm allocations.</summary>
            <param name="Organs">The organs.</param>
            <exception cref="T:System.Exception">Mass Balance Error in Photosynthesis DM Allocation</exception>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.Reallocation(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Does the re allocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="BAT">The bat.</param>
            <param name="arbitrator">The arbitrator.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.AllocateUptake(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Does the uptake.</summary>
            <param name="Organs">The organs.</param>
            <param name="BAT">The bat.</param>
            <param name="arbitrator">The option.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.Retranslocation(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Does the retranslocation.</summary>
            <param name="Organs">The organs.</param>
            <param name="BAT">The bat.</param>
            <param name="arbitrator">The option.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.AllocateFixation(Models.PMF.Interfaces.IArbitration[],Models.PMF.BiomassArbitrationType,Models.PMF.IArbitrationMethod)">
            <summary>Does the fixation.</summary>
            <param name="Organs">The organs.</param>
            <param name="BAT">The bat.</param>
            <param name="arbitrator">The option.</param>
            <exception cref="T:System.Exception">Crop is trying to Fix excessive amounts of BAT.  Check partitioning coefficients are giving realistic nodule size and that FixationRatePotential is realistic</exception>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.CalculatedNutrientConstrainedDMAllocation(Models.PMF.Interfaces.IArbitration[])">
            <summary>Determines Nutrient limitations to DM allocations</summary>
            <param name="Organs">The organs.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.SetDryMatterAllocations(Models.PMF.Interfaces.IArbitration[])">
            <summary>Sends the dm allocations.</summary>
            <param name="Organs">The organs.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.SetNitrogenAllocations(Models.PMF.Interfaces.IArbitration[])">
            <summary>Sends the nutrient allocations.</summary>
            <param name="Organs">The organs.</param>
        </member>
        <member name="M:Models.PMF.OrganArbitrator.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.ArrayBiomass">
            <summary>
            # [Name]
            This class encapsulates an array of biomass objects
            </summary>
        </member>
        <member name="F:Models.PMF.ArrayBiomass.Propertys">
            <summary>The propertys</summary>
        </member>
        <member name="F:Models.PMF.ArrayBiomass.ArraySize">
            <summary>The array size</summary>
        </member>
        <member name="F:Models.PMF.ArrayBiomass.ArraySizeNumber">
            <summary>The array size number</summary>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StorageN">
            <summary>Gets or sets the non structural n.</summary>
            <value>The non structural n.</value>
            <exception cref="T:System.Exception">Cannot set StorageN in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StructuralN">
            <summary>Gets or sets the structural n.</summary>
            <value>The structural n.</value>
            <exception cref="T:System.Exception">Cannot set StructuralN in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.MetabolicN">
            <summary>Gets or sets the metabolic n.</summary>
            <value>The metabolic n.</value>
            <exception cref="T:System.Exception">Cannot set MetabolicN in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StorageWt">
            <summary>Gets or sets the non structural wt.</summary>
            <value>The non structural wt.</value>
            <exception cref="T:System.Exception">Cannot set StorageWt in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StructuralWt">
            <summary>Gets or sets the structural wt.</summary>
            <value>The structural wt.</value>
            <exception cref="T:System.Exception">Cannot set StructuralWt in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.MetabolicWt">
            <summary>Gets or sets the metabolic wt.</summary>
            <value>The metabolic wt.</value>
            <exception cref="T:System.Exception">Cannot set MetabolicWt in ArrayBiomass</exception>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.NConc">
            <summary>Gets the n conc.</summary>
            <value>The n conc.</value>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StructuralNConc">
            <summary>Gets the structural n conc.</summary>
            <value>The structural n conc.</value>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.StorageNConc">
            <summary>Gets the non structural n conc.</summary>
            <value>The non structural n conc.</value>
        </member>
        <member name="P:Models.PMF.ArrayBiomass.MetabolicNConc">
            <summary>Gets the metabolic n conc.</summary>
            <value>The metabolic n conc.</value>
        </member>
        <member name="M:Models.PMF.ArrayBiomass.AddValuesToList(System.String)">
            <summary>Adds the values to list.</summary>
            <param name="SubPropertyName">Name of the sub property.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Cannot find:  + PropertyName +  in ArrayBiomass:  + this.Name</exception>
        </member>
        <member name="T:Models.PMF.Biomass">
            <summary>
            # [Name]
            Biomass of plant organs
            </summary>
        </member>
        <member name="F:Models.PMF.Biomass._StructuralWt">
            <summary>The structural wt</summary>
        </member>
        <member name="F:Models.PMF.Biomass._StorageWt">
            <summary>The non structural wt</summary>
        </member>
        <member name="F:Models.PMF.Biomass._StructuralN">
            <summary>The structural n</summary>
        </member>
        <member name="F:Models.PMF.Biomass._StorageN">
            <summary>The non structural n</summary>
        </member>
        <member name="F:Models.PMF.Biomass._MetabolicWt">
            <summary>The metabolic wt</summary>
        </member>
        <member name="F:Models.PMF.Biomass._MetabolicN">
            <summary>The metabolic n</summary>
        </member>
        <member name="F:Models.PMF.Biomass._DMDOfStructural">
            <summary>Dry matter digestibility. 0.7 for live, 0.4 for dead </summary>
        </member>
        <member name="P:Models.PMF.Biomass.StorageN">
            <summary>Gets or sets the non structural n.</summary>
            <value>The non structural n.</value>
        </member>
        <member name="P:Models.PMF.Biomass.StructuralN">
            <summary>Gets or sets the structural n.</summary>
            <value>The structural n.</value>
        </member>
        <member name="P:Models.PMF.Biomass.StorageWt">
            <summary>Gets or sets the non structural wt.</summary>
            <value>The non structural wt.</value>
        </member>
        <member name="P:Models.PMF.Biomass.StructuralWt">
            <summary>Gets or sets the structural wt.</summary>
            <value>The structural wt.</value>
        </member>
        <member name="P:Models.PMF.Biomass.MetabolicWt">
            <summary>Gets or sets the metabolic wt.</summary>
            <value>The metabolic wt.</value>
        </member>
        <member name="P:Models.PMF.Biomass.MetabolicN">
            <summary>Gets or sets the metabolic n.</summary>
            <value>The metabolic n.</value>
        </member>
        <member name="P:Models.PMF.Biomass.Wt">
            <summary>Gets the wt.</summary>
            <value>The wt.</value>
        </member>
        <member name="P:Models.PMF.Biomass.N">
            <summary>Gets the N amount.</summary>
            <value>The n.</value>
        </member>
        <member name="P:Models.PMF.Biomass.NConc">
            <summary>Gets the N concentration.</summary>
            <value>The n conc.</value>
        </member>
        <member name="P:Models.PMF.Biomass.StructuralNConc">
            <summary>Gets the structural N concentration.</summary>
            <value>The structural n conc.</value>
        </member>
        <member name="P:Models.PMF.Biomass.StorageNConc">
            <summary>Gets the non structural N concentration.</summary>
            <value>The non structural n conc.</value>
        </member>
        <member name="P:Models.PMF.Biomass.MetabolicNConc">
            <summary>Gets the metabolic N concentration.</summary>
            <value>The metabolic n conc.</value>
        </member>
        <member name="P:Models.PMF.Biomass.DMDOfStructural">
            <summary>Dry matter digestibility. 0.7 for live, 0.4 for dead </summary>
        </member>
        <member name="M:Models.PMF.Biomass.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.PMF.Biomass"/> class.</summary>
        </member>
        <member name="M:Models.PMF.Biomass.#ctor(Models.PMF.Biomass)">
            <summary>Initializes a new instance of the <see cref="T:Models.PMF.Biomass"/> class.</summary>
            <param name="from">From.</param>
        </member>
        <member name="M:Models.PMF.Biomass.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Biomass.Add(Models.PMF.Biomass)">
            <summary>Adds the specified a.</summary>
            <param name="a">a.</param>
        </member>
        <member name="M:Models.PMF.Biomass.Subtract(Models.PMF.Biomass)">
            <summary>Subtracts the specified a.</summary>
            <param name="a">a.</param>
        </member>
        <member name="M:Models.PMF.Biomass.Multiply(System.Double)">
            <summary>Multiplies a biomass object by a given scalar</summary>
            <param name="scalar">a.</param>
        </member>
        <member name="M:Models.PMF.Biomass.SetTo(Models.PMF.Biomass)">
            <summary>Sets to.</summary>
            <param name="a">a.</param>
        </member>
        <member name="M:Models.PMF.Biomass.op_Addition(Models.PMF.Biomass,Models.PMF.Biomass)">
            <summary>Implements the operator +.</summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Models.PMF.Biomass.op_Subtraction(Models.PMF.Biomass,Models.PMF.Biomass)">
            <summary>Implements the operator -.</summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Models.PMF.Biomass.op_Multiply(Models.PMF.Biomass,System.Double)">
            <summary>Implements the operator *.</summary>
            <param name="a">a.</param>
            <param name="Fraction">The fraction.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Models.PMF.CompositeBiomass">
            <summary>
            This is a composite biomass class, representing the sum of 1 or more biomass objects.
            </summary>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.Propertys">
            <summary>The propertys</summary>
        </member>
        <member name="M:Models.PMF.CompositeBiomass.Update">
            <summary>Update this biomass object.</summary>
        </member>
        <member name="M:Models.PMF.CompositeBiomass.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Clear ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.StorageN">
            <summary>Gets or sets the non structural n.</summary>
            <value>The non structural n.</value>
            <exception cref="T:System.Exception">Cannot set StorageN in CompositeBiomass</exception>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.StructuralN">
            <summary>Gets or sets the structural n.</summary>
            <value>The structural n.</value>
            <exception cref="T:System.Exception">Cannot set StructuralN in CompositeBiomass</exception>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.StorageWt">
            <summary>Gets or sets the non structural wt.</summary>
            <value>The non structural wt.</value>
            <exception cref="T:System.Exception">Cannot set StorageWt in CompositeBiomass</exception>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.StructuralWt">
            <summary>Gets or sets the structural wt.</summary>
            <value>The structural wt.</value>
            <exception cref="T:System.Exception">Cannot set StructuralWt in CompositeBiomass</exception>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.MetabolicN">
            <summary>Gets or sets the metabolic n.</summary>
            <value>The metabolic n.</value>
            <exception cref="T:System.Exception">Cannot set MetabolicN in CompositeBiomass</exception>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.MetabolicWt">
            <summary>Gets or sets the metabolic wt.</summary>
            <value>The metabolic wt.</value>
            <exception cref="T:System.Exception">Cannot set MetabolicWt in CompositeBiomass</exception>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.Wt">
            <summary>Gets the wt.</summary>
            <value>The wt.</value>
        </member>
        <member name="P:Models.PMF.CompositeBiomass.N">
            <summary>Gets the n.</summary>
            <value>The n.</value>
        </member>
        <member name="M:Models.PMF.CompositeBiomass.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.PMF.OilPalm.OilPalm">
            <summary>
            # [Name]
            An oil palm model
            </summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CanopyType">
            <summary>Canopy type</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.LAI">
            <summary>Gets the lai.</summary>
            <value>The lai.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.LAITotal">
            <summary>Gets the maximum LAI (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CoverGreen">
            <summary>Gets the cover green (0-1)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CoverTotal">
            <summary>Gets the cover total (0-1)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Height">
            <summary>Gets the canopy height (mm)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Depth">
            <summary>Gets the canopy depth (mm)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FRGR">
            <summary>Gets the LAI (m^2/m^2)</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.PotentialEP">
            <summary>Potential evapotranspiration</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.LightProfile">
            <summary>MicroClimate supplies LightProfile</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.IsAlive">
            <summary>
            Is the plant alive?
            </summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Legumosity">
            <summary>Gets a value indicating how leguminous a plant is</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.IsC4">
            <summary>Gets a value indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.EndCrop">
            <summary>End the crop</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.plant_status">
            <summary>The plant_status</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Clock">
            <summary>The clock</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.MetData">
            <summary>The met data</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Soil">
            <summary>The soil</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.solutes">
            <summary>Link to Apsim's solute manager module.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.AboveGround">
            <summary>Aboveground mass</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.soilCrop">
            <summary>The soil crop</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.cultivarDefinition">
            <summary>The cultivar definition</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CultivarNames">
            <summary>Gets a list of cultivar names</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Cultivars">
            <summary>Gets a list of all cultivar definitions.</summary>
            <value>The cultivars.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.height">
            <summary>Height to top of plant canopy</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.cover_tot">
            <summary>Total cover provided by plant canopies</summary>
            <value>The cover_tot.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.interception">
            <summary>Amount of rainfall intercepted by the plant canopy</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryCoverMax">
            <summary>Gets or sets the understory cover maximum.</summary>
            <value>The understory cover maximum.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryLegumeFraction">
            <summary>Gets or sets the understory legume fraction.</summary>
            <value>The understory legume fraction.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.InterceptionFraction">
            <summary>Gets or sets the interception fraction.</summary>
            <value>The interception fraction.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.MaximumRootDepth">
            <summary>Gets or sets the maximum root depth.</summary>
            <value>The maximum root depth.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Ndemand">
            <summary>The ndemand</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.RootDepth">
            <summary>Palm Rooting Depth</summary>
            <value>The root depth.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.PotSWUptake">
            <summary>The pot sw uptake</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.SWUptake">
            <summary>The sw uptake</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.PEP">
            <summary>Potential daily evapotranspiration for the palm canopy</summary>
            <value>The pep.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.EP">
            <summary>Daily evapotranspiration from the palm canopy</summary>
            <value>The ep.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.DltDM">
            <summary>Daily total plant dry matter growth</summary>
            <value>The DLT dm.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Excess">
            <summary>The excess</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FW">
            <summary>Factor for daily water stress effect on photosynthesis</summary>
            <value>The fw.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FWexpan">
            <summary>Factor for daily water stress effect on canopy expansion</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Fvpd">
            <summary>Factor for daily VPD effect on photosynthesis</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Fn">
            <summary>Factor for daily nitrogen stress effect on photosynthesis</summary>
            <value>The function.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CumulativeFrondNumber">
            <summary>Cumulative frond production since planting</summary>
            <value>The cumulative frond number.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CumulativeBunchNumber">
            <summary>Cumulative bunch production since planting</summary>
            <value>The cumulative bunch number.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.ReproductiveGrowthFraction">
            <summary>Proportion of daily growth partitioned into reproductive parts</summary>
            <value>The reproductive growth fraction.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.CarbonStress">
            <summary>Amount of carbon limitation for todays potential growth (ie supply/demand)</summary>
            <value>The carbon stress.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.HarvestBunches">
            <summary>Number of bunches harvested on a harvesting event</summary>
            <value>The harvest bunches.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.HarvestFFB">
            <summary>Mass of harvested FFB on a harvesting event</summary>
            <value>The harvest FFB.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.HarvestNRemoved">
            <summary>Nitrogen removed at a harvesting event</summary>
            <value>The harvest n removed.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.HarvestBunchSize">
            <summary>Mean size of bunches at a harvesting event</summary>
            <value>The size of the harvest bunch.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Age">
            <summary>Time since planting</summary>
            <value>The age.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Population">
            <summary>Gets or sets the population.</summary>
            <value>The population.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.SowingData">
            <summary>The sowing data</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.PotNUptake">
            <summary>Potential daily nitrogen uptake from each soil layer by palms</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.NUptake">
            <summary>Daily nitrogen uptake from each soil layer by palms</summary>
            <value>The n uptake.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.StemGrowth">
            <summary>Daily stem dry matter growth</summary>
            <value>The stem growth.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondGrowth">
            <summary>Daily frond dry matter growth</summary>
            <value>The frond growth.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.RootGrowth">
            <summary>Daily root dry matter growth</summary>
            <value>The root growth.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.BunchGrowth">
            <summary>Daily bunch dry matter growth</summary>
            <value>The bunch growth.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Fronds">
            <summary>The fronds</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Bunches">
            <summary>The bunches</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.Roots">
            <summary>The roots</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondAppearanceRate">
            <summary>The frond appearance rate</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RelativeDevelopmentalRate">
            <summary>The relative developmental rate</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondMaxArea">
            <summary>The frond maximum area</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.DirectExtinctionCoeff">
            <summary>The direct extinction coeff</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.DiffuseExtinctionCoeff">
            <summary>The diffuse extinction coeff</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.ExpandingFronds">
            <summary>The expanding fronds</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.InitialFrondNumber">
            <summary>The initial frond number</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RUE">
            <summary>The rue</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootFrontVelocity">
            <summary>The root front velocity</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootSenescenceRate">
            <summary>The root senescence rate</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.SpecificLeafArea">
            <summary>The specific leaf area</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.SpecificLeafAreaMax">
            <summary>The specific leaf area maximum</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootFraction">
            <summary>The root fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchSizeMax">
            <summary>The bunch size maximum</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FemaleFlowerFraction">
            <summary>The female flower fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FFFStressImpact">
            <summary>The FFF stress impact</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.StemToFrondFraction">
            <summary>The stem to frond fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FlowerAbortionFraction">
            <summary>The flower abortion fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchFailureFraction">
            <summary>The bunch failure fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.InitialRootDepth">
            <summary>The initial root depth</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.KNO3">
            <summary>The kn o3</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.StemNConcentration">
            <summary>The stem n concentration</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchNConcentration">
            <summary>The bunch n concentration</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootNConcentration">
            <summary>The root n concentration</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchOilConversionFactor">
            <summary>The bunch oil conversion factor</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RipeBunchWaterContent">
            <summary>The ripe bunch water content</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.HarvestFrondNumber">
            <summary>The harvest frond number</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondMaximumNConcentration">
            <summary>The frond maximum n concentration</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondCriticalNConcentration">
            <summary>The frond critical n concentration</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondMinimumNConcentration">
            <summary>The frond minimum n concentration</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryCoverGreen">
            <summary>Proportion of green cover provided by the understory canopy</summary>
            <value>The understory cover green.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.UnderstoryKLmax">
            <summary>The understory k lmax</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.UnderstoryPotSWUptake">
            <summary>Potential soil water uptake from each soil layer by understory</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.UnderstorySWUptake">
            <summary>Actual Soil water uptake from each soil layer by understory</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryPotNUptake">
            <summary>Potential nitrogen water uptake from each soil layer by understory</summary>
            <value>The understory pot n uptake.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryNUptake">
            <summary>Actual soil nitrogen uptake from each soil layer by understory</summary>
            <value>The understory n uptake.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.UnderstoryRootDepth">
            <summary>Understory rooting depth</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryPEP">
            <summary>Potential daily evapotranspiration for the understory</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryEP">
            <summary>Daily evapotranspiration for the understory</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryFW">
            <summary>Understory plant water stress factor</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryDltDM">
            <summary>Daily understory dry matter growth</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.UnderstoryNFixation">
            <summary>Daily understory nitrogen fixation</summary>
            <value>The understory n fixation.</value>
        </member>
        <member name="T:Models.PMF.OilPalm.OilPalm.RootType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootType.Mass">
            <summary>The mass</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.RootType.Length">
            <summary>The length</summary>
        </member>
        <member name="T:Models.PMF.OilPalm.OilPalm.FrondType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondType.Mass">
            <summary>The mass</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondType.Area">
            <summary>The area</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.FrondType.Age">
            <summary>The age</summary>
        </member>
        <member name="T:Models.PMF.OilPalm.OilPalm.BunchType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchType.Mass">
            <summary>The mass</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchType.Age">
            <summary>The age</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchType.FemaleFraction">
            <summary>The female fraction</summary>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.BunchType.FillDuration">
            <summary>Duration of Bunch Filling</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.StemMass">
            <summary>Gets or sets the stem mass.</summary>
            <value>The stem mass.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.StemN">
            <summary>Gets or sets the stem n.</summary>
            <value>The stem n.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.StemNConc">
            <summary>Gets the stem n conc.</summary>
            <value>The stem n conc.</value>
        </member>
        <member name="F:Models.PMF.OilPalm.OilPalm.CropInGround">
            <summary>The crop in ground</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.IsCropInGround">
            <summary>Gets or sets a value indicating whether this instance is crop in ground.</summary>
            <value>
            <c>true</c> if this instance is crop in ground; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sows the specified cultivar.</summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth.</param>
            <param name="rowSpacing">The row spacing.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
            <exception cref="T:System.Exception">Cultivar not specified on sow line.</exception>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.Harvest">
            <summary>Harvest the crop.</summary>
        </member>
        <member name="E:Models.PMF.OilPalm.OilPalm.Sowing">
            <summary>Occurs when [sowing].</summary>
        </member>
        <member name="E:Models.PMF.OilPalm.OilPalm.Harvesting">
            <summary>Occurs when [harvesting].</summary>
        </member>
        <member name="E:Models.PMF.OilPalm.OilPalm.IncorpFOM">
            <summary>Occurs when [incorp fom].</summary>
        </member>
        <member name="E:Models.PMF.OilPalm.OilPalm.BiomassRemoved">
            <summary>Occurs when [biomass removed].</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.OnSow(Models.PMF.SowPlant2Type)">
            <summary>Called when [sow].</summary>
            <param name="Sow">The sow.</param>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>Called when [do plant growth].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Placeholder for SoilArbitrator</summary>
            <param name="soilstate">soil state</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>Placeholder for SoilArbitrator</summary>
            <param name="soilstate">soil state</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the n uptake for today
            </summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoFlowerAbortion">
            <summary>Does the flower abortion.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoGenderDetermination">
            <summary>Does the gender determination.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoRootGrowth(System.Double)">
            <summary>Does the root growth.</summary>
            <param name="Allocation">The allocation.</param>
            <exception cref="T:System.Exception">Error trying to partition root biomass</exception>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoGrowth">
            <summary>Does the growth.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoDevelopment">
            <summary>Does the development.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.VPD">
            <summary>VPDs this instance.</summary>
            <returns></returns>
            The following helper functions [VDP and svp] are for calculating Fvdp
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoWaterBalance">
            <summary>Does the water balance.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoNBalance">
            <summary>Does the n balance.</summary>
            <exception cref="T:System.Exception">Error in N Allocation</exception>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondArea">
            <summary>Gets the frond area.</summary>
            <value>The frond area.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.Frond17Area">
            <summary>Gets the frond17 area.</summary>
            <value>The frond17 area.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondMass">
            <summary>Gets the frond mass.</summary>
            <value>The frond mass.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondN">
            <summary>Gets the frond n.</summary>
            <value>The frond n.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondNConc">
            <summary>Gets the frond n conc.</summary>
            <value>The frond n conc.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.BunchMass">
            <summary>Gets the bunch mass.</summary>
            <value>The bunch mass.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.BunchN">
            <summary>Gets the bunch n.</summary>
            <value>The bunch n.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.BunchNConc">
            <summary>Gets the bunch n conc.</summary>
            <value>The bunch n conc.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.RootMass">
            <summary>Gets the root mass.</summary>
            <value>The root mass.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.RootN">
            <summary>Gets the root n.</summary>
            <value>The root n.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.RootNConc">
            <summary>Gets the root n conc.</summary>
            <value>The root n conc.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.PlantN">
            <summary>Gets the plant n.</summary>
            <value>The plant n.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.TotalFrondNumber">
            <summary>Gets the total frond number.</summary>
            <value>The total frond number.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FrondNumber">
            <summary>Gets the frond number.</summary>
            <value>The frond number.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.cover_green">
            <summary>Gets the cover_green.</summary>
            <value>The cover_green.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.SLA">
            <summary>Gets the sla.</summary>
            <value>The sla.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.FFF">
            <summary>Gets the FFF.</summary>
            <value>The FFF.</value>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.SizeFunction(System.Double,System.Double,System.Double)">
            <summary>Sizes the function.</summary>
            <param name="Age">The age.</param>
            <param name="FMA">FMA</param>
            <param name="GrowthDuration">Groth duration</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.RootProportion(System.Int32,System.Double)">
            <summary>Roots the proportion.</summary>
            <param name="layer">The layer.</param>
            <param name="root_depth">The root_depth.</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.LayerIndex(System.Double)">
            <summary>Layers the index.</summary>
            <param name="depth">The depth.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Depth deeper than bottom of soil profile</exception>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.DeltaT">
            <summary>Gets the delta t.</summary>
            <value>The delta t.</value>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoUnderstory">
            <summary>Does the understory.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoUnderstoryGrowth">
            <summary>Does the understory growth.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoUnderstoryWaterBalance">
            <summary>Does the understory water balance.</summary>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.DoUnderstoryNBalance">
            <summary>Does the understory n balance.</summary>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.DefoliationFraction">
            <summary>Gets or sets the defoliation fraction.</summary>
            <value>The defoliation fraction.</value>
        </member>
        <member name="P:Models.PMF.OilPalm.OilPalm.DiffuseLightFraction">
            <summary>Gets the diffuse light fraction.</summary>
            <value>The diffuse light fraction.</value>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.Q0(System.Double,System.Int32)">
            <summary>Q0s the specified lat.</summary>
            <param name="lat">The lat.</param>
            <param name="day">The day.</param>
            <returns></returns>
        </member>
        <member name="M:Models.PMF.OilPalm.OilPalm.BiomassRemovalComplete(System.Double)">
            <summary>
            Biomass has been removed from the plant.
            </summary>
            <param name="fractionRemoved">The fraction of biomass removed</param>
        </member>
        <member name="T:Models.PMF.Plant">
            <summary>
             # [Name]
             The generic plant model
             </summary>
        </member>
        <member name="F:Models.PMF.Plant.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.PMF.Plant.Zone">
            <summary> The plant's zone</summary>
        </member>
        <member name="F:Models.PMF.Plant.Phenology">
            <summary>The phenology</summary>
        </member>
        <member name="F:Models.PMF.Plant.Arbitrator">
            <summary>The arbitrator</summary>
        </member>
        <member name="F:Models.PMF.Plant.Structure">
            <summary>The structure</summary>
        </member>
        <member name="F:Models.PMF.Plant.Canopy">
            <summary>The Canopy</summary>
        </member>
        <member name="F:Models.PMF.Plant.Leaf">
            <summary>The leaf</summary>
        </member>
        <member name="F:Models.PMF.Plant.Root">
            <summary>The root</summary>
        </member>
        <member name="P:Models.PMF.Plant.AboveGround">
            <summary>Above ground weight</summary>
        </member>
        <member name="F:Models.PMF.Plant.Clock">
            <summary>
            Clock
            </summary>
        </member>
        <member name="P:Models.PMF.Plant.CropType">
            <summary>Used by several organs to determine the type of crop.</summary>
        </member>
        <member name="P:Models.PMF.Plant.Legumosity">
            <summary>Gets a value indicating how leguminous a plant is</summary>
        </member>
        <member name="P:Models.PMF.Plant.IsC4">
            <summary>Gets a value indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.PMF.Plant.SowingData">
            <summary>The sowing data</summary>
        </member>
        <member name="P:Models.PMF.Plant.Organs">
            <summary>Gets the organs.</summary>
        </member>
        <member name="P:Models.PMF.Plant.CultivarNames">
            <summary>Gets a list of cultivar names</summary>
        </member>
        <member name="P:Models.PMF.Plant.Cultivars">
            <summary>A property to return all cultivar definitions.</summary>
        </member>
        <member name="F:Models.PMF.Plant.cultivarDefinition">
            <summary>The current cultivar definition.</summary>
        </member>
        <member name="M:Models.PMF.Plant.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Models.PMF.Plant.plantPopulation">
            <summary>Holds the number of plants.</summary>
        </member>
        <member name="P:Models.PMF.Plant.SowingDate">
            <summary>
            Holds the date of sowing
            </summary>
        </member>
        <member name="P:Models.PMF.Plant.Population">
            <summary>Gets or sets the plant population.</summary>
        </member>
        <member name="P:Models.PMF.Plant.IsAlive">
            <summary>Return true if plant is alive and in the ground.</summary>
        </member>
        <member name="P:Models.PMF.Plant.IsEmerged">
            <summary>Return true if plant has emerged</summary>
        </member>
        <member name="P:Models.PMF.Plant.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="M:Models.PMF.Plant.Harvest">
            <summary>Harvest the crop</summary>
        </member>
        <member name="F:Models.PMF.Plant.MortalityRate">
            <summary>The plant mortality rate</summary>
        </member>
        <member name="E:Models.PMF.Plant.Sowing">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="E:Models.PMF.Plant.PlantSowing">
            <summary>Occurs when a plant is sown.</summary>
        </member>
        <member name="E:Models.PMF.Plant.Harvesting">
            <summary>Occurs when a plant is about to be harvested.</summary>
        </member>
        <member name="E:Models.PMF.Plant.PlantEnding">
            <summary>Occurs when a plant is ended via EndCrop.</summary>
        </member>
        <member name="E:Models.PMF.Plant.Pruning">
            <summary>Occurs when a plant is about to be pruned.</summary>
        </member>
        <member name="E:Models.PMF.Plant.Cutting">
            <summary>Occurs when a plant is about to be pruned.</summary>
        </member>
        <member name="E:Models.PMF.Plant.Grazing">
            <summary>Occurs when a plant is about to be pruned.</summary>
        </member>
        <member name="E:Models.PMF.Plant.Flowering">
            <summary>Occurs when a plant is about to flower</summary>
        </member>
        <member name="M:Models.PMF.Plant.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Things the plant model does when the simulation starts</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Plant.OnPhaseChanged(System.Object,Models.PMF.Phen.PhaseChangedType)">
            <summary>Called when [phase changed].</summary>
            <param name="phaseChange">The phase change.</param>
            <param name="sender">Sender plant.</param>
        </member>
        <member name="M:Models.PMF.Plant.OnDoPotentialPlantGrowth(System.Object,System.EventArgs)">
            <summary>Event from sequencer telling us to do our potential growth.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.PMF.Plant.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sow the crop with the specified parameters.</summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth.</param>
            <param name="rowSpacing">The row spacing.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
        </member>
        <member name="M:Models.PMF.Plant.Harvest(Models.PMF.RemovalFractions)">
            <summary>Harvest the crop.</summary>
        </member>
        <member name="M:Models.PMF.Plant.RemoveBiomass(System.String,Models.PMF.RemovalFractions)">
            <summary>Harvest the crop.</summary>
        </member>
        <member name="M:Models.PMF.Plant.EndCrop">
            <summary>End the crop.</summary>
        </member>
        <member name="M:Models.PMF.Plant.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Models.PMF.Plant.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Soils.Nutrients.Chloride">
            <summary>
            # [Name]
            Encapsulates a solute class.
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Chloride.kgha">
            <summary>Solute amount (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Chloride.ppm">
            <summary>Solute amount (ppm)</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Chloride.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Soils.Nutrients.NFlow">
            <summary>
            # [Name]
            Encapsulates a nitrogen flow between mineral N pools.
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NFlow.Value">
            <summary>
            Value of total N flow into destination
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NFlow.Loss">
            <summary>
            Value of total loss
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NFlow.sourceName">
            <summary>
            Name of source pool
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NFlow.destinationName">
            <summary>
            Name of destination pool
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.NFlow.OnDoSoilOrganicMatter(System.Object,System.EventArgs)">
            <summary>
            Get the information on potential residue decomposition - perform daily calculations as part of this.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Soils.Nutrients.CarbonFlow">
            <summary>
            # [Name]
            Encapsulates a carbon and nutrient flow between pools.  This flow is characterised in terms of the rate of flow (fraction of the pool per day).  Carbon loss as CO2 is expressed in terms of the efficiency of C retension within the soil.
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.CarbonFlow.destinationNames">
            <summary>
            Name of destination pool
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.CarbonFlow.destinationFraction">
            <summary>
            Fractions for each destination pool
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.CarbonFlow.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.CarbonFlow.OnDoSoilOrganicMatter(System.Object,System.EventArgs)">
            <summary>
            Get the information on potential residue decomposition - perform daily calculations as part of this.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Soils.Nutrients.NutrientPool">
            <summary>
            # [Name]
            [DocumentType Memo]
            
            ## Initialisation
            The initialisation of Carbon and Nutrient contents of this pool is described as follows:
            
            [Document InitialCarbon]
            [Document InitialNitrogen]
            
            ## Organic Matter Flows
            [DocumentType CarbonFlow]
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NutrientPool.CNRatio">
            <summary>Initial carbon/nitrogen ratio</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NutrientPool.C">
            <summary>Amount of carbon (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NutrientPool.N">
            <summary>Amount of nitrogen (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.NutrientPool.LayerFraction">
            <summary>
            Fraction of each layer occupied by this pool.
            /// </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.NutrientPool.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.NutrientPool.Add(System.Double[],System.Double[])">
            <summary>
            Add C and N into nutrient pool
            </summary>
            <param name="CAdded"></param>
            <param name="NAdded"></param>
        </member>
        <member name="T:Models.Soils.Nutrients.Nutrient">
            <summary>
            # [Name]
            The soil nutrient model includes functionality for simulating pools of organmic matter and mineral nitrogen.  The processes for each are described below.
            ## Structure of nutrient
            [DocumentView]
            ## Pools
            [DocumentType NutrientPool]
            ## Solutes:
            [DocumentType Solute]
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.DirectedGraphInfo">
            <summary>Get directed graph from model</summary>
        </member>
        <member name="F:Models.Soils.Nutrients.Nutrient.Summary">
            <summary>
            Summary file Link
            </summary>
        </member>
        <member name="F:Models.Soils.Nutrients.Nutrient.SurfaceOrganicMatter">
            <summary>The surface organic matter</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.Reset">
            <summary>
            Reset all pools
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.TotalC">
            <summary>
            Total C in each soil layer
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.TotalN">
            <summary>
            Total C in each soil layer
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.FOMCNR">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.FOMN">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Nutrient.FOMC">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.IncorpFOM(Models.Soils.FOMLayerType)">
            <summary>Partition the given FOM C and N into fractions in each layer (one FOM)</summary>
            <param name="FOMdata">The in fo mdata.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.DoIncorpFOM(Models.Soils.FOMLayerType)">
            <summary>Partition the given FOM C and N into fractions in each layer (one FOM)</summary>
            <param name="FOMdata">The in fo mdata.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.OnIncorpFOMPool(Models.Soils.FOMPoolType)">
            <summary>Partition the given FOM C and N into fractions in each layer (FOM pools)</summary>
            <param name="FOMPoolData">The in fom pool data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.CalculateActualSOMDecomp">
            <summary>
            Calculate actual decomposition
            </summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.OnDoSoilOrganicMatter(System.Object,System.EventArgs)">
            <summary>
            Get the information on potential residue decomposition - perform daily calculations as part of this.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.Nutrients.Nutrient.CalculateDirectedGraph">
            <summary>Calculate / create a directed graph from model</summary>
        </member>
        <member name="T:Models.Soils.Nutrients.Solute">
            <summary>
            # [Name]
            [DocumentType Memo]
            
            This class used for this nutrient encapsulates the nitrogen within a mineral N pool.  Child functions provide information on flows of N from it to other mineral N pools, or losses from the system.
            
            ## Mineral N Flows
            [DocumentType NFlow]
            </summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Solute.kgha">
            <summary>Solute amount (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Nutrients.Solute.ppm">
            <summary>Solute amount (ppm)</summary>
        </member>
        <member name="M:Models.Soils.Nutrients.Solute.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Soils.Arbitrator.CropUptakes">
            <summary>
            A simple class for containing a single set of uptakes for a given crop.
            </summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.CropUptakes.Crop">
            <summary>Crop</summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.CropUptakes.Zones">
            <summary>List of uptakes</summary>
        </member>
        <member name="T:Models.Soils.Arbitrator.Estimate">
            <summary>
            Contains an estimate of uptakes (either water or nitrogen)
            </summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.Estimate.Parent">
            <summary>The parent model.</summary>
        </member>
        <member name="T:Models.Soils.Arbitrator.Estimate.CalcType">
            <summary>
            An enumeration describing whether the estimate is for water or nitrogen.
            </summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.Estimate.CalcType.Water">
            <summary>Indicates this estimate is for water.</summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.Estimate.CalcType.Nitrogen">
            <summary>Indicates this estimate is for nitrogen.</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.Estimate.#ctor(Models.Core.IModel)">
            <summary>Initializes a new instance of the <see cref="T:Models.Soils.Arbitrator.Estimate"/> class.</summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.Estimate.#ctor(Models.Core.IModel,Models.Soils.Arbitrator.Estimate.CalcType,Models.Soils.Arbitrator.SoilState,System.Collections.Generic.List{Models.Core.IModel})">
            <summary>Initializes a new instance of the <see cref="T:Models.Soils.Arbitrator.Estimate"/> class.</summary>
            <param name="parent">The parent model</param>
            <param name="Type">The type of estimate</param>
            <param name="soilstate">The state of the soil</param>
            <param name="uptakeModels">A list of models that do uptake.</param>
        </member>
        <member name="P:Models.Soils.Arbitrator.Estimate.Values">
            <summary>Gets the estimate values.</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.Estimate.UptakeZone(Models.Interfaces.IUptake,System.String)">
            <summary>Gets uptakes for the specified crop and zone. Will throw if not found.</summary>
            <param name="crop">Name of the crop.</param>
            <param name="ZoneName">Name of the zone.</param>
            <returns>The uptakes.</returns>
        </member>
        <member name="M:Models.Soils.Arbitrator.Estimate.op_Multiply(Models.Soils.Arbitrator.Estimate,System.Double)">
            <summary>Implements the operator *.</summary>
            <param name="E">The estimate</param>
            <param name="value">The value to multiply the estimate by.</param>
            <returns>The resulting estimate</returns>
        </member>
        <member name="T:Models.Soils.Arbitrator.SoilState">
            <summary>
            Encapsulates the state of water and N in multiple zones.
            </summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.SoilState.Parent">
            <summary>The parent model.</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilState.#ctor(Models.Core.IModel)">
            <summary>Initializes a new instance of the <see cref="T:Models.Soils.Arbitrator.SoilState"/> class.</summary>
            <param name="parent">The parent model.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilState.Initialise(System.Collections.Generic.List{Models.Core.IModel})">
            <summary>Initialises this instance.</summary>
        </member>
        <member name="P:Models.Soils.Arbitrator.SoilState.Zones">
            <summary>Gets all zones in this soil state.</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilState.op_Subtraction(Models.Soils.Arbitrator.SoilState,Models.Soils.Arbitrator.Estimate)">
            <summary>Implements the operator -.</summary>
            <param name="state">The soil state.</param>
            <param name="estimate">The estimate to subtract from the soil state.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Models.Soils.Arbitrator.ZoneWaterAndN">
            <summary>
            Represents a zone (point, field etc) that has water and N values.
            </summary>
        </member>
        <member name="P:Models.Soils.Arbitrator.ZoneWaterAndN.Zone">
            <summary>
            The Zone for this water and N
            </summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.ZoneWaterAndN.Water">
            <summary>Amount of water (mm)</summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.ZoneWaterAndN.NO3N">
            <summary>Amount of N (kg/ha)</summary>
        </member>
        <member name="F:Models.Soils.Arbitrator.ZoneWaterAndN.NH4N">
            <summary>Amount of NH4 (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Arbitrator.ZoneWaterAndN.TotalWater">
            <summary>Gets the sum of 'Water' (mm)</summary>
        </member>
        <member name="P:Models.Soils.Arbitrator.ZoneWaterAndN.TotalNO3N">
            <summary>Gets the sum of 'NO3N' (mm)</summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.#ctor(Models.Core.Zone)">
            <summary>
            Constructor
            </summary>
            <param name="zone"></param>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.op_Multiply(Models.Soils.Arbitrator.ZoneWaterAndN,System.Double)">
            <summary>Implements the operator *.</summary>
            <param name="zone">The zone</param>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.op_Addition(Models.Soils.Arbitrator.ZoneWaterAndN,Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Implements the operator +.</summary>
            <param name="ZWN1">Zone 1</param>
            <param name="ZWN2">Zone 2</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.Exception">Cannot add zones with different names</exception>
        </member>
        <member name="M:Models.Soils.Arbitrator.ZoneWaterAndN.op_Subtraction(Models.Soils.Arbitrator.ZoneWaterAndN,Models.Soils.Arbitrator.ZoneWaterAndN)">
            <summary>Implements the operator -.</summary>
            <param name="ZWN1">Zone 1</param>
            <param name="ZWN2">Zone 2</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.Exception">Cannot subtract zones with different names</exception>
        </member>
        <member name="T:Models.Soils.Arbitrator.SoilArbitrator">
            <summary>
            The APSIM farming systems model has a long history of use for simulating mixed or intercropped systems.  Doing this requires methods for simulating the competition of above and below ground resources.  Above ground competition for light has been calculated within APSIM assuming a mixed turbid medium using the Beer-Lambert analogue as described by [Keating1993Intercropping].  The MicroClimate [Snow2004Micromet] model now used within APSIM builds upon this by also calculating the impact of mutual shading on canopy conductance and partitions aerodynamic conductance to individual species in applying the Penman-Monteith model for calculating potential crop water use.  The arbitration of below ground resources of water and nitrogen is calculated by this model.
            
            Traditionally, below ground competition has been arbitrated using two approaches.  Firstly, the early approaches [Adiku1995Intercrop; Carberry1996Ley] used an alternating order of uptake calculation each day to ensure that different crops within a simulation did not benefit from precedence in daily orders of calculations.  Soil water simulations using the SWIM3 model [Huth2012SWIM3] arbitrate individual crop uptakes as part of the simulataneous solutions of various soil water fluxes as part of its solution of the Richards' equation [richards1931capillary].
            
            The soil arbitrator operates via a simple integration of daily fluxes into crop root systems via a <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods">Runge-Kutta</a> calculation. 
            
            If Y is any soil resource, such as water or N, and U is the uptake of that resource by one or more plant root systems,  
            then
            
            Y<sub>t+1</sub> = Y<sub>t</sub> - U
            
            Because U will change through the time period in complex manners depending on the number and nature of demands for that resource, we use Runge-Kutta to integrate through that time period using
            
            Y<sub>t+1</sub>= Y<sub>t</sub> + 1/6 x (U<sub>1</sub>+ 2xU<sub>2</sub> + 2xU<sub>3</sub> + U<sub>4</sub>) 
            
            Where U<sub>1</sub>,U<sub>2</sub>,U<sub>3</sub> and U<sub>4</sub> are 4 estimates of the Uptake rates calculated by the crop models given a range of soil resource conditions, as follows:
            
            U<sub>1</sub> = f(Y<sub>t</sub>),
            
            U<sub>2</sub> = f(Y<sub>t</sub> - 0.5xU<sub>1</sub>),
            
            U<sub>3</sub> = f(Y<sub>t</sub> - 0.5xU<sub>2</sub>),
            
            U<sub>4</sub> = f(Y<sub>t</sub> - U<sub>3</sub>).
            
            So U<sub>1</sub> is the estimate based on the uptake rates at the beginning of the time interval, similar to a simple Euler method.
            U<sub>2</sub> and U<sub>3</sub> are estimates based on the rates somewhere near the midpoint of the time interval.  U<sub>4</sub> is the estimate based on the rates toward the end of the time interval.
            
            The iterative procedure allows crops to influence the uptake of other crops via various feedback mechanisms.  For example,  crops rapidly extracting water from near the surface will dry the soil in those layers, which will force deeper rooted crops to potentially extract water from lower layers. Uptakes can notionally be of either sign, and so trees providing hydraulic lift of water from water tables could potentially make this water available for uptake by mutplie understory species within the timestep.  Crops are responsible for meeting resource demand by whatever means they prefer.  And so, leguminous crops may start by taking up mineral N at the start of the day but rely on fixation later in a time period if N becomes limiting.  This will reduce competition from others and change the balance dynamically throughout the integration period. 
            
            The design has been chosen to provide the following benefits:
            
            1) The approach is numerically simple and pure.
            
            2) The approach does not require the use of any particular uptake equation. The uptake equation is embodied within the crop model as designed by the crop model developer and tester.
            
            3) The approach will allow any number of plant species to interact.
            
            4) The approach will allow for arbitration between species in any zone, but also competition between species that may demand resources from multiple zones within the simulation.
            
            5) The approach will automatically arbitrate supply of N between zones, layers, and types (nitrate vs ammonium) with the preferences of all derived by the plant model code.
            </summary>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilArbitrator.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>Called at the start of the simulation.</summary>
            <param name="sender">The sender of the event</param>
            <param name="e">Dummy event data.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilArbitrator.OnDoWaterArbitration(System.Object,System.EventArgs)">
            <summary>Called by clock to do water arbitration</summary>
            <param name="sender">The sender of the event</param>
            <param name="e">Dummy event data.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilArbitrator.DoNutrientArbitration(System.Object,System.EventArgs)">
            <summary>Called by clock to do nutrient arbitration</summary>
            <param name="sender">The sender of the event</param>
            <param name="e">Dummy event data.</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilArbitrator.DoArbitration(Models.Soils.Arbitrator.Estimate.CalcType)">
            <summary>
            General soil arbitration method (water or nutrients) based upon Runge-Kutta method
            </summary>
            <param name="arbitrationType">Water or Nitrogen</param>
        </member>
        <member name="M:Models.Soils.Arbitrator.SoilArbitrator.ScaleWaterAndNIfNecessary(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN},System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Scale the water and n values if the total uptake exceeds the amounts available.
            </summary>
            <param name="zones">List of zones to check.</param>
            <param name="uptakes">List of all potential uptakes</param>
        </member>
        <member name="T:Models.Soils.HydraulicProperties">
            <summary>
            Returns theta and ksat values for specified psi and theta values respectively.  Gets its parameters from the soil Water node and a couple of parameters it owns
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.DELk">
            <summary>
            The de lk
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.Mk">
            <summary>
            The mk
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.M0">
            <summary>
            The m0
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.M1">
            <summary>
            The m1
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.Y0">
            <summary>
            The y0
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.Y1">
            <summary>
            The y1
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.MicroP">
            <summary>
            The micro p
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.MicroKs">
            <summary>
            The micro ks
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.Kdula">
            <summary>
            The kdula
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.MacroP">
            <summary>
            The macro p
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.psid">
            <summary>
            The psid
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.psi_ll15">
            <summary>
            The psi_ll15
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.psiad">
            <summary>
            The psiad
            </summary>
        </member>
        <member name="F:Models.Soils.HydraulicProperties.psi0">
            <summary>
            The psi0
            </summary>
        </member>
        <member name="P:Models.Soils.HydraulicProperties.psidul">
            <summary>
            psidul
            </summary>
            <value>
            The psidul.
            </value>
        </member>
        <member name="P:Models.Soils.HydraulicProperties.Thickness">
            <summary>Gets or sets the thickness.</summary>
            <value>The thickness.</value>
        </member>
        <member name="P:Models.Soils.HydraulicProperties.Depth">
            <summary>
            Gets or sets the depth strings e.g. 0-10
            </summary>
        </member>
        <member name="P:Models.Soils.HydraulicProperties.kdul">
            <summary>
            kdul
            </summary>
            <value>
            The kdul.
            </value>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SimpleTheta(System.Int32,System.Double)">
            <summary>
            Simples the theta.
            </summary>
            <param name="layer">The layer.</param>
            <param name="psiValue">The psi value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SimpleK(System.Int32,System.Double)">
            <summary>
            Calcultates and returns hydraulic conductivity in cm/h
            </summary>
            <param name="layer">The layer.</param>
            <param name="psiValue">The psi value.</param>
            <returns>Hydraulic Conductivity</returns>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SetHydraulicProperties">
            <summary>
            Called when soil models that require hydraulic properties information initiate their properties
            </summary>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SimpleS(System.Int32,System.Double)">
            <summary>
            Simples the s.
            </summary>
            <param name="layer">The layer.</param>
            <param name="psiValue">The psi value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SetupThetaCurve">
            <summary>
            Sets up the theta curve
            </summary>
        </member>
        <member name="M:Models.Soils.HydraulicProperties.SetupKCurve">
            <summary>
            Sets up the K curve
            </summary>
        </member>
        <member name="T:Models.Soils.ISoilCrop">
            <summary>
            A soil crop interface
            </summary>
        </member>
        <member name="P:Models.Soils.ISoilCrop.Name">
            <summary>
            Name of the crop
            </summary>
        </member>
        <member name="T:Models.Soils.OutputLayers">
            <summary>
            This class takes soil variables simulated at each of the modelled soil layers and maps them onto a new specified layering.
            The outputs can be used for producing summaries and to facilitate comparison with observed data.
            </summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.Depth">
            <summary>Gets the depth boundaries of each layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.Thickness">
            <summary>Gets or sets the thickness of each layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.SW">
            <summary>Gets the current soil water content of each mapped layer</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.SWmm">
            <summary>Gets the current soil water amount of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.PAW">
            <summary>Gets the plant available water amount of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.LL15">
            <summary>Gets the soil water content at the lower limit of each mapped layer</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.LL15mm">
            <summary>Gets the soil water amount at the lower limit of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.DUL">
            <summary>Gets the soil water content at the upper limit of each mapped layer</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.DULmm">
            <summary>Gets the soil water amount at the upper limit of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.SAT">
            <summary>Gets the soil water content at saturation of each mapped layer</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.SATmm">
            <summary>Gets the soil water amount at saturation of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.Urea">
            <summary>Gets the soil urea N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.NH4">
            <summary>Gets the soil ammonium N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.NO3">
            <summary>Gets the soil nitrate N content of each mapped layer.</summary>
        </member>
        <member name="P:Models.Soils.OutputLayers.OC">
            <summary>Gets the soil organic carbon content of each mapped layer.</summary>
        </member>
        <member name="T:Models.Soils.Evapotranspiration">
            <summary>
            Calculates Penman Evaporation to drive potential evaporation from soil model
            </summary>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.PenmanEO(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>Penman Evapotranspiration potential (mm/day)
            The amount of water that will be transpired by a short, actively growing area of crop that is
            fully covering the ground.This is the formulation given by French BK, Legg BJ. 1979. 
            Rothamsted irrigation 1964-76. Journal of Agricultural Science, U.K, 92: 15-37.
             </summary>
            <param name="Radiation"> is total incomming solar radiaion (Units MJ/M2/day) </param>
            <param name="Temperature">the mean air temperature for the day measured in a stevenson screen at 1.2m height(Units Degrees celcius)</param> 
            <param name ="Windrun"> is the distance the wind would travel in a day at is mean speed(units km/d)</param>
            <param name = "VaporPressure"> is the vapor pressure of the air at 1.2m height(units mbar) </param>
             <param name="Albedo">the proportion of radiation reflected by the surface</param>
             <param name="DayOfYear"></param>
             <param name="Lattitude"></param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.lamda(System.Double)">
            <summary>latent heat of vapourisation (MJ/kg) 
             ET calculations solve an energy balance to work out how much energy is being removed from the system
             by evaporation.This is given by the latent heat of vapourisation.
             We need to divide latent heat flux(MJ) by LAMDA to convert to mm of water evaporated
            </summary>
            <param name="Temperature"> Air temperature(units degrees C)</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.gama(System.Double)">
            <summary>The phycometric constant (kPa/oK)</summary>
            <param name = "Temperature">air temperature(units degrees C)</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.SatVaporPressureSlope(System.Double)">
            <summary> Slope of the saturated vapor pressure line at give temperature (kPa).</summary>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.VaporPressureDeficit(System.Double,System.Double)">
            <summary>This is the difference (in mbar) between the current vapour presure and the saturated vapor pressure
            at the current air temperature</summary>
            <param name="Temperature">Temperature is Air temperature(units degrees C)</param>
            <param name="VaporPressure">Vapor pressure in mbar</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.SatVaporPressure(System.Double)">
            <summary>This is the vapour pressure (in mbar) that the airs capacity to absorb water vapor is saturated.
            It increases exponentially with temperature.The equation used here is from:
            Jenson ME, Burman RD, Allen RG. 1990.Evapotranspiration and irrigation requirements: a manual. 
            New York, U.S.A: American Society of Civil Engineers.
            </summary>
            <param name = "Temperature"> temperature of the air (units degrees C)</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.AirDensity(System.Double)">
            <summary>
            "Density of air (kg/m3)
            </summary>
            <param name="Temperature">temperature of the air (units degrees C) </param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.NetRadiation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>Net solar radiation (MJ/m2) at the crop surface.
            This is total incomming radiation less that which is reflected.
            Reference: ASCE-EWRI. 2005. The ASCE Standardized Reference Evapotranspiration Equation.
            Report of the Task Committee on Standardization of Reference Evapotranspiration.
             </summary>
             <param name="Radiation">is the total incomming solar radiation measured by a pyranometer for the period (Units MJ/m2)</param>
             <param name="Tmean">is the mean temperature for the period measured in a Stevenson screen at 1.2 m height(degrees C)</param>
             <param name="VapourPressure">is the mean vapor pressure for the period measured in a Stevenson screen at 1.2 m height(Units kPa)</param>
             <param name="Lattitude">(units degrees)</param>
             <param name="DOY">is day of year 1 Jan = 1</param>
             <param name="albedo">is the proportion of radiation that the surface reflects back to the sky</param>
             <returns></returns>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.ClearSkyRadiation(System.Double,System.Double)">
            <summary>
            Radiation assuming no cloud cover
            </summary>
            <param name="Lattitude">(units degrees)</param>
            <param name="DOY"> is day of year 1 Jan = 1</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.NetLongwaveRadiation(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Solar radiation absorbed by the crop and lost again to the atmosphere and space by longwave radiation
            </summary>
            <param name="Radiation"> is the total incomming solar radiation measured by a pyranometer for the period(Units MJ/m2)</param>
            <param name="Tmean"> is the mean temperature for the period measured in a Stevenson screen at 1.2 m height(degrees C)</param>
            <param name="VapourPressure"> is the mean vapor pressure for the period measured in a Stevenson screen at 1.2 m height(Units kPa)</param>
            <param name="Lattitude">(units degrees)</param>
            <param name="DOY"> is day of year 1 Jan = 1</param>
        </member>
        <member name="M:Models.Soils.Evapotranspiration.ExtraterestialRadiation(System.Double,System.Double)">
            <summary>
            Radiation at the top of the atmosphere
            </summary>
            <param name="Lattitude">(units degrees)</param>
            <param name="DOY"> is day of year 1 Jan = 1</param>
        </member>
        <member name="T:Models.Soils.MRSpline">
            <summary>
            Fits a 5 point hermite spline to moisture release data and returns theta for any specified psi.  Gets its parameters from the soil Water node and a couple of parameters it owns
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.DELk">
            <summary>
            The de lk
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.Mk">
            <summary>
            The mk
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.M0">
            <summary>
            The m0
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.M1">
            <summary>
            The m1
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.Y0">
            <summary>
            The y0
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.Y1">
            <summary>
            The y1
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.psidul">
            <summary>
            Water potential at drained upper limit
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.psi_ll15">
            <summary>
            Water potential at lower limit
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.psi0">
            <summary>
            Water potential at oven dry
            </summary>
        </member>
        <member name="F:Models.Soils.MRSpline.psis">
            <summary>
            Water potential at saturation
            </summary>
        </member>
        <member name="M:Models.Soils.MRSpline.SimpleTheta(System.Int32,System.Double)">
            <summary>
            Simples the theta.
            </summary>
            <param name="layer">The layer.</param>
            <param name="psiValue">The psi value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.MRSpline.SetHydraulicProperties">
            <summary>
            Called when soil models that require hydraulic properties information initiate their properties
            </summary>
        </member>
        <member name="M:Models.Soils.MRSpline.SetupThetaCurve">
            <summary>
            Sets up the theta curve
            </summary>
        </member>
        <member name="T:Models.Soils.SubHourlyData">
            <summary>
            Data structure that holds parameters and variables specific to each pore component in the soil horizion
            </summary>
        </member>
        <member name="M:Models.Soils.SubHourlyData.#ctor">
            <summary>
            Initialise arays on construction
            </summary>
        </member>
        <member name="T:Models.Soils.HourlyData">
            <summary>
            Data structure that holds parameters and variables specific to each pore component in the soil horizion
            </summary>
        </member>
        <member name="P:Models.Soils.HourlyData.Irrigation">
            <summary>
            Irrigation applied
            </summary>
        </member>
        <member name="P:Models.Soils.HourlyData.Rainfall">
            <summary>
            Rainfall occured
            </summary>
        </member>
        <member name="P:Models.Soils.HourlyData.Drainage">
            <summary>
            Drainage occured
            </summary>
        </member>
        <member name="P:Models.Soils.HourlyData.Infiltration">
            <summary>
            Infiltration occured
            </summary>
        </member>
        <member name="M:Models.Soils.HourlyData.#ctor">
            <summary>
            Initialise arays on construction
            </summary>
        </member>
        <member name="T:Models.Soils.WEIRDO">
             <summary>
            
             </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WaterModelName">
            <summary> Model name</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ResidueInterception">
            <summary>The amount of rainfall intercepted by surface residues</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.catchment_area">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CN2Bare">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CNCov">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CNRed">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DiffusConst">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DiffusSlope">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.discharge_width">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.dlayer">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.dlt_sw">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.dlt_sw_dep">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Drainage">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DULmm">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Eo">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Eos">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Es">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ESW">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Flow">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.FlowNH4">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.FlowNO3">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.flow_urea">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Flux">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.gravity_gradient">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Infiltration">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.KLAT">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LeachNH4">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LeachNO3">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LeachUrea">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LL15mm">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.max_pond">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LateralOutflow">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PAWC">
            <summary> The Plant available water content of the soil layer /// </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.pond">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.pond_evap">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Runoff">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Salb">
            <summary>Soil Albedo</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SATmm">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.slope">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.solute_flow_eff">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.solute_flux_eff">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.specific_bd">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SummerCona">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SummerDate">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SummerU">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SW">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SWCON">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SWmm">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Thickness">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WaterTable">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WinterCona">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WinterDate">
            <summary> Who knows</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WinterU">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.RemoveWater(System.Double[])">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.SetWater_frac(System.Double[])">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.Reset">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.SetWaterTable(System.Double)">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.Tillage(Models.Soils.TillageType)">
            <summary> Who knows</summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.Tillage(System.String)">
            <summary> Who knows</summary>
        </member>
        <member name="F:Models.Soils.WEIRDO.Layering">
            [Link]
            private Water Water = null;
        </member>
        <member name="E:Models.Soils.WEIRDO.ReportDetails">
            <summary>Occurs when a plant is about to be sown.</summary>
        </member>
        <member name="F:Models.Soils.WEIRDO.Pores">
            <summary>
            This is the data structure that represents the soils layers and pore cagatories in each layer
            </summary>
        </member>
        <member name="F:Models.Soils.WEIRDO.Hourly">
            <summary>
            Contains data extrapolated out to hourly values
            </summary>
        </member>
        <member name="F:Models.Soils.WEIRDO.SubHourly">
            <summary>
            Contains data extrapolated out to 6 min values
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ParamThickness">
            <summary>
            The thickness of each soil layer for parameter values
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Depth">
            <summary>
            Soil layer thickness for each layer in cm (only used in the GUI) (cm)
            </summary>
            <remarks>
            This "Depth" variable is only needed for the "Depth" column in the "SoilWater" node of the GUI.
            Just converts back and forth between "Depth" (in cm as string) AND "Thickness" (in mm as double).
            </remarks>
            <value>
            The depth.
            </value>
        </member>
        <member name="P:Models.Soils.WEIRDO.LL15">
            <summary>Gets or sets the l L15.</summary>
            <value>The l L15.</value>
        </member>
        <member name="P:Models.Soils.WEIRDO.DUL">
            <summary>Gets or sets the dul.</summary>
            <value>The dul.</value>
        </member>
        <member name="P:Models.Soils.WEIRDO.SAT">
            <summary>Gets or sets the sat.</summary>
            <value>The sat.</value>
        </member>
        <member name="P:Models.Soils.WEIRDO.CFlow">
            <summary>Parameter describing the volumetric flow of water through conducting pores of a certian radius</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.XFlow">
            <summary>Parameter describing the volumetric flow of water through conducting pores of a certian radius</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PsiBub">
            <summary>Water potential where k curve becomes flat between -10 and -1000</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MinRepellancyFactor">
            <summary>Minimum repelancy Factor, when soil becomes dry</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LowerRepellentWC">
            <summary>Relative water content at which soil reaches maximum hydrophobicity</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.UpperRepellentWC">
            <summary>Relative Water content above which soil is hydrophillic</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.XF">
            <summary>Root extension factor</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.BD">
            <summary>Gets or sets the bd.</summary>
            <value>The bd.</value>
        </member>
        <member name="F:Models.Soils.WEIRDO.PoreBounds">
            <summary>
            The maximum diameter of pore compartments
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SubProfileConductance">
            <summary>
            The hydraulic conductance below the bottom of the specified profile
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WaterTableDepth">
            <summary>
            The depth of the water table below the surface, important for gravitational water potential
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CalculateInfiltration">
            <summary>
            Allow infiltration processes to be switched off from the UI
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CalculateDrainage">
            <summary>
            Allow drainage processes to be switched off from the UI
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ReportDetail">
            <summary>
            Allow output of soil water content of all pores at each time step
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.IncludeSorption">
            <summary>
            Allows Sorption processes to be switched off from the UI
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CalculateEvaporation">
            <summary>
            Allows Evaporation to be switched off
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.CalculateDiffusion">
            <summary>
            Allows diffusion between layers to be switched off
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DiffusivityMultiplier">
            <summary>
            Factor to scale Diffusivity
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ExtractionMultiplier">
            <summary>
            Factor to scale Water Extraction
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MappedSAT">
            <summary>Mapped from parameter set onto Layer structure</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MappedDUL">
            <summary>Mapped from parameter set onto Layer structure</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MappedLL15">
            <summary>Mapped from parameter set onto Layer structure</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MappedCFlow">
            <summary>Mapped from parameter set onto Layer structure</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MappedXFlow">
            <summary>Mapped from parameter set onto Layer structure</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MappedPsiBub">
            <summary>Mapped from parameter set onto Layer structure</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MappedUpperRepellentWC">
            <summary>Mapped from parameter set onto Layer structure</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MappedLowerRepellentWC">
            <summary>Mapped from parameter set onto Layer structure</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MappedMinRepellancyFactor">
            <summary>Mapped from parameter set onto Layer structure</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.InitialSoilWater">
            <summary>Calculate and return SW relative to the Water node thicknesses.</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MappedXF">
            <summary>The factor for root penetration into soil layer</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ProfileWaterExtraction">
            <summary>
            The amount of water extracted from the soil by the crop
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.TotalCover">
            <summary>
            The amount of cover from crops and surface organic matter.
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ResidueWater">
            <summary>
            The amount of water stored in the surface residue
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PoreWater">
            <summary>
            Data object to put the water content of each pore into
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Process">
            <summary>
            Describes the process just completed
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Hour">
            <summary>
            the current hour in the process
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ReportLayer">
            <summary>
            The layer that is current encountering water flux
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.TimeStep">
            <summary>
            Number of times water deltas have occured
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.DeltaPond">
            <summary>
            Change in pond depth for the day
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Ksat">
            <summary>
            The hydraulic conductivity of a layer at saturation
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Capillarity">
            <summary>
            Hydraulic concutivitiy into each pore
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.HydraulicConductivityOut">
            <summary>
            Hydraulic concutivitiy out of each pore
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PsiUpper">
            <summary>
            The water potential when this pore space is full and larger pores are empty
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.RelativePoreVolume">
            <summary>
            The relative water water filled porosity when this pore space if full and larger pores are empty
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Theta">
            <summary>
            Layer volumetric water content when these pores are full and larger pores are empty
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Diffusion">
            <summary>
            Net diffusion Upward (+) or downwrd (-) from this layer
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.WaterExtraction">
            <summary> Water extracted by crop roots for transpiration</summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.MatrixRelativeWater">
            <summary>
            Factor quantifying the hydrophobicity of the soi
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ProfileLayers">
            <summary>
            The number of layers in the soil profile
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PoreCompartments">
            <summary>
            The number of compartments the soils porosity is divided into
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.AdsorptionCapacity">
            <summary>
            How much of the current air filled volume of a layer may be water filled in the comming hour
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.TransmissionCapacity">
            <summary>
            How much water may pass through the current pore in the comming hour
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.AdsorptionCapacityBelow">
            <summary>
            How much water can the profile below this layer absorb in the comming hour
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PercolationCapacityBelow">
            <summary>
            The amount of water that may flow into and through the profile below this layer in the comming hour
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.PotentialInfiltration">
            <summary>
            The amount of water that may enter the surface of the soil each hour
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.LayerHeight">
            <summary>
            The distance down to the nearest zero potential body of water, for calculating gravitational potential
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.ProfileDepth">
            <summary>
            The depth of the specificed soil profile
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.SaturatedWaterDepth">
            <summary>
            The amount of water mm stored in a layer at saturation
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Called when [simulation commencing].
            Goes through and creates instances of all the properties of MultiPoreWater model
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:Models.Core.ApsimXException">
            SoilWater module has detected that the Soil has no layers.
            </exception>
        </member>
        <member name="M:Models.Soils.WEIRDO.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Called at the start of each daily timestep
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.WEIRDO.OnDoSoilWaterMovement(System.Object,System.EventArgs)">
            <summary>
            Called when the model is ready to work out daily soil water deltas
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.WEIRDO.OnIrrigated(System.Object,Models.Soils.IrrigationApplicationType)">
            <summary>
            Adds irrigation events into daily total
            </summary>
            <param name="sender">Irrigation</param>
            <param name="IrrigationData">The irrigation data.</param>
        </member>
        <member name="M:Models.Soils.WEIRDO.OnPreparingNewWeatherData(System.Object,System.EventArgs)">
            <summary>
            sets up daily met data
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.doPercolationCapacity(System.Int32)">
            <summary>
            Works out how much water may infiltrat in each time step
            </summary>
            <param name="SPH">Steps Per Hour, the number of times this function is called in an hourly time step</param>
        </member>
        <member name="M:Models.Soils.WEIRDO.doGravitionalPotential">
            <summary>
            Calculates the gravitational potential in each layer from its height to the nearest zero potential layer
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.doInfiltration(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Carries out infiltration processes at each time step
            </summary>
            <param name="SPH">Steps Per Hour, the number of times this function is called in an hourly time step</param>
            <param name="h">h of the day for this time step</param>
            <param name="WaterToInfiltrate">the Amount of water that infiltrates the soil in this time step</param>
            <param name="Subh">the current sub hourly time step</param>
        </member>
        <member name="M:Models.Soils.WEIRDO.doDrainage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gravity moves mobile water out of layers each time step
            </summary>
            <param name="SPH">Steps Per Hour, the number of times this function is called in an hourly time step</param>
            <param name="h">h of the day for this time step</param>
            <param name="Subh">the current sub hourly time step</param>
        </member>
        <member name="M:Models.Soils.WEIRDO.doEvaporation">
            <summary>
            Potential gradients moves water out of layers each time step
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.doTranspiration">
            <summary>
            Potential gradients moves water out of layers each time step
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.doDiffusion">
            <summary>
            Potential gradients moves water out of layers each time step
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Irrigation">
            <summary>
            This is the Irrigation ariving at the soil surface, less what has been intercepted by residue
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.Rainfall">
            <summary>
            This is the rainfall ariving at the soil surface, less what has been intercepted by residue
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.InitialProfileWater">
            <summary>
            Variable used for checking mass balance
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.InitialPondDepth">
            <summary>
            Variable used for checking mass balance
            </summary>
        </member>
        <member name="P:Models.Soils.WEIRDO.InitialResidueWater">
            <summary>
            Variable used for checking mass balance
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.SetSoilProperties">
            <summary>
            Goes through all profile and pore properties and updates their values using soil parameters.  
            Must be called after any soil parameters are chagned if the effect of the changes is to work correctly.
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.Infiltrate(Models.Soils.Pore)">
            <summary>
            Potential gradients moves water out of layers each time step
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.LayerSum(Models.Soils.Pore[],System.String)">
            <summary>
            Utility to sum the specified propertie from all pore compartments in the pore layer input 
            </summary>
            <param name="Compartments"></param>
            <param name="Property"></param>
            <returns>sum</returns>
        </member>
        <member name="M:Models.Soils.WEIRDO.DistributWaterInFlux(System.Int32,System.Double@,System.Int32)">
            <summary>
            Method takes water flowing into a layer and distributes it between the pore compartments in that layer
            </summary>
            <param name="l"></param>
            <param name="InFlux"></param>
            <param name="SPH">Number of time steps in an hour</param>
        </member>
        <member name="M:Models.Soils.WEIRDO.UpdateProfileValues">
            <summary>
            Function to update profile summary values
            </summary>
        </member>
        <member name="M:Models.Soils.WEIRDO.SetRootLengthDensity">
            <summary>
            Call each time the plant root systems grows to update root distribution parameters in soil layers
            </summary>
        </member>
        <member name="T:Models.Soils.Pore">
            <summary>
            Data structure that holds parameters and variables specific to each pore component in the soil horizion
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.Layer">
            <summary>The layer that this pore compartment is located in</summary>
        </member>
        <member name="P:Models.Soils.Pore.Compartment">
            <summary>The size compartment that this pore represents</summary>
        </member>
        <member name="P:Models.Soils.Pore.IncludeSorption">
            <summary>The thickness of the layer that the pore is within</summary>
            <summary>
            Allows Sorption processes to be switched off from the UI
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.DiameterUpper">
            <summary>The diameter of the upper boundry of the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.DiameterLower">
            <summary>The diameter of the lower boundry of the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.Area">
            <summary>The mean horizontal area of the pores in this pore compartment</summary>
        </member>
        <member name="P:Models.Soils.Pore.Radius">
            <summary>The mean horizontal radius of pores in this pore compartment</summary>
        </member>
        <member name="P:Models.Soils.Pore.Number">
            <summary>The number of pore 'cylinders' in this pore compartment</summary>
        </member>
        <member name="P:Models.Soils.Pore.Thickness">
            <summary>
            The depth of the soil layer this pore compartment sits within
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.PsiLower">
            <summary>The water potential when this pore is empty but all smaller pores are full</summary>
        </member>
        <member name="P:Models.Soils.Pore.PsiUpper">
            <summary>The water potential when this pore is full but all larger pores are empty</summary>
        </member>
        <member name="P:Models.Soils.Pore.ThetaUpper">
            <summary>The water content of the soil when this pore is full and larger pores are empty</summary>
        </member>
        <member name="P:Models.Soils.Pore.ThetaLower">
            <summary>The water content of the soil when this pore is empty and smaller pores are full</summary>
        </member>
        <member name="P:Models.Soils.Pore.Volume">
            <summary>The volume of the the pore relative to the volume of soil</summary>
        </member>
        <member name="P:Models.Soils.Pore.VolumeDepth">
            <summary>The volume of the the pore in mm</summary>
        </member>
        <member name="P:Models.Soils.Pore.WaterFilledVolume">
            <summary>The water filled volume of the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.RelativeWaterContent">
            <summary>The water filled volume of the pore relative to the air space</summary>
        </member>
        <member name="P:Models.Soils.Pore.AirFilledVolume">
            <summary>The air filled volume of the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.WaterDepth">
            <summary>The depth of water in the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.AirDepth">
            <summary>The depth of Air in the pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.CFlow">
            <summary>
            Empirical parameter for estimating hydraulic conductivity of pore compartments
            divide values from Arya 1999 etal by 10000 to convert from cm to um
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.XFlow">
            <summary>
            Empirical parameter for estimating hydraulic conductivity of pore compartments
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.PoreFlowRate">
            <summary>
            The volumetirc flow rate of a single pore
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.PoiseuilleFlow">
            <summary>The hydraulic conductivity of water through this pore compartment</summary>
        </member>
        <member name="P:Models.Soils.Pore.Diffusivity">
            <summary>The potential diffusion out of this pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.DiffusionCapacity">
            <summary>The potential diffusion into this pore</summary>
        </member>
        <member name="P:Models.Soils.Pore.Sorptivity">
            <summary>
            The rate of water movement into a pore space due to the chemical attraction from the matris
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.RepelancyFactor">
            <summary>
            Factor describing the effects of soil water content on hydrophobosity
            equals 1 if soil is hydrophyllic and decreases is soil becomes more hydrophobic
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.Sorption">
            <summary>
            The rate of water movement into a pore space due to the chemical attraction from the matrix
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.HydraulicConductivityIn">
            <summary>The maximum possible conductivity through a pore of given size</summary>
        </member>
        <member name="P:Models.Soils.Pore.GravitationalPotential">
            <summary>the gravitational potential for the layer this pore is in, calculated from height above zero potential base</summary>
        </member>
        <member name="P:Models.Soils.Pore.TensionFactor">
            <summary>
            Factor describing the effects of water surface tension holding water in pores.  Is zero where surface tension exceeds the forces of gravity and neglegable where suction is low in larger pores
            equals 1
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.HydraulicConductivityOut">
            <summary>The conductivity of water moving out of a pore, The net result of gravity Opposed by capiliary draw back</summary>
        </member>
        <member name="P:Models.Soils.Pore.ExtractionMultiplier">
            <summary>Factor to scale potential water extraction in each pore </summary>
        </member>
        <member name="P:Models.Soils.Pore.RootLengthDensity">
            <summary>
            The proportion of pores in this cohort that have absorbing roots present
            </summary>
        </member>
        <member name="P:Models.Soils.Pore.PotentialWaterExtraction">
            <summary>
            The amount of water that may be extracted from this pore class by plant roots each hour
            </summary>
        </member>
        <member name="T:Models.Soils.SoilCropOilPalm">
            <summary>
            A soil crop interface
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCropOilPalm.Soil">
            <summary>
            Gets the parent soil
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCropOilPalm.Depth">
            <summary>
            Gets the associated depths
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCropOilPalm.KL">
            <summary>
            Gets or sets the KL value.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCropOilPalm.XF">
            <summary>
            Gets or sets the exploration factor
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCropOilPalm.KLMetadata">
            <summary>
            Gets or sets the metadata for KL
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCropOilPalm.XFMetadata">
            <summary>
            Gets or sets the meta data for the exploration factor
            </summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogen">
            <remarks>
            This partial class contains part of the SoilCN patch, with variables and general processes
            </remarks>
            <remarks>
            This partial class contains part of the SoilCN patch, with most of the processes of SoilNitrogen
            </remarks>
            <remarks>
            This partial class contains the various methods to handle patches
            </remarks>
             <summary>
             Computes the soil C and N processes
             </summary>
             <remarks>
             Implements internal 'patches', which are replicates of state variables and processes used for simulating soil variability
            
             Based on a more-or-less direct port of the Fortran SoilN model  -  Ported by Eric Zurcher Sept/Oct 2010
             Code tidied up by RCichota initially in Aug/Sep-2012 (updates in Feb-Apr/2014, Apr/2015, and Mar-Apr/2016)
             Full patch capability ported into ApsimX by Russel McAuliffe in June/2017, tidied up by RCichota (July/2017)
             </remarks>
            <remarks>
            This partial class contains most of the variables and input properties of SoilNitrogen
            </remarks>
        </member>
        <member name="T:Models.Soils.SoilNitrogen.soilCNPatch">
            <summary>
            Class containing all the state variables and specific soil C and N processes
            </summary>
            <remarks>
            This can instanciated many times, used for describing soil variability
            </remarks>
            <remarks>
            This partial class contains most of the soil processes of SoilNitrogen
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.#ctor(Models.Soils.SoilNitrogen)">
            <summary>The soilCNPatch constructor</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.PatchName">
            <summary>
            Name of this patch
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.RelativeArea">
            <summary>
            Relative area of this patch (0-1)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.CreationDate">
            <summary>
            Date at which this patch was created
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.g">
            <summary>
            Reference to main SoilNitrogen Class - for accessing the parameters and input variables
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.urea">
            <summary>Amount of soil urea nitrogen (kgN/ha)</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4">
            <summary>Amount of soil ammonium nitrogen (kgN/ha)</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no3">
            <summary>Amount of soil nitrate nitrogen (kgN/ha)</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh3">
            <summary>Amount of soil ammonia nitrogen (kgN/ha)</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no2">
            <summary>Amount of soil nitrite nitrogen (kgN/ha)</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.totalMineralNInRootZone">
            <summary>
            Amount of NH4 plus NO3 in the root zone (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.fom_c">
            <summary>
            Amount of C for each soil layer in each FOM pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.fom_n">
            <summary>
            Nitrogen amount in FOM (per pool)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.biom_c">
            <summary>
            Amount of C for each soil layer in soil m. biomass pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.waterSoluble_c">
            <summary>
            Amount of water soluble C for each soil layer (for denitrification)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.biom_n">
            <summary>
            Nitrogen amount in soil m. biomass
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.hum_c">
            <summary>
            Amount of C for each soil layer in soil a. humus pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.hum_n">
            <summary>
            Nitrogen amount in soil humus
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.inert_c">
            <summary>
            Amount of C for each soil layer in soil inert humus pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.inert_n">
            <summary>
            Nitrogen amount in soil inert humus
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.pH">
            <summary>Soil pH value</summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.dlt_urea">
            <summary>
            Variations in urea as given by another component
            </summary>
            <remarks>
            This property checks changes in the amount of urea at each soil layer
             - If values are not supplied for all layers, these will be assumed zero (no changes)
             - If values are supplied in excess, these will ignored
             - The actual amounts are also checked for negative values
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.dlt_nh4">
            <summary>
            Variations in nh4 as given by another component
            </summary>
            <remarks>
            This property checks changes in the amount of urea at each soil layer
             - If values are not supplied for all layers, these will be assumed zero (no changes)
             - If values are supplied in excess, these will ignored
             - The actual amounts are also checked for negative values
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.dlt_no3">
            <summary>
            Variations in no3 as given by another component
            </summary>
            <remarks>
            This property checks changes in the amount of urea at each soil layer
             - If values are not supplied for all layers, these will be assumed zero (no changes)
             - If values are supplied in excess, these will ignored
             - The actual amounts are also checked for negative values
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.dlt_fom_c">
            <summary>
            Variation in soil FOM C as sent by another component
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.dlt_fom_n">
            <summary>
            Variation in soil FOM N as sent by another component
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.nit_tot">
            <summary>
            Total N in soil
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.nh4AvailableToPlants">
            <summary>
            Amount of soil ammonium nitrogen made available to plants (kgN/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.no3AvailableToPlants">
            <summary>
            Amount of soil nitrate nitrogen made available to plants (kgN/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_loss_in_sed">
            <summary>
            N carried out in sediment via runoff/erosion
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_res_nh4_min">
            <summary>
            Net NH4 mineralisation from residue decomposition
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_res_no3_min">
            <summary>
            Net NO3 mineralisation from residue decomposition
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_fom">
            <summary>
            Amount of N converted from each FOM pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_fom_to_min">
            <summary>
            Net FOM N mineralised (negative for immobilisation)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_hum_to_min">
            <summary>
            Net N mineralised for humic pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_biom_to_min">
            <summary>
            Net N mineralised from m. biomass pool
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_urea_hydrolysis">
            <summary>
            Nitrogen coverted by hydrolisys (urea into NH4)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_nitrification">
            <summary>
            Nitrogen coverted by nitrification (NH4 into NO3)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n2o_nitrif">
            <summary>
            N2O N produced during nitrification
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_no3_dnit">
            <summary>
            NO3 N denitrified
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n2o_dnit">
            <summary>
            N2O N produced during denitrification
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_codenitrification">
            <summary>
            Nitrogen coverted by codenitrification (N2+N2O)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n2o_codenit">
            <summary>
            N2O N produced during codenitrification
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4_deficit_immob">
            <summary>
            Excess N required above NH4 supply (for immobilisation)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.urea_flow">
            <summary>
            Amount of urea changed by the soil water module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4_flow">
            <summary>
            Amount of NH4 changed by the soil water module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no3_flow">
            <summary>
            Amount of NO3 changed by the soil water module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.urea_uptake">
            <summary>
            Amount of urea taken by any plant module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4_uptake">
            <summary>
            Amount of NH4 taken by any plant module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no3_uptake">
            <summary>
            Amount of NO3 taken by any plant module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.urea_fertiliser">
            <summary>
            Amount of urea added by the fertiliser module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4_fertiliser">
            <summary>
            Amount of NH4 added by the fertiliser module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no3_fertiliser">
            <summary>
            Amount of NO3 added by the fertiliser module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.urea_ChangedOther">
            <summary>
            Amount of urea changed by any other module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.nh4_ChangedOther">
            <summary>
            Amount of NH4 changed by any other module
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.no3_ChangedOther">
            <summary>
            Amount of NO3 changed by any other module
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.carbon_tot">
            <summary>
            Total carbon amount in the soil
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_loss_in_sed">
            <summary>
            Carbon loss in sediment, via runoff/erosion
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_fom_to_hum">
            <summary>
            Amount of C from each FOM pool converted into humus
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_fom_to_biom">
            <summary>
            Amount of C from each FOM pool converted into m. biomass
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_fom_to_atm">
            <summary>
            Amount of C from each FOM pool lost to the atmosphere
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_hum_to_biom">
            <summary>
            Humic C converted to biomass
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_hum_to_atm">
            <summary>
            Humic C lost to atmosphere
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_biom_to_hum">
            <summary>
            Biomass C converted to humic
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_biom_to_atm">
            <summary>
            Biomass C lost to atmosphere
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_res_to_biom">
            <summary>
            Carbon from residues converted to biomass (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_res_to_hum">
            <summary>
            Carbon from residues converted to humus (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_res_to_atm">
            <summary>
            Carbon from residues lost to atmosphere during decomposition (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilCNPatch.co2_atm">
            <summary>
            Total CO2 amount produced today
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.soilp_dlt_org_p">
            <summary>
            amount of P coverted by residue mineralisation
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_c_decomp">
            <summary>
            Actual residue C decomposition (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.dlt_n_decomp">
            <summary>
            Actual residue N decomposition (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.SurfOMActualDecomposition">
            <summary>
            The info with actual residue decomposition
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.TodaysInitialC">
            <summary>
            Total C content at the beginning of the day
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.TodaysInitialN">
            <summary>
            Total N content at the beginning of the day
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.TodaysInitialNH4">
            <summary>
            Amount of  N as NH4 at the beginning of the day (kg/ha)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soilCNPatch.TodaysInitialNO3">
            <summary>
            Amount of  N as NO3 at the beginning of the day (kg/ha)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.CalcTotalMineralNInRootZone">
            <summary>
            Computes the amount of NH4 and NO3 in the root zone
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ResizeLayeredVariables(System.Int32)">
            <summary>
            Sets the size of arrays (with nLayers)
            </summary>
            <remarks>
            This is used during initialisation and whenever the soil profile changes (thus not often at all)
            </remarks>
            <param name="nLayers">The number of layers</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ClearDeltaVariables">
            <summary>
            Clear (zero out) the values of variables storing deltas
            </summary>
            <remarks>
            This is used to zero out the variables that need reseting every day, those that are not necessarily computed everyday
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.StoreStatus">
            <summary>
            Store today's initial N amounts
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.PackActualResidueDecomposition">
            <summary>
            Gather the information about actual residue decomposition, to be sent back to surface OM
            </summary>
            <remarks>
            Currently P is not being computed by SoilNitrogen, so the corresponding variables are set to zero here 
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.UpdateProfile(System.Double[])">
            <summary>
            Check whether profile has changed and move values between layers
            </summary>
            <param name="new_dlayer">New values for dlayer</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.MoveLayers(System.Double[]@,System.Double[])">
            <summary>
            Move the values of a given variable between layers, from bottom to top
            </summary>
            <remarks>
            Used when there is some soil lost due to erosion
             // Changed from subroutine to function returning amount of profile loss
            </remarks>
            <param name="SoilProperty">Variable to move layers</param>
            <param name="new_dlayer">new dlayer array</param>
            <returns>Amount of C or N lost because of changes in profile</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.CheckVariables">
            <summary>
            Check that the values of variables are ok
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.DecomposeResidues">
            <summary>
            Calculate rate of nitrogen mineralisation/immobilisation of surface residues
            </summary>
            <remarks>
            This will test to see whether adequate mineral nitrogen is available to sustain potential rate of decomposition of
            surface residues, which was somputed by SurfaceOM. It aslo calculates net rate of nitrogen mineralisation/immobilisation
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ConvertSoilOM">
            <summary>
            Check and compute the mineralisation/immobilisation processes for each soil OM
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.MineraliseHumus(System.Int32)">
            <summary>
            Calculate the transformations of the the soil humic pool, mineralisation (+ve) or immobilisation (-ve)
            </summary>
            <remarks>
            It is assumed that the inert_C component of the humic pool is not subject to mineralisation
            some constants have different values when there's a pond, as anaerobic conditions dominate
            </remarks>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.MineraliseMBiomass(System.Int32)">
            <summary>
            Calculate the transformations of the soil biomass pool, mineralisation (+ve) or immobilisation (-ve)
            </summary>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.DecomposeFOM(System.Int32)">
            <summary>
            Calculate the decomposition of the soil Fresh OM, mineralisation (+ve) or immobilisation (-ve)
            </summary>
            <remarks>
            - parameters are given in pairs, for aerobic and anaerobic conditions (with pond)
            </remarks>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ConvertUrea">
            <summary>
            Check and compute the amount of urea converted to NH4 via hydrolysis
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ConvertAmmonium">
            <summary>
            Check and compute the amount of NH4 converted to NO3 via nitrification
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.ConvertNitrate">
            <summary>
            Check and compute the amount of NO3 converted to gas via dinitrification
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.UreaHydrolysis(System.Int32)">
            <summary>
            Calculate the amount of urea converted to NH4 via hydrolysis (kgN/ha)
            </summary>
            <remarks>
            - very small amounts of urea are hydrolysed promptly, regardless the hydrolysis settings
            - parameters are given in pairs, for aerobic and anaerobic conditions (with pond)
            </remarks>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
            <returns>delta N coverted from urea into NH4</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Nitrification(System.Int32)">
            <summary>
            Calculate the amount of NH4 converted to NO3 via nitrification
            </summary>
            <remarks>
            - This routine is much simplified from original CERES code
            - pH effect on nitrification is not used as pH is not simulated
            - parameters are given in pairs, for aerobic and anaerobic conditions (with pond)
            </remarks>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
            <returns>delta N coverted from NH4 into NO3</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.N2OProducedDuringNitrification(System.Int32)">
            <summary>
            Calculate the amount of N2O produced during nitrification
            </summary>
            <param name="layer">the soil layer index for which calculations will be made</param>
            <returns>delta N coverted into N2O during nitrification</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Denitrification(System.Int32)">
            <summary>
            Calculate amount of NO3 transformed via denitrification
            </summary>
            <remarks>
            - parameters are given in pairs, for aerobic and anaerobic conditions (with pond)
            </remarks>
            <param name="layer">the soil layer index for which calculations will be made</param>
            <returns>delta N coverted from NO3 into gaseous forms</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Denitrification_Nratio(System.Int32)">
            <summary>
            Calculate the N2 to N2O ratio during denitrification
            </summary>
            <remarks>
            parameters are given in pairs, for aerobic and anaerobic conditions (with pond)
            </remarks>
            <param name="layer">the soil layer index for which calculations will be made</param>
            <returns>The ratio between N2 and N2O (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Nitritation(System.Int32)">
            <summary>
            Calculate the amount of NH4 converted to NO2 via nitritation
            </summary>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
            <returns>delta N coverted from NH4 into NO2</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Nitratation(System.Int32)">
            <summary>
            Calculate the amount of NO2 converted to NO3 via nitratation
            </summary>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
            <returns>delta N coverted from NO2 into NO3</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.N2OProducedDuringNitritation(System.Double,System.Int32)">
            <summary>
            Calculate the amount of N2O produced during nitritation
            </summary>
            <param name="deltaNH3Oxidation">the deltaNH3Oxidation</param>
            <param name="layer">the node number representing soil layer for which calculations will be made</param>
            <returns>delta N coverted from NH2OH into N2O</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.Codenitrification(System.Int32)">
            <summary>
            Calculate amount of gaseous N produced via co-denitrification
            </summary>
            <param name="layer">the soil layer index for which calculations will be made</param>
            <returns>delta N coverted into gaseous forms</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.CodenitrificationN2Fraction(System.Int32)">
            <summary>
            Calculate the N2 fraction during codenitrification
            </summary>
            <param name="layer">the soil layer index for which calculations will be made</param>
            <returns>The fraction of N2 (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.SoilTempFactor(System.Int32,System.Int32,Models.Soils.SoilNitrogen.BentStickData)">
            <summary>
            Calculate a temperature factor (0-1) for C and N processes
            </summary>
            <param name="layer">The soil layer to calculate</param>
            <param name="index">Parameter indication whether pond exists</param>
            <param name="Parameters">Parameter data</param>
            <returns>Temperature limiting factor (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.SoilMoistFactor(System.Int32,System.Int32,Models.Soils.SoilNitrogen.BrokenStickData)">
            <summary>
            Calculate a soil moist factor (0-1) for C and N processes
            </summary>
            <param name="layer">The soil layer to calculate</param>
            <param name="index">Parameter indication whether pond exists</param>
            <param name="Parameters">Parameter data</param>
            <returns>Soil moisture limiting factor (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.WaterFilledPoreSpaceFactor(System.Int32,System.Int32,Models.Soils.SoilNitrogen.BrokenStickData)">
            <summary>
            Calculate a water filled pore space factor for denitrification processes
            </summary>
            <param name="layer">The soil layer to calculate</param>
            <param name="index">Parameter indication whether pond exists</param>
            <param name="Parameters">Parameter data</param>
            <returns>limiting factor due to water filled pore space (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.SoilpHFactor(System.Int32,System.Int32,Models.Soils.SoilNitrogen.BrokenStickData)">
            <summary>
            Calculate a pH factor for C and N processes
            </summary>
            <param name="layer">The soil layer to calculate</param>
            <param name="index">Parameter indication whether pond exists</param>
            <param name="Parameters">Parameter data</param>
            <returns>Soil pH limiting factor (0-1)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.soilCNPatch.CNratioFactor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Calculate a C:N ratio factor for C and N processes
            </summary>
            <param name="layer">The soil layer to calculate</param>
            <param name="index">Parameter indication whether pond exists</param>
            <param name="OptCN">The optimum CN ration, below which there is no limitations</param>
            <param name="rateCN">A rate factor to increase limitation as function of increasing CN ratio</param>
            <returns>The CN ratio limiting factor</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.AddNewCNPatch(Models.Soils.AddSoilCNPatchwithFOMType)">
            <summary>
            Handles the addition of new CNPatches
            </summary>
            <param name="PatchtoAdd">Patch data</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.ClonePatch(System.Int32)">
            <summary>
            Clone an existing patch. That is, creates a new patch (k) based on an existing one (j)
            </summary>
            <param name="j">id of patch to be cloned</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckPatchAutoAmalgamation">
            <summary>
            Check patch state, get the diffs between them, and merge them if possible
            </summary>
            <remarks>
            We're testing three different ways to compare/merge patches:
             - CompareAll: All patches are compared to each other before they are merged
             - CompareBase: All patches are compare to base first, then merged, then compared again
             - CompareMerge: Patches are compare and merged at once if deemed equal, then compare to next
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckPatchAgeAmalgamation">
            <summary>
            Check patch age and merge them if patches are old
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.AmalgamatePatches(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            Controls the merging of a list of patches into a single one
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.DeletePatches(System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete patches in the list
            </summary>
            <param name="PatchesToDelete">List of patches to delete</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CopyCNValuesToPatch(System.Int32,System.Int32,System.Double)">
            <summary>
            Copy the state variables from one patch (j) to another one (k), using a multiplying factor
            </summary>
            <param name="k">The id of patch where values are copied to</param>
            <param name="j">The id of patch where values are copied from</param>
            <param name="MultiplyingFactor">A multiplying factor (optional)</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.MergeCNValues(System.Int32,System.Int32)">
            <summary>
            Merge the state variables from one patch (j) to another one (k), include area
            </summary>
            <param name="k">The id of patch where values are copied to</param>
            <param name="j">The id of patch where values are copied from</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.AddStuffToPatches(System.Collections.Generic.List{System.Int32},Models.Soils.AddSoilCNPatchwithFOMType)">
            <summary>
            Controls the addition of several variables to the especified patches
            </summary>
            <param name="PatchesToAdd">The list of patches to which the stuff will be added</param>
            <param name="StuffToAdd">The values of the variables to add (supplied as deltas)</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.PatchesAreEqual(System.Int32,System.Int32)">
            <summary>
            Checks whether two patches can be considered equal
            </summary>
            <param name="k">Patch used as reference</param>
            <param name="j">Patch being compared to reference</param>
            <returns>TRUE if patches are similar enough, FALSE otherwise</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.TestDelta(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Check whether a delta value can be considered 'non-significant'
            </summary>
            <param name="deltaValue">the value to be tested</param>
            <param name="TotalValueBase">the magnitude of the value being tested</param>
            <param name="relativeDiffFactor">the value of the maximum relative delta</param>
            <param name="absoluteDiffFactor">the value of the maximum absolute delta</param>
            <param name="AdjustFactor">a factor to adjust the DiffFactors</param>
            <returns>an integer, 1 if the the deltaValue is non-significant or 0 otherwise</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckPatchIDs(System.Int32[],System.String[])">
            <summary>
            Check the list of patch names and IDs passed by 'AddSoilCNPatch' event
            </summary>
            <remarks>
            Tasks performed by this method:
             - Verify whether there are replicates in the list given
             - Verify whether the IDs and/or names given correspond to existing patches
             - Eliminate replicates and consolidate lists of IDs and names (merge both)
            </remarks>
            <param name="IDsToCheck">List of IDs or indices of patches</param>
            <param name="NamesToCheck">List of names of patches</param>
            <returns>List of patch IDs (negative if no ID is found)</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.partitionDelta(System.Double[],System.String,System.String)">
            <summary>
            calculate how the dlt's (C and N) are partitioned amongst patches
            </summary>
            <param name="incomingDelta">The dlt to be partioned amongst patches</param>
            <param name="SoluteName">The solute or pool that is changing</param>
            <param name="PartitionType">The type of partition to be used</param>
            <returns>The values of dlt partitioned for each existing patch</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.#ctor">
            <summary>Initialises a new instance of the <see cref="T:Models.Soils.SoilNitrogen"/> class.</summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogen.ExternalMassFlowDelegate">
            <summary>
            Event to communicate other modules of C and/or N changes to/from outside the simulation
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="E:Models.Soils.SoilNitrogen.ExternalMassFlow">
            <summary>Occurs when [external mass flow].</summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogen.SurfaceOrganicMatterDecompDelegate">
            <summary>
            Event to comunicate other modules (SurfaceOM) that residues have been decomposed
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.Reset">
            <summary>Reset the state values to those set during the initialisation</summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckParameters">
            <summary>
            Checks general initialisation parameters, and let user know of some settings
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckInitialVariables">
            <summary>
            Checks whether initial values for OM and mineral N were given and make sure all layers have valid values
            </summary>
            <remarks>
            Initial OC values are mandatory, but not for all layers. Zero is assumed for layers not set.
            Initial values for mineral N are optional, assume zero if not given
            The inital FOM values are given as a total amount which is distributed using an exponential function.
            In this procedure the fraction of total FOM that goes in each layer is also computed
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetInitialValues">
            <summary>
            Performs the initial setup and calculations
            </summary>
            <remarks>
            This procedure is also used onReset
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.ResizeLayeredVariables(System.Int32)">
            <summary>
            Sets the size of arrays (with nLayers)
            </summary>
            <remarks>
            This is used during initialisation and whenever the soil profile changes (thus not often at all)
            </remarks>
            <param name="nLayers">The number of layers</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.ClearDeltaVariables">
            <summary>
            Clear (zero out) the values of variables storing deltas
            </summary>
            <remarks>
            This is used to zero out the variables that need resetting every day, those that are not necessarily computed everyday
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.StoreStatus">
            <summary>
            Store today's initial N amounts
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SendDeltaState">
            <summary>
            Calculates variations in C an N, and publishes MassFlows to APSIM
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Sets the procedures for the beginning of each time-step
            </summary>
            <param name="sender">The sender model.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnDoSoilOrganicMatter(System.Object,System.EventArgs)">
            <summary>
            Sets the procedures for the main phase of each time-step
            </summary>
            <param name="sender">The sender model.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnDoUpdate(System.Object,System.EventArgs)">
            <summary>Stes the procedures for the end of each time-step</summary>
            <param name="sender">The sender model.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnEndOfMonth(System.Object,System.EventArgs)">
            <summary>Check whether patch amalgamation by age is allowed (done on a monthly basis)</summary>
            <param name="sender">The sender model.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.EvaluateProcesses">
            <summary>
            Performs the soil C and N balance processes, at APSIM timestep.
            </summary>
            <remarks>
            The processes considered, in order, are:
             - Decomposition of surface residues
             - Urea hydrolysis
             - Denitrification + N2O production
             - SOM mineralisation (humus then m. biomass) + decomposition of FOM
             - Nitrification + N2O production
            Note: potential surface organic matter decomposition is given by SurfaceOM module, only N balance is considered here
             If there is a pond then surfaceOM is inactive, the decomposition of OM is done wholly by the pond module
             Also, different parameters are used for some processes when pond is active
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnPotentialResidueDecompositionCalculated(Models.Soils.SurfaceOrganicMatterDecompType)">
            <summary>
            Passes the information about the potential decomposition of surface residues
            </summary>
            <remarks>
            This information is passed by a residue/SurfaceOM module
            </remarks>
            <param name="SurfaceOrganicMatterDecomp">Data about the potential decomposition of each residue type on soil surface</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CalculateActualSOMDecomp">
            <summary>
            Sends back to SurfaceOM the information about residue decomposition
            </summary>
            <remarks>
            Potential decomposition was gathered early on from the surfaceOM module. SoilNitrogen evaluated whether the 
            conditions (C-N balance) allowed the decomposition to happen, and made the changes in the soil accordingly.
            Now the actual decomposition rate for each of the residues is sent back to SurfaceOM.
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnIncorpFOM(Models.Soils.FOMLayerType)">
            <summary>
            Passes the instructions to incorporate FOM to the soil - simple FOM
            </summary>
            <remarks>
            The use of this events is to be avoided, one should use the method IncorporateFOM
            </remarks>
            <param name="inFOMdata">Data about the FOM to be added to the soil</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnIncorpFOMPool(Models.Soils.FOMPoolType)">
            <summary>
            Passes the instructions to incorporate FOM to the soil - FOM pools
            </summary>
            <remarks>
            In this event, the FOM amount is given already partitioned by pool
            </remarks>
            <param name="inFOMPoolData">Data about the FOM to be added to the soil</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.DoIncorpFOM(Models.Soils.FOMLayerType)">
            <summary>
            Gets the data and forward instructions to incorporate FOM to the soil - simple FOM
            </summary>
            <remarks>
            The data given here contains FOM as a single amount, not split into pools.
            This will be partitioned here based on the given fom_type (or default if not given).
            The values for C as well as N (or CN ratio) must be supplied or the action is not performed.
            Both C an N are partitioned equally, thus the CN ratios of all pools are assumed equal.
            If both N and CN ratio are given, the valu of CN ratio is used.
            </remarks>
            <param name="inFOMdata">Data about the FOM to be added to the soil</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.DoIncorpFOM(Models.Soils.FOMPoolType)">
            <summary>
            Gets the data and forward instructions to incorporate FOM to the soil - FOM pools
            </summary>
            <remarks>
            In this event, the FOM amount is given already partitioned into pools
            The values for C as well as N must be supplied or the action is not performed.
            </remarks>
            <param name="inFOMData">Data about the FOM to be added to the soil</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.IncorporateFOM(Models.Soils.FOMPoolType)">
            <summary>
            Gets the data about incoming FOM, add to the patch's FOM pools
            </summary>
            <remarks>
            The FOM amount is given already partitioned by pool
            </remarks>
            <param name="FOMPoolData"></param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnNew_profile(Models.Soils.NewProfileType)">
            <summary>
            Passes the information about setting/changes in the soil profile
            </summary>
            <remarks>
            We get the basic soil physics data in here;
            The event is also used to account for getting changes due to soil erosion
            It is assumed that if there are any changes in the soil profile the module doing it will let us know.
             this will be done by setting both 'soil_loss' and 'n_reduction' (ProfileReductionAllowed) to a non-default value
            </remarks>
            <param name="NewProfile">Data about the new soil profile</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.UpdateProfile(System.Double[])">
            <summary>
            Check whether profile has changed and move values between layers
            </summary>
            <param name="new_dlayer">New values for dlayer</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetNitrogenChanged(Models.Soils.NitrogenChangedType)">
            <summary>Gets the changes in mineral N made by other modules</summary>
            <param name="NitrogenChanges">The nitrogen changes.</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnNitrogenChanged(Models.Soils.NitrogenChangedType)">
             <summary>
             Passes the information about changes in mineral N made by other modules
             </summary>
             <remarks>
             These values will be passed to each existing patch. Generally the values are passed as they come,
              however, if the deltas come from a soil (i.e. leaching) or plant (i.e. uptake) then the values should
              be handled (partioned).  This will be done based on soil N concentration
             </remarks>
             <param name="NitrogenChanges">The variation (delta) for each mineral N form</param>
            
        </member>
        <member name="M:Models.Soils.SoilNitrogen.AddUrine(Models.Soils.AddUrineType)">
            <summary>
            Get the information about urine being added
            </summary>
            <param name="UrineAdded">Urine deposition data (includes urea N amount, volume, area affected, etc)</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnAddSoilCNPatch(Models.Soils.AddSoilCNPatchType)">
            <summary>
            Passes and handles the information about new patch and add it to patch list
            </summary>
            <param name="PatchtoAdd">Patch data</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnAddSoilCNPatchwithFOM(Models.Soils.AddSoilCNPatchwithFOMType)">
            <summary>
            Passes and handles the information about new patch and add it to patch list
            </summary>
            <param name="PatchtoAdd">Patch data</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.OnMergeSoilCNPatch(Models.Soils.MergeSoilCNPatchType)">
            <summary>
            Passes the list of patches that will be merged into one, as defined by user
            </summary>
            <param name="MergeCNPatch">The list of CNPatches to merge</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SendExternalMassFlowC(System.Double)">
            <summary>
            Comunicate other components that C amount in the soil has changed
            </summary>
            <param name="dltC">C changes</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SendExternalMassFlowN(System.Double)">
            <summary>
            Comunicate other components that N amount in the soil has changed
            </summary>
            <param name="dltN">N changes</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.CheckNegativeValues(System.Double@,System.Int32,System.String,System.String)">
            <summary>
            Checks whether the variable is significantly negative, considering thresholds
            </summary>
            <remarks>
            Three levels are considered when analying a negative value, these are defined by the warning and the fatal threshold value:
             (1) If the variable is negative, but the value is really small (in absolute terms) than the deviation is considered irrelevant;
             (2) If the value of the variable is negative and greater than the warning threshold, then a warning message is given;
             (3) If the variable value is negative and greater than the fatal threshold, then a fatal error is raised and the calculation stops.
            In any case the value any negative value is reset to zero;
            </remarks>
            <param name="TheValue">Reference to the variable being tested</param>
            <param name="layer">The layer to which the variable belongs to</param>
            <param name="VariableName">The name of the variable</param>
            <param name="MethodName">The name of the method calling the test</param>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.FractionLayer(System.Double)">
            <summary>
            Computes the fraction of each layer that is between the surface and a given depth
            </summary>
            <param name="maxDepth">The depth down to which the fractions are computed</param>
            <returns>An array with the fraction (0-1) of each layer that is between the surface and maxDepth</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.getCumulativeIndex(System.Double,System.Double[])">
            <summary>
            Find the index at which the cumulative amount is equal or greater than a given value
            </summary>
            <param name="sumTarget">The target value being sought</param>
            <param name="anArray">The array to analyse</param>
            <returns>The index of the array item at which the sum is equal or greater than the target</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.hasSignificantValues(System.Double[],System.Double)">
            <summary>
            Check whether there is at least one considerable/significant value in the array
            </summary>
            <param name="anArray">The array to analyse</param>
            <param name="MinValue">The minimum considerable value</param>
            <returns>True if there is any value greater than the minimum, false otherwise</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SumDoubleArray(System.Double[])">
            <summary>
            Calculate the sum of all values of an array of doubles
            </summary>
            <param name="anArray">The array of values</param>
            <returns>The sum</returns>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.hasValues(System.Double[],System.Double)">
            <summary>Check whether there is any considerable values in the array</summary>
            <param name="anArray">The array to analyse</param>
            <param name="Lowerue">The minimum considerable value</param>
            <returns>True if there is any value greater than the minimum, false otherwise</returns>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Clock">
            <summary>Link to APSIM's Clock (time information).</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.MetFile">
            <summary>Link to APSIM's WeatherFile (weather data).</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.mySummary">
            <summary>Link to APSIM Summary (logs the messages raised during model run).</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.SurfaceOrganicMatter">
            <summary>Link to the surface organic matter.</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Soil">
            <summary>Link to the soil.</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.SoilNParameterSet">
            <summary>
            Soil parameterisation set to use.
            </summary>
            <remarks>
            Used to determine which node of xml file will be used to overwrite some [Param]'s
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.usingNewNitrification">
            <summary>
            Flag for whether routines for nitrification and codenitrification are to be used (ignore old nitrification).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UseCodenitrification">
            <summary>
            Gets or sets flag for whether routines for codenitrification are to be used (yes/no).
            </summary>
            <remarks>
            When 'yes', nitrification is computed using nitritation + nitratation, and codenitrification is also computed
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.AllowProfileReduction">
            <summary>
            Gets or sets flag for whether soil profile reduction is allowed (yes/no).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.allowOrganicSolutes">
            <summary>
            Gests or sets flag for whether organic solutes are to be simulated (yes/no).
            </summary>
            <remarks>
            It should always be false, as organic solutes are not implemented yet
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.DefaultCarbonInSoilOM">
            <summary>
            Factor to convert organic carbon to organic matter (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.DefaultCarbonInFOM">
            <summary>
            Default carbon weight fraction in FOM (g/g).
            </summary>
            <remarks>
            Used to convert FOM amount into fom_c
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.DefaultInitialpH">
            <summary>
            Default initial pH, used case no pH is initialised in model.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.WarningNegativeThreshold">
            <summary>
            Threshold for raising a warning due to small negative values.
            </summary>
            <remarks>
            Any value between this and the FatalNegativeThreshold will be zeroed, but a warning message
            is raised, values smaller than this threshold will be zeroed without any message
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FatalNegativeThreshold">
            <summary>
            Threshold for a fatal error due to negative values (loss of mass balance).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.HumusCNr">
            <summary>
            The C:N ratio of the soil humus (active + inert).
            </summary>
            <remarks>
            Remains fixed throughout the simulation
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.MBiomassCNr">
            <summary>
            The C:N ratio of soil microbial biomass.
            </summary>
            <remarks>
            Remains fixed throughout the simulation
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FBiom">
            <summary>
            Proportion of biomass-C in the initial mineralisable humic-C (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FInert">
            <summary>
            Proportion of the initial total soil C that is inert, cannot be mineralised (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.InitialFOMWt">
            <summary>
            Initial amount of FOM in the soil (kgDM/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.InitialFOMDepth">
            <summary>
            Initial depth over which FOM is distributed within the soil profile (mm).
            </summary>
            <remarks>
            If not given (-ve), FOM will be distributed over the whole soil profile
            Distribution follows an exponential function
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.InitialFOMDistCoefficient">
            <summary>
            Exponent of function used to compute initial distribution of FOM in the soil.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.InitialFOMCNr">
            <summary>Initial C:N ratio of soil FOM (g/g).</summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMtypeID_reset">
            <summary>
            FOM type used on initialisation and reset.
            </summary>
            <remarks>
            The default value (0) is always assumed
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.InitialFOMType">
            <summary>
            FOM type to be used on initialisation.
            </summary>
            <remarks>
            This sets the partition of FOM C between the different pools (carbohydrate, cellulose, lignin)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fom_types">
            <summary>
            List of available FOM types names.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fract_carb">
            <summary>
            Pool 1 fraction in FOM [carbohydrate], for each FOM type (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fract_cell">
            <summary>
            Pool 2 fraction in FOM [cellulose], for each FOM type (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fract_lign">
            <summary>
            Pool 3 fraction in FOM [lignin], for each FOM type (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.ResiduesRespirationFactor">
            <summary>
            Fraction of residue C mineralised lost to atmopshere due to respiration (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.ResiduesFractionIntoBiomass">
            <summary>
            Fraction of retained residue C transferred to microbial biomass (g/g).
            </summary>
            <remarks>
            The remaining will go into humus
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.ResiduesDecompDepth">
            <summary>
            Depth from which mineral N can be immobilised when decomposing surface residues (mm).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Pool1FOMTurnOverRate">
            <summary>
            Optimum rate for decomposition of FOM pool 1 [carbohydrate], aerobic and anaerobic conditions (/day).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Pool2FOMTurnOverRate">
            <summary>
            Optimum rate for decomposition of FOM pool 2 [cellulose], aerobic and anaerobic conditions (/day).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Pool3FOMTurnOverRate">
            <summary>
            Optimum rate for decomposition of FOM pool 3 [lignin], aerobic and anaerobic conditions (/day).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMRespirationFactor">
            <summary>
            Fraction of the FOM C decomposed lost to atmopshere due to respiration (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMFractionIntoBiomass">
            <summary>
            Fraction of the retained FOM C transferred to biomass (g/g).
            </summary>
            <remarks>
            The remaining will go into humus
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMDecomp_CNCoefficient">
            <summary>
            Coefficient for the exponential phase of C:N effects on decomposition of FOM.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMDecomp_CNThreshold">
            <summary>
            Value of C:N ratio above which decomposition rate of FOM declines.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMDecomp_TemperatureFactorData">
            <summary>
            Data for calculating the temperature effect on FOM decomposition.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_TOptimum">
            <summary>
            Optimum temperature for FOM decomposition, aerobic and anaerobic conditions (oC).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_TFactorAtZero">
            <summary>
            Temperature factor for FOM decomposition at zero degrees, aerobic and anaerobic conditions.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_TCurveCoeff">
            <summary>
            Curve coefficient for temperature factor of FOM decomposition, aerobic and anaerobic conditions.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMDecomp_MoistureFactorData">
            <summary>
            Parameters for calculating the soil moisture factor for FOM decomposition.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_NormWaterContents">
            <summary>
            Values of the modified normalised soil water content at which the moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=sat
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMDecomp_MoistureFactors">
            <summary>
            Moisture factor values for the given values of normalised soil water content.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.MBiomassTurnOverRate">
            <summary>
            Potential rate of soil biomass mineralisation, aerobic and anaerobic conditions (/day).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.MBiomassRespirationFactor">
            <summary>
            Fraction of microbial biomass C mineralised that is lost to the atmosphere due to respiration (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.MBiomassFractionIntoBiomass">
            <summary>
            Fraction of retained microbial biomass C that goes back to microbial biomass (g/g).
            </summary>
            <remarks>
            The remaining will go in to humus
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.AHumusTurnOverRate">
            <summary>
            Potential rate of active humus mineralisation, aerobic and anaerobic conditions (/day).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.AHumusRespirationFactor">
            <summary>
            Fraction of active humic C mineralised that is lost to the atmosphere due to respiration (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.SOMMiner_TemperatureFactorData">
            <summary>
            Data to calculate the temperature effect on soil OM mineralisation.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SOMMiner_TOptimum">
            <summary>
            Optimum temperature for soil OM mineralisation (oC).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SOMMiner_TFactorAtZero">
            <summary>
            Temperature factor for soil OM mineralisation at zero degree.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SOMMiner_TCurveCoeff">
            <summary>
            Curve coefficient to calculate temperature factor for soil OM mineralisation.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.SOMMiner_MoistureFactorData">
            <summary>
            Parameters to calculate soil moisture factor for soil OM mineralisation.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SOMMiner_NormWaterContents">
            <summary>
            Values of the modified normalised soil water content at which moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.SOMMiner_MoistureFactors">
            <summary>
            Values of the moisture factor at given values of the normalised water content.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrol_MinRate">
            <summary>
            Minimum potential hydrolysis rate for urea (/day).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrol_parmA">
            <summary>
            Parameter A for the potential urea hydrolysis function.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrol_parmB">
            <summary>
            Parameter B for the potential urea hydrolysis function.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrol_parmC">
            <summary>
            Parameter C for the potential urea hydrolysis function.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrol_parmD">
            <summary>
            Parameter D for the potential urea hydrolysis function.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrolysis_TemperatureFactorData">
            <summary>
            Parameters to calculate the temperature effect on urea hydrolysis.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_TOptimum">
            <summary>
            Optimum temperature for urea hydrolysis (oC).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_TFactorAtZero">
            <summary>
            Temperature factor for urea hydrolysis at zero degrees.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_TCurveCoeff">
            <summary>
            Curve coefficient to calculate the temperature factor for urea hydrolysis.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.UreaHydrolysis_MoistureFactorData">
            <summary>
            Parameters to calculate the moisture effect on urea hydrolysis
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_NormWaterContents">
            <summary>
            Values of the modified normalised soil water content at which factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.UreaHydrol_MoistureFactors">
            <summary>
            Values of the moisture factor at given values of the normalised water content.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.NitrificationMaxPotential">
            <summary>
            Maximum soil nitrification potential, Michaelis-Menten dynamics (ug NH4/g soil/day).
            </summary>
            <remarks>
            This is the parameter M on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.NitrificationNH4ForHalfRate">
            <summary>
            NH4 concentration at half potential nitrification, Michaelis-Menten dynamics (ppm).
            </summary>
            <remarks>
            This is the parameter k on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification_DenitLossFactor">
            <summary>
            Fraction of nitrification lost as denitrification
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification_TemperatureFactorData">
            <summary>
            Parameters to calculate the temperature effect on nitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_TOptimum">
            <summary>
            Optimum temperature for nitrification (oC).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_FactorAtZero">
            <summary>
            Temperature factor for nitrification at zero degrees.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_CurveCoeff">
            <summary>
            Curve coefficient for calculating the temperature factor for nitrification.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification_MoistureFactorData">
            <summary>
            Parameters to calculate the soil moisture factor for nitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_NormWaterContents">
            <summary>
            Values of the modified normalised soil water content at which the moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_MoistureFactors">
            <summary>
            Values of the moisture factor at given values of the normalised water content.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification_pHFactorData">
            <summary>
            Parameters to calculate the soil pH factor for nitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_pHValues">
            <summary>
            Values of pH at which the pH factor is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification_pHFactors">
            <summary>
            Values of pH factor at given pH values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.NitritationMaxPotential">
            <summary>
            Maximum soil potential nitritation rate (ug NH4/g soil/day).
            </summary>
            <remarks>
            This is the parameter M on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.NitritationNH4ForHalfRate">
            <summary>
            NH4 concentration when nitritation is half of potential (ppm).
            </summary>
            <remarks>
            This is the parameter k on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.NitratationMaxPotential">
            <summary>
            Maximum soil potential nitratation rate (ug NO2/g soil/day).
            </summary>
            <remarks>
            This is the parameter M on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.NitratationNH4ForHalfRate">
            <summary>
            NO2 concentration when nitratation is half of potential (ppm).
            </summary>
            <remarks>
            This is the parameter k on Michaelis-Menten equation, r = MC/(k+C)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.AmmoxLossParam1">
            <summary>
            Parameter to determine the base fraction of ammonia oxidate lost as N2O.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.AmmoxLossParam2">
            <summary>
            Parameter to determine the changes in fraction of ammonia oxidate lost as N2O.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification2_TemperatureFactorData">
            <summary>
            Parameters to calculate the temperature effect on nitrification (Nitrition + Nitration).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification2_TOptimum">
            <summary>
            Optimum temperature for nitrification (Nitrition + Nitration).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification2_TFactorAtZero">
            <summary>
            Temperature factor for nitrification (Nitrition + Nitration) at zero degrees.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification2_TCurveCoeff">
            <summary>
            Curve coefficient for calculating the temperature factor for nitrification (Nitrition + Nitration).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitrification2_MoistureFactorData">
            <summary>
            Parameters to calculate the soil moisture factor for nitrification (Nitrition + Nitration).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification2_NormWaterContents">
            <summary>
            Values of the modified soil water content at which the moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification2_MoistureFactors">
            <summary>
            Values of the moisture factor at given normalised water content values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitritation_pHFactorData">
            <summary>
            Parameters to calculate the soil pH factor for nitritation.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitritation_pHValues">
            <summary>
            Values of pH at which factors is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitritation_pHFactors">
            <summary>
            Values of pH factor at given pH values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Nitratation_pHFactorData">
            <summary>
            Parameters to calculate the soil pH factor for nitratation.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitratation_pHValues">
            <summary>
            Values of pH at which factors is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitratation_pHFactors">
            <summary>
            Values of pH factor at given pH values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.CodenitrificationRateCoefficient">
            <summary>
            Denitrification rate coefficient (kg soil/mg C/day).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Codenitrification_TemperatureFactorData">
            <summary>
            Parameters to calculate the temperature effect on codenitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_TOptmimun">
            <summary>
            Optimum temperature for codenitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_TFactorAtZero">
            <summary>
            Temperature factor for codenitrification at zero degrees.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_TCurveCoeff">
            <summary>
            Curve coefficient for calculating the temperature factor for codenitrification.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Codenitrification_MoistureFactorData">
            <summary>
            Parameters to calculate the soil moisture factor for codenitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_NormWaterContents">
            <summary>
            Values of modified soil water content at which the moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_MoistureFactors">
            <summary>
            Values of the moisture factor at given water content values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Codenitrification_pHFactorData">
            <summary>
            Parameters to calculate the soil pH factor for codenitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_pHValues">
            <summary>
            Values of soil pH at which the pH factor is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_pHFactors">
            <summary>
            Values of the pH factor at given pH values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Codenitrification_NH3NO2FactorData">
            <summary>
            Parameters to calculate the N2:N2O ratio during denitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_NHNOValues">
            <summary>
            Values of soil NH3+NO2 at which the N2 fraction is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Codenitrification_NHNOFactors">
            <summary>
            Values of the N2 fraction at given NH3+NO2 values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.DenitrificationRateCoefficient">
            <summary>
            Denitrification rate coefficient (kg/mg).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.actC_parmA">
            <summary>
            Parameter A of linear function to compute soluble carbon.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.actC_parmB">
            <summary>
            Parameter B of linear function to compute soluble carbon.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.actCExp_parmA">
            <summary>
            Parameter A of exponential function to compute soluble carbon.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.actCExp_parmB">
            <summary>
            Parameter B of exponential function to compute soluble carbon.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Denitrification_TemperatureFactorData">
            <summary>
            Parameters to calculate the temperature effect on denitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification_TOptimum">
            <summary>
            Optimum temperature for denitrification (oC).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification_TFactorAtZero">
            <summary>
            Temperature factor for denitrification at zero degrees.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification_TCurveCoeff">
            <summary>
            Curve coefficient for calculating the temperature factor for denitrification.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Denitrification_MoistureFactorData">
            <summary>
            Parameters to calculate the soil moisture factor for denitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification_NormWaterContents">
            <summary>
            Values of modified normalised soil water content at which the moisture factor is given.
            </summary>
            <remarks>
            X values for the moisture factor function, with: 0=dry, 1=LL, 2=DUL, 3=SAT
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification_MoistureFactors">
            <summary>
            Values of the moisture factor at given normalised water content values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Denit_k1">
            <summary>
            Parameter k1 from Thorburn et al (2010) for N2O model.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.N2N2O_parmA">
            <summary>
            Parameter A in the function computing the N2:N2O ratio.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.N2N2O_parmB">
            <summary>
            Parameter B in the function computing the N2:N2O ratio.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Denitrification_WFPSFactorData">
            <summary>
            Parameters to calculate the effect of water filled pore space on N2:N2O ratio during denitrification.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denit_WPFSValues">
            <summary>
            Values of soil water filled pore sapce at which the WFPS factor is given.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denit_WFPSFactors">
            <summary>
            Values of the WFPS factor at given water fille pore space values.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.enr_a_coeff">
            <summary>
            coefficient A for erosion enrichment function.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.enr_b_coeff">
            <summary>
            coefficient A for erosion enrichment function.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NPartitionApproach">
            <summary>
            The approach used for partitioning the N between patches.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.LayerForNPartition">
            <summary>
            Layer thickness to consider when N partition between patches is BasedOnSoilConcentration (mm).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MininumRelativeAreaCNPatch">
            <summary>
            Minimum relative area (fraction of paddock) for any patch.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MaximumUptakeRateNH4">
            <summary>
            Maximum NH4 uptake rate for plants (ppm/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MaximumUptakeRateNO3">
            <summary>
            Maximum NO3 uptake rate for plants (ppm/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MaximumNitrogenAvailableToPlants">
            <summary>
            The maximum amount of N that is made available to plants in one day (kg/ha/day).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.AllowPatchAutoAmalgamation">
            <summary>
            Flag for whether auto amalgamation of CN patches is allowed (yes/no).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.AutoAmalgamationApproach">
            <summary>
            Approach to use when comparing patches for AutoAmalagamation.
            </summary>
            <remarks>
            Options:
             - CompareAll: All patches are compared before they are merged
             - CompareBase: All patches are compare to base first, then merged, then compared again
             - CompareMerge: Patches are compare and merged at once if deemed equal, then compare to next
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.basePatchApproach">
            <summary>
            Approach to use when defining the base patch.
            </summary>
            <remarks>
            This is used to define the patch considered the 'base'. It is only used when comparing patches during
            potential auto-amalgamation (comparison against base are more lax)
            Options:
             - IDBased: the patch with lowest ID (=0) is used as the base
             - AreaBased: The [first] patch with the biggest area is used as base
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.AllowPatchAmalgamationByAge">
            <summary>
            Flag for whether an age check is used to force amalgamation of patches (yes/no).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchAgeForForcedMerge">
            <summary>
            Age of patch at which merging is enforced (years).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalOrgC">
            <summary>
            Relative difference in total organic carbon (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalOrgN">
            <summary>
            Relative difference in total organic nitrogen (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalBiomC">
            <summary>
            Relative difference in total organic nitrogen (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalUrea">
            <summary>
            Relative difference in total urea N amount (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalNH4">
            <summary>
            Relative difference in total NH4 N amount (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_TotalNO3">
            <summary>
            Relative difference in total NO3 N amount (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_LayerBiomC">
            <summary>
            Relative difference in urea N amount at any layer (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_LayerUrea">
            <summary>
            Relative difference in urea N amount at any layer (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_LayerNH4">
            <summary>
            Relative difference in NH4 N amount at any layer (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.relativeDiff_LayerNO3">
            <summary>
            Relative difference in NO3 N amount at any layer (g/g).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalOrgC">
            <summary>
            Absolute difference in total organic carbon (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalOrgN">
            <summary>
            Absolute difference in total organic nitrogen (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalBiomC">
            <summary>
            Absolute difference in total organic nitrogen (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalUrea">
            <summary>
            Absolute difference in total urea N amount (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalNH4">
            <summary>
            Absolute difference in total NH4 N amount (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_TotalNO3">
            <summary>
            Absolute difference in total NO3 N amount (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_LayerBiomC">
            <summary>
            Absolute difference in urea N amount at any layer (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_LayerUrea">
            <summary>
            Absolute difference in urea N amount at any layer (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_LayerNH4">
            <summary>
            Absolute difference in NH4 N amount at any layer (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.absoluteDiff_LayerNO3">
            <summary>
            Absolute difference in NO3 N amount at any layer (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.DepthToTestByLayer">
            <summary>
            Depth to consider when testing diffs by layer, if -ve soil depth is used (mm).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.DiffAdjustFactor">
            <summary>
            Factor to adjust the tests between patches other than base (0-1).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.ph">
            <summary>
            pH of soil (assumed equivalent to a 1:1 soil-water slurry).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.oc">
            <summary>
            Total soil organic carbon content (%).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.ureappm">
            <summary>
            Soil urea nitrogen content (ppm).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NH4ppm">
            <summary>
            Soil ammonium nitrogen content (ppm).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NO3ppm">
            <summary>
            Soil nitrate nitrogen content (ppm).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.n_reduction">
            <summary>
            Define whether soil profile reduction is on.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.soil_loss">
            <summary>
            Soil loss due to erosion (t/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.isPondActive">
            <summary>
            Flag for whether pond is active or not (yes/no).
            </summary>
            <remarks>
            If there is a pond, the decomposition of surface OM will be done by that model
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.pond_biom_C">
            <summary>
            Amount of C decomposed in pond that is added to soil m. biomass.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.pond_hum_C">
            <summary>
            Amount of C decomposed in pond that is added to soil humus.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.nitrification_inhibition">
            <summary>
            Factor reducing nitrification due to the presence of a inhibitor.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.rootDepth">
            <summary>
            Current depth of root zone (mm).
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.RootingDepth">
            <summary>
            Depth of root zone (mm).
            </summary>
            <remarks>
            This is used to compute plant available N when using patches
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_n_loss_in_sed">
            <summary>
            N carried out in sediment via runoff/erosion
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_nh4_net">
            <summary>
            Net nh4 change today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.nh4_transform_net">
            <summary>
            Net NH4 transformation today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_no3_net">
            <summary>
            Net no3 change today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.no3_transform_net">
            <summary>
            Net NO3 transformation today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MineralisedN">
            <summary>
            Net mineralisation today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_n_min_res">
            <summary>
            Net N mineralisation from residue decomposition
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_res_nh4_min">
            <summary>
            Net NH4 mineralisation from residue decomposition
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_res_no3_min">
            <summary>
            Net NO3 mineralisation from residue decomposition
            </summary>
            <remarks>
            Net convertion of NO3 for residue mineralisation/immobilisation
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_n_min">
            <summary>
            Net FOM N mineralised (negative for immobilisation)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_hum_n_min">
            <summary>
            Net N mineralised for humic pool
            </summary>
            <remarks>
            Net humic N mineralised, negative for immobilisation
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_biom_n_min">
            <summary>
            Net N mineralised from m. biomass pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_n_min_tot">
            <summary>
            Total net N mineralised (residues plus soil OM)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_urea_hydrol">
            <summary>
            Nitrogen coverted by hydrolysis (from urea to NH4)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_rntrf">
            <summary>
            Nitrogen coverted by nitrification (from NH4 to either NO3 or N2O)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Nitrification">
            <summary>
            Nitrogen coverted by nitrification (from NH4 to either NO3 or N2O)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.effective_nitrification">
            <summary>
            Effective, or net, nitrogen coverted by nitrification (from NH4 to NO3)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_n2o_nitrif">
            <summary>
            N2O N produced during nitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_nh4_dnit">
            <summary>
            N2O N produced during nitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.n2o_atm_nitrification">
            <summary>
            N2O N produced during nitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_no3_dnit">
            <summary>
            NO3 N denitrified
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_n2o_dnit">
            <summary>
            N2O N produced during denitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.n2o_atm_denitrification">
            <summary>
            N2O N produced during denitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.n2o_atm">
            <summary>
            Total N2O amount produced today
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.n2_atm">
            <summary>
            Amount of N2 produced
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Denitrification">
            <summary>
            N converted by denitrification
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.nh4_deficit_immob">
            <summary>
            Excess N required above NH4 supply (for immobilisation)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.urea">
            <summary>
            Soil urea nitrogen amount (kgN/ha)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.Seturea(Models.SoluteManager.SoluteSetterType,System.Double[])">
            <summary>Setter for urea</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            The values passed, or in fact the deltas, need to be partitioned appropriately when there is more than one CNPatch
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="value">New values</param>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NH4">
            <summary>
            Soil ammonium nitrogen amount (kgN/ha)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetNH4(Models.SoluteManager.SoluteSetterType,System.Double[])">
            <summary>Setter for NH4</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            The values passed, or in fact the deltas, need to be partitioned appropriately when there is more than one CNPatch
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="value">New values</param>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.NO3">
            <summary>
            Soil nitrate nitrogen amount (kgN/ha)
            </summary>
        </member>
        <member name="M:Models.Soils.SoilNitrogen.SetNO3(Models.SoluteManager.SoluteSetterType,System.Double[])">
            <summary>Setter for NO3</summary>
            <remarks>
            This is necessary to allow the use of the SoilCNPatch capability
            The values passed, or in fact the deltas, need to be partitioned appropriately when there is more than one CNPatch
            </remarks>
            <param name="callingModelType">Type of calling model</param>
            <param name="value">New values</param>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.nh4_PlantAvailable">
            <summary>
            Soil ammonium nitrogen amount available to plants, limited per patch (kgN/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.no3_PlantAvailable">
            <summary>
            Soil nitrate nitrogen amount available to plants, limited per patch (kgN/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMN">
            <summary>
            Total nitrogen in FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_n_pool1">
            <summary>
            Nitrogen in FOM pool 1
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_n_pool2">
            <summary>
            Nitrogen in FOM pool 2
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_n_pool3">
            <summary>
            Nitrogen in FOM pool 3
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.HumicN">
            <summary>
            Soil humic N
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.IntertN">
            <summary>
            Inactive soil humic N
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MicrobialN">
            <summary>
            Soil biomass nitrogen
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.mineral_n">
            <summary>
            Soil mineral nitrogen
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.organic_n">
            <summary>
            Soil organic nitrogen, old style
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.TotalN">
            <summary>
            Total N in soil
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.nitrogenbalance">
            <summary>
            SoilN balance for nitrogen: deltaN - losses
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fr_carb">
            <summary>
            Carbohydrate fraction of FOM (0-1)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fr_cell">
            <summary>
            Cellulose fraction of FOM (0-1)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fr_lign">
            <summary>
            Lignin fraction of FOM (0-1)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_c_loss_in_sed">
            <summary>
            Carbon loss in sediment, via runoff/erosion
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_hum">
            <summary>
            Amount of C converted from FOM to humic (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_biom">
            <summary>
            Amount of C converted from FOM to m. biomass (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_atm">
            <summary>
            Amount of C lost to atmosphere from FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_hum_c_biom">
            <summary>
            Humic C converted to biomass
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_hum_c_atm">
            <summary>
            Humic C lost to atmosphere
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_biom_c_hum">
            <summary>
            Biomass C converted to humic
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_biom_c_atm">
            <summary>
            Biomass C lost to atmosphere
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_res_c_biom">
            <summary>
            Carbon from residues converted to biomass C
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_res_c_hum">
            <summary>
            Carbon from residues converted to humic C
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_res_c_atm">
            <summary>
            Carbon from residues lost to atmosphere during decomposition
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_pool1">
            <summary>
            Delta C in pool 1 of FOM - needed by SoilP
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_pool2">
            <summary>
            Delta C in pool 2 of FOM - needed by SoilP
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_fom_c_pool3">
            <summary>
            Delta C in pool 3 of FOM - needed by SoilP
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilp_dlt_res_c_biom">
            <summary>
            Carbon from all residues to m. biomass
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilp_dlt_res_c_hum">
            <summary>
            Carbon from all residues to humic pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilp_dlt_res_c_atm">
            <summary>
            Carbon lost from all residues to atmosphere
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.co2_atm">
            <summary>
            Total CO2 amount produced today in the soil
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.FOMC">
            <summary>
            Fresh organic C - FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_c_pool1">
            <summary>
            Amount of C in pool 1 of FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_c_pool2">
            <summary>
            Amount of C in pool 2 of FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.fom_c_pool3">
            <summary>
            Amount of C in pool 3 of FOM
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.HumicC">
            <summary>
            Amount of C in humic pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.InertC">
            <summary>
            Amount of C in inert humic pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.MicrobialC">
            <summary>
            Amount of C in m. biomass pool
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.waterSoluble_c">
            <summary>
            Amount of water soluble C
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.TotalC">
            <summary>
            Total carbon amount in the soil
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.carbonbalance">
            <summary>
            Balance of C in soil: deltaC - losses
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.soilp_dlt_org_p">
            <summary>
            amount of P coverted by residue mineralisation (needed by SoilP)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchCount">
            <summary>
            Number of internal patches
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchArea">
            <summary>
            Relative area of each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchName">
            <summary>
            Name of each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchAge">
            <summary>
            Age of each existing internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNLostInSediment">
            <summary>
            N carried out for each patch in sediment via runoff/erosion
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNMineralisedFromResidues">
            <summary>
            Total net N mineralisation from residue decomposition, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNMineralisedFromFOM">
            <summary>
            Total net FOM N mineralised, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNMineralisedFromHumus">
            <summary>
            Total net humic N mineralised, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNMineralisedFromMBiomass">
            <summary>
            Total net biomass N mineralised, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNMineralised">
            <summary>
            Total net N mineralised, for each patch (residues plus soil OM)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUreaHydrolysis">
            <summary>
            Total nitrogen coverted by hydrolysis, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNitrification">
            <summary>
            Total nitrogen coverted by nitrification, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalEffectiveNitrification">
            <summary>
            Total effective amount of NH4-N coverted into NO3 by nitrification, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalN2O_Nitrification">
            <summary>
            Total N2O N produced during nitrification, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3_Denitrification">
            <summary>
            Total NO3 N denitrified, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalN2O_Denitrification">
            <summary>
            Total N2O N produced during denitrification, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalN2OLostToAtmosphere">
            <summary>
            Total amount of N2O N produced, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalN2LostToAtmosphere">
            <summary>
            Total amount of N2 produced, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDenitrification">
            <summary>
            Total N converted by denitrification (all forms), for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUreaLeached">
            <summary>
            Total amount of urea changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4Leached">
            <summary>
            Total amount of NH4 changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3Leached">
            <summary>
            Total amount of NO3 changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUreaUptake">
            <summary>
            Total amount of urea taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4Uptake">
            <summary>
            Total amount of NH4 taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3Uptake">
            <summary>
            Total amount of NO3 taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUreaFertiliser">
            <summary>
            Total amount of urea added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4Fertiliser">
            <summary>
            Total amount of NH4 added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3Fertiliser">
            <summary>
            Total amount of NO3 added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUreaChangedOther">
            <summary>
            Total amount of urea changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4ChangedOther">
            <summary>
            Total amount of NH4 changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3ChangedOther">
            <summary>
            Total amount of NO3 changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNMineralisedFromResidues">
            <summary>
            Net N mineralisation from residue decomposition for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNMineralisedFromFOM">
            <summary>
            Net FOM N mineralised for each patch (negative for immobilisation)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNMineralisedFromHumus">
            <summary>
            Net N mineralised for humic pool for each patch (negative for immobilisation)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNMineralisedFromMBiomass">
            <summary>
            Net N mineralised from m. biomass pool for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNMineralisedTotal">
            <summary>
            Net total N mineralised for each patch (residues plus soil OM)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltUreaHydrolysis">
            <summary>
            Nitrogen coverted by hydrolysis (from urea to NH4) for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltNitrification">
            <summary>
            Nitrogen coverted by nitrification (from NH4 to either NO3 or N2O) for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchEffectiveDltNitrification">
            <summary>
            Effective, or net, nitrogen coverted by nitrification for each patch (from NH4 to NO3)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltN2O_Nitrification">
            <summary>
            N2O N produced during nitrification for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltNO3_Denitrification">
            <summary>
            NO3 N denitrified for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltN2O_Denitrification">
            <summary>
            N2O N produced during denitrification for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchN2OLostToAtmosphere">
            <summary>
            Total N2O amount produced for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchN2LostToAtmosphere">
            <summary>
            Amount of N2 produced for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_dnit">
            <summary>
            N converted by all forms of denitrification for each patch (to be deleted?)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltDenitrification">
            <summary>
            N converted by all forms of denitrification for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_UreaFlow">
            <summary>
            Amount of urea changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NH4Flow">
            <summary>
            Amount of NH4 changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NO3Flow">
            <summary>
            Amount of NO3 changed by the soil water module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_UreaUptake">
            <summary>
            Amount of urea taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NH4Uptake">
            <summary>
            Amount of NH4 taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NO3Uptake">
            <summary>
            Amount of NO3 taken up by any plant module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_UreaFertiliser">
            <summary>
            Amount of urea added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NH4Fertiliser">
            <summary>
            Amount of NH4 added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NO3Fertiliser">
            <summary>
            Amount of NO3 added by the fertiliser module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_UreaChangedOther">
            <summary>
            Amount of urea changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NH4ChangedOther">
            <summary>
            Amount of NH4 changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.Patch_NO3ChangedOther">
            <summary>
            Amount of NO3 changed by the any other module, for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchUrea">
            <summary>
            Amount of urea N in each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNH4">
            <summary>
            Amount of NH4 N in each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNO3">
            <summary>
            Amount of NO3 N in each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchPlantAvailableNH4">
            <summary>
            Amount of N as NH4 available to plants, in each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchPlantAvailableNO3">
            <summary>
            Amount of N as NO3 available to plants, in each internal patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalUrea">
            <summary>
            Total urea N in each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4">
            <summary>
            Total NH4 N in each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3">
            <summary>
            Total NO3 N in each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNH4_PlantAvailable">
            <summary>
            Total NH4 N available to plants in each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalNO3_PlantAvailable">
            <summary>
            Total NO3 N available to plants in each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchFOM_N">
            <summary>
            Total nitrogen in FOM for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchHum_N">
            <summary>
            Soil humic N for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchInert_N">
            <summary>
            Inactive soil humic N for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchBiom_N">
            <summary>
            Soil biomass nitrogen for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchSoilMineralN">
            <summary>
            Total mineral N in soil for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchSoilOrganicN">
            <summary>
            Total organic N in soil for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalN">
            <summary>
            Total N in soil for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalFOM_N">
            <summary>
            Total FOM N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalHum_N">
            <summary>
            Total Humic N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalInert_N">
            <summary>
            Total inert N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalBiom_N">
            <summary>
            Total biomass N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalSoilMineralN">
            <summary>
            Total mineral N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalSoilOrganicN">
            <summary>
            Total organic N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalSoilN">
            <summary>
            Total N in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchNitrogenBalance">
            <summary>
            SoilN balance for nitrogen, for each patch: deltaN - losses
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchCLostInSediment">
            <summary>
            Carbon loss in sediment for each patch, via runoff/erosion
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromFOMToHumus">
            <summary>
            Amount of C converted from FOM to humic for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromFOMToMBiomass">
            <summary>
            Amount of C converted from FOM to m. biomass for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromFOMToAtmosphere">
            <summary>
            Amount of C lost to atmosphere from FOM for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromHumusToMBiomass">
            <summary>
            Humic C converted to biomass for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromHumusToAtmosphere">
            <summary>
            Humic C lost to atmosphere for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromMBiomassToHumus">
            <summary>
            Biomass C converted to humic for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromMBiomassToAtmosphere">
            <summary>
            Biomass C lost to atmosphere for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromResiduesToMBiomass">
            <summary>
            Carbon from residues converted to biomass C for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromResiduesToHumus">
            <summary>
            Carbon from residues converted to humic C for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchDltCFromResiduesToAtmosphere">
            <summary>
            Carbon from residues lost to atmosphere for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchCO2Produced">
            <summary>
            Total CO2 amount produced in the soil for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromFOMToHumus">
            <summary>
            Total amount of C converted from FOM to humic for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromFOMToMBiomass">
            <summary>
            Total amount of C converted from FOM to m. biomass for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromFOMToAtmosphere">
            <summary>
            Total amount of FOM C lost to atmosphere for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromHumusToMBiomass">
            <summary>
            Total amount of humic C converted to m. biomass for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromHumusToAtmosphere">
            <summary>
            Total amount of humic C lost to atmosphere for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromMBiomassToHumus">
            <summary>
            Total amount of biomass C converted to humus for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromMBiomassToAtmosphere">
            <summary>
            Total amount of biomass C lost to atmosphere for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromResiduesToMBiomass">
            <summary>
            Total amount of C from residues converted to m. biomass for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromResiduesToHumus">
            <summary>
            Total amount of C from residues converted to humus for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalDltCFromResiduesToAtmosphere">
            <summary>
            Total amount of C from residues lost to atmosphere for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalCO2Produced">
            <summary>
            Total CO2 amount produced in the soil for each patch (kg/ha)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchFOM_C">
            <summary>
            Fresh organic C - FOM for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchHum_C">
            <summary>
            Amount of C in humic pool for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchInert_C">
            <summary>
            Amount of C in inert humic pool for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchBiom_C">
            <summary>
            Amount of C in m. biomass pool for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchWaterSolubleC">
            <summary>
            Amount of water soluble C for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalC">
            <summary>
            Total carbon amount in the soil for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalFOM_C">
            <summary>
            Total FOM C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalHum_C">
            <summary>
            Total Humic C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalInert_C">
            <summary>
            Total inert C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalBiom_C">
            <summary>
            Total biomass C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalWaterSolubleC">
            <summary>
            Total water soluble C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchTotalSoilC">
            <summary>
            Total C in the whole profile for each patch
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.PatchCarbonBalance">
            <summary>
            Balance of C in soil,  for each patch: deltaC - losses
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.epsilon">
            <summary>
            Value to evaluate precision against floating point variables.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.Patch">
            <summary>
            List of all existing patches (internal instances of C and N processes).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_dlayer">
            <summary>
            The soil layer thickness at the start of the simulation.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.dlayer">
            <summary>
            Soil layers' thichness (mm).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.nLayers">
            <summary>
            Number layers in the soil.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_oc">
            <summary>
            The initial OC content for each layer of the soil (%). Also used onReset.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_ureappm">
            <summary>
            Initial content of urea in each soil layer (ppm). Also used onReset.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_nh4ppm">
            <summary>
            Initial content of NH4 in each soil layer (ppm). Also used onReset.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_no3ppm">
            <summary>
            Initial content of NO3 in each soil layer (ppm). Also used onReset.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_urea">
            <summary>
            Variations in urea as given by another component.
            </summary>
            <remarks>
            This property checks changes in the amount of urea at each soil layer
             - If values are not supplied for all layers, these will be assumed zero
             - If values are supplied in excess, these will ignored
             - Each value is tested whether it is within bounds, then it is added to the actual amount, this amount is then tested for its bounds
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_nh4">
            <summary>
            Variations in nh4 as given by another component.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilNitrogen.dlt_no3">
            <summary>
            Variations in no3 as given by another component.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.initDone">
            <summary>
            Marker for whether initialisation has been finished or not.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.profileReductionAllowed">
            <summary>
            Indicates whether soil profile reduction is allowed (from erosion).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.organicSolutesAllowed">
            <summary>
            Indicates whether organic solutes are to be simulated.
            </summary>
            <remarks>
            It should always be false, as organic solutes are not implemented yet
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.residueName">
            <summary>
            Name of residues decomposing.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.residueType">
            <summary>
            Type of decomposing residue.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.pot_c_decomp">
            <summary>
            Potential residue C decomposition (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.pot_n_decomp">
            <summary>
            Potential residue N decomposition (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.pot_p_decomp">
            <summary>
            Potential residue P decomposition (kg/ha).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.TodaysInitialC">
            <summary>
            Total C content at the beginning of the day.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.TodaysInitialN">
            <summary>
            Total N content at the beginning of the day.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.FOMiniFraction">
            <summary>
            The initial FOM distribution, a 0-1 fraction for each layer.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fom_type">
            <summary>
            Type of FOM being used
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.nResidues">
            <summary>
            Number of surface residues whose decomposition is being calculated.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.fomPoolsCNratio">
            <summary>
            The C:N ratio of each fom pool.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.convFactor">
            <summary>
            Factor for converting kg/ha into ppm.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.inhibitionFactor_Nitrification">
            <summary>
            Factor reducing nitrification due to the presence of a inhibitor.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.minimumPatchArea">
            <summary>
            Minimum allowable relative area for a CNpatch (0-1).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.patchNPartitionApproach">
            <summary>
            Approach to use when partitioning dltN amongst patches.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.patchAutoAmalgamationAllowed">
            <summary>
            Whether auto amalgamation of patches is allowed.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.patchAmalgamationApproach">
            <summary>
            Approach to use for AutoAmalagamation (CompareAll, CompareBase, CompareMerge).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.patchAmalgamationByAgeAllowed">
            <summary>
            indicates whether an age check is used to force amalgamation of patches.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.forcedMergePatchAge">
            <summary>
            Age after which patches will be merged if AllowPatchAmalgamationByAge.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.patchbasePatchApproach">
            <summary>
            Approach to use for defining the base patch (IDBased, AreaBased).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.layerDepthToTestDiffs">
            <summary>
            Layer down to which test for diffs are made (upon auto amalgamation).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.senderModule">
            <summary>
            A description of the module sending a change in soil nitrogen (used for partitioning).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_MaximumNH4Uptake">
            <summary>
            Maximum NH4 uptake rate for plants (ppm/day) (only used when dealing with patches).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.reset_MaximumNO3Uptake">
            <summary>
            Maximum NO3 uptake rate for plants (ppm/day) (only used when dealing with patches).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.maximumNH4UptakeRate">
            <summary>
            Maximum NH4 uptake rate for plants (only used when dealing with patches).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.maximumNO3UptakeRate">
            <summary>
            Maximum NO3 uptake rate for plants (only used when dealing with patches).
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.maxTotalNAvailableToPlants">
            <summary>
            The maximum amount of N that is made available to plants in one day.
            </summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogen.BentStickData">
            <summary>
            The parameters to compute a exponential type function (used for example for temperature factor)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.BentStickData.xValueForOptimum">
            <summary>
            Optimum temperature, when factor is equal to one
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.BentStickData.yValueAtZero">
            <summary>
            Value of factor when temperature is equal to zero celsius
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.BentStickData.CurveExponent">
            <summary>
            Exponent defining the curvature of the factor
            </summary>
        </member>
        <member name="T:Models.Soils.SoilNitrogen.BrokenStickData">
            <summary>
            Lists of x and y values used to describe certain a 'broken stick' function (e.g. moisture factor)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.BrokenStickData.xVals">
            <summary>
            The values in the x-axis
            </summary>
        </member>
        <member name="F:Models.Soils.SoilNitrogen.BrokenStickData.yVals">
            <summary>
            The values in the y-axis
            </summary>
        </member>
        <member name="T:Models.Soils.NewProfileType">
            <summary>
            strucuture for data associated with the NewProfile event
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.dlayer">
            <summary>
            Array of layer depths
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.air_dry_dep">
            <summary>
            Array of air-dry values
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.ll15_dep">
            <summary>
            Array of -15 bar values
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.dul_dep">
            <summary>
            Array of drained upper limit values
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.sat_dep">
            <summary>
            Array of saturated values
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.sw_dep">
            <summary>
            Array of soil water values
            </summary>
        </member>
        <member name="F:Models.Soils.NewProfileType.bd">
            <summary>
            Array of bulk density values
            </summary>
        </member>
        <member name="T:Models.Soils.NewProfileDelegate">
            <summary>
            Delegate for issuing a NewProfile event
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.CNPatchPoolVariablePatchPoolType">
            <summary>
            CNPatchPoolVariablePatchPool
            </summary>
        </member>
        <member name="F:Models.Soils.CNPatchPoolVariablePatchPoolType.Value">
            <summary>The Value</summary>
        </member>
        <member name="T:Models.Soils.CNPatchPoolVariablePatchType">
            <summary>
            CNPatchPoolVariablePatch
            </summary>
        </member>
        <member name="F:Models.Soils.CNPatchPoolVariablePatchType.Pool">
            <summary>The Pool</summary>
        </member>
        <member name="T:Models.Soils.CNPatchPoolVariableType">
            <summary>
            CNPatchPoolVariableType
            </summary>
        </member>
        <member name="F:Models.Soils.CNPatchPoolVariableType.Patch">
            <summary>The Patch</summary>
        </member>
        <member name="T:Models.Soils.CNPatchVariablePatchType">
            <summary>
            CNPatchVariablePatchType
            </summary>
        </member>
        <member name="F:Models.Soils.CNPatchVariablePatchType.Value">
            <summary>The Value</summary>
        </member>
        <member name="T:Models.Soils.CNPatchVariablePatchDelegate">
            <summary>
            CNPatchVariablePatchDelegate
            </summary>
        </member>
        <member name="T:Models.Soils.CNPatchVariableType">
            <summary>
            CNPatchVariableType
            </summary>
        </member>
        <member name="F:Models.Soils.CNPatchVariableType.Patch">
            <summary>The Patch</summary>
        </member>
        <member name="T:Models.Soils.MergeSoilCNPatchType">
            <summary>
            MergeSoilCNPatchType
            </summary>
        </member>
        <member name="F:Models.Soils.MergeSoilCNPatchType.Sender">
            <summary>The sender</summary>
        </member>
        <member name="F:Models.Soils.MergeSoilCNPatchType.AffectedPatches_nm">
            <summary>The affected patches_nm</summary>
        </member>
        <member name="F:Models.Soils.MergeSoilCNPatchType.AffectedPatches_id">
            <summary>The affected patches_id</summary>
        </member>
        <member name="F:Models.Soils.MergeSoilCNPatchType.MergeAll">
            <summary>The merge all</summary>
        </member>
        <member name="F:Models.Soils.MergeSoilCNPatchType.SuppressMessages">
            <summary>Supress messages</summary>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchwithFOMFOMType">
            <summary>
            AddSoilCNPatchwithFOMFOM
            </summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMFOMType.Name">
            <summary>The Name</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMFOMType.Type">
            <summary>The Type</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMFOMType.Pool">
            <summary>The SoilOrganicMaterialType</summary>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchwithFOMFOMDelegate">
            <summary>
            AddSoilCNPatchwithFOMFOMDelegate
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchwithFOMType">
            <summary>
            AddSoilCNPatchwithFOM
            </summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.Sender">
            <summary>The Sender</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.SuppressMessages">
            <summary>The SuppressMessages</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.DepositionType">
            <summary>The DepositionType</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.AffectedPatches_nm">
            <summary>The AffectedPatches_nm</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.AffectedPatches_id">
            <summary>The AffectedPatches_id</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.AreaNewPatch">
            <summary>The AreaNewPatch</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.PatchName">
            <summary>The PatchName</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.Water">
            <summary>The Water</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.Urea">
            <summary>The Urea</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.NH4">
            <summary>The NH4</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.NO3">
            <summary>The NO3</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.POX">
            <summary>The POX</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.SO4">
            <summary>The SO4</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.AshAlk">
            <summary>The AshAlk</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchwithFOMType.FOM">
            <summary>The AddSoilCNPatchwithFOMFOMType</summary>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchwithFOMDelegate">
            <summary>
            AddSoilCNPatchwithFOMDelegate
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchType">
            <summary>
            AddSoilCNPatch
            </summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.Sender">
            <summary>The Sender</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.SuppressMessages">
            <summary>The SuppressMessages</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.DepositionType">
            <summary>The DepositionType</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.AffectedPatches_nm">
            <summary>The AffectedPatches_nm</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.AffectedPatches_id">
            <summary>The AffectedPatches_id</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.AreaFraction">
            <summary>The AreaFraction</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.PatchName">
            <summary>The PatchName</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.Water">
            <summary>The Water</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.Urea">
            <summary>The Urea</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.NH4">
            <summary>The NH4</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.NO3">
            <summary>The NO3</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.POX">
            <summary>The POX</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.SO4">
            <summary>The SO4</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.AshAlk">
            <summary>The AshAlk</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.FOM_C">
            <summary>The FOM_C</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.FOM_C_pool1">
            <summary>The FOM_C_pool1</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.FOM_C_pool2">
            <summary>The FOM_C_pool2</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.FOM_C_pool3">
            <summary>The FOM_C_pool3</summary>
        </member>
        <member name="F:Models.Soils.AddSoilCNPatchType.FOM_N">
            <summary>The FOM_N</summary>
        </member>
        <member name="T:Models.Soils.AddSoilCNPatchDelegate">
            <summary>
            AddSoilCNPatchDelegate
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.FOMType">
            <summary>
            FOMType
            </summary>
        </member>
        <member name="F:Models.Soils.FOMType.amount">
            <summary>The amount</summary>
        </member>
        <member name="F:Models.Soils.FOMType.C">
            <summary>The c</summary>
        </member>
        <member name="F:Models.Soils.FOMType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.Soils.FOMType.P">
            <summary>The p</summary>
        </member>
        <member name="F:Models.Soils.FOMType.AshAlk">
            <summary>The ash alk</summary>
        </member>
        <member name="T:Models.Soils.FOMPoolType">
            <summary>
            FOMPoolType
            </summary>
        </member>
        <member name="F:Models.Soils.FOMPoolType.Layer">
            <summary>The layer</summary>
        </member>
        <member name="T:Models.Soils.FOMLayerType">
            <summary>
            FOMLayerType
            </summary>
        </member>
        <member name="F:Models.Soils.FOMLayerType.Type">
            <summary>The type</summary>
        </member>
        <member name="F:Models.Soils.FOMLayerType.Layer">
            <summary>The layer</summary>
        </member>
        <member name="T:Models.Soils.FOMPoolLayerType">
            <summary>
            FOMPoolLayerType
            </summary>
        </member>
        <member name="F:Models.Soils.FOMPoolLayerType.thickness">
            <summary>The thickness</summary>
        </member>
        <member name="F:Models.Soils.FOMPoolLayerType.no3">
            <summary>The no3</summary>
        </member>
        <member name="F:Models.Soils.FOMPoolLayerType.nh4">
            <summary>The NH4</summary>
        </member>
        <member name="F:Models.Soils.FOMPoolLayerType.po4">
            <summary>The po4</summary>
        </member>
        <member name="F:Models.Soils.FOMPoolLayerType.Pool">
            <summary>The pool</summary>
        </member>
        <member name="T:Models.Soils.FOMLayerLayerType">
            <summary>
            FOMLayerLayerType
            </summary>
        </member>
        <member name="F:Models.Soils.FOMLayerLayerType.FOM">
            <summary>The fom</summary>
        </member>
        <member name="F:Models.Soils.FOMLayerLayerType.CNR">
            <summary>The CNR</summary>
        </member>
        <member name="F:Models.Soils.FOMLayerLayerType.LabileP">
            <summary>The labile p</summary>
        </member>
        <member name="T:Models.Soils.SurfaceOrganicMatterDecompPoolType">
            <summary>
            SurfaceOrganicMatterDecompPoolType
            </summary>
        </member>
        <member name="F:Models.Soils.SurfaceOrganicMatterDecompPoolType.Name">
            <summary>The name</summary>
        </member>
        <member name="F:Models.Soils.SurfaceOrganicMatterDecompPoolType.OrganicMatterType">
            <summary>The organic matter type</summary>
        </member>
        <member name="F:Models.Soils.SurfaceOrganicMatterDecompPoolType.FOM">
            <summary>The fom</summary>
        </member>
        <member name="T:Models.Soils.SurfaceOrganicMatterDecompType">
            <summary>
            SurfaceOrganicMatterDecompType
            </summary>
        </member>
        <member name="F:Models.Soils.SurfaceOrganicMatterDecompType.Pool">
            <summary>The pool</summary>
        </member>
        <member name="T:Models.Soils.FOMdecompData">
            <summary>
            FOMdecompData
            </summary>
        </member>
        <member name="F:Models.Soils.FOMdecompData.dlt_c_hum">
            <summary>The dlt_c_hum</summary>
        </member>
        <member name="F:Models.Soils.FOMdecompData.dlt_c_biom">
            <summary>The dlt_c_biom</summary>
        </member>
        <member name="F:Models.Soils.FOMdecompData.dlt_c_atm">
            <summary>The dlt_c_atm</summary>
        </member>
        <member name="F:Models.Soils.FOMdecompData.dlt_fom_n">
            <summary>The dlt_fom_n</summary>
        </member>
        <member name="F:Models.Soils.FOMdecompData.dlt_n_min">
            <summary>The dlt_n_min</summary>
        </member>
        <member name="T:Models.Soils.SoilOrganicMaterialType">
            <summary>
            SoilOrganicMaterial
            </summary>
            <remarks>
            This was a trial and was meant to replace FOM type (RCichota)
            </remarks>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.Name">
            <summary>The Name</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.Type">
            <summary>The Type</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.C">
            <summary>The C</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.N">
            <summary>The N</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.P">
            <summary>The P</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.S">
            <summary>The S</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMaterialType.AshAlk">
            <summary>The AshAlk</summary>
        </member>
        <member name="T:Models.Soils.SoilOrganicMaterialDelegate">
            <summary>
            SoilOrganicMaterialDelegate
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.NitrogenChangedType">
            <summary>
            NitrogenChangedType
            </summary>
        </member>
        <member name="F:Models.Soils.NitrogenChangedType.Sender">
            <summary>The sender</summary>
        </member>
        <member name="F:Models.Soils.NitrogenChangedType.SenderType">
            <summary>The sender type</summary>
        </member>
        <member name="F:Models.Soils.NitrogenChangedType.DeltaNO3">
            <summary>The delta n o3</summary>
        </member>
        <member name="F:Models.Soils.NitrogenChangedType.DeltaNH4">
            <summary>The delta n h4</summary>
        </member>
        <member name="F:Models.Soils.NitrogenChangedType.DeltaUrea">
            <summary>The delta urea</summary>
        </member>
        <member name="T:Models.Soils.NitrogenChangedDelegate">
            <summary>
            NitrogenChangedDelegate
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="T:Models.Soils.AddUrineType">
            <summary>
            AddUrineType
            </summary>
            <remarks>
            This was used in an early attempt to add excreta to SoilNitrogen in classic Apsim.
            It was never really implemented and was superseeded (partially anyways) by CNPatches
            It probably can be eliminated, or fully developed
            </remarks>
        </member>
        <member name="F:Models.Soils.AddUrineType.Urinations">
            <summary>The urinations</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.VolumePerUrination">
            <summary>The volume per urination</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.AreaPerUrination">
            <summary>The area per urination</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.Eccentricity">
            <summary>The eccentricity</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.Urea">
            <summary>The urea</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.POX">
            <summary>The pox</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.SO4">
            <summary>The s o4</summary>
        </member>
        <member name="F:Models.Soils.AddUrineType.AshAlk">
            <summary>The ash alk</summary>
        </member>
        <member name="T:Models.Soils.ExternalMassFlowType">
            <summary>
            ExternalMassFlowType
            </summary>
            <remarks>
            This was used in classic Apsim to send mass balance info to SysBal.
            It is not used currently, and perhaps should be deleted
            </remarks>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.PoolClass">
            <summary>The pool class</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.FlowType">
            <summary>The flow type</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.C">
            <summary>The c</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.P">
            <summary>The p</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.DM">
            <summary>The dm</summary>
        </member>
        <member name="F:Models.Soils.ExternalMassFlowType.SW">
            <summary>The sw</summary>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.Constants">
            <summary>
            Soil water constants
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.Summary">
            <summary>
            The summary
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.thismodel">
            <summary>
            The thismodel
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Constants.IssueWarning(System.String)">
            <summary>
            Issues the warning.
            </summary>
            <param name="warningText">The warning text.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Constants.bound(System.Double,System.Double,System.Double)">
            <summary>
            Bounds the specified a.
            </summary>
            <param name="A">a.</param>
            <param name="Lower">The lower.</param>
            <param name="Upper">The upper.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Constants.bound_check_real_var(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Bound_check_real_vars the specified variable.
            </summary>
            <param name="Variable">The variable.</param>
            <param name="LowerBound">The lower bound.</param>
            <param name="UpperBound">The upper bound.</param>
            <param name="VariableName">Name of the variable.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Constants.bound_check_real_array(System.Double[],System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Bound_check_real_arrays the specified a.
            </summary>
            <param name="A">a.</param>
            <param name="LowerBound">The lower bound.</param>
            <param name="UpperBound">The upper bound.</param>
            <param name="ArrayName">Name of the array.</param>
            <param name="ElementToStopChecking">The element to stop checking.</param>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.precision_sw_dep">
            <summary>
            The precision_sw_dep
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.ritchie_method">
            <summary>
            The ritchie_method
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.mm2m">
            <summary>
            The MM2M
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.sm2smm">
            <summary>
            The SM2SMM
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.error_margin">
            <summary>
            The error_margin
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.min_crit_temp">
            <summary>
            The min_crit_temp
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.max_crit_temp">
            <summary>
            The max_crit_temp
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.max_albedo">
            <summary>
            The max_albedo
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.A_to_evap_fact">
            <summary>
            The a_to_evap_fact
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.canopy_eos_coef">
            <summary>
            The canopy_eos_coef
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.sw_top_crit">
            <summary>
            The sw_top_crit
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.sumes1_max">
            <summary>
            The sumes1_max
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.sumes2_max">
            <summary>
            The sumes2_max
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.solute_flow_eff">
            <summary>
            The solute_flow_eff
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.solute_flux_eff">
            <summary>
            The solute_flux_eff
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.gravity_gradient">
            <summary>
            The gravity_gradient
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.specific_bd">
            <summary>
            The specific_bd
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.hydrol_effective_depth">
            <summary>
            The hydrol_effective_depth
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.mobile_solutes">
            <summary>
            The mobile_solutes
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.immobile_solutes">
            <summary>
            The immobile_solutes
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.canopy_fact">
            <summary>
            The canopy_fact
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.canopy_fact_height">
            <summary>
            The canopy_fact_height
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.canopy_fact_default">
            <summary>
            The canopy_fact_default
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Constants.act_evap_method">
            <summary>
            The act_evap_method
            </summary>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.CanopyData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.CanopyData.cover_tot">
            <summary>
            The cover_tot
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.CanopyData.cover_green">
            <summary>
            The cover_green
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.CanopyData.canopy_height">
            <summary>
            The canopy_height
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.CanopyData.NumberOfCrops">
            <summary>
            The number of crops
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.CanopyData.interception">
            <summary>
            The interception
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.CanopyData.cover_green_sum">
            <summary>
            Gets or sets the cover_green_sum.
            </summary>
            <value>
            The cover_green_sum.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.CanopyData.cover_tot_sum">
            <summary>
            Gets or sets the cover_tot_sum.
            </summary>
            <value>
            The cover_tot_sum.
            </value>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.CanopyData.ZeroCanopyData">
            <summary>
            Zeroes the canopy data.
            </summary>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.SurfaceCoverData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SurfaceCoverData.surfaceom_cover">
            <summary>
            The surfaceom_cover
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SurfaceCoverData.residueinterception">
            <summary>
            The residueinterception
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SurfaceCoverData.ZeroSurfaceCover">
            <summary>
            Zeroes the surface cover.
            </summary>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.IrrigData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.IrrigData.amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.IrrigData.isSubSurface">
            <summary>
            The is sub surface
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.IrrigData.layer">
            <summary>
            The layer
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.IrrigData.willRunoff">
            <summary>
            The will runoff
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.IrrigData.NO3">
            <summary>
            The n o3
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.IrrigData.NH4">
            <summary>
            The n h4
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.IrrigData.CL">
            <summary>
            The cl
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.IrrigData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Soils.SoilWaterBackend.IrrigData"/> class.
            </summary>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.MetData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.MetData.rain">
            <summary>
            The rain
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.MetData.radn">
            <summary>
            The radn
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.MetData.mint">
            <summary>
            The mint
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.MetData.maxt">
            <summary>
            The maxt
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.NormalRunoff.cover_surface_runoff">
            Effective total cover (0-1)
            residue cover + cover from any crops (tall or short)
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.SoluteInLayer">
            <summary>
            This is an individual solute in an individual layer of the Soil
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoluteInLayer.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoluteInLayer.ownerName">
            <summary>
            The owner name
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoluteInLayer.mobility">
            <summary>
            The mobility
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoluteInLayer.amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoluteInLayer.delta">
            <summary>
            The delta
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoluteInLayer.up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoluteInLayer.leach">
            <summary>
            The leach
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoluteInLayer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Soils.SoilWaterBackend.SoluteInLayer"/> class.
            </summary>
            <param name="Name">The name.</param>
            <param name="OwnerName">Name of the owner.</param>
            <param name="Mobility">if set to <c>true</c> [mobility].</param>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.Layer">
            <summary>
            This is an individual Layer of the Soil
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.CompareTo(System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="ObjectToCompareThisTo">The object to compare this to.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.#ctor(Models.Soils.SoilWaterBackend.SoilWaterSoil)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Soils.SoilWaterBackend.Layer"/> class.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.number">
            <summary>
            The number
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.dlayer">
            <summary>
            The dlayer
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.bd">
            <summary>
            The bd
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.sat">
            <summary>
            Gets or sets the sat.
            </summary>
            <value>
            The sat.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.dul">
            <summary>
            Gets or sets the dul.
            </summary>
            <value>
            The dul.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.ll15">
            <summary>
            Gets or sets the LL15.
            </summary>
            <value>
            The LL15.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.air_dry">
            <summary>
            Gets or sets the air_dry.
            </summary>
            <value>
            The air_dry.
            </value>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.Frac2MM(System.Double)">
            <summary>
            Frac2s the mm.
            </summary>
            <param name="Fraction">The fraction.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.MM2Frac(System.Double)">
            <summary>
            ms the m2 frac.
            </summary>
            <param name="MM">The mm.</param>
            <returns></returns>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.sat_dep">
            <summary>
            The sat_dep
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.dul_dep">
            <summary>
            The dul_dep
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.ll15_dep">
            <summary>
            The ll15_dep
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.air_dry_dep">
            <summary>
            The air_dry_dep
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.sw_dep">
            <summary>
            The sw_dep
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.sw">
            <summary>
            Gets or sets the sw.
            </summary>
            <value>
            The sw.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.esw">
            <summary>
            Gets the esw.
            </summary>
            <value>
            The esw.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.amnt_to_sat">
            <summary>
            Gets the amnt_to_sat.
            </summary>
            <value>
            The amnt_to_sat.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.amnt_to_dul">
            <summary>
            Gets the amnt_to_dul.
            </summary>
            <value>
            The amnt_to_dul.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.isDrainable">
            <summary>
            Gets a value indicating whether this instance is drainable.
            </summary>
            <value>
            <c>true</c> if this instance is drainable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.drainable_capacity">
            <summary>
            Gets the drainable_capacity.
            </summary>
            <value>
            The drainable_capacity.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.drainable">
            <summary>
            Gets the drainable.
            </summary>
            <value>
            The drainable.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.saturated_fraction">
            <summary>
            Gets the saturated_fraction.
            </summary>
            <value>
            The saturated_fraction.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.layer_is_fully_saturated">
            <summary>
            Gets a value indicating whether this <see cref="T:Models.Soils.SoilWaterBackend.Layer"/> is layer_is_fully_saturated.
            </summary>
            <value>
            <c>true</c> if layer_is_fully_saturated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.layer_is_saturated">
            <summary>
            Gets a value indicating whether this <see cref="T:Models.Soils.SoilWaterBackend.Layer"/> is layer_is_saturated.
            </summary>
            <value>
              <c>true</c> if layer_is_saturated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.ks">
            <summary>
            The ks
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.SWCON">
            <summary>
            The swcon
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.KLAT">
            <summary>
            The klat
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.flow">
            <summary>
            The flow
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.flux">
            <summary>
            The flux
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.flow_water">
            <summary>
            Gets the flow_water.
            </summary>
            <value>
            The flow_water.
            </value>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.outflow_lat">
            <summary>
            The outflow_lat
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.new_sw_dep">
            <summary>
            The new_sw_dep
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Layer.solutes">
            <summary>
            The solutes
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Layer.num_solutes">
            <summary>
            Gets the num_solutes.
            </summary>
            <value>
            The num_solutes.
            </value>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.AddSolute(Models.Soils.SoilWaterBackend.SoluteInLayer)">
            <summary>
            Adds the solute.
            </summary>
            <param name="NewSolute">The new solute.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.RemoveSolute(System.String)">
            <summary>
            Removes the solute.
            </summary>
            <param name="SoluteName">Name of the solute.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.GetASolute(System.String)">
            <summary>
            Gets a solute.
            </summary>
            <param name="SoluteName">Name of the solute.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.GetAllSolutes">
            <summary>
            Gets all solutes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.GetAllMobileSolutes">
            <summary>
            Gets all mobile solutes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.GetMobileSoluteNames">
            <summary>
            Gets the mobile solute names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Layer.ZeroMobileSolutesDeltas">
            <summary>
            Zeroes the mobile solutes deltas.
            </summary>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.SoilWaterSoil">
            <summary>
            The Soil.
            (Also contains methods for modifying the soil
            as well as the natural movement of water/solutes within the soil)
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.Constants">
            <summary>
            The constants
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.using_ks">
            <summary>
            The using_ks
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.SummerDate">
            <summary>
            The summer date
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.SummerU">
            <summary>
            The summer u
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.SummerCona">
            <summary>
            The summer cona
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.WinterDate">
            <summary>
            The winter date
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.WinterU">
            <summary>
            The winter u
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.WinterCona">
            <summary>
            The winter cona
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.DiffusConst">
            <summary>
            The diffus constant
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.DiffusSlope">
            <summary>
            The diffus slope
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.Salb">
            <summary>
            The salb
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.cn2_bare">
            <summary>
            The cn2_bare
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.cn_red">
            <summary>
            The cn_red
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.cn_cov">
            <summary>
            The cn_cov
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.slope">
            <summary>
            The slope
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.discharge_width">
            <summary>
            The discharge_width
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.catchment_area">
            <summary>
            The catchment_area
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.max_pond">
            <summary>
            The max_pond
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.DepthToWaterTable">
            <summary>
            The depth to water table
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.Drainage">
            <summary>
            The drainage
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.LeachNO3">
            <summary>
            Leaching from bottom layer (kg/ha)
            </summary>
            <value>
            The leach n o3.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.LeachNH4">
            <summary>
            Leaching from bottom layer (kg/ha)
            </summary>
            <value>
            The leach n h4.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.LeachUrea">
            <summary>
            Leaching from bottom layer (kg/ha)
            </summary>
            <value>
            The leach urea.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.esw">
            <summary>
            Gets the esw.
            </summary>
            <value>
            The esw.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.sw_dep">
            <summary>
            Gets the sw_dep.
            </summary>
            <value>
            The sw_dep.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.sw">
            <summary>
            Gets the sw.
            </summary>
            <value>
            The sw.
            </value>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.CalculateSW">
            <summary>Calculate the SW variables if needed.</summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.OnSWChange">
            <summary>Callled to indicate that the SW variables need to be recalculated.</summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.flow">
            <summary>
            Gets the flow.
            </summary>
            <value>
            The flow.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.flux">
            <summary>
            Gets the flux.
            </summary>
            <value>
            The flux.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.outflow_lat">
            <summary>
            Gets the outflow_lat.
            </summary>
            <value>
            The outflow_lat.
            </value>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.GetFlowArrayForASolute(System.String)">
            <summary>
            Gets the flow array for a solute.
            </summary>
            <param name="SoluteName">Name of the solute.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.GetDeltaArrayForASolute(System.String)">
            <summary>
            Gets the delta array for a solute.
            </summary>
            <param name="SoluteName">Name of the solute.</param>
            <returns></returns>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.SoilWaterSoil.layers">
            <summary>
            The layers
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.top">
            <summary>
            Gets the top.
            </summary>
            <value>
            The top.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.bottom">
            <summary>
            Gets the bottom.
            </summary>
            <value>
            The bottom.
            </value>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.GetEnumerator">
            <summary>
            Default Iterator from top layer to bottom layer.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.BottomToTop">
            <summary>
            Iterator from bottom layer to top layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.TopToX(System.Int32)">
            <summary>
            Iterator from top layer to X layer.
            Including layer X.
            </summary>
            <param name="X">X is 1 based</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.XToTop(System.Int32)">
            <summary>
            Iterator from X layer to top layer.
            Including layer X.
            </summary>
            <param name="X">X is 1 based</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.XToBottom(System.Int32)">
            <summary>
            Iterator from X layer to bottom layer.
            Including layer X.
            </summary>
            <param name="X">X is 1 based</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.BottomToX(System.Int32)">
            <summary>
            Iterator from bottom layer to layer X.
            Including layer X.
            </summary>
            <param name="X">X is 1 based</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.GetTopLayer">
            <summary>
            Gets the top layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.GetLayer(System.Int32)">
            <summary>
            Returns the specified layer
            </summary>
            <param name="LayerNumber">LayerNumber is 1 based</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.GetBottomLayer">
            <summary>
            Gets the bottom layer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.num_layers">
            <summary>
            Gets the num_layers.
            </summary>
            <value>
            The num_layers.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.SoilWaterSoil.DepthTotal">
            <summary>
            Gets the depth total.
            </summary>
            <value>
            The depth total.
            </value>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.DepthDownToBottomOfLayer(System.Int32)">
            <summary>
            Depthes down to bottom of layer.
            </summary>
            <param name="LayerNumber">The layer number.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.FindLayerNo(System.Double)">
            <summary>
            Find the layer number of the specified depth.
            </summary>
            <param name="Depth">The depth.</param>
            <returns>
            1 based Layer Number
            </returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.GetMobileSoluteNames">
            <summary>
            Gets the mobile solute names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.GetAllSolutesInALayer">
            <summary>
            Gets all solutes in a layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.UpdateSoluteAmounts(System.String,System.Double[])">
            <summary>
            Updates the solute amounts.
            </summary>
            <param name="SoluteName">Name of the solute.</param>
            <param name="Amounts">The amounts.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.AddSubSurfaceIrrigToSoil(Models.Soils.SoilWaterBackend.IrrigData)">
            <summary>
            Adds the sub surface irrig to soil.
            </summary>
            <param name="Irrig">The irrig.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.SetWater_mm(System.Double[])">
            <summary>
            Sets the water_mm.
            </summary>
            <param name="New_SW_dep">The new_ s w_dep.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.SetWater_mm(System.Int32,System.Double)">
            <summary>
            Sets the water_mm.
            </summary>
            <param name="Layer">Zero Based Layer Number</param>
            <param name="SW_dep">New Value</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.SetWater_frac(System.Double[])">
            <summary>
            Sets the water_frac.
            </summary>
            <param name="New_SW">The new_ sw.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.DeltaWater_mm(System.Double[])">
            <summary>
            Deltas the water_mm.
            </summary>
            <param name="Delta_mm">The delta_mm.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.DeltaWater_frac(System.Double[])">
            <summary>
            Deltas the water_frac.
            </summary>
            <param name="Delta_frac">The delta_frac.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.CheckSoilForErrors">
            <summary>
            Checks the soil for errors.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.CheckLayerForErrors(System.Int32)">
            <summary>
            Checks the specified layer for any Errors
            </summary>
            <param name="LayerNumber">LayerNumber is One Based</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.#ctor(Models.Soils.SoilWaterBackend.Constants,Models.Soils.Soil)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Soils.SoilWaterBackend.SoilWaterSoil"/> class.
            </summary>
            <param name="Consts">The consts.</param>
            <param name="Soil">The soil.</param>
            <exception cref="T:System.Exception">Constructor for SoilWaterSoil failed because there are no layers</exception>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.ResetSoil(Models.Soils.SoilWaterBackend.Constants,Models.Soils.Soil)">
            <summary>
            Resets the soil.
            </summary>
            <param name="Consts">The consts.</param>
            <param name="Soil">The soil.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.UseStartingValuesToInitialise(Models.Soils.Soil)">
            <summary>
            Uses the starting values to initialise.
            </summary>
            <param name="Soil">The soil.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.ZeroOutputs">
            <summary>
            Zeroes the outputs.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.ZeroSoilOutputs">
            <summary>
            Zeroes the soil outputs.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.ZeroLayerDeltas">
            <summary>
            Zeroes the layer deltas.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.ZeroLayerTemporaryVars">
            <summary>
            Zeroes the layer temporary vars.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.Calc_Saturated_Flow">
            <summary>
            Calc_s the saturated_ flow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.Do_Saturated_Flow">
            <summary>
            Do_s the saturated_ flow.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.Calc_Unsaturated_Flow">
            <summary>
            Calc_s the unsaturated_ flow.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.Do_Unsaturated_Flow">
            <summary>
            Do_s the unsaturated_ flow.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.AddSolutesDueToIrrigation(Models.Soils.SoilWaterBackend.IrrigData)">
            <summary>
            Adds the solutes due to irrigation.
            </summary>
            <param name="Irrig">The irrig.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.Calc_Solute_Leach_SatFlow(System.String)">
            <summary>
            Calc_s the solute_ leach_ sat flow.
            </summary>
            <param name="SoluteName">Name of the solute.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.Calc_Solute_Up_UnsatFlow(System.String)">
            <summary>
            Calc_s the solute_ up_ unsat flow.
            </summary>
            <param name="SoluteName">Name of the solute.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.MoveDownSolute(System.String)">
            <summary>
            Moves down solute.
            </summary>
            <param name="SoluteName">Name of the solute.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.MoveUpSolute(System.String)">
            <summary>
            Moves up solute.
            </summary>
            <param name="SoluteName">Name of the solute.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.Do_Solutes_SatFlow">
            <summary>
            Do_s the solutes_ sat flow.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.Do_Solutes_UnsatFlow">
            <summary>
            Do_s the solutes_ unsat flow.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.Calc_DepthToWaterTable">
            <summary>
            Calc_s the depth to water table.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.SetWaterTable(System.Double)">
            <summary>
            Sets the water table.
            </summary>
            <param name="InitialDepth">The initial depth.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SoilWaterSoil.Do_Lateral_Flow(System.Double[])">
            <summary>
            Do_s the lateral_ flow.
            </summary>
            <param name="Inflow_lat">The inflow_lat.</param>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.Surfaces">
            <summary>
            Surfaces enumeration
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surfaces.NormalSurface">
            <summary>
            The normal surface
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surfaces.PondSurface">
            <summary>
            The pond surface
            </summary>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.Surface">
            <summary>
            A surface class.
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.SurfaceType">
            <summary>
            The surface type
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.Runoff">
            <summary>
            The runoff
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.Infiltration">
            <summary>
            The infiltration
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Surface.Eo">
            <summary>
            Gets or sets the eo.
            </summary>
            <value>
            The eo.
            </value>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.Eos">
            <summary>
            The eos
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.Es">
            <summary>
            The es
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Surface.CalcRunoff">
            <summary>
            Calculates the runoff.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Surface.CalcInfiltration">
            <summary>
            Calculates the infiltration.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Surface.CalcEvaporation">
            <summary>
            Calculates the evaporation.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Surface.AddInfiltrationToSoil(Models.Soils.SoilWaterBackend.SoilWaterSoil@)">
            <summary>
            Adds the infiltration to soil.
            </summary>
            <param name="SoilOject">The soil oject.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Surface.RemoveEvaporationFromSoil(Models.Soils.SoilWaterBackend.SoilWaterSoil@)">
            <summary>
            Removes the evaporation from soil.
            </summary>
            <param name="SoilObject">The soil object.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.Surface.AddBackedUpWaterToSurface(System.Double,Models.Soils.SoilWaterBackend.SoilWaterSoil@)">
            <summary>
            Adds the backed up water to surface.
            </summary>
            <param name="BackedUp">The backed up.</param>
            <param name="SoilObject">The soil object.</param>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.constants">
            <summary>
            The constants
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.Met">
            <summary>
            The met
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.Runon">
            <summary>
            The runon
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.Irrig">
            <summary>
            The irrig
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.Canopy">
            <summary>
            The canopy
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.SurfaceCover">
            <summary>
            The surface cover
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.Surface.SoilObject">
            <summary>
            The soil object
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Surface.TodaysWaterForRunoff">
            <summary>
            Gets the todays water for runoff.
            </summary>
            <value>
            The todays water for runoff.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWaterBackend.Surface.TodaysWaterForInfiltration">
            <summary>
            Gets the todays water for infiltration.
            </summary>
            <value>
            The todays water for infiltration.
            </value>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.SurfaceFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.SurfaceFactory.GetSurface(Models.Soils.SoilWaterBackend.SoilWaterSoil,Models.Clock)">
            <summary>
            Gets the surface.
            </summary>
            <param name="SoilObject">The soil object.</param>
            <param name="Clock">The clock.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.NormalSurface">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.NormalSurface.cover_surface_runoff">
            <summary>
            The cover_surface_runoff
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.NormalSurface.cn2_new">
            <summary>
            The cn2_new
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.NormalSurface.sumes1">
            <summary>
            The sumes1
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.NormalSurface.sumes2">
            <summary>
            The sumes2
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.NormalSurface.t">
            <summary>
            The t
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.NormalSurface.runoff">
            <summary>
            The runoff
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.NormalSurface.evap">
            <summary>
            The evap
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.NormalSurface.#ctor(Models.Soils.SoilWaterBackend.SoilWaterSoil,Models.Clock)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Soils.SoilWaterBackend.NormalSurface"/> class.
            </summary>
            <param name="SoilObject">The soil object.</param>
            <param name="Clock">The clock.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.NormalSurface.CalcRunoff">
            <summary>
            Calculates the runoff.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.NormalSurface.CalcInfiltration">
            <summary>
            Calculates the infiltration.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.NormalSurface.CalcEvaporation">
            <summary>
            Calculates the evaporation.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.NormalSurface.AddInfiltrationToSoil(Models.Soils.SoilWaterBackend.SoilWaterSoil@)">
            <summary>
            Adds the infiltration to soil.
            </summary>
            <param name="SoilObject">The soil object.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.NormalSurface.RemoveEvaporationFromSoil(Models.Soils.SoilWaterBackend.SoilWaterSoil@)">
            <summary>
            Removes the evaporation from soil.
            </summary>
            <param name="SoilObject">The soil object.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.NormalSurface.AddBackedUpWaterToSurface(System.Double,Models.Soils.SoilWaterBackend.SoilWaterSoil@)">
            <summary>
            Adds the backed up water to surface.
            </summary>
            <param name="BackedUp">The backed up.</param>
            <param name="SoilObject">The soil object.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.NormalSurface.UpdateTillageCnRedVars(System.Double,System.Double)">
            <summary>
            Updates the tillage cn red vars.
            </summary>
            <param name="CumWater">The cum water.</param>
            <param name="Reduction">The reduction.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.NormalSurface.ResetCumWaterSinceTillage">
            <summary>
            Resets the cum water since tillage.
            </summary>
        </member>
        <member name="T:Models.Soils.SoilWaterBackend.PondSurface">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.PondSurface.pond">
            <summary>
            The pond
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWaterBackend.PondSurface.pond_evap">
            <summary>
            The pond_evap
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.PondSurface.#ctor(Models.Soils.SoilWaterBackend.SoilWaterSoil,Models.Clock)">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Soils.SoilWaterBackend.PondSurface"/> class.
            </summary>
            <param name="SoilObject">The soil object.</param>
            <param name="Clock">The clock.</param>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.PondSurface.CalcRunoff">
            <summary>
            Calculates the runoff.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.PondSurface.CalcInfiltration">
            <summary>
            Calculates the infiltration.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.PondSurface.CalcEvaporation">
            <summary>
            Calculates the evaporation.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWaterBackend.PondSurface.AddBackedUpWaterToSurface(System.Double,Models.Soils.SoilWaterBackend.SoilWaterSoil@)">
            <summary>
            Adds the backed up water to surface.
            </summary>
            <param name="BackedUp">The backed up.</param>
            <param name="SoilObject">The soil object.</param>
        </member>
        <member name="T:Models.Soils.IrrigationApplicationType">
            <summary>
            Irrigation application type
            </summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.Amount">
            <summary>The amount to apply (mm).</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.Depth">
            <summary>The depth of application (mm).</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.Duration">
            <summary>The duration of irrigation event (minutes).</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.WillRunoff">
            <summary>Whether irrigation can run off.</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.NO3">
            <summary>The n o3</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.NH4">
            <summary>The n h4</summary>
        </member>
        <member name="F:Models.Soils.IrrigationApplicationType.CL">
            <summary>The cl</summary>
        </member>
        <member name="T:Models.Soils.Analysis">
            <summary>
            This class captures data from a soil analysis
            </summary>
        </member>
        <member name="P:Models.Soils.Analysis.Thickness">
            <summary>Gets or sets the thickness.</summary>
            <value>The thickness.</value>
        </member>
        <member name="P:Models.Soils.Analysis.Depth">
            <summary>Gets or sets the depth.</summary>
            <value>The depth.</value>
        </member>
        <member name="P:Models.Soils.Analysis.Rocks">
            <summary>Gets or sets the rocks.</summary>
            <value>The rocks.</value>
        </member>
        <member name="P:Models.Soils.Analysis.RocksMetadata">
            <summary>Gets or sets the rocks metadata.</summary>
            <value>The rocks metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.Texture">
            <summary>Gets or sets the texture.</summary>
            <value>The texture.</value>
        </member>
        <member name="P:Models.Soils.Analysis.TextureMetadata">
            <summary>Gets or sets the texture metadata.</summary>
            <value>The texture metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.MunsellColour">
            <summary>Gets or sets the munsell colour.</summary>
            <value>The munsell colour.</value>
        </member>
        <member name="P:Models.Soils.Analysis.MunsellMetadata">
            <summary>Gets or sets the munsell metadata.</summary>
            <value>The munsell metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.EC">
            <summary>Gets or sets the ec.</summary>
            <value>The ec.</value>
        </member>
        <member name="P:Models.Soils.Analysis.ECMetadata">
            <summary>Gets or sets the ec metadata.</summary>
            <value>The ec metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.PH">
            <summary>Gets or sets the ph.</summary>
            <value>The ph.</value>
        </member>
        <member name="P:Models.Soils.Analysis.PHMetadata">
            <summary>Gets or sets the ph metadata.</summary>
            <value>The ph metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.CL">
            <summary>Gets or sets the cl.</summary>
            <value>The cl.</value>
        </member>
        <member name="P:Models.Soils.Analysis.CLMetadata">
            <summary>Gets or sets the cl metadata.</summary>
            <value>The cl metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.Boron">
            <summary>Gets or sets the boron.</summary>
            <value>The boron.</value>
        </member>
        <member name="P:Models.Soils.Analysis.BoronMetadata">
            <summary>Gets or sets the boron metadata.</summary>
            <value>The boron metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.CEC">
            <summary>Gets or sets the cec.</summary>
            <value>The cec.</value>
        </member>
        <member name="P:Models.Soils.Analysis.CECMetadata">
            <summary>Gets or sets the cec metadata.</summary>
            <value>The cec metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.Ca">
            <summary>Gets or sets the ca.</summary>
            <value>The ca.</value>
        </member>
        <member name="P:Models.Soils.Analysis.CaMetadata">
            <summary>Gets or sets the ca metadata.</summary>
            <value>The ca metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.Mg">
            <summary>Gets or sets the mg.</summary>
            <value>The mg.</value>
        </member>
        <member name="P:Models.Soils.Analysis.MgMetadata">
            <summary>Gets or sets the mg metadata.</summary>
            <value>The mg metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.Na">
            <summary>Gets or sets the na.</summary>
            <value>The na.</value>
        </member>
        <member name="P:Models.Soils.Analysis.NaMetadata">
            <summary>Gets or sets the na metadata.</summary>
            <value>The na metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.K">
            <summary>Gets or sets the k.</summary>
            <value>The k.</value>
        </member>
        <member name="P:Models.Soils.Analysis.KMetadata">
            <summary>Gets or sets the k metadata.</summary>
            <value>The k metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.ESP">
            <summary>Gets or sets the esp.</summary>
            <value>The esp.</value>
        </member>
        <member name="P:Models.Soils.Analysis.ESPMetadata">
            <summary>Gets or sets the esp metadata.</summary>
            <value>The esp metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.Mn">
            <summary>Gets or sets the mn.</summary>
            <value>The mn.</value>
        </member>
        <member name="P:Models.Soils.Analysis.MnMetadata">
            <summary>Gets or sets the mn metadata.</summary>
            <value>The mn metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.Al">
            <summary>Gets or sets the al.</summary>
            <value>The al.</value>
        </member>
        <member name="P:Models.Soils.Analysis.AlMetadata">
            <summary>Gets or sets the al metadata.</summary>
            <value>The al metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.ParticleSizeSand">
            <summary>Gets or sets the particle size sand.</summary>
            <value>The particle size sand.</value>
        </member>
        <member name="P:Models.Soils.Analysis.ParticleSizeSandMetadata">
            <summary>Gets or sets the particle size sand metadata.</summary>
            <value>The particle size sand metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.ParticleSizeSilt">
            <summary>Gets or sets the particle size silt.</summary>
            <value>The particle size silt.</value>
        </member>
        <member name="P:Models.Soils.Analysis.ParticleSizeSiltMetadata">
            <summary>Gets or sets the particle size silt metadata.</summary>
            <value>The particle size silt metadata.</value>
        </member>
        <member name="P:Models.Soils.Analysis.ParticleSizeClay">
            <summary>Gets or sets the particle size clay.</summary>
            <value>The particle size clay.</value>
        </member>
        <member name="P:Models.Soils.Analysis.ParticleSizeClayMetadata">
            <summary>Gets or sets the particle size clay metadata.</summary>
            <value>The particle size clay metadata.</value>
        </member>
        <member name="T:Models.Soils.Analysis.PHUnitsEnum">
            <summary>
            An enumerated type for ph units
            </summary>
        </member>
        <member name="F:Models.Soils.Analysis.PHUnitsEnum.Water">
            <summary>water</summary>
        </member>
        <member name="F:Models.Soils.Analysis.PHUnitsEnum.CaCl2">
            <summary>CaCl2</summary>
        </member>
        <member name="P:Models.Soils.Analysis.PHUnits">
            <summary>Gets or sets the ph units.</summary>
            <value>The ph units.</value>
        </member>
        <member name="M:Models.Soils.Analysis.PHUnitsSet(Models.Soils.Analysis.PHUnitsEnum)">
            <summary>Phes the units set.</summary>
            <param name="ToUnits">To units.</param>
        </member>
        <member name="T:Models.Soils.Analysis.BoronUnitsEnum">
            <summary>
            Boron units
            </summary>
        </member>
        <member name="F:Models.Soils.Analysis.BoronUnitsEnum.HotWater">
            <summary>hot water</summary>
        </member>
        <member name="F:Models.Soils.Analysis.BoronUnitsEnum.HotCaCl2">
            <summary>hot ca CL2</summary>
        </member>
        <member name="P:Models.Soils.Analysis.BoronUnits">
            <summary>Gets or sets the boron units.</summary>
            <value>The boron units.</value>
        </member>
        <member name="M:Models.Soils.Analysis.BoronUnitsSet(Models.Soils.Analysis.BoronUnitsEnum)">
            <summary>Borons the units set.</summary>
            <param name="ToUnits">To units.</param>
        </member>
        <member name="P:Models.Soils.Analysis.PHWater">
            <summary>PH. Units: (1:5 water)</summary>
            <value>The ph water.</value>
        </member>
        <member name="T:Models.Soils.InitialWater">
            <summary>
            Represents the simulation initial water status. There are multiple ways
            of specifying the starting water; 1) by a fraction of a full profile, 2) by depth of
            wet soil or 3) a single value of plant available water.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.Soil">
            <summary>
            Gets the parent soil model.
            </summary>
        </member>
        <member name="F:Models.Soils.InitialWater.fractionFull">
            <summary>
            The fraction of a full profile.
            </summary>
        </member>
        <member name="F:Models.Soils.InitialWater.depthOfWetSoil">
            <summary>
            The depth of wet soil.
            </summary>
        </member>
        <member name="T:Models.Soils.InitialWater.PercentMethodEnum">
            <summary>
            An enumeration for soil water distribution used by the percent full
            method.
            </summary>
        </member>
        <member name="F:Models.Soils.InitialWater.PercentMethodEnum.FilledFromTop">
            <summary>
            Represents filled from the top of the profile
            </summary>
        </member>
        <member name="F:Models.Soils.InitialWater.PercentMethodEnum.EvenlyDistributed">
            <summary>
            Represents evenly distribution down the profile.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.PercentMethod">
            <summary>
            Gets or sets the distribution method for the percent full method.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.FractionFull">
            <summary>
            Gets or sets the fraction of a full profile. If NaN is returned then
            the depth of wet soil is the specified method.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.DepthWetSoil">
            <summary>
            Gets or sets the depth of wet soil (mm). If NaN is returned then
            fraction full is the specified method.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.PAW">
            <summary>
            Gets or sets the plant available water content
            </summary>
        </member>
        <member name="M:Models.Soils.InitialWater.PAWCCrop(System.String)">
            <summary>
            Return the plant available water CAPACITY. Units: mm/mm
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.RelativeTo">
            <summary>
            Gets or sets the crop that starting plant available water is relative to.
            </summary>
        </member>
        <member name="P:Models.Soils.InitialWater.RelativeToCrops">
            <summary>
            Gets the crop names that are permissible in the 'RelativeTo' property.
            </summary>
        </member>
        <member name="M:Models.Soils.InitialWater.SW(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Calculate a layered soil water. Units: mm/mm
            </summary>
            <param name="thickness">Thickness of each layer</param>
            <param name="ll">Lower limit</param>
            <param name="dul">Drained upper limit</param>
            <param name="xf">Exploratory factor</param>
            <returns>A double array of volumetric soil water values (mm/mm)</returns>
        </member>
        <member name="M:Models.Soils.InitialWater.SWFilledFromTop(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Calculate a layered soil water using a FractionFull and filled from the top
            </summary>
            <param name="thickness">Thickness of each layer</param>
            <param name="ll">Lower limit</param>
            <param name="dul">Drained upper limit</param>
            <param name="xf">Exploratory factor</param>
            <returns>A double array of volumetric soil water values (mm/mm)</returns>
        </member>
        <member name="M:Models.Soils.InitialWater.SWEvenlyDistributed(System.Double[],System.Double[])">
            <summary>
            Calculate a layered soil water using a FractionFull and evenly distributed. Units: mm/mm
            </summary>
            <param name="ll">Lower limit</param>
            <param name="dul">Drained upper limit</param>
            <returns>A double array of volumetric soil water values (mm/mm)</returns>
        </member>
        <member name="M:Models.Soils.InitialWater.SWDepthWetSoil(System.Double[],System.Double[],System.Double[])">
            <summary>
            Calculate a layered soil water using a depth of wet soil. Units: mm/mm
            </summary>
            <param name="thickness">Thickness of each layer</param>
            <param name="ll">Lower limit</param>
            <param name="dul">Drained upper limit</param>
            <returns>A double array of volumetric soil water values (mm/mm)</returns>
        </member>
        <member name="M:Models.Soils.InitialWater.TotalSoilDepth">
            <summary>
            Returns the total depth of the soil, in mm
            </summary>
            <returns>Total soil depth</returns>
        </member>
        <member name="T:Models.Soils.LayerStructure">
            <summary>
            A model for holding layer structure information
            </summary>
        </member>
        <member name="P:Models.Soils.LayerStructure.Depth">
            <summary>The depth boundaries of each layer</summary>
            <value>The thickness.</value>
        </member>
        <member name="P:Models.Soils.LayerStructure.Thickness">
            <summary>Gets or sets the thickness.</summary>
            <value>The thickness.</value>
        </member>
        <member name="T:Models.Soils.Phosphorus">
            <summary>
            Model for holding information about the phosphorus model
            </summary>
        </member>
        <member name="P:Models.Soils.Phosphorus.RootCP">
            <summary>Gets or sets the root cp.</summary>
            <value>The root cp.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.RateDissolRock">
            <summary>Gets or sets the rate dissol rock.</summary>
            <value>The rate dissol rock.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.RateLossAvail">
            <summary>Gets or sets the rate loss avail.</summary>
            <value>The rate loss avail.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.SorptionCoeff">
            <summary>Gets or sets the sorption coeff.</summary>
            <value>The sorption coeff.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.Thickness">
            <summary>Gets or sets the thickness.</summary>
            <value>The thickness.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.LabileP">
            <summary>Gets or sets the labile p.</summary>
            <value>The labile p.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.Sorption">
            <summary>Gets or sets the sorption.</summary>
            <value>The sorption.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.BandedP">
            <summary>Gets or sets the banded p.</summary>
            <value>The banded p.</value>
        </member>
        <member name="P:Models.Soils.Phosphorus.RockP">
            <summary>Gets or sets the rock p.</summary>
            <value>The rock p.</value>
        </member>
        <member name="T:Models.Soils.Sample">
            <summary>
            The class represents a soil sample.
            </summary>
        </member>
        <member name="M:Models.Soils.Sample.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Soils.Sample" /> class.
            </summary>
        </member>
        <member name="T:Models.Soils.Sample.NUnitsEnum">
            <summary>
            An enumeration for specifying nitrogen units.
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.NUnitsEnum.ppm">
            <summary>
            parts per million
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.NUnitsEnum.kgha">
            <summary>
            kilograms per hectare
            </summary>
        </member>
        <member name="T:Models.Soils.Sample.SWUnitsEnum">
            <summary>
            An enumeration for specifying soil water units
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.SWUnitsEnum.Volumetric">
            <summary>
            Volumetric mm/mm
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.SWUnitsEnum.Gravimetric">
            <summary>
            Gravimetric soil water
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.SWUnitsEnum.mm">
            <summary>
            mm of water
            </summary>
        </member>
        <member name="T:Models.Soils.Sample.OCSampleUnitsEnum">
            <summary>
            An enumeration for specifying organic carbon units
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.OCSampleUnitsEnum.Total">
            <summary>
            Organic carbon as total percent
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.OCSampleUnitsEnum.WalkleyBlack">
            <summary>
            Organic carbon as walkley black percent
            </summary>
        </member>
        <member name="T:Models.Soils.Sample.PHSampleUnitsEnum">
            <summary>
            An enumeration for specifying PH units
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.PHSampleUnitsEnum.Water">
            <summary>
            PH as water method
            </summary>
        </member>
        <member name="F:Models.Soils.Sample.PHSampleUnitsEnum.CaCl2">
            <summary>
            PH as Calcium chloride method
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.Thickness">
            <summary>
            Gets or sets the sample thickness (mm)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.Depth">
            <summary>
            Gets or sets the depth strings e.g. 0-10
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.NO3">
            <summary>
            Gets or sets the nitrate NO3. Units will be as specified by NO3Units
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.NH4">
            <summary>
            Gets or sets ammonia NH4. Units will be as specified by NH4Units
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.SW">
            <summary>
            Gets or sets soil water. Units will be as specified by SWUnits
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.OC">
            <summary>
            Gets or sets organic carbon. Units will be as specified by OCUnits
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.EC">
            <summary>
            Gets or sets electrical conductivity (1:5 dS/m)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.CL">
            <summary>
            Gets or sets chloride (mg/kg)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.ESP">
            <summary>
            Gets or sets ESP (%)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.PH">
            <summary>
            Gets or sets PH. Units will be as specified by PHUnits
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.NO3Units">
            <summary>
            Gets or sets the units of NO3
            </summary>
        </member>
        <member name="M:Models.Soils.Sample.NO3UnitsSet(Models.Soils.Sample.NUnitsEnum)">
            <summary>Change the units used for NO3.</summary>
            <param name="ToUnits">To units.</param>
        </member>
        <member name="P:Models.Soils.Sample.NH4Units">
            <summary>
            Gets or sets the units of NH4
            </summary>
        </member>
        <member name="M:Models.Soils.Sample.NH4UnitsSet(Models.Soils.Sample.NUnitsEnum)">
            <summary>Change the units used for NH4.</summary>
            <param name="ToUnits">To units.</param>
        </member>
        <member name="P:Models.Soils.Sample.SWUnits">
            <summary>
            Gets or sets the units of SW
            </summary>
        </member>
        <member name="M:Models.Soils.Sample.SWUnitsSet(Models.Soils.Sample.SWUnitsEnum)">
            <summary>Change the units used for SW.</summary>
            <param name="ToUnits">To units.</param>
        </member>
        <member name="P:Models.Soils.Sample.OCUnits">
            <summary>
            Gets or sets the units of organic carbon
            </summary>
        </member>
        <member name="M:Models.Soils.Sample.OCUnitsSet(Models.Soils.Sample.OCSampleUnitsEnum)">
            <summary>Ocs the units set.</summary>
            <param name="ToUnits">To units.</param>
        </member>
        <member name="P:Models.Soils.Sample.PHUnits">
            <summary>
            Gets or sets the units of P
            </summary>
        </member>
        <member name="M:Models.Soils.Sample.PHUnitsSet(Models.Soils.Sample.PHSampleUnitsEnum)">
            <summary>Phes the units set.</summary>
            <param name="ToUnits">To units.</param>
        </member>
        <member name="P:Models.Soils.Sample.NO3ppm">
            <summary>
            Gets NO3. Units: ppm.
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.NO3kgha">
            <summary>
            Gets NO3. Units: kg/ha.
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.NH4ppm">
            <summary>
            Gets NH4. Units: ppm.
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.NH4kgha">
            <summary>
            Gets NH4. Units: kg/ha.
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.SWmm">
            <summary>
            Gets SW. Units: mm/mm.
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.SWGravimetric">
            <summary>
            Gets SW. Units: kg/kg.
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.SWVolumetric">
            <summary>
            Gets SW. Units: mm/mm.
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.OCTotal">
            <summary>
            Gets organic carbon. Units: Total %
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.OCWalkleyBlack">
            <summary>
            Gets organic carbon. Units: WalkleyBlack %
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.PHWater">
            <summary>
            Gets PH. Units: (1:5 water)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.PHCaCl2">
            <summary>
            Gets PH. Units: (1:5 water)
            </summary>
        </member>
        <member name="P:Models.Soils.Sample.Soil">
            <summary>
            Gets the soil associated with this sample
            </summary>
        </member>
        <member name="T:Models.Soils.CERESSoilTemperature">
            <summary>
            Calculates the average soil temperature at the centre of each layer, based on the soil temperature model of EPIC (Williams et al 1984)
            This code was separated from old SoilN - tidied up but not updated (RCichota, sep/2012)
            </summary>
        </member>
        <member name="M:Models.Soils.CERESSoilTemperature.clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="P:Models.Soils.CERESSoilTemperature.Value">
            <summary>Returns soil temperature for each layer (oc)</summary>
        </member>
        <member name="M:Models.Soils.CERESSoilTemperature.OnDoSoilTemperature(System.Object,System.EventArgs)">
            <summary>Called to perform soil temperature calculations</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Soils.Soil">
            <summary>
            The soil class encapsulates a soil characterisation and 0 or more soil samples.
            the methods in this class that return double[] always return using the
            "Standard layer structure" i.e. the layer structure as defined by the Water child object.
            method. Mapping will occur to achieve this if necessary.
            To obtain the "raw", unmapped, values use the child classes e.g. SoilWater, Analysis and Sample.
            </summary>
        </member>
        <member name="F:Models.Soils.Soil.waterNode">
            <summary>Gets the water.</summary>
        </member>
        <member name="P:Models.Soils.Soil.SoilNitrogen">
            <summary>
            Soil Nitrogen model
            </summary>
        </member>
        <member name="F:Models.Soils.Soil.Weirdo">
            <summary>
            The multipore water model.  An alternativie soil water model that is not yet fully functional
            </summary>
        </member>
        <member name="F:Models.Soils.Soil.structure">
            <summary>A reference to the layer structure node or null if not present.</summary>
        </member>
        <member name="P:Models.Soils.Soil.RecordNumber">
            <summary>Gets or sets the record number.</summary>
        </member>
        <member name="P:Models.Soils.Soil.ASCOrder">
            <summary>Gets or sets the asc order.</summary>
        </member>
        <member name="P:Models.Soils.Soil.ASCSubOrder">
            <summary>Gets or sets the asc sub order.</summary>
        </member>
        <member name="P:Models.Soils.Soil.SoilType">
            <summary>Gets or sets the type of the soil.</summary>
        </member>
        <member name="P:Models.Soils.Soil.LocalName">
            <summary>Gets or sets the name of the local.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Site">
            <summary>Gets or sets the site.</summary>
        </member>
        <member name="P:Models.Soils.Soil.NearestTown">
            <summary>Gets or sets the nearest town.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Region">
            <summary>Gets or sets the region.</summary>
        </member>
        <member name="P:Models.Soils.Soil.State">
            <summary>Gets or sets the state.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Country">
            <summary>Gets or sets the country.</summary>
        </member>
        <member name="P:Models.Soils.Soil.NaturalVegetation">
            <summary>Gets or sets the natural vegetation.</summary>
        </member>
        <member name="P:Models.Soils.Soil.ApsoilNumber">
            <summary>Gets or sets the apsoil number.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Latitude">
            <summary>Gets or sets the latitude.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Longitude">
            <summary>Gets or sets the longitude.</summary>
        </member>
        <member name="P:Models.Soils.Soil.LocationAccuracy">
            <summary>Gets or sets the location accuracy.</summary>
        </member>
        <member name="P:Models.Soils.Soil.DataSource">
            <summary>Gets or sets the data source.</summary>
        </member>
        <member name="P:Models.Soils.Soil.Comments">
            <summary>Gets or sets the comments.</summary>
        </member>
        <member name="P:Models.Soils.Soil.SoilWater">
            <summary>Gets the soil water.</summary>
        </member>
        <member name="P:Models.Soils.Soil.SoilOrganicMatter">
            <summary>Gets the soil organic matter.</summary>
        </member>
        <member name="F:Models.Soils.Soil.SoluteManager">
            <summary>Gets the soil nitrogen.</summary>
        </member>
        <member name="F:Models.Soils.Soil.temperatureModel">
            <summary>Gets the soil nitrogen.</summary>
        </member>
        <member name="M:Models.Soils.Soil.OnCreated">
            <summary>Called when model has been created.</summary>
        </member>
        <member name="M:Models.Soils.Soil.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.Soil.FindChildren">
            <summary>Find our children.</summary>
        </member>
        <member name="P:Models.Soils.Soil.WaterNodeThickness">
            <summary>The layering used to parameterise the water node</summary>
        </member>
        <member name="P:Models.Soils.Soil.Thickness">
            <summary>Return the soil layer thicknesses (mm)</summary>
        </member>
        <member name="P:Models.Soils.Soil.DepthMidPoints">
            <summary>Gets the depth mid points (mm).</summary>
        </member>
        <member name="P:Models.Soils.Soil.Depth">
            <summary>Gets the depths (mm) of each layer.</summary>
        </member>
        <member name="P:Models.Soils.Soil.BD">
            <summary>Bulk density at standard thickness. Units: mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.InitialWaterVolumetric">
            <summary>Soil water at standard thickness. Units: mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.Water">
            <summary>Gets or sets the soil water for each layer (mm)</summary>
        </member>
        <member name="P:Models.Soils.Soil.SWAtWaterThickness">
            <summary>Calculate and return SW relative to the Water node thicknesses.</summary>
        </member>
        <member name="P:Models.Soils.Soil.AirDry">
            <summary>Return AirDry at standard thickness. Units: mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.LL15">
            <summary>Return lower limit at standard thickness. Units: mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.LL15mm">
            <summary>Return lower limit limit at standard thickness. Units: mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.DUL">
            <summary>Return drained upper limit at standard thickness. Units: mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.DULmm">
            <summary>Return drained upper limit at standard thickness. Units: mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.SAT">
            <summary>Return saturation at standard thickness. Units: mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.SATmm">
            <summary>Return saturation at standard thickness. Units: mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.KS">
            <summary>KS at standard thickness. Units: mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.SWCON">
            <summary>SWCON at standard thickness. Units: 0-1</summary>
        </member>
        <member name="P:Models.Soils.Soil.KLAT">
            <summary>
            KLAT at standard thickness. Units: 0-1
            </summary>
        </member>
        <member name="P:Models.Soils.Soil.PAWC">
            <summary>Return the plant available water CAPACITY at standard thickness. Units: mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.Unavailablemm">
            <summary>Gets unavailable water at standard thickness. Units:mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.PAWmmInitial">
            <summary>Gets available water at standard thickness (SW-LL15). Units:mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.PAWCmm">
            <summary>
            Gets the maximum plant available water CAPACITY at standard thickness (DUL-LL15). Units: mm
            </summary>
        </member>
        <member name="P:Models.Soils.Soil.Drainablemm">
            <summary>Gets the drainable water at standard thickness (SAT-DUL). Units: mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.PAW">
            <summary>Plant available water at standard thickness. Units:mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.PAWmm">
            <summary>Plant available water at standard thickness. Units:mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.PAWInitial">
            <summary>Plant available water at standard thickness. Units:mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.PAWCAtWaterThickness">
            <summary>Return the plant available water CAPACITY at water node thickness. Units: mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.PAWCmmAtWaterThickness">
            <summary>Return the plant available water CAPACITY at water node thickenss. Units: mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.PAWAtWaterThickness">
            <summary>Plant available water at standard thickness at water node thickness. Units:mm/mm</summary>
        </member>
        <member name="P:Models.Soils.Soil.CropNames">
            <summary>A list of crop names.</summary>
            <value>The crop names.</value>
        </member>
        <member name="M:Models.Soils.Soil.Crop(System.String)">
            <summary>Return a specific crop to caller. Will throw if crop doesn't exist.</summary>
            <param name="CropName">Name of the crop.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Soil could not find crop:  + CropName</exception>
        </member>
        <member name="F:Models.Soils.Soil.StandardThickness">
            <summary>Standard thicknesses</summary>
        </member>
        <member name="F:Models.Soils.Soil.StandardKL">
            <summary>Standard Kls</summary>
        </member>
        <member name="M:Models.Soils.Soil.ModifyKLForSubSoilConstraints(Models.Soils.SoilCrop)">
            <summary>
            Modify the KL values for subsoil constraints.
            </summary>
            <remarks>
            From:
            Hochman, Z., Dang, Y.P., Schwenke, G.D., Dalgliesh, N.P., Routley, R., McDonald, M., 
                Daniells, I.G., Manning, W., Poulton, P.L., 2007. 
                Simulating the effects of saline and sodic subsoils on wheat crops 
                growing on Vertosols. Australian Journal of Agricultural Research 58, 802–810. doi:10.1071/ar06365
            </remarks>
            <param name="measuredCrop"></param>
        </member>
        <member name="M:Models.Soils.Soil.PAWCCropAtWaterThickness(System.String)">
            <summary>Return the plant available water CAPACITY at water node thickness. Units: mm/mm</summary>
            <param name="CropName">Name of the crop.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.PAWCropAtWaterThickness(System.String)">
            <summary>
            Plant available water for the specified crop at water node thickness. Will throw if crop not found. Units: mm/mm
            </summary>
            <param name="CropName">Name of the crop.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.PAWmmAtWaterThickness(System.String)">
            <summary>
            Plant available water for the specified crop at water node thickness. Will throw if crop not found. Units: mm
            </summary>
            <param name="CropName">Name of the crop.</param>
            <returns></returns>
        </member>
        <member name="F:Models.Soils.Soil.BlackVertosolCropList">
            <summary>The black vertosol crop list</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosolCropList">
            <summary>The grey vertosol crop list</summary>
        </member>
        <member name="F:Models.Soils.Soil.PredictedThickness">
            <summary>The predicted thickness</summary>
        </member>
        <member name="F:Models.Soils.Soil.PredictedXF">
            <summary>The predicted xf</summary>
        </member>
        <member name="F:Models.Soils.Soil.WheatKL">
            <summary>The wheat kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.SorghumKL">
            <summary>The sorghum kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.BarleyKL">
            <summary>The barley kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.ChickpeaKL">
            <summary>The chickpea kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.MungbeanKL">
            <summary>The mungbean kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.CottonKL">
            <summary>The cotton kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.CanolaKL">
            <summary>The canola kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.PigeonPeaKL">
            <summary>The pigeon pea kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.MaizeKL">
            <summary>The maize kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.CowpeaKL">
            <summary>The cowpea kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.SunflowerKL">
            <summary>The sunflower kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.FababeanKL">
            <summary>The fababean kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.LucerneKL">
            <summary>The lucerne kl</summary>
        </member>
        <member name="F:Models.Soils.Soil.PerennialKL">
            <summary>The perennial kl</summary>
        </member>
        <member name="T:Models.Soils.Soil.BlackVertosol">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Soil.BlackVertosol.CottonA">
            <summary>The cotton a</summary>
        </member>
        <member name="F:Models.Soils.Soil.BlackVertosol.SorghumA">
            <summary>The sorghum a</summary>
        </member>
        <member name="F:Models.Soils.Soil.BlackVertosol.WheatA">
            <summary>The wheat a</summary>
        </member>
        <member name="F:Models.Soils.Soil.BlackVertosol.CottonB">
            <summary>The cotton b</summary>
        </member>
        <member name="F:Models.Soils.Soil.BlackVertosol.SorghumB">
            <summary>The sorghum b</summary>
        </member>
        <member name="F:Models.Soils.Soil.BlackVertosol.WheatB">
            <summary>The wheat b</summary>
        </member>
        <member name="T:Models.Soils.Soil.GreyVertosol">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.CottonA">
            <summary>The cotton a</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.SorghumA">
            <summary>The sorghum a</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.WheatA">
            <summary>The wheat a</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.BarleyA">
            <summary>The barley a</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.ChickpeaA">
            <summary>The chickpea a</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.FababeanA">
            <summary>The fababean a</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.MungbeanA">
            <summary>The mungbean a</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.CottonB">
            <summary>The cotton b</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.SorghumB">
            <summary>The sorghum b</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.WheatB">
            <summary>The wheat b</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.BarleyB">
            <summary>The barley b</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.ChickpeaB">
            <summary>The chickpea b</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.FababeanB">
            <summary>The fababean b</summary>
        </member>
        <member name="F:Models.Soils.Soil.GreyVertosol.MungbeanB">
            <summary>The mungbean b</summary>
        </member>
        <member name="P:Models.Soils.Soil.PredictedCropNames">
            <summary>Return a list of predicted crop names or an empty string[] if none found.</summary>
            <value>The predicted crop names.</value>
        </member>
        <member name="M:Models.Soils.Soil.PredictedCrop(System.String)">
            <summary>Return a predicted SoilCrop for the specified crop name or null if not found.</summary>
            <param name="CropName">Name of the crop.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.PredictedLL(System.Double[],System.Double)">
            <summary>Calculate and return a predicted LL from the specified A and B values.</summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns></returns>
        </member>
        <member name="P:Models.Soils.Soil.OC">
            <summary>Organic carbon. Units: %</summary>
            <value>The oc.</value>
        </member>
        <member name="P:Models.Soils.Soil.FBiom">
            <summary>FBiom. Units: 0-1</summary>
            <value>The f biom.</value>
        </member>
        <member name="P:Models.Soils.Soil.FInert">
            <summary>FInert. Units: 0-1</summary>
            <value>The f inert.</value>
        </member>
        <member name="P:Models.Soils.Soil.Rocks">
            <summary>Rocks. Units: %</summary>
            <value>The rocks.</value>
        </member>
        <member name="P:Models.Soils.Soil.ParticleSizeSand">
            <summary>Particle size sand</summary>
            <value>The particle size sand.</value>
        </member>
        <member name="P:Models.Soils.Soil.ParticleSizeSilt">
            <summary>Particle size silt</summary>
            <value>The particle size silt.</value>
        </member>
        <member name="P:Models.Soils.Soil.ParticleSizeClay">
            <summary>Particle size silt</summary>
            <value>The particle size clay.</value>
        </member>
        <member name="M:Models.Soils.Soil.FindSample(System.String)">
            <summary>Find the specified sample. Will throw if not found.</summary>
            <param name="SampleName">Name of the sample.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Cannot find soil sample named:  + SampleName</exception>
        </member>
        <member name="P:Models.Soils.Soil.InitialNO3N">
            <summary>Nitrate (ppm).</summary>
        </member>
        <member name="P:Models.Soils.Soil.NO3N">
            <summary>Gets or sets the nitrate N for each layer (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Soil.NH4N">
            <summary>Gets or sets the ammonia N for each layer (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Soil.UreaN">
            <summary>Gets the or sets urea N for each layer (kg/ha)</summary>
        </member>
        <member name="P:Models.Soils.Soil.Temperature">
            <summary>Gets the temperature of each layer</summary>
        </member>
        <member name="P:Models.Soils.Soil.InitialNH4N">
            <summary>Ammonia (ppm).</summary>
        </member>
        <member name="P:Models.Soils.Soil.Cl">
            <summary>Cloride from either a sample or from Analysis. Units: mg/kg</summary>
        </member>
        <member name="P:Models.Soils.Soil.ESP">
            <summary>ESP from either a sample or from Analysis. Units: %</summary>
        </member>
        <member name="P:Models.Soils.Soil.EC">
            <summary>EC from either a sample or from Analysis. Units: 1:5 dS/m</summary>
        </member>
        <member name="P:Models.Soils.Soil.PH">
            <summary>PH from either a sample or from Analysis. Units: 1:5 Water</summary>
        </member>
        <member name="P:Models.Soils.Soil.LabileP">
            <summary>LabileP at standard thickness</summary>
            <value>The labile p.</value>
        </member>
        <member name="P:Models.Soils.Soil.Sorption">
            <summary>Sorption at standard thickness</summary>
            <value>The sorption.</value>
        </member>
        <member name="P:Models.Soils.Soil.BandedP">
            <summary>BandedP at standard thickness</summary>
            <value>The banded p.</value>
        </member>
        <member name="P:Models.Soils.Soil.RockP">
            <summary>RockP at standard thickness</summary>
            <value>The rock p.</value>
        </member>
        <member name="M:Models.Soils.Soil.BDMapped(System.Double[])">
            <summary>Bulk density - mapped to the specified layer structure. Units: mm/mm</summary>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.AirDryMapped(System.Double[])">
            <summary>AirDry - mapped to the specified layer structure. Units: mm/mm</summary>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.LL15Mapped(System.Double[])">
            <summary>Lower limit 15 bar - mapped to the specified layer structure. Units: mm/mm</summary>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.DULMapped(System.Double[])">
            <summary>Drained upper limit - mapped to the specified layer structure. Units: mm/mm</summary>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.SWMapped(System.Double[],System.Double[],System.Double[])">
            <summary>SW - mapped to the specified layer structure. Units: mm/mm</summary>
            <param name="Values">The values.</param>
            <param name="Thicknesses">The thicknesses.</param>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Cannot find crop lower limit or LL15 in soil</exception>
        </member>
        <member name="M:Models.Soils.Soil.LL(System.String)">
            <summary>
            The lower limit to water extraction for each layer
            </summary>
            <param name="CropName"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.LLMapped(System.String,System.Double[])">
            <summary>Crop lower limit mapped. Units: mm/mm</summary>
            <param name="CropName">Name of the crop.</param>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.XF(System.String)">
            <summary>
            The extension resistance to crop root growth from the soil
            </summary>
            <param name="CropName"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.XFMapped(System.String,System.Double[])">
            <summary>Crop XF mapped. Units: 0-1</summary>
            <param name="CropName">Name of the crop.</param>
            <param name="ToThickness">To thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.KL(System.String)">
            <summary>
            The potential water extraction rate constant for each layer
            </summary>
            <param name="CropName"></param>
            <returns></returns>
        </member>
        <member name="T:Models.Soils.Soil.MapType">
            <summary>different methods for mapping soil variables </summary>
        </member>
        <member name="F:Models.Soils.Soil.MapType.Mass">
            <summary>How heavy things are</summary>
        </member>
        <member name="F:Models.Soils.Soil.MapType.Concentration">
            <summary>The concentration of things</summary>
        </member>
        <member name="F:Models.Soils.Soil.MapType.UseBD">
            <summary>Using bulk density</summary>
        </member>
        <member name="M:Models.Soils.Soil.Map(System.Double[],System.Double[],System.Double[],Models.Soils.Soil.MapType,System.Double)">
            <summary>Map soil variables from one layer structure to another.</summary>
            <param name="FValues">The f values.</param>
            <param name="FThickness">The f thickness.</param>
            <param name="ToThickness">To thickness.</param>
            <param name="MapType">Type of the map.</param>
            <param name="DefaultValueForBelowProfile">The default value for below profile.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.OverlaySampleOnTo(System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>Overlay sample values onto soil values.</summary>
            <param name="SampleValues">The sample values.</param>
            <param name="SampleThickness">The sample thickness.</param>
            <param name="SoilValues">The soil values.</param>
            <param name="SoilThickness">The soil thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.InFillValues(System.Double[]@,System.Double[]@,System.Double[],System.Double[])">
            <summary>Takes values from SoilValues and puts them at the bottom of SampleValues.</summary>
            <param name="SampleValues">The sample values.</param>
            <param name="SampleThickness">The sample thickness.</param>
            <param name="SoilValues">The soil values.</param>
            <param name="SoilThickness">The soil thickness.</param>
        </member>
        <member name="M:Models.Soils.Soil.ToDepthStrings(System.Double[])">
            <summary>Convert an array of thickness (mm) to depth strings (cm)</summary>
            <param name="Thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.ToThickness(System.String[])">
            <summary>
            Convert an array of depth strings (cm) to thickness (mm) e.g.
            "0-10", "10-30"
            To
            100, 200
            </summary>
            <param name="DepthStrings">The depth strings.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Invalid layer string:  + DepthStrings[i] +
                                              . String must be of the form: 10-30</exception>
        </member>
        <member name="M:Models.Soils.Soil.ToMidPoints(System.Double[])">
            <summary>To the mid points.</summary>
            <param name="Thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.ToCumThickness(System.Double[])">
            <summary>To the cum thickness.</summary>
            <param name="Thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.LayerIndexOfDepth(System.Double,System.Double[])">
            <summary>Layers the index.</summary>
            <param name="depth">The depth.</param>
            <param name="thickness">Layer thicknesses</param>
        </member>
        <member name="M:Models.Soils.Soil.ProportionThroughLayer(System.Int32,System.Double,System.Double[])">
            <summary>Returns the proportion that 'depth' is through the layer.</summary>
            <param name="layerIndex">The layer index</param>
            <param name="depth">The depth</param>
            <param name="thickness">Layer thicknesses</param>
        </member>
        <member name="M:Models.Soils.Soil.CodeToMetaData(System.String[])">
            <summary>Codes to meta data.</summary>
            <param name="Codes">The codes.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.CalcPAWC(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Plant available water for the specified crop. Will throw if crop not found. Units: mm/mm
            </summary>
            <param name="Thickness">The thickness.</param>
            <param name="LL">The ll.</param>
            <param name="DUL">The dul.</param>
            <param name="XF">The xf.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.LastValue(System.Double[])">
            <summary>Return the last value that isn't a missing value.</summary>
            <param name="Values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.kgha2ppm(System.Double[])">
            <summary>
            Calculate conversion factor from kg/ha to ppm (mg/kg)
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.ppm2kgha(System.Double[])">
            <summary>
            Calculate conversion factor from ppm to kg/ha
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.Soil.Check(System.Boolean)">
            <summary>
            Checks validity of soil water parameters
            This is a port of the soilwat2_check_profile routine. Returns a blank string if
            no errors were found.
            </summary>
            <param name="IgnoreStartingWaterN">if set to <c>true</c> [ignore starting water n].</param>
            <returns></returns>
            <exception cref="T:System.Exception">Cannot find OC values in soil</exception>
        </member>
        <member name="T:Models.Soils.SoilCrop">
            <summary>
            A soil crop parameterization class.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.Soil">
            <summary>
            Gets the parent soil
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.Depth">
            <summary>
            Gets the associated depths
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.Thickness">
            <summary>
            Gets the associated thickness of layers
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.LL">
            <summary>
            Gets or sets the crop lower limit
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.PAWC">
            <summary>
            Gets the plant available water by layer
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.KL">
            <summary>
            Gets or sets the KL value.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.XF">
            <summary>
            Gets or sets the exploration factor
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.LLMetadata">
            <summary>
            Gets or sets the metadata for crop lower limit
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.KLMetadata">
            <summary>
            Gets or sets the metadata for KL
            </summary>
        </member>
        <member name="P:Models.Soils.SoilCrop.XFMetadata">
            <summary>
            Gets or sets the meta data for the exploration factor
            </summary>
        </member>
        <member name="T:Models.Soils.SoilOrganicMatter">
            <summary>
            A model for capturing soil organic matter properties
            </summary>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.RootCN">
            <summary>Gets or sets the root cn.</summary>
            <value>The root cn.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.RootWt">
            <summary>Gets or sets the root wt.</summary>
            <value>The root wt.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.SoilCN">
            <summary>Gets or sets the soil cn.</summary>
            <value>The soil cn.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.EnrACoeff">
            <summary>Gets or sets the enr a coeff.</summary>
            <value>The enr a coeff.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.EnrBCoeff">
            <summary>Gets or sets the enr b coeff.</summary>
            <value>The enr b coeff.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.Thickness">
            <summary>Soil layer thickness for each layer (mm)</summary>
            <value>The thickness.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.Depth">
            <summary>Soil layer thickness for each layer in cm (only used in the GUI)</summary>
            <value>The depth.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.OC">
            <summary>Organic carbon concentration (0.1 - 10%)</summary>
            <value>The oc.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.OCMetadata">
            <summary>Gets or sets the oc metadata.</summary>
            <value>The oc metadata.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.FBiom">
            <summary>Gets or sets the f biom.</summary>
            <value>The f biom.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.FInert">
            <summary>Gets or sets the f inert.</summary>
            <value>The f inert.</value>
        </member>
        <member name="F:Models.Soils.SoilOrganicMatter.ppm">
            <summary>The PPM</summary>
        </member>
        <member name="T:Models.Soils.SoilOrganicMatter.OCUnitsEnum">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMatter.OCUnitsEnum.Total">
            <summary>The total</summary>
        </member>
        <member name="F:Models.Soils.SoilOrganicMatter.OCUnitsEnum.WalkleyBlack">
            <summary>The walkley black</summary>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.OCUnits">
            <summary>Gets or sets the oc units.</summary>
            <value>The oc units.</value>
        </member>
        <member name="M:Models.Soils.SoilOrganicMatter.OCUnitsSet(Models.Soils.SoilOrganicMatter.OCUnitsEnum)">
            <summary>Ocs the units set.</summary>
            <param name="ToUnits">To units.</param>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.OCTotal">
            <summary>Soil organic carbon</summary>
            <value>The oc total.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.InertC">
            <summary>
            Humic C that is not subject to mineralization (kg/ha) on the same layer structure as OC.
            </summary>
            <value>The inert c.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.BiomC">
            <summary>
            Calculate and return the amount of biomass carbon on the same layer structure as OC. 
            </summary>
            <value>The biom c.</value>
        </member>
        <member name="P:Models.Soils.SoilOrganicMatter.HumC">
            <summary>
            Calculate and return the amount of humic carbon on the same layer structure as OC.
            </summary>
            <value>The hum c.</value>
        </member>
        <member name="T:Models.Soils.SoilTemperature">
            <summary>
            A model for capturing soil temperature parameters
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemperature.BoundaryLayerConductance">
            <summary>Gets or sets the boundary layer conductance.</summary>
            <value>The boundary layer conductance.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature.Thickness">
            <summary>Gets or sets the thickness.</summary>
            <value>The thickness.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature.InitialSoilTemperature">
            <summary>Gets or sets the initial soil temperature.</summary>
            <value>The initial soil temperature.</value>
        </member>
        <member name="T:Models.Soils.SoilTemperature2">
            <summary>
            A model for capturing soil temperature parameters
            </summary>
        </member>
        <member name="P:Models.Soils.SoilTemperature2.MaxTTimeDefault">
            <summary>Gets or sets the maximum t time default.</summary>
            <value>The maximum t time default.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature2.BoundaryLayerConductanceSource">
            <summary>Gets or sets the boundary layer conductance source.</summary>
            <value>The boundary layer conductance source.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature2.BoundaryLayerConductance">
            <summary>Gets or sets the boundary layer conductance.</summary>
            <value>The boundary layer conductance.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature2.BoundaryLayerConductanceIterations">
            <summary>Gets or sets the boundary layer conductance iterations.</summary>
            <value>The boundary layer conductance iterations.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature2.NetRadiationSource">
            <summary>Gets or sets the net radiation source.</summary>
            <value>The net radiation source.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature2.DefaultWindSpeed">
            <summary>Gets or sets the default wind speed.</summary>
            <value>The default wind speed.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature2.DefaultAltitude">
            <summary>Gets or sets the default altitude.</summary>
            <value>The default altitude.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature2.DefaultInstrumentHeight">
            <summary>Gets or sets the default height of the instrument.</summary>
            <value>The default height of the instrument.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature2.BareSoilHeight">
            <summary>Gets or sets the height of the bare soil.</summary>
            <value>The height of the bare soil.</value>
        </member>
        <member name="P:Models.Soils.SoilTemperature2.Note">
            <summary>Gets or sets the note.</summary>
            <value>The note.</value>
        </member>
        <member name="T:Models.Soils.Swim3">
            <summary>
             .NET port of the Fortran SWIM3 model
             Ported by Eric Zurcher July 2014
            </summary> 
        </member>
        <member name="F:Models.Soils.Swim3.initial_conductance">
            <summary>
            (/h)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.min_crit_temp">
            <summary>
            Temperature below which eeq decreases (oC)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.max_crit_temp">
            <summary>
            Temperature above which eeq increases (oC)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.max_albedo">
            <summary>
            albedo at 100% green crop cover (0-1)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.residue_albedo">
            <summary>
            albedo at 100% residue cover (0-1)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.a_to_evap_fact">
            <summary>
            converts residue specfic area 'A' to"
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.canopy_eos_coef">
            <summary>
            coef. in exp effect of canopy on
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.cover_effects">
            <summary>
            The effect of residue and canopy cover is implemented as in the soilwat model.
            These can be turn off for compatibility with SWIM standalone.
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.canopy_fact">
            <summary>
            reducing pot. soil evap. = 1.7 Adams, Arkin and Ritchie 1976
            Set the default rainfall and evaporation daily time courses
            these are used if the user does not specify them in the met file.
            Canopy factors for cover runoff effect
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.canopy_fact_height">
            <summary>
            heights for canopy factors (mm)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.canopy_fact_default">
            <summary>
            default canopy factor in absence of height
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.negative_conc_warn">
            <summary>
            Negative solute concentration below which a warning error is thrown
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.negative_conc_fatal">
            <summary>
            Negative solute concentration below which a fatal error is thrown
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.max_iterations">
            <summary>
            number of iterations before timestep is halved
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.ersoil">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.ernode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.errex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.dppl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.dpnl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.slcerr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.min_xylem_potential">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.root_radius">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.root_conductance">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.default_rain_time">
            <summary>
            default time of rainfall (hh:mm)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.default_rain_duration">
            <summary>
            default duration of rainfall (min)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.default_evap_time">
            <summary>
            default time of evaporation (hh:mm)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.default_evap_duration">
            <summary>
            default duration of evaporation (min)
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.hydrol_effective_depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.theta">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Soils.Swim3.watertabledepth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.SW">
            <summary>Get volumetric water content (mm/mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.SWmm">
            <summary>Get water content (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.ESW">
            <summary>Gets extractable soil water relative to LL15(mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.psi">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.Runoff">
            <summary>Gets the amount of water runoff (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Es">
            <summary>Gets the actual (realised) soil water evaporation (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Eos">
            <summary>Gets potential evaporation from soil surface (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Drainage">
            <summary>Gets the amount of water drainage from bottom of profile(mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Eo">
            <summary>Gets potential evapotranspiration of the whole soil-plant system (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Flow">
            <summary>Amount of water moving upward from each soil layer during unsaturated flow (negative value means downward movement) (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Salb">
            <summary>
            Base soil albedo
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.CN2Bare">
            <summary>
            Gets the bare soil runoff curve number
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.CNRed">
            <summary>
            Gets the max. reduction in curve number due to cover
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.CNCov">
            <summary>
            Gets the cover for max curve number reduction
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.KDul">
            <summary>
            Gets the hydraulic conductivity at DUL (mm/d)
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.PSIDul">
            <summary>
            Gets the matric Potential at DUL (cm)
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.VC">
            <summary>
            Gets the Vapour Conductivity Calculations
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.DTMin">
            <summary>
            Gets the Minimum Timestep (min)
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.DTMax">
            <summary>
            Gets the Maximum Timestep (min)
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.MaxWaterIncrement">
            <summary>
            Gets or sets the maximum water increment.
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.SpaceWeightingFactor">
            <summary>
            Gets or sets the space weighting factor.
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.SoluteSpaceWeightingFactor">
            <summary>
            Gets or sets the solute space weighting factor.
            </summary>
        </member>
        <member name="P:Models.Soils.Swim3.Dis">
            <summary>Gets or sets the dis.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Disp">
            <summary>Gets or sets the disp.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.A">
            <summary>Gets or sets a.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.DTHC">
            <summary>Gets or sets the DTHC.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.DTHP">
            <summary>Gets or sets the DTHP.</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Diagnostics">
            <summary>
            Gets or sets a value indicating whether Diagnostic Information? is shown
            </summary>
        </member>
        <member name="T:Models.Soils.Swim3.NullTypeDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Soils.Swim3.OnInitialised(System.Object,System.EventArgs)">
            <summary>
            Start of simulation event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.Swim3.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Start of simulation event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.Swim3.OnReset">
            <summary>
            Reset the model
            </summary>
        </member>
        <member name="M:Models.Soils.Swim3.Tillage(Models.Soils.TillageType)">
            <summary>
            Perform tillage
            </summary>
            <param name="Tillage"></param>
        </member>
        <member name="M:Models.Soils.Swim3.Sum_Report">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.Soils.Swim3.OnDoSoilWaterMovement(System.Object,System.EventArgs)">
            <summary>
            Start of simulation event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Soils.Swim3.GetSWUptake(System.Int32,System.Double[]@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="vegnum"></param>
            <param name="uarray"></param>
            <param name="uflag"></param>
        </member>
        <member name="M:Models.Soils.Swim3.GetSupply(System.Int32,System.Int32,System.Double[]@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="vegnum"></param>
            <param name="sol"></param>
            <param name="uarray"></param>
            <param name="uflag"></param>
        </member>
        <member name="M:Models.Soils.Swim3.IssueWarning(System.String)">
            <summary>
            Issues the warning.
            </summary>
            <param name="warningText">The warning text.</param>
        </member>
        <member name="M:Models.Soils.Swim3.RemoveWater(System.Double[])">
            <summary>Remove water from the profile</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Thickness">
            <summary>Gets or sets soil thickness for each layer (mm)(</summary>
        </member>
        <member name="P:Models.Soils.Swim3.LateralOutflow">
            <summary>Amount of water moving laterally out of the profile (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.LeachNO3">
            <summary>Amount of N leaching as NO3-N from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.LeachNH4">
            <summary>Amount of N leaching as NH4-N from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.LeachUrea">
            <summary>Amount of N leaching as urea-N  from the deepest soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.FlowNO3">
            <summary>Amount of N leaching as NO3 from each soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.FlowNH4">
            <summary>Amount of N leaching as NO3 from each soil layer (kg /ha)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.Flux">
            <summary>Amount of water moving downward out of each soil layer due to gravity drainage (above DUL) (mm)</summary>
        </member>
        <member name="P:Models.Soils.Swim3.ResidueInterception">
            <summary>Loss of precipitation due in interception of surface residues (mm)</summary>
        </member>
        <member name="M:Models.Soils.Swim3.SetWaterTable(System.Double)">
            <summary>Sets the water table.</summary>
            <param name="InitialDepth">The initial depth.</param>
        </member>
        <member name="M:Models.Soils.Swim3.Reset">
            <summary>Perform a reset</summary>
        </member>
        <member name="M:Models.Soils.Swim3.Tillage(System.String)">
            <summary>Perform tillage</summary>
        </member>
        <member name="T:Models.Soils.SwimSoluteParameters">
            <summary>
            A model for capturing swim solute parameters
            </summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.WaterTableConcentration">
            <summary>Concentration of solute in water table (ppm).</summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.D0">
            <summary>Gets or sets the diffusion coefficient (D0).</summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.Thickness">
            <summary>Gets or sets the thickness.</summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.Exco">
            <summary>Gets or sets the exco.</summary>
        </member>
        <member name="P:Models.Soils.SwimSoluteParameters.FIP">
            <summary>Gets or sets the fip.</summary>
        </member>
        <member name="T:Models.Soils.SwimSubsurfaceDrain">
            <summary>
            SWIM sub surface drain model
            </summary>
        </member>
        <member name="P:Models.Soils.SwimSubsurfaceDrain.DrainDepth">
            <summary>Gets or sets the drain depth.</summary>
            <value>The drain depth.</value>
        </member>
        <member name="P:Models.Soils.SwimSubsurfaceDrain.DrainSpacing">
            <summary>Gets or sets the drain spacing.</summary>
            <value>The drain spacing.</value>
        </member>
        <member name="P:Models.Soils.SwimSubsurfaceDrain.DrainRadius">
            <summary>Gets or sets the drain radius.</summary>
            <value>The drain radius.</value>
        </member>
        <member name="P:Models.Soils.SwimSubsurfaceDrain.Klat">
            <summary>Gets or sets the klat.</summary>
            <value>The klat.</value>
        </member>
        <member name="P:Models.Soils.SwimSubsurfaceDrain.ImpermDepth">
            <summary>Gets or sets the imperm depth.</summary>
            <value>The imperm depth.</value>
        </member>
        <member name="T:Models.Soils.SwimWaterTable">
            <summary>
            SWIM water table
            </summary>
        </member>
        <member name="P:Models.Soils.SwimWaterTable.WaterTableDepth">
            <summary>Gets or sets the water table depth.</summary>
            <value>The water table depth.</value>
        </member>
        <member name="T:Models.Soils.TillageType">
            <summary>
            Tillage type structure
            </summary>
        </member>
        <member name="P:Models.Soils.TillageType.f_incorp">
            <summary>Gets or sets the f_incorp.</summary>
            <value>The f_incorp.</value>
        </member>
        <member name="P:Models.Soils.TillageType.tillage_depth">
            <summary>Gets or sets the tillage_depth.</summary>
            <value>The tillage_depth.</value>
        </member>
        <member name="P:Models.Soils.TillageType.cn_red">
            <summary>Gets or sets the cn_red.</summary>
            <value>The cn_red.</value>
        </member>
        <member name="P:Models.Soils.TillageType.cn_rain">
            <summary>Gets or sets the cn_rain.</summary>
            <value>The cn_rain.</value>
        </member>
        <member name="T:Models.Soils.TillageTypeDelegate">
            <summary>A deletegate for publishing a tillage event.</summary>
            <param name="sender"></param>
            <param name="tillageType"></param>
        </member>
        <member name="T:Models.Soils.Water">
            <summary>
            A model for capturing water parameters
            </summary>
        </member>
        <member name="P:Models.Soils.Water.soil">
            <summary>Gets the soil.</summary>
            <value>The soil.</value>
        </member>
        <member name="F:Models.Soils.Water._Thickness">
            <summary>The _ thickness</summary>
        </member>
        <member name="P:Models.Soils.Water.Thickness">
            <summary>Gets or sets the thickness.</summary>
            <value>The thickness.</value>
        </member>
        <member name="P:Models.Soils.Water.Depth">
            <summary>Gets or sets the depth.</summary>
            <value>The depth.</value>
        </member>
        <member name="P:Models.Soils.Water.BD">
            <summary>Gets or sets the bd.</summary>
            <value>The bd.</value>
        </member>
        <member name="P:Models.Soils.Water.AirDry">
            <summary>Gets or sets the air dry.</summary>
            <value>The air dry.</value>
        </member>
        <member name="P:Models.Soils.Water.LL15">
            <summary>Gets or sets the l L15.</summary>
            <value>The l L15.</value>
        </member>
        <member name="P:Models.Soils.Water.DUL">
            <summary>Gets or sets the dul.</summary>
            <value>The dul.</value>
        </member>
        <member name="P:Models.Soils.Water.SAT">
            <summary>Gets or sets the sat.</summary>
            <value>The sat.</value>
        </member>
        <member name="P:Models.Soils.Water.KS">
            <summary>Gets or sets the ks.</summary>
            <value>The ks.</value>
        </member>
        <member name="P:Models.Soils.Water.BDMetadata">
            <summary>Gets or sets the bd metadata.</summary>
            <value>The bd metadata.</value>
        </member>
        <member name="P:Models.Soils.Water.AirDryMetadata">
            <summary>Gets or sets the air dry metadata.</summary>
            <value>The air dry metadata.</value>
        </member>
        <member name="P:Models.Soils.Water.LL15Metadata">
            <summary>Gets or sets the l L15 metadata.</summary>
            <value>The l L15 metadata.</value>
        </member>
        <member name="P:Models.Soils.Water.DULMetadata">
            <summary>Gets or sets the dul metadata.</summary>
            <value>The dul metadata.</value>
        </member>
        <member name="P:Models.Soils.Water.SATMetadata">
            <summary>Gets or sets the sat metadata.</summary>
            <value>The sat metadata.</value>
        </member>
        <member name="P:Models.Soils.Water.KSMetadata">
            <summary>Gets or sets the ks metadata.</summary>
            <value>The ks metadata.</value>
        </member>
        <member name="P:Models.Soils.Water.Crops">
            <summary>Gets the crops.</summary>
            <value>The crops.</value>
        </member>
        <member name="M:Models.Soils.Water.Crop(System.String)">
            <summary>Return the specified crop to caller. Will return null if not found.</summary>
            <param name="CropName">Name of the crop.</param>
            <returns></returns>
        </member>
        <member name="P:Models.Soils.Water.CropNames">
            <summary>
            Get or set the names of crops. Note: When setting, the crops will be reorded to match
            the setting list of names. Also new crops will be added / deleted as required.
            </summary>
            <value>The crop names.</value>
        </member>
        <member name="M:Models.Soils.Water.FindCropIndex(System.String)">
            <summary>Return the specified crop to caller. Will return null if not found.</summary>
            <param name="CropName">Name of the crop.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Soils.SoilWater">
            <summary>
            .NET port of the Fortran SoilWat model
            Ported by Shaun Verrall Mar 2011
            Extended by Eric Zurcher Mar 2012
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.SummerDate">
            <summary>
            Start date for switch to summer parameters for soil water evaporation (dd-mmm)
            </summary>
            <value>
            The summer date.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.SummerU">
            <summary>
            Cummulative soil water evaporation to reach the end of stage 1 soil water evaporation in summer (a.k.a. U) (
            </summary>
            <value>
            The summer u.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.SummerCona">
            <summary>
            Drying coefficient for stage 2 soil water evaporation in summer (a.k.a. ConA) 
            </summary>
            <value>
            The summer cona.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.WinterDate">
            <summary>
            Start date for switch to winter parameters for soil water evaporation (dd-mmm)
            </summary>
            <value>
            The winter date.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.WinterU">
            <summary>
            Cummulative soil water evaporation to reach the end of stage 1 soil water evaporation in winter (a.k.a. U) 
            </summary>
            <value>
            The winter u.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.WinterCona">
            <summary>
            Drying coefficient for stage 2 soil water evaporation in winter (a.k.a. ConA) 
            </summary>
            <value>
            The winter cona.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.DiffusConst">
            <summary>
            Constant in the soil water diffusivity calculation (mm2/day)
            </summary>
            <value>
            The diffus constant.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.DiffusSlope">
            <summary>
            Effect of soil water storage above the lower limit on soil water diffusivity (/mm)
            </summary>
            <value>
            The diffus slope.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.Salb">
            <summary>
            Fraction of incoming radiation reflected from bare soil
            </summary>
            <value>
            The salb.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.CN2Bare">
            <summary>
            Runoff Curve Number (CN) for bare soil with average moisture
            </summary>
            <value>
            The c n2 bare.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.CNRed">
            <summary>
            Maximum reduction in runoff Curve Number due to cover 
            </summary>
            <value>
            The cn red.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.CNCov">
            <summary>
            Fractional cover at which maximum reduction of Curve Number occurs
            </summary>
            <value>
            The cn cov.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.slope">
            <summary>
            Slope of the catchment area for lateral flow calculations
            </summary>
            <remarks>
            DSG: The units of slope are metres/metre.  Hence a slope = 0 means horizontal soil layers, and no lateral flows will occur.
            A slope = 1 means basically a 45 degree angle slope, which we thought would be the most anyone would be wanting to simulate.  Hence the bounds 0-1.  I still think this is fine.
            </remarks>
            <value>
            The slope.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.discharge_width">
            <summary>
            Basal width of the downslope boundary of the catchment for lateral flow calculations (m)
            </summary>
            <value>
            The discharge_width.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.catchment_area">
            <summary>
            Catchment area for later flow calculations (m2)
            </summary>
            <value>
            The catchment_area.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.max_pond">
            <summary>
            Maximum ponding depth of water (e.g. of a rice paddy) (mm)
            </summary>
            <value>
            The max_pond.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.Thickness">
            <summary>
            Soil layer thickness for each layer (mm)
            </summary>
            <remarks>
            Thicknesses specified in "SoilWater" node of GUI (in mm as double).
            This is the NON standard layer thickness.
            </remarks>
            <value>
            The thickness.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.Depth">
            <summary>
            Soil layer thickness for each layer in cm (only used in the GUI) (cm)
            </summary>
            <remarks>
            This "Depth" variable is only needed for the "Depth" column in the "SoilWater" node of the GUI.
            Just converts back and forth between "Depth" (in cm as string) AND "Thickness" (in mm as double).
            </remarks>
            <value>
            The depth.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.SWCON">
            <summary>
            Fractional amount of water above DUL that can drain under gravity per day
            </summary>
            <remarks>
            Between (SAT and DUL) soil water conductivity constant for each soil layer.
            At thicknesses specified in "SoilWater" node of GUI.
            Use Soil.SWCON for SWCON in standard thickness
            </remarks>
            <value>
            The swcon.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.KLAT">
            <summary>
            Lateral saturated hydraulic conductivity (KLAT)
            </summary>
            <remarks>
            Lateral flow soil water conductivity constant for each soil layer.
            At thicknesses specified in "SoilWater" node of GUI.
            Use Soil.KLAT for KLAT in standard thickness
            </remarks>
            <value>
            The klat.
            </value>
        </member>
        <member name="F:Models.Soils.SoilWater.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.Weather">
            <summary>
            The weather
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.Soil">
            <summary>
            The soil
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.paddock">
            <summary>
            The paddock
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.SurfaceOM">
            <summary>
            The surface om
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.Summary">
            <summary>
            The summary
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.solutes">
            <summary>Link to Apsim's solute manager module.</summary>
        </member>
        <member name="P:Models.Soils.SoilWater.min_crit_temp">
            <summary>
            Air temperature below which the ratio between eo and eeq decreases (C)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.max_crit_temp">
            <summary>
            Air temperature above which the ratio between eo and eeq increases (C)
            </summary>
            <value>
            The max_crit_temp.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.max_albedo">
            <summary>
            Maximum bare ground soil albedo (0-1)
            </summary>
            <value>
            The max_albedo.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.A_to_evap_fact">
            <summary>
            Constant in the calculation of the effect of surface residues on potential evapotranspiration
            </summary>
            <remarks>
            Factor to convert 'A' to coefficient in Adam's type residue effect on Eos
            </remarks>
            <value>
            The a_to_evap_fact.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.canopy_eos_coef">
            <summary>
            Constant in the calculation of the effect of canopy cover on potential evapotranspiration
            </summary>
            <remarks>
            Coefficient in cover Eos reduction equation
            </remarks>
            <value>
            The canopy_eos_coef.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.sw_top_crit">
            <summary>
            Critical soil water ratio in top layer below which stage 2 evaporation occurs
            </summary>
            <value>
            The sw_top_crit.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.sumes1_max">
            <summary>
            The value of the sum of soil water evaporation after which stage 1 evaporation concludes (mm)
            </summary>
            <remarks>
            Upper limit of sumes1
            </remarks>
            
            
        </member>
        <member name="P:Models.Soils.SoilWater.sumes2_max">
            <summary>
            The value of the sum of soil water evaporation after which stage 2 evaporation concludes (mm)
            </summary>
            <remarks>
            Upper limit of sumes2
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilWater.solute_flow_eff">
            <summary>
            Efficiency of moving solute with water flow below DUL (unsaturated flow)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.solute_flux_eff">
            <summary>
            Efficiency of moving solute with water flow above DUL (saturated flow)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.gravity_gradient">
            <summary>
            Multiplier that can be used to reduce the effects of gravity on soil water movement, 0 = a horizontal soil, 1 = a vertial soil
            </summary>
            <remarks>
            Gradient due to hydraulic differentials
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilWater.specific_bd">
            <summary>
            Soil dry bulk density (g/cm3)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.hydrol_effective_depth">
            <summary>
            Effective depth of ponded water that must be built up on the soil surface before runoff will occur
            </summary>
            <remarks>
            Hydrologically effective depth for runoff
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilWater.mobile_solutes">
            <summary>
            Names of all possible mobile solutes
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.immobile_solutes">
            <summary>
            Names of all possible immobile solutes
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.canopy_fact">
            <summary>
            Values of canopy effect for lookup (Y) in the relationship between crop height and effect of canopy cover on runoff
            </summary>
            <remarks>
            Canopy factors for cover runoff effect
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilWater.canopy_fact_height">
            <summary>
            Heights values for lookup (X) in the relationship between crop height and effect of canopy cover on runoff
            </summary>
            <remarks>
            Heights for canopy factors
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilWater.canopy_fact_default">
            <summary>
            Default canopy factor for runoff to use in absence of the canopy effect function, 0-1
            </summary>
            <remarks>
            Default canopy factor in absence of height
            </remarks>
        </member>
        <member name="P:Models.Soils.SoilWater.act_evap_method">
            <summary>
            Name of soil water evaporation model being used
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWater.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Soils.SoilWater"/> class.
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.Eo">
            <summary>
            Potential evapotranspiration of the whole soil-plant system
            </summary>
            <value>
            The eo.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.Eos">
            <summary>
            Potential evaporation of water from the soil (after accounting for the effects of cover and residues)
            </summary>
            <value>
            The eos.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.Es">
            <summary>
            Actual (realised) soil water evaporation
            </summary>
            <value>
            The es.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.t">
            <summary>
            Number of days since the beginning of 2nd-stage soil water evaporation
            </summary>
            <remarks>
            time after 2nd-stage soil evaporation begins (d)
            </remarks>
            <value>
            The t.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.cn2_new">
            <summary>
            Actual curve number (CN) after taking into account the effects of crop and residue cover
            </summary>
            <value>
            The cn2_new.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.Drainage">
            <summary>
            Drainage of water exiting the deepest soil layer (mm /day)
            </summary>
            <value>
            The drainage.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.LeachNO3">
            <summary>
            Amount of N leaching as NO3-N from the deepest soil layer (kg /ha)
            </summary>
            <value>
            The leach n o3.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.LeachNH4">
            <summary>
            Amount of N leaching as NH4-N from the deepest soil layer (kg /ha)
            </summary>
            <value>
            The leach n h4.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.LeachUrea">
            <summary>
            Amount of N leaching as urea-N  from the deepest soil layer (kg /ha)
            </summary>
            <value>
            The leach urea.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.Infiltration">
            <summary>
            Depth of water infiltration into the soil (mm)
            </summary>
            <value>
            The infiltration.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.Runoff">
            <summary>
            Amount of water runoff (mm)
            </summary>
            <value>
            The runoff.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.pond_evap">
            <summary>
            Evaporation of water from the surface of the pond (mm)
            </summary>
            <value>
            The pond_evap.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.pond">
            <summary>
            Surface water ponding depth (mm)
            </summary>
            <value>
            The pond.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.WaterTable">
            <summary>
            Depth below the soil surface of the first saturated layer (mm)
            </summary>
            <remarks>
            Water table depth
            (depth below the ground surface of the first saturated layer)
            </remarks>
            <value>
            The water table.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.ESW">
            <summary>
            Extractable soil water (above LL15) (mm)
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.SWmm">
            <summary>
            Current soil water content for each soil layer expressed as a depth of water (mm)
            </summary>
            <value>
            The s WMM.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.SW">
            <summary>
            Current soil water content for each soil layer expressed as a volumetric water content
            </summary>
            <value>
            The sw.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.Flow">
            <summary>
            Depth of water moving upward from each soil layer during unsaturated flow (negative value means downward movement) (mm)
            </summary>
            <value>
            The flow.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.Flux">
            <summary>
            Depth of water moving downward out of each soil layer due to gravity drainage (above DUL) (mm)
            </summary>
            <value>
            The flux.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.LateralOutflow">
            <summary>
            Amount of water moving laterally out of the profile (mm)
            </summary>
            <value>
            The outflow_lat.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.FlowNO3">
            <summary>
            Amount of N leaching as NO3 from each soil layer (kg /ha)
            </summary>
            <value>
            The flow_no3.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.FlowNH4">
            <summary>
            Amount of N leaching as NH4 from each soil layer (kg /ha)
            </summary>
            <value>
            The flow_nh4.
            </value>
        </member>
        <member name="P:Models.Soils.SoilWater.flow_urea">
            <summary>
            Amount of N leaching as urea from each soil layer (kg /ha)
            </summary>
            <value>
            The flow_urea.
            </value>
        </member>
        <member name="M:Models.Soils.SoilWater.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:Models.Soils.SoilWater.TillageTypesList">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.TillageTypesList.TillageType">
            <summary>Gets or sets the type of the tillage.</summary>
            <value>The type of the tillage.</value>
        </member>
        <member name="M:Models.Soils.SoilWater.TillageTypesList.GetTillageData(System.String)">
            <summary>Gets the tillage data.</summary>
            <param name="Name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWater.Tillage(System.String)">
            <summary>
            Tillages the specified default tillage name.
            </summary>
            <param name="DefaultTillageName">Default name of the tillage.</param>
            <exception cref="T:Models.Core.ApsimXException"></exception>
        </member>
        <member name="M:Models.Soils.SoilWater.Tillage(Models.Soils.TillageType)">
            <summary>
            Tillages the specified data.
            </summary>
            <param name="Data">The data.</param>
            <exception cref="T:Models.Core.ApsimXException"></exception>
        </member>
        <member name="M:Models.Soils.SoilWater.WriteTillageToSummaryFile(System.String,System.Double,System.Double)">
            <summary>
            Writes the tillage to summary file.
            </summary>
            <param name="TillageName">Name of the tillage.</param>
            <param name="CnReduction">The cn reduction.</param>
            <param name="CnCumWater">The cn cum water.</param>
        </member>
        <member name="M:Models.Soils.SoilWater.OnIrrigated(System.Object,Models.Soils.IrrigationApplicationType)">
            <summary>
            Called when [irrigated].
            </summary>
            <param name="sender">The sender.</param>
            <param name="IrrigationData">The irrigation data.</param>
        </member>
        <member name="M:Models.Soils.SoilWater.SetMaxPond(System.Double)">
            <summary>
            Sets the maximum pond.
            </summary>
            <param name="NewDepth">The new depth.</param>
        </member>
        <member name="M:Models.Soils.SoilWater.SetWaterTable(System.Double)">
            <summary>
            Sets the water table.
            </summary>
            <param name="InitialDepth">The initial depth.</param>
        </member>
        <member name="M:Models.Soils.SoilWater.SetWater_mm(System.Double[])">
            <summary>
            Sets the water_mm.
            </summary>
            <param name="New_SW_dep">The new_ s w_dep.</param>
        </member>
        <member name="M:Models.Soils.SoilWater.SetSWmm(System.Int32,System.Double)">
            <summary>
            Sets the s WMM.
            </summary>
            <param name="Layer">Zero Based Layer Number</param>
            <param name="NewSWmm">New value for SWmm for the specified Layer</param>
        </member>
        <member name="M:Models.Soils.SoilWater.SetWater_frac(System.Double[])">
            <summary>
            Sets the water_frac.
            </summary>
            <param name="New_SW">The new_ sw.</param>
        </member>
        <member name="M:Models.Soils.SoilWater.RemoveWater(System.Double[])">
            <summary>Remove water from the profile</summary>
        </member>
        <member name="P:Models.Soils.SoilWater.dlt_sw">
            <summary>
            Change in volumetric soil water content in each soil layer
            </summary>
            <value>
            The DLT_SW.
            </value>
        </member>
        <member name="M:Models.Soils.SoilWater.OnWaterChanged(Models.PMF.WaterChangedType)">
            <summary>
            Called when [water changed].
            </summary>
            <param name="WaterChanged">The water changed.</param>
        </member>
        <member name="F:Models.Soils.SoilWater.constants">
            <summary>
            The constants
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.surfaceFactory">
            <summary>
            The surface factory
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.surface">
            <summary>
            The surface
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.SoilObject">
            <summary>
            The soil object
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.met">
            <summary>
            The met
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.irrig">
            <summary>
            A list of irrigation applications for the day
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.canopy">
            <summary>
            The canopy
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.surfaceCover">
            <summary>
            The surface cover
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.runon">
            <summary>
            The runon
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.inflow_lat">
            <summary>
            The inflow_lat
            </summary>
        </member>
        <member name="F:Models.Soils.SoilWater.interception">
            <summary>
            The interception
            </summary>
        </member>
        <member name="P:Models.Soils.SoilWater.ResidueInterception">
            <summary>
            Loss of precipitation due in interception of surface residues (mm)
            </summary>
            <remarks>
            residueinterception can be specified in surface organic matter module (not implemented yet)
            used in runoff and in infilitration calculation
            residueinterception is only used in ResiduesTrial.apsimx
            </remarks>
        </member>
        <member name="M:Models.Soils.SoilWater.GetTodaysOptionalVariables">
            <summary>
            Gets the todays optional variables.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWater.GetTodaysCanopyData">
            <summary>
            Gets the todays canopy data.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWater.GetTodaysSurfaceCover">
            <summary>
            Gets the todays surface cover.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWater.GetTodaysSoluteAmounts">
            <summary>
            Gets the todays solute amounts.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWater.FindSolutes">
            <summary>
            Called to find all solutes.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWater.PositionInCharArray(System.String,System.String[])">
            <summary>
            Positions the in character array.
            </summary>
            <param name="Name">The name.</param>
            <param name="NameList">The name list.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Soils.SoilWater.SaveModuleConstants">
            <summary>
            Saves the module constants.
            </summary>
        </member>
        <member name="M:Models.Soils.SoilWater.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Called when [simulation commencing].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:Models.Core.ApsimXException">
            SoilWater module has detected that the Soil has no layers.
            </exception>
        </member>
        <member name="M:Models.Soils.SoilWater.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Called when DoDailyInitialisation invoked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilWater.OnDoSoilWaterMovement(System.Object,System.EventArgs)">
            <summary>
            Called when [do soil water movement].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Soils.SoilWater.SendNitrogenChangedEvent">
            <summary>
            Sends the nitrogen changed event.
            </summary>
        </member>
        <member name="T:Models.Storage.DataStore">
            <summary>
            # [Name]
            A storage service for reading and writing to/from a database.
            </summary>
        </member>
        <member name="F:Models.Storage.DataStore.connection">
            <summary>A database connection</summary>
        </member>
        <member name="F:Models.Storage.DataStore.useFirebird">
            <summary>
            Selector for the database type. Set in the constructors.
            </summary>
        </member>
        <member name="F:Models.Storage.DataStore.tables">
            <summary>A List of tables that needs writing.</summary>
        </member>
        <member name="F:Models.Storage.DataStore.dataToWrite">
            <summary>Data that needs writing</summary>
        </member>
        <member name="F:Models.Storage.DataStore.simulationIDs">
            <summary>The IDS for all simulations</summary>
        </member>
        <member name="F:Models.Storage.DataStore.checkpointIDs">
            <summary>The IDs for all checkpoints</summary>
        </member>
        <member name="F:Models.Storage.DataStore.stoppingWriteToDB">
            <summary>Are we stopping writing to the DB?</summary>
        </member>
        <member name="F:Models.Storage.DataStore.writeTask">
            <summary>A task, run asynchronously, that writes to the .db</summary>
        </member>
        <member name="P:Models.Storage.DataStore.SimulationNames">
            <summary>Return a list of simulations names or empty string[]. Never returns null.</summary>
        </member>
        <member name="P:Models.Storage.DataStore.TableNames">
            <summary>Returns a list of table names</summary>
        </member>
        <member name="P:Models.Storage.DataStore.FileName">
            <summary>Returns the file name of the .db file</summary>
        </member>
        <member name="M:Models.Storage.DataStore.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Storage.DataStore.#ctor(System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.Storage.DataStore.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            This destructor will run only if the Dispose method
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="F:Models.Storage.DataStore.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:Models.Storage.DataStore.Dispose">
            <summary>Dispose method</summary>
        </member>
        <member name="M:Models.Storage.DataStore.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Models.Storage.DataStore.WriteRow(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Write to permanent storage.</summary>
            <param name="simulationName">Name of simulation</param>
            <param name="tableName">Name of table</param>
            <param name="columnNames">Column names</param>
            <param name="columnUnits">Column units</param>
            <param name="valuesToWrite">Values of row to write</param>
        </member>
        <member name="M:Models.Storage.DataStore.OnRunCommencing(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Simulation runs are about to begin.</summary>
        </member>
        <member name="M:Models.Storage.DataStore.OnEndRun(System.Object,System.EventArgs)">
            <summary>Finish writing to DB file</summary>
        </member>
        <member name="M:Models.Storage.DataStore.GetData(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Return all data from the specified simulation and table name. If simulationName = "*"
            the all simulation data will be returned.
            </summary>
            <param name="checkpointName">Name of the checkpoint.</param>
            <param name="simulationName">Name of the simulation.</param>
            <param name="tableName">Name of the table.</param>
            <param name="fieldNames">Optional column names to retrieve from storage</param>
            <param name="filter">Optional filter</param>
            <param name="from">Optional start index. Only used when 'count' specified. The record number to offset.</param>
            <param name="count">Optional number of records to return or all if 0.</param>
            <param name="orderBy">Optional column name to order by</param>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.DataStore.GetUnits(System.String,System.String)">
            <summary>
            Obtain the units for a column of data
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="columnHeading">Name of the data column</param>
            <returns>The units (with surrounding parentheses), or null if not available</returns>
        </member>
        <member name="M:Models.Storage.DataStore.AddUnitsForTable(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Add units to table. Removes old units first.
            </summary>
            <param name="tableName">The table name</param>
            <param name="columnNames">The column names to add</param>
            <param name="columnUnits">The column units to add</param>
        </member>
        <member name="M:Models.Storage.DataStore.WriteTable(System.Data.DataTable)">
            <summary>
            Create a table in the database based on the specified data. If a 'SimulationName'
            column is found a corresponding 'SimulationID' column will be created.
            </summary>
            <param name="data">The data to write</param>
        </member>
        <member name="M:Models.Storage.DataStore.DeleteDataInTable(System.String)">
            <summary>Delete the specified table.</summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Models.Storage.DataStore.RunQuery(System.String)">
            <summary>Return all data from the specified simulation and table name.</summary>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.DataStore.ColumnNames(System.String)">
            <summary>Return a list of simulations names or empty string[]. Never returns null.</summary>
            <param name="tableName">The table name</param>
        </member>
        <member name="M:Models.Storage.DataStore.EmptyDataStore">
            <summary>Delete all tables</summary>
        </member>
        <member name="M:Models.Storage.DataStore.GetSimulationID(System.String)">
            <summary>Get a simulation ID for the specified simulation name</summary>
            <param name="simulationName">The simulation name to look for</param>
            <returns>The database ID or -1 if not found</returns>
        </member>
        <member name="M:Models.Storage.DataStore.GetCheckpointID(System.String)">
            <summary>Get a checkpoint ID for the specified checkpoint name</summary>
            <param name="checkpointName">The simulation name to look for</param>
            <returns>The database ID or -1 if not found</returns>
        </member>
        <member name="M:Models.Storage.DataStore.Checkpoints">
            <summary>
            Return list of checkpoints.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Storage.DataStore.AddCheckpoint(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Add a checkpoint</summary>
            <param name="name">Name of checkpoint</param>
            <param name="filesToCheckpoint">Files to checkpoint</param>
        </member>
        <member name="M:Models.Storage.DataStore.DeleteCheckpoint(System.String)">
            <summary>Delete a checkpoint</summary>
            <param name="name">Name of checkpoint</param>
        </member>
        <member name="M:Models.Storage.DataStore.RevertCheckpoint(System.String)">
            <summary>Revert a checkpoint</summary>
            <param name="name">Name of checkpoint</param>
        </member>
        <member name="M:Models.Storage.DataStore.GetCheckpointFiles(System.String)">
            <summary>Return a list of checkpoint files</summary>
            <param name="name">Name of checkpoint</param>
        </member>
        <member name="M:Models.Storage.DataStore.WaitForAllRecordsToBeWritten">
            <summary>Wait for all records to be written.</summary>
        </member>
        <member name="M:Models.Storage.DataStore.IsDataToWrite">
            <summary>Is there data to be written?</summary>
        </member>
        <member name="M:Models.Storage.DataStore.StartDBWriteThread">
            <summary>Start the thread that writes to the .db</summary>
        </member>
        <member name="M:Models.Storage.DataStore.StopDBWriteThread">
            <summary>Stop the thread that writes to the .db</summary>
        </member>
        <member name="M:Models.Storage.DataStore.WriteDBWorker">
            <summary>Worker method for writing to the .db file. This runs in own thread.</summary>
        </member>
        <member name="M:Models.Storage.DataStore.WriteUnitsTable">
            <summary>Write a _units table to .db</summary>
        </member>
        <member name="M:Models.Storage.DataStore.Open(System.Boolean)">
            <summary>Open the database.</summary>
            <param name="readOnly">Open for readonly access?</param>
            <returns>True if file was successfully opened</returns>
        </member>
        <member name="M:Models.Storage.DataStore.Close">
            <summary>Close the database.</summary>
        </member>
        <member name="M:Models.Storage.DataStore.Refresh">
            <summary>Refresh our tables structure and simulation Ids</summary>
        </member>
        <member name="M:Models.Storage.DataStore.CleanupDB(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>Remove all simulations from the database that don't exist in 'simulationNamesBeingRun'.</summary>
            <param name="knownSimulationNames">A dictionary mapping simulation names in the .apsimx file to the name of their folder.</param>
            <param name="simulationNamesBeingRun">The names of the simulations about to be run.</param>
        </member>
        <member name="M:Models.Storage.DataStore.CleanupUnusedFields">
            <summary>
            Cleanup all null fields in all tables.
            </summary>
        </member>
        <member name="M:Models.Storage.DataStore.ExecuteInsertQuery(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Execute an INSERT or DELETE query, inserting or deleting the specified simulation names.
            </summary>
            <param name="tableName">Name of table to insert into</param>
            <param name="columnName">Name of column in table to insert values for</param>
            <param name="simulationNames">The names of the simulations</param>
        </member>
        <member name="M:Models.Storage.DataStore.ExecuteDeleteQuery(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Execute an INSERT or DELETE query, inserting or deleting the specified simulation names.
            </summary>
            <param name="sqlPrefix">SQL prefix</param>
            <param name="simulationNames">The names of the simulations</param>
            <param name="sqlSuffix">SQL suffix</param>
        </member>
        <member name="M:Models.Storage.DataStore.ExecuteDeleteQueryUsingIDs(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Execute an INSERT or DELETE query, inserting or deleting the specified simulation names.
            This method will use IDs.
            </summary>
            <param name="sqlPrefix">SQL prefix</param>
            <param name="simulationNames">The names of the simulations</param>
            <param name="sqlSuffix">SQL suffix</param>
        </member>
        <member name="M:Models.Storage.DataStore.AddSimulationIDColumnToTable(System.Data.DataTable)">
            <summary>
            Using the SimulationName column in the specified 'table', add a
            SimulationID column.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:Models.Storage.DataStore.GetTableColumns(System.String)">
            <summary>
            Get the table column names
            </summary>
            <param name="tableName">The table name</param>
            <returns>List of table names</returns>
        </member>
        <member name="T:Models.Storage.DataStore.CheckpointFile">
            <summary>Encapsulates a file that has been checkpointed</summary>
        </member>
        <member name="F:Models.Storage.DataStore.CheckpointFile.fileName">
            <summary>Name of file</summary>
        </member>
        <member name="F:Models.Storage.DataStore.CheckpointFile.contents">
            <summary>Contents of file</summary>
        </member>
        <member name="T:Models.Storage.Row">
            <summary>Encapsulates a row that needs writing to the database.</summary>
        </member>
        <member name="P:Models.Storage.Row.SimulationName">
            <summary>Simulation name for this row</summary>
        </member>
        <member name="P:Models.Storage.Row.ColumnNames">
            <summary>A collection of column names for this row</summary>
        </member>
        <member name="P:Models.Storage.Row.ColumnUnits">
            <summary>A collection of column units for this row</summary>
        </member>
        <member name="P:Models.Storage.Row.Values">
            <summary>A collection of column values for this row</summary>
        </member>
        <member name="M:Models.Storage.Row.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="simulationName">Simulation name</param>
            <param name="columnNames">Column names</param>
            <param name="columnUnits">Column units</param>
            <param name="valuesToWrite">A row of values to write</param>
        </member>
        <member name="M:Models.Storage.Row.GetValues(System.Collections.Generic.List{System.String},System.Object[]@,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>Write row to .db</summary>
            <param name="returnColumnNames">Column names for each value</param>
            <param name="returnValues">An write to store our values in</param>
            <param name="simulationIDs">A dictionary of simulation IDs</param>
        </member>
        <member name="M:Models.Storage.Row.Flatten">
            <summary>
            'Flatten' the row passed in, into a list of columns ready to be added
            to a data table.
            </summary>
        </member>
        <member name="M:Models.Storage.Row.FlattenValue(System.String,System.String,System.Object,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object})">
            <summary>
            'Flatten' a value (if it is an array or structure) into something that can be
            stored in a flat database table.
            </summary>
            <param name="name"></param>
            <param name="units"></param>
            <param name="value"></param>
            <param name="newColumnNames"></param>
            <param name="newColumnUnits"></param>
            <param name="newValues"></param>
        </member>
        <member name="T:Models.Storage.Table">
            <summary>Encapsulates a table that needs writing to the database.</summary>
        </member>
        <member name="M:Models.Storage.Table.Column.#ctor(System.String,System.String,System.String)">
            <summary>Constructor</summary>
            <param name="columnName">Name of column</param>
            <param name="columnUnits">Units of column</param>
            <param name="dataTypeString">Data type of column</param>
        </member>
        <member name="F:Models.Storage.Table.lockObject">
            <summary>Lock object</summary>
        </member>
        <member name="F:Models.Storage.Table.RowsToWrite">
            <summary>Rows to write to .db file</summary>
        </member>
        <member name="F:Models.Storage.Table.sortedColumnNames">
            <summary>A set of column names for quickly checking if columns exist in this table.</summary>
        </member>
        <member name="F:Models.Storage.Table.haveCheckedForSimulationIDColumn">
            <summary>Have we checked for a simulation ID column?</summary>
        </member>
        <member name="F:Models.Storage.Table.columnIndexes">
            <summary>Have we checked for a simulation ID column?</summary>
        </member>
        <member name="P:Models.Storage.Table.Name">
            <summary>Name of table.</summary>
        </member>
        <member name="P:Models.Storage.Table.HasRowsToWrite">
            <summary>Are there any rows that need writing?</summary>
        </member>
        <member name="P:Models.Storage.Table.Columns">
            <summary>Column names in table</summary>
        </member>
        <member name="P:Models.Storage.Table.NumRowsToWrite">
            <summary>Gets the number of rows that need writing</summary>
        </member>
        <member name="M:Models.Storage.Table.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="tableName">Name of table</param>
        </member>
        <member name="M:Models.Storage.Table.AddRow(APSIM.Shared.Utilities.IDatabaseConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Add a row to our list of rows to write</summary>
            <param name="connection"></param>
            <param name="checkpointID">ID of checkpoint</param>
            <param name="simulationID">ID of simulation</param>
            <param name="rowColumnNames">Column names of values</param>
            <param name="rowColumnUnits">Units of values</param>
            <param name="rowValues">The values</param>
        </member>
        <member name="M:Models.Storage.Table.SetConnection(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>Set the connection</summary>
            <param name="connection">The database connection</param>
        </member>
        <member name="M:Models.Storage.Table.ConfigureColumns(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>Get a list of columns and simulation ids.</summary>
            <param name="connection">The database connection to use</param>
        </member>
        <member name="M:Models.Storage.Table.WriteRows(APSIM.Shared.Utilities.IDatabaseConnection,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>Write the specified number of rows.</summary>
            <param name="connection">The database connection to write to</param>
            <param name="simulationIDs">A dictionary of simulation IDs</param>
        </member>
        <member name="M:Models.Storage.Table.MergeColumns(Models.Storage.Table)">
            <summary>Merge columns</summary>
        </member>
        <member name="M:Models.Storage.Table.HasColumn(System.String)">
            <summary>Does the table have the specified column name</summary>
            <param name="fieldName">Column name to look for</param>
        </member>
        <member name="M:Models.Storage.Table.LookupUnitsForColumn(APSIM.Shared.Utilities.IDatabaseConnection,System.String)">
            <summary>Lookup and return units for the specified column.</summary>
            <param name="connection">Database connection</param>
            <param name="columnName">The column name to return units for</param>
        </member>
        <member name="M:Models.Storage.Table.CreateTable(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>Ensure columns exist in .db file</summary>
            <param name="connection">The database connection to write to</param>
        </member>
        <member name="M:Models.Storage.Table.AlterTable(APSIM.Shared.Utilities.IDatabaseConnection)">
            <summary>Alter an existing table ensuring all columns exist.</summary>
            <param name="connection">The database connection to write to</param>
        </member>
        <member name="M:Models.Storage.Table.Flatten(System.Collections.Generic.IEnumerable{System.String}@,System.Collections.Generic.IEnumerable{System.String}@,System.Collections.Generic.IEnumerable{System.Object}@)">
            <summary>
            'Flatten' the row passed in, into a list of columns ready to be added
            to a data table.
            </summary>
        </member>
        <member name="M:Models.Storage.Table.FlattenValue(System.String,System.String,System.Object,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object})">
            <summary>
            'Flatten' a value (if it is an array or structure) into something that can be
            stored in a flat database table.
            </summary>
            <param name="name"></param>
            <param name="units"></param>
            <param name="value"></param>
            <param name="newColumnNames"></param>
            <param name="newColumnUnits"></param>
            <param name="newValues"></param>
        </member>
        <member name="M:Models.Storage.Table.GetValueFromRow(System.Object[],System.String)">
            <summary>
            Get the simulation ID for the specified row.
            </summary>
            <param name="values">The row values</param>
            <param name="columnName">The column name to look for</param>
            <returns>Returns ID or 0 if not found</returns>
        </member>
        <member name="M:Models.Storage.Table.GetValuesFromRows(System.Collections.Generic.List{System.Object[]},System.String)">
            <summary>
            Get all simulation IDs for the specified rows.
            </summary>
            <param name="values">The row values</param>
            <param name="columnName">The column name to look for</param>
            <returns>Returns ID or 0 if not found</returns>
        </member>
        <member name="T:Models.GrazPlan.SupplementModel">
            <summary>
            SupplementModel contains a list of supplement "stores", each of which
            consists of an amount and a description of a supplementary feed as a
            Supplement from GrazSupp.cs.
            Key properties and methods of SupplementModel are:
            * Count         Number of valid supplement stores
            * Store[]       Supplement attributes for each store (zero-offset)
            * StoredKg[]    Amount in each supplement store (zero-offset)
            * AddToStore    Adds an amount of supplement to a store. Used in setting
            up, in "buy" events, and in storing conserved fodder.
            * FeedOut       Transfers feed from a store. Used in the "feed" event.
            Notes:
            1.  All SupplementModels have a "fodder" store.  This is where material
            passed to the supplement component as a result of fodder conservation
            should go.
            2.  If the composition parameters in the AddToStore method (DMP, DMD, MEDM,
            CP, DG, EE and ADIP2CP) are set to zero, the class will use the default
            value for the supplement name from grazSUPP.  Using this feature with a
            supplement not named in grazSUPP will result in an wheat being used.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.DEFAULT">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.ROUGHAGE">
            <summary>
            The roughage
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.FODDER">
            <summary>
            The fodder
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.Paddocks">
            <summary>
            The paddocks
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.currPaddSupp">
            <summary>
            The FCurrPaddSupp
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.GrazPlan.SupplementModel"/> class.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SupplementModel.SpoilageTime">
            <summary>
            Gets or sets the spoilage time.
            </summary>
            <value>
            The spoilage time.
            </value>
        </member>
        <member name="P:Models.GrazPlan.SupplementModel.PaddockCount">
            <summary>
            Gets the paddock count.
            </summary>
            <value>
            The paddock count.
            </value>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.AddPaddock(System.Int32,System.String)">
            <summary>
            Adds the paddock.
            </summary>
            <param name="paddId">The padd identifier.</param>
            <param name="paddName">Name of the padd.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.ClearPaddockList">
            <summary>
            Clears the paddock list.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.PaddockName(System.Int32)">
            <summary>
            Gets the paddock name at an index
            </summary>
            <param name="idx">The index.</param>
            <returns>The paddock name</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.FindFedSuppt(System.Int32,System.Double@)">
            <summary>
            Finds the amount of supplement fed in a paddock
            </summary>
            <param name="paddIdx">Index of the padd.</param>
            <param name="amount">The amount.</param>
            <returns>The amount of supplement fed</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.GetFedSuppt(System.String,System.Double@)">
            <summary>
            Gets the fed supplement for the paddock name.
            </summary>
            <param name="paddName">Name of the padd.</param>
            <param name="amount">The amount.</param>
            <returns>The supplement object that was fed</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.GetFedSuppt(System.Int32,System.Double@)">
            <summary>
            Gets the fed suppt.
            </summary>
            <param name="paddIdx">The padd identifier.</param>
            <param name="amount">The amount.</param>
            <returns>The supplement object that was fed</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.FeedSuppFirst(System.Int32)">
            <summary>
            Returns the flag to feed supplement first that would
            have been entered when calling a feed() event.
            </summary>
            <param name="paddIdx">Paddock index</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.PaddockIndexOf(System.String)">
            <summary>
            Index of the paddock by name
            </summary>
            <param name="name">The name of a paddock</param>
            <returns>The paddock index</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.PaddockIndexOf(System.Int32)">
            <summary>
            Index of the paddock by ID number
            </summary>
            <param name="id">The identifier.</param>
            <returns>The paddock index</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.AddToStore(System.Double,System.String,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds an amount of a supplement to a store.
            * If the store name already exists in the FStores array, the method adds
            the supplement to that store.  Otherwise a new store is created.
            * The DMP, DMD, MEDM, CP, DG, EE and ADIP2CP parameters may be set to zero,
            in which case the default values for the supplement name are used.
            Defaults are taken from the current store if the name is already defined,
            and from grazSUPP.PAS otherwise.  If defaults cannot be found for a name,
            wheat is used as the default composition.
            </summary>
            <param name="suppKg">Amount (kg fresh weight) of the supplement to be included in the store.</param>
            <param name="suppName">Name of the supplement.</param>
            <param name="roughage">The roughage.</param>
            <param name="dmp">Proportion of the fresh weight which is dry matter   kg/kg FW</param>
            <param name="dmd">Dry matter digestibility of the supplement           kg/kg DM</param>
            <param name="medm">Metabolisable energy content of dry matter          MJ/kg DM</param>
            <param name="cp">Crude protein content                                 kg/kg DM</param>
            <param name="dg">Degradability of the crude protein                    kg/kg CP</param>
            <param name="ee">Ether-extractable content                             kg/kg DM</param>
            <param name="adip2cp">Ratio of acid detergent insoluble protein to CP  kg/kg CP</param>
            <param name="phos">Phosphorus content                                  kg/kg DM</param>
            <param name="sulf">Sulphur content                                     kg/kg DM</param>
            <param name="ashAlk">Ash alkalinity                                    mol/kg DM</param>
            <param name="maxPass">Maximum passage rate                             0-1</param>
            <returns>
            Index of the supplement in the store
            </returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.AddToStore(System.Double,Models.GrazPlan.FoodSupplement)">
            <summary>
            Adds the supplement to the store.
            </summary>
            <param name="suppKg">The supp kg.</param>
            <param name="suppComp">The supp comp.</param>
            <returns>The supplement index</returns>
            <exception cref="T:System.Exception">Supplement submodel: cannot combine roughage and concentrate, both named  + suppComp.sName</exception>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.FeedOut(System.String,System.Double,System.String,System.Boolean)">
            <summary>
            Feeds the supplement out.
            </summary>
            <param name="suppName">Name of the supp.</param>
            <param name="fedKg">The fed kg.</param>
            <param name="paddName">Name of the padd.</param>
            <param name="feedSuppFirst">Feed the supplement before pasture consumption. Bail feeding.</param>
            <exception cref="T:System.Exception">
            Supplement \ + suppName + \ not recognised
            or
            </exception>
            Paddock \ + paddName + \ not recognised
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.AddFodder(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the fodder.
            </summary>
            <param name="destStore">The dest store.</param>
            <param name="fodderFW">The fodder fw.</param>
            <param name="DMP">The DMP.</param>
            <param name="DMD">The DMD.</param>
            <param name="NConc">The n conc.</param>
            <param name="PConc">The p conc.</param>
            <param name="SConc">The s conc.</param>
            <param name="ashAlk">The ash alk.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.Blend(System.String,System.Double,System.String)">
            <summary>
            Blends the specified source store.
            </summary>
            <param name="srcStore">The source store.</param>
            <param name="transferKg">The transfer kg.</param>
            <param name="destStore">The dest store.</param>
            <exception cref="T:System.Exception">Supplement \ + srcStore + \ not recognised</exception>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.RemoveSuppt(System.Int32,System.Double)">
            <summary>
            Removes the supplement
            </summary>
            <param name="paddIdx">Index of the padd.</param>
            <param name="suppKg">The supp kg.</param>
            <exception cref="T:System.Exception">Paddock not recognised</exception>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.RemoveEaten(System.String,System.Double)">
            <summary>
            Removes the eaten supplement
            </summary>
            <param name="paddName">Name of the padd.</param>
            <param name="suppKg">The supp kg.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.RemoveEaten(System.Int32,System.Double)">
            <summary>
            Removes the eaten supplement
            </summary>
            <param name="paddId">The padd identifier.</param>
            <param name="suppKg">The supp kg.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.CompleteTimeStep">
            <summary>
            Completes the time step.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.SuppIntoRation(Models.GrazPlan.SupplementRation,System.Int32,Models.GrazPlan.FoodSupplement,System.Double)">
            <summary>
            Mixes the supplement into the ration.
            </summary>
            <param name="ration">The ration.</param>
            <param name="idx">The index.</param>
            <param name="supp">The supp.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementModel.Transfer(Models.GrazPlan.SupplementRation,System.Int32,Models.GrazPlan.SupplementRation,System.Int32,System.Double)">
            <summary>
            Transfers the specified source.
            </summary>
            <param name="src">The source.</param>
            <param name="srcIdx">Index of the source.</param>
            <param name="dest">The dest ration in a paddock.</param>
            <param name="destIdx">Index of the dest.</param>
            <param name="amount">The amount.</param>
            <exception cref="T:System.Exception">Invalid transfer of feed</exception>
        </member>
        <member name="T:Models.GrazPlan.SupplementModel.PaddockInfo">
            <summary>
            Paddock information about the supplement fed
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.PaddockInfo.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.PaddockInfo.PaddId">
            <summary>
            The padd identifier
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.PaddockInfo.SupptFed">
            <summary>
            The suppt fed
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementModel.PaddockInfo.FeedSuppFirst">
            <summary>
            For bail feeding
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StoreType">
            <summary>
            A stored supplement name and quantity
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StoreType.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.StoreType.Stored">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Models.GrazPlan.SuppToStockType">
            <summary>
            Paddock and amount of ration
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SuppToStockType.Paddock">
            <summary>
            Gets or sets the paddock name.
            </summary>
            <value>
            The paddock name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.SuppToStockType.Amount">
            <summary>
            Gets or sets the amount of ration (kg).
            </summary>
            <value>
            The amount of ration (kg).
            </value>
        </member>
        <member name="P:Models.GrazPlan.SuppToStockType.FeedSuppFirst">
            <summary>
            Gets or sets the flag to feed supplement before pasture. Bail feeding.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.SuppEatenType">
            <summary>
            Paddock and amount eaten
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SuppEatenType.Paddock">
            <summary>
            Gets or sets the paddock name.
            </summary>
            <value>
            The paddock name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.SuppEatenType.Eaten">
            <summary>
            Gets or sets the amount of ration eaten (kg).
            </summary>
            <value>
            The amount of ration eaten (kg).
            </value>
        </member>
        <member name="T:Models.GrazPlan.BuySuppType">
            <summary>
            Buy an amount of supplement by name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.BuySuppType.Supplement">
            <summary>
            Gets or sets the supplement name.
            </summary>
            <value>
            The supplement name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.BuySuppType.Amount">
            <summary>
            Gets or sets the amount of supplement eaten (kg).
            </summary>
            <value>
            The amount of supplement eaten (kg).
            </value>
        </member>
        <member name="T:Models.GrazPlan.FeedSuppType">
            <summary>
            Feed an amount of supplement by name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.FeedSuppType.Supplement">
            <summary>
            Gets or sets the supplement name.
            </summary>
            <value>
            The supplement name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FeedSuppType.Amount">
            <summary>
            Gets or sets the amount of supplement offered (kg).
            </summary>
            <value>
            The amount of supplement offered (kg).
            </value>
        </member>
        <member name="P:Models.GrazPlan.FeedSuppType.Paddock">
            <summary>
            Gets or sets the paddock name.
            </summary>
            <value>
            The paddock name.
            </value>
        </member>
        <member name="T:Models.GrazPlan.MixSuppType">
            <summary>
            Mix an amount of supplement
            </summary>
        </member>
        <member name="P:Models.GrazPlan.MixSuppType.Source">
            <summary>
            Gets or sets the source supplement name.
            </summary>
            <value>
            The source supplement name.
            </value>
        </member>
        <member name="P:Models.GrazPlan.MixSuppType.Amount">
            <summary>
            Gets or sets the amount of supplement transferred (kg).
            </summary>
            <value>
            The amount of supplement transferred (kg).
            </value>
        </member>
        <member name="P:Models.GrazPlan.MixSuppType.Destination">
            <summary>
            Gets or sets the destination supplement name.
            </summary>
            <value>
            The destination supplement name.
            </value>
        </member>
        <member name="T:Models.GrazPlan.ConserveType">
            <summary>
            The type used when calling OnConserve()
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.FreshWt">
            <summary>
            Gets or sets the fresh weight (kg)
            </summary>
            <value>The fresh weight (kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.DMContent">
            <summary>
            Gets or sets the dry matter content of the supplement (kg/kg FW).
            </summary>
            <value>Dry matter content of the supplement (kg/kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.DMD">
            <summary>
            Gets or sets the dry matter digestibility of the supplement (kg/kg DM).
            </summary>
            <value>Dry matter digestibiility of the supplement (kg/kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.NConc">
            <summary>
            Gets or sets the phosphorus content of the supplement (kg/kg DM).
            </summary>
            <value>Phosphorus content of the supplement (kg/kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.PConc">
            <summary>
            Gets or sets the nitrogen content of the supplement (kg/kg DM).
            </summary>
            <value>Nitrogen content of the supplement (kg/kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.SConc">
            <summary>
            Gets or sets the sulfur content of the supplement (kg/kg DM).
            </summary>
            <value>Sulfur content of the supplement (kg/kg)</value>
        </member>
        <member name="F:Models.GrazPlan.ConserveType.AshAlk">
            <summary>
            Gets or sets the ash alkalinity of the supplement (mol/kg DM).
            </summary>
            <value>Ash alkalinity of the supplement (mol/kg)</value>
        </member>
        <member name="T:Models.GrazPlan.Supplement">
             <summary>
             #GrazPlan Supplement
             This component represents one or more stores of supplementary feed. 
             
             A component instance represents the stores and paddock-available amounts of several supplements. 
             Each supplement type is distinguished by a name and is represented by the amount in store together 
             with a number of attributes relating to its quality as a diet for animals.
             
             Feed may be bought and then (logically) placed in one of the "paddocks" to which animals in the 
             Stock component may be assigned. Feed which has been placed in a paddock is accessible to grazing stock 
             in that paddock. If more than one supplement is placed into a paddock, the animals access a mixture.
             
             **Mangement Operations in Supplement**
             
            **1. Buy**
            
             * Increases the amount of supplement in a store.
             
            **2. Feed**
            
             * Transfers an amount of supplement from store to one of the paddocks, where it will be accessible to grazing stock.
             It is possible to feed supplement before grazing.
             
            **3. Mix**
            
             * Transfers an amount of supplement from one store into another. The transferred supplement is mixed
             with any supplement already in the destination store. 
             
            **4. Conserve**
            
             * Notifies the component that an amount of forage has been conserved. This forage is added to the first item in the stores array.
             
             ---
             </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.simulation">
            <summary>
            The simulation
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.animals">
            <summary>
            Link to the Stock component.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.OutputSummary">
            <summary>Link to APSIM summary (logs the messages raised during model run).</summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.CurIndex">
            <summary>
            Used to keep track of the selected SupplementItem in the user interface
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.theModel">
            <summary>
            The model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Supplement.paddocksGiven">
            <summary>
            The paddocks given
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Supplement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.GrazPlan.Supplement" /> class.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Supplement.SpoilageTime">
            <summary>
            Gets or sets the time over which an amount of supplement placed in a paddock will become inaccessible to grazing stock
            Default value is 0.0, i.e. supplement only persists for the time step that it is fed out
            </summary>
            <value>
            The spoilage time in days
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.Stores">
            <summary>
            Gets or sets the array of attributes and initial amount in each supplement store
            </summary>
            <value>
            List of stores
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.PaddockList">
            <summary>
            Gets or sets the list of paddock names
            If the variable is not given, or if it has zero length, the component will autodetect paddocks
            by querying for modules that own the area variable
            </summary>
            <value>
            The list of paddocks
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.NoStores">
            <summary>
            Gets or set the number of stores
            </summary>
            <value>
            The number of stores
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.NoPaddocks">
            <summary>
            Gets or set the number of paddocks recognised by the component instance
            </summary>
            <value>
            The number of paddocks
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.PaddNames">
            <summary>
            Gets the name of each paddock recognised by the component instance
            </summary>
            <value>
            The list of paddock names
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.PaddAmounts">
            <summary>
            Gets the amount of supplement currently accessible to stock in each paddock recognised by the component instance
            </summary>
            <value>
            The list of supplement amounts in each paddock
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.SuppToStock">
            <summary>
            Gets the amount and attributes of supplementary feed present in each paddock
            </summary>
            <value>
            The list of amount and attributes of supplementary feed present in each paddock
            </value>
        </member>
        <member name="P:Models.GrazPlan.Supplement.Item(System.String)">
            <summary>
            Gets the <see cref="T:Models.GrazPlan.StoreType"/> with the specified supp name.
            </summary>
            <value>
            The <see cref="T:Models.GrazPlan.StoreType"/>.
            </value>
            <param name="suppName">Name of the supp.</param>
            <returns>The supplement store type</returns>
        </member>
        <member name="P:Models.GrazPlan.Supplement.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Models.GrazPlan.SupplementItem"/> with the specified index.
            </summary>
            <value>
            The <see cref="T:Models.GrazPlan.SupplementItem"/>.
            </value>
            <param name="idx">The index.</param>
            <returns>The SupplementItem</returns>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Runs at the start of the simulation
            Sets up the list of paddocks, if that hasn't been provided explicitly
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
            <exception cref="T:System.Exception">Invalid AribtrationMethod selected</exception>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Simulation has completed.
            Clear values from this run, so they don't carry over into the next
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnEndOfDay(System.Object,System.EventArgs)">
            <summary>
            Performs every-day calculations - end of day processes
            Determine the amount of supplementary feed eaten
            This event determines the amount of supplementary feed eaten by livestock and removes
            it from the amount present in each paddock. It then computes ''spoilage'' of supplement
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnConserve(Models.GrazPlan.ConserveType)">
            <summary>
            Notifies the component that an amount of forage has been conserved
            </summary>
            <param name="conserved">Describes the conserved forage.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Conserve(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Conserves the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="freshWt">The fresh wt.</param>
            <param name="DMContent">Content of the dm.</param>
            <param name="dmd">The DMD.</param>
            <param name="NConc">The n conc.</param>
            <param name="PConc">The p conc.</param>
            <param name="SConc">The s conc.</param>
            <param name="AshAlk">The ash alk.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnBuy(Models.GrazPlan.BuySuppType)">
            <summary>
            Called to buy new supplements into the store
            </summary>
            <param name="purchase">Specifies the supplement and amount being purchased.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Buy(System.Double,System.String)">
            <summary>
            Buys the specified amount.
            </summary>
            <param name="amount">Amount (kg fresh weight) of the supplement to be included in the store</param>
            <param name="supplement">The supplement.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnFeed(Models.GrazPlan.FeedSuppType)">
            <summary>
            Called to feed a supplement from the store
            </summary>
            <param name="feed">Specifies the supplement and amount being offered.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Feed(System.String,System.Double,System.String,System.Boolean)">
            <summary>
            Feeds the specified supplement.
            </summary>
            <param name="supplement">The supplement.</param>
            <param name="amount">The amount.</param>
            <param name="paddock">The paddock.</param>
            <param name="feedSuppFirst">Feed supplement before pasture. Bail feeding.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.OnMix(Models.GrazPlan.MixSuppType)">
            <summary>
            Called to buy mix supplements in the store
            </summary>
            <param name="mix">Specifies the source and destination supplements, and the amount being mixed.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Mix(System.String,System.Double,System.String)">
            <summary>
            Mixes the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="amount">The amount.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Add(System.String)">
            <summary>
            Adds the specified supp name.
            </summary>
            <param name="suppName">Name of the supp.</param>
            <returns>The supplement index</returns>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Add(Models.GrazPlan.FoodSupplement)">
            <summary>
            Adds the specified FoodSupplement.
            </summary>
            <param name="supplement">Supplement to be added</param>
            <returns>Index of the added supplement</returns>
        </member>
        <member name="M:Models.GrazPlan.Supplement.Delete(System.Int32)">
            <summary>
            Deletes the specified index.
            </summary>
            <param name="idx">The index.</param>
        </member>
        <member name="M:Models.GrazPlan.Supplement.IndexOf(Models.GrazPlan.SupplementItem)">
            <summary>
            Returns the index of FoodSupplement in the array of supplements
            </summary>
            <param name="item">The supplement item</param>
            <returns>The array index, or -1 if not found</returns>
        </member>
        <member name="M:Models.GrazPlan.Supplement.IndexOf(System.String)">
            <summary>
            Returns true if the currently named supplement is already in the mix
            </summary>
            <param name="suppName">Supplement name</param>
            <returns>The index of the supplement or -1 if not found</returns>
        </member>
        <member name="T:Models.GrazPlan.GrazParam">
            <summary>
            Class containing some common routine for dealing with parameter sets
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazParam.ALLLOCALES">
            <summary>
            magic string to serve as a wildcard for all locales
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazParam.PARAMKEY">
            <summary>
            Registry key for Grazplan configuration information
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazParam.userInterfaceLang">
            <summary>
            The UI language
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazParam.InLocale(System.String,System.String)">
            <summary>
            Determine whether a locale name is included in a list of locale names
            </summary>
            <param name="locale">Locale name</param>
            <param name="localeList">semicolon delimited list of locale names</param>
            <returns>True if the locale is in the list</returns>
        </member>
        <member name="M:Models.GrazPlan.GrazParam.GetUILang">
            <summary>
            Returns the 2-letter ISO 639 language code (e.g, 'en')
            </summary>
            <returns>
            The 2-letter language code
            </returns>
        </member>
        <member name="M:Models.GrazPlan.GrazParam.SetUILang(System.String)">
            <summary>
            Force use of a language code, rather than determining it from system settings
            </summary>
            <param name="lang">2-letter language code to be used</param>
        </member>
        <member name="M:Models.GrazPlan.GrazParam.DefaultLocale">
            <summary>
            Common locale for use across models and programs
            * The locale is a two-character country code that is stored in the registry.
            * If there is no entry in the registry, 'au' is returned.
            </summary>
            <returns>
            A 2-character country code
            </returns>
        </member>
        <member name="T:Models.GrazPlan.SuppInfo">
            <summary>
            Supplement information
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.IsRoughage">
            <summary>
            Gets or sets a value indicating whether the supplement is a roughage.
            </summary>
            <value>True if the supplement is a roughage</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.DMContent">
            <summary>
            Gets or sets the dry matter content of the supplement (kg/kg FW).
            </summary>
            <value>Dry matter content of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.DMD">
            <summary>
            Gets or sets the dry matter digestibility of the supplement (kg/kg DM).
            </summary>
            <value>Dry matter digestibiility of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.MEContent">
            <summary>
            Gets or sets the metabolizable energy content of the supplement (MJ/kg).
            </summary>
            <value>Metabolizable energy content of the supplement (MJ/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.CPConc">
            <summary>
            Gets or sets the crude protein content of the supplement (kg/kg DM).
            </summary>
            <value>Crude protein content of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.ProtDg">
            <summary>
            Gets or sets the degradability of the protein of the supplement (kg/kg CP).
            </summary>
            <value>Degradability of the protein of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.PConc">
            <summary>
            Gets or sets the phosphorus content of the supplement (kg/kg DM).
            </summary>
            <value>Phosphorus content of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.SConc">
            <summary>
            Gets or sets the sulfur content of the supplement (kg/kg DM).
            </summary>
            <value>Sulfur content of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.EEConc">
            <summary>
            Gets or sets the ether-extractable content of the supplement (kg/kg DM).
            </summary>
            <value>Ether-extractable content of the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.ADIP2CP">
            <summary>
            Gets or sets the ratio of acid detergent insoluble protein to CP for the supplement (kg/kg CP).
            </summary>
            <value>Ratio of acid detergent insoluble protein to CP for the supplement (kg/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.AshAlk">
            <summary>
            Gets or sets the ash alkalinity of the supplement (mol/kg DM).
            </summary>
            <value>Ash alkalinity of the supplement (mol/kg)</value>
        </member>
        <member name="P:Models.GrazPlan.SuppInfo.MaxPassage">
            <summary>
            Gets or sets the maximum passage rate of the supplement (0-1).
            </summary>
            <value>Maximum passage rate of the supplement (kg/kg)</value>
        </member>
        <member name="T:Models.GrazPlan.FoodSupplement">
            <summary>
            Supplement encapsulates the attributes of a single supplement.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Translations">
            <summary>
            The translations array
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.maxPassage">
            <summary>
            Max. proportion passing through gut (used with whole grains)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.ashAlkalinity">
            <summary>
            Ash alkalinity (mol/kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.dmPropn">
            <summary>
            Proportion of dry matter by weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.dmDigestibility">
            <summary>
            Digestibility of dry matter
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.me2dm">
            <summary>
            Metabolizable energy:DM, MJ/kg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.etherExtract">
            <summary>
            Ether-extractable fraction
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.crudeProt">
            <summary>
            Proportion which is crude protein
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.degProt">
            <summary>
            Proportion of protein that is rumen-degradable
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.adip2cp">
            <summary>
            Acid detergent insoluble protein:CP
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Rghg_MEDM_Intcpt">
            <summary>
            The Rghg_MEDM_Intcpt
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Rghg_MEDM_DMD">
            <summary>
            The Rghg_MEDM_DMD
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Conc_MEDM_Intcpt">
            <summary>
            The Conc_MEDM_Intcpt
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Conc_MEDM_DMD">
            <summary>
            The Conc_MEDM_DMD
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Conc_MEDM_EE">
            <summary>
            The Conc_MEDM_EE
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.N2PROTEIN">
            <summary>
            The n2 protein
            </summary>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.#ctor">
            <summary>
            FoodSupplement constructor
            </summary>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.#ctor(System.String)">
            <summary>
            constructor with text argument
            </summary>
            <param name="suppSt">The supplement name</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.#ctor(Models.GrazPlan.FoodSupplement)">
            <summary>
            copy consructor
            </summary>
            <param name="src">The source.</param>
        </member>
        <member name="T:Models.GrazPlan.FoodSupplement.SuppAttribute">
            <summary>
            Enumeration of the chemical properites of a supplement
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaDMP">
            <summary>
            The attribute DMP
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaDMD">
            <summary>
            The attribute DMD
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaMEDM">
            <summary>
            The attribute medm
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaEE">
            <summary>
            The attribute ee
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaCP">
            <summary>
            The attribute cp
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaDG">
            <summary>
            The attribute dg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaADIP">
            <summary>
            The attribute adip
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaPH">
            <summary>
            The attribute ph
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaSU">
            <summary>
            The attribute su
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaAA">
            <summary>
            The attribute aa
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.SuppAttribute.spaMaxP">
            <summary>
            The attribute maximum p
            </summary>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.Name">
            <summary>
            Gets or sets the name of the supplement
            </summary>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.IsRoughage">
            <summary>
            Gets or sets a value indicating whether this instance is roughage.
            </summary>
            <value>
            <c>true</c> if this instance is roughage; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.DMPropn">
            <summary>
            Gets or sets the d m_ propn.
            </summary>
            <value>
            The d m_ propn.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.DMDigestibility">
            <summary>
            Gets or sets the dry matter digestibility.
            </summary>
            <value>
            The dmDigestibility value.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.ME2DM">
            <summary>
            Gets or sets the me2dm.
            </summary>
            <value>
            The me2dm value.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.EtherExtract">
            <summary>
            Gets or sets the ether extract.
            </summary>
            <value>
            The ether extract.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.CrudeProt">
            <summary>
            Gets or sets the crude prot.
            </summary>
            <value>
            The crude prot.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.DegProt">
            <summary>
            Gets or sets the degradeable prot.
            </summary>
            <value>
            The degProt value.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.ADIP2CP">
            <summary>
            Gets or sets the adip2cp.
            </summary>
            <value>The adip2cp.</value>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.phosphorus">
            <summary>
            Phosphorus content (P:DM)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.Phosphorus">
            <summary>
            Gets or sets the phosphorus.
            </summary>
            <value>
            The phosphorus.
            </value>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.sulphur">
            <summary>
            Sulphur content (S:DM)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.Sulphur">
            <summary>
            Gets or sets the sulphur.
            </summary>
            <value>
            The sulphur.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.AshAlkalinity">
            <summary>
            Gets or sets the ash alkalinity.
            </summary>
            <value>
            The ash alkalinity.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.MaxPassage">
            <summary>
            Gets or sets the maximum passage.
            </summary>
            <value>
            The maximum passage.
            </value>
        </member>
        <member name="P:Models.GrazPlan.FoodSupplement.Item(Models.GrazPlan.FoodSupplement.SuppAttribute)">
            <summary>
            Indexer to allow easy access of attributes of a supplement
            </summary>
            <value>
            The <see cref="T:System.Double"/>.
            </value>
            <param name="attr">attibute to be retrieved or set</param>
            <returns>The value of the attribute chosen</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.ConvertDMDToME2DM(System.Double,System.Boolean,System.Double)">
            <summary>
            Routine for default conversion from DMD to M/D
            </summary>
            <param name="dmd">Dry matter digestibility  (0-1)</param>
            <param name="isRoughage">True if the supplement is a roughage</param>
            <param name="fEE">Ether-extractable content (0-1)</param>
            <returns>M/D ratio (MJ/kg)</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.ConvertME2DMToDMD(System.Double,System.Boolean,System.Double)">
            <summary>
            Routine for default conversion from M/D to DMD
            </summary>
            <param name="me2dm">M/D ratio (MJ/kg)</param>
            <param name="isRoughage">True if the supplement is a roughage</param>
            <param name="fEE">Ether-extractable content (0-1)</param>
            <returns>Dry matter digestibility  (0-1)</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.Mix(Models.GrazPlan.FoodSupplement,Models.GrazPlan.FoodSupplement,System.Double)">
            <summary>
            Mix two supplements together and store in Self
            Will work if Supp1=this or Supp2=this
            This method is only exact if the passage rates of the two supplements are equal
            </summary>
            <param name="supp1">The supp1.</param>
            <param name="supp2">The supp2.</param>
            <param name="propn1">The propn1.</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.MixMany(Models.GrazPlan.FoodSupplement[],System.Double[])">
            <summary>
            Mixes the many supplements
            </summary>
            <param name="supps">The supplements</param>
            <param name="amounts">The amounts.</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.MixMany(Models.GrazPlan.SupplementItem[])">
            <summary>
            Mixes the many supplements
            </summary>
            <param name="supps">The supplements</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.Assign(Models.GrazPlan.FoodSupplement)">
            <summary>
            Assigns the specified source supplement.
            </summary>
            <param name="srcSupp">The source supplement.</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.ParseKeyword(System.String@,System.String,System.String,System.Double,System.Double@)">
            <summary>
            This function looks for "token value units" at the head of SuppSt and
            if it finds it, scales the value which has been read in
            </summary>
            <param name="suppSt">String to parse</param>
            <param name="token">The expected token string</param>
            <param name="units">The expected units string</param>
            <param name="scalar">Multiplier for value field</param>
            <param name="value">Receives the value which was read</param>
            <returns>The scaled value</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.ParseText(System.String,System.Boolean)">
            <summary>
            The CreateText method is fairly general. The layout of the string is:
            (Name) [ (keyword) (value) (unit)[(keyword)...] ]
            If (Name) is found in SuppTokens, then the supplement is initialised to
            the corresponding supplement.  Otherwise it is initialised to supplement
            number 1 (the first concentrate).  Any keywords then modify the
            composition.  Keywords are:
            DM_PC (%)  DMD (%) CP (%) DG (%) ME2DM (MJ)
            Finally, if only one of DMD and ME2DM was found, the regression equation
            on ether extract is used to estimate the other.
            </summary>
            <param name="suppSt">The supp st.</param>
            <param name="nameOnly">if set to <c>true</c> [b name only].</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.AddTranslation(System.String,System.String)">
            <summary>
            Adds the translation.
            </summary>
            <param name="lang">The language.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultFromName">
            <summary>
            Defaults from name.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultDMD">
            <summary>
            Computes a default value for DM digestibility from a (known) M/D ratio
            </summary>
            <returns>The digestibility</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultME2DM">
            <summary>
            Computes a default value for M/D from a (known) DM digestibility          }
            </summary>
            <returns>The M/D value</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultADIP2CP">
            <summary>
            Calculates the default acid-detergent insoluble protein : crude protein
            ratio for user defined supplements.
            </summary>
            <returns>The default acid-detergent insoluble protein : crude protein ratio</returns>
            <exception cref="T:System.Exception">result is out of range</exception>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultPhosphorus">
            <summary>
            Calculates the default phosphorus content for user defined supplements.
            </summary>
            <returns>The default phosphorus content</returns>
            <exception cref="T:System.Exception">the result is out of range</exception>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.DefaultSulphur">
            <summary>
            Calculates the default sulphur content for user defined supplements.
            </summary>
            <returns>The default sulphur value for the supplement type</returns>
            <exception cref="T:System.Exception">The result is out of range</exception>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.IsSameAs(Models.GrazPlan.FoodSupplement)">
            <summary>
            Determines whether [is same as] [the specified other supp].
            </summary>
            <param name="otherSupp">The other supp.</param>
            <returns>True is the supplements are the same</returns>
        </member>
        <member name="M:Models.GrazPlan.FoodSupplement.SetSuppAttrs(Models.GrazPlan.SuppToStockType)">
            <summary>
            Populates fields of this FoodSupplement from a SuppToStockType                            
            </summary>
            <param name="value">The supp to stock value</param>
        </member>
        <member name="T:Models.GrazPlan.FoodSupplement.Translation">
            <summary>
            The translation specification
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Translation.Lang">
            <summary>
            The supplement base language
            </summary>
        </member>
        <member name="F:Models.GrazPlan.FoodSupplement.Translation.Text">
            <summary>
            The s text
            </summary>
        </member>
        <member name="T:Models.GrazPlan.SupplementItem">
            <summary>
            A record to allow us to hold amount and cost information along
            with the FoodSupplement information
            In FoodSupplementItem, the "amount" should be read as kg of supplement fresh
            weight. and the cost should be per kg fresh weight.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementItem.#ctor">
            <summary>
            SupplementItem constructor
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementItem.#ctor(Models.GrazPlan.FoodSupplement,System.Double,System.Double)">
            <summary>
            Constructor
            Note that it makes a copy of the FoodSupplement
            </summary>
            <param name="src">The source.</param>
            <param name="amt">The amt.</param>
            <param name="cst">The CST.</param>
        </member>
        <member name="P:Models.GrazPlan.SupplementItem.Amount">
            <summary>
            Gets or sets the amount in kg.
            </summary>
            <value>
            The amount.
            </value>
        </member>
        <member name="P:Models.GrazPlan.SupplementItem.Cost">
            <summary>
            Gets or sets the cost.
            </summary>
            <value>
            The cost.
            </value>
        </member>
        <member name="M:Models.GrazPlan.SupplementItem.Assign(Models.GrazPlan.SupplementItem)">
            <summary>
            Assigns the specified source supp.
            </summary>
            <param name="srcSupp">The source supp.</param>
        </member>
        <member name="T:Models.GrazPlan.SupplementRation">
            <summary>
            SupplementRation encapsulates zero or more supplements mixed together.
            In essence, it is a list of SupplementItem.
            This is the class used for specifying the supplement fed to a group of
            animals in AnimGrp.pas
            Apart from the usual read/write properties and list-handling methods, the
            class has the following special methods:
            * AverageSuppt      computes the composition of a supplement mixture in
            proportions given by the fAmount values.
            * AverageCost       computes the cost of a supplement mixture in
            proportions given by the fAmount values.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.SuppArray">
            <summary>
            The supplements array
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.rationChoice">
            <summary>
            The ration choice
            </summary>
        </member>
        <member name="T:Models.GrazPlan.SupplementRation.RationChoice">
            <summary>
            The ration choice type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.RationChoice.rcStandard">
            <summary>
            The rc standard mix as specified
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.RationChoice.rcOnlyStored">
            <summary>
            The rc only stored
            use only stored fodder while it lasts
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.RationChoice.rcIncStored">
            <summary>
            The rc inc stored
            use stored fodder as first ingredient
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SupplementRation.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count</value>
        </member>
        <member name="P:Models.GrazPlan.SupplementRation.TotalAmount">
            <summary>
            Gets or sets the total amount.
            </summary>
            <value>
            The total amount.
            </value>
        </member>
        <member name="P:Models.GrazPlan.SupplementRation.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Models.GrazPlan.SupplementItem"/> with the specified index.
            </summary>
            <value>
            The <see cref="T:Models.GrazPlan.SupplementItem"/>.
            </value>
            <param name="idx">The index.</param>
            <returns>The supplement object</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Assign(Models.GrazPlan.SupplementRation)">
            <summary>
            Assigns the specified source ration.
            </summary>
            <param name="srcRation">The source ration.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.GetFWFract(System.Int32)">
            <summary>
            Gets the fresh weight fraction.
            </summary>
            <param name="idx">The index of the supplement.</param>
            <returns>The fresh weight fraction for the supplement at idx</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Add(Models.GrazPlan.FoodSupplement,System.Double,System.Double)">
            <summary>
            Adds the specified supp.
            </summary>
            <param name="supp">The supp.</param>
            <param name="amt">The amt.</param>
            <param name="cost">The cost.</param>
            <returns>The array index of the new supplement</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Add(Models.GrazPlan.SupplementItem)">
            <summary>
            Adds the specified supp item.
            </summary>
            <param name="suppItem">The supp item.</param>
            <returns>The array index of the new supplement</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Insert(System.Int32,Models.GrazPlan.FoodSupplement,System.Double,System.Double)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="idx">The index.</param>
            <param name="supp">The supp.</param>
            <param name="amt">The amt.</param>
            <param name="cost">The cost.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Delete(System.Int32)">
            <summary>
            Deletes the specified index.
            </summary>
            <param name="idx">The index.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.IndexOf(System.String,System.Boolean)">
            <summary>
            Get the index of the supplement in the supplements array
            </summary>
            <param name="name">Name of the supplement.</param>
            <param name="checkTrans">if set to <c>true</c> [check trans].</param>
            <returns>The array index of the supplement or -1 if not found</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.AverageSuppt(Models.GrazPlan.FoodSupplement@)">
            <summary>
            Computes a weighted average supplement composition
            </summary>
            <param name="aveSupp">receives the average supplement composition</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.AverageCost">
            <summary>
            Weighted average cost of a supplement
            </summary>
            <returns>
            The weighted average cost in the same units as SupplementItem.cost
            </returns>
        </member>
        <member name="F:Models.GrazPlan.SupplementRation.PROPNATTRS">
            <summary>
            The property n_ attrs
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementRation.RescaleRation(Models.GrazPlan.FoodSupplement,System.Collections.Generic.IList{Models.GrazPlan.FoodSupplement.SuppAttribute})">
            <summary>
            Scales the attributes of the members of the supplement so that the weighted
            average attributes match those of aveSupp. Ensures that fractional values
            remain within the range 0-1
            * Assumes that all values are non-negative
            </summary>
            <param name="scaleToSupp">The scale to supp.</param>
            <param name="attrs">The attrs.</param>
        </member>
        <member name="T:Models.GrazPlan.SupplementLibrary">
            <summary>
            SupplementLibrary is a SupplementRation descendant that is intended for
            use in manipulating lists of supplements within GUIs.
            For SupplementLibrary, the "amounts" may be read in relative or absolute
            terms, depending on the application.
            Apart from the usual read/write properties and list-handling methods, the
            class has the following special methods:
            * the Add and Insert methods have variants that allow the user to set up a
            supplement by using its name; other attributes are looked up from the
            DefaultSuppConsts library.
            * PopulateDefaults     sets the library up to contain the complete set of
            default supplement compositions.
            * CopyFrom             adds either the entire contents of another library,
            or else a nominated subset of supplements from the
            other library.
            * ReadFromRegistry     Populates the library from a set of formatted strings
            contained in a file pointed to by SUPP_LIB_KEY
            * WriteToRegistry      Write a formatted set of strings that can be read by
            ReadFromStrings to the file pointed to by
            in a file pointed to by SUPP_LIB_KEY
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementLibrary.GDefSupp">
            <summary>
            The g definition supp
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SupplementLibrary.ATTRHEADER">
            <summary>
            The s att r_ header
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SupplementLibrary.DefaultSuppConsts">
            <summary>
            Gets the default supp consts.
            </summary>
            <value>
            The default supp consts.
            </value>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.SetupDefaultSupplements">
            <summary>
            Setups the default supplements.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.Add(System.String,System.Double,System.Double)">
            <summary>
            Adds the specified s name.
            </summary>
            <param name="name">Name of the supplement.</param>
            <param name="amount">The amount.</param>
            <param name="cost">The cost.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.Insert(System.Int32,System.String,System.Double,System.Double)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="idx">The index.</param>
            <param name="suppName">Name of the supplement.</param>
            <param name="amount">The amount.</param>
            <param name="cost">The cost.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.GetDefaultSupp(System.String,Models.GrazPlan.SupplementItem@)">
            <summary>
            Locates a supplement by name in the DefaultSupptCosts array and returns it
            </summary>
            <param name="suppName">Name of the supplement.</param>
            <param name="suppt">The supplement.</param>
            <returns>The supplement object</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.PopulateDefaults">
            <summary>
            Populates the defaults.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.RevertToDefault(System.Int32)">
            <summary>
            Reverts to default.
            </summary>
            <param name="idx">The index.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.CopyFrom(Models.GrazPlan.SupplementLibrary,System.String[])">
            <summary>
            Copies from.
            </summary>
            <param name="srcLibrary">The source library.</param>
            <param name="copyNames">The copy names.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.ReadFromStrings(System.String,System.String[])">
            <summary>
            Reads from strings.
            </summary>
            <param name="locale">The locale.</param>
            <param name="strings">The strings.</param>
            <exception cref="T:System.Exception">
            Error reading supplement library - must contain a header line
            or
            Error reading supplement library - header line is invalid
            or
            Error reading supplement library - line for  + sNameStr +  is invalid
            </exception>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.ReadFromRegistryFile(System.String)">
            <summary>
            Reads from registry file.
            </summary>
            <param name="locale">The locale.</param>
            <returns>True if this locale is found</returns>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.ReadFromResource(System.String)">
            <summary>
            Reads from resource.
            </summary>
            <param name="locale">The locale.</param>
        </member>
        <member name="M:Models.GrazPlan.SupplementLibrary.IndexOf(Models.GrazPlan.SupplementItem)">
            <summary>
            Returns the index of FoodSupplement in the array of supplements
            </summary>
            <param name="item">The supplement item</param>
            <returns>The array index, or -1 if not found</returns>
        </member>
        <member name="T:Models.GrazPlan.DietRecord">
            <summary>
            Record containing the different sources from which an animal acquires energy, protein etc                                
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DietRecord.Herbage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DietRecord.Supp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DietRecord.Milk">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DietRecord.Solid">
            <summary>
            "Solid" is herbage and supplement taken together
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DietRecord.Total">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.GrazPlan.PhysiolRecord">
            <summary>
            Allocation of energy, protein etc for:
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiolRecord.Maint">
            <summary>
            Basal metab.+movement+digestion+cold
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiolRecord.Preg">
            <summary>
            Pregnancy
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiolRecord.Lact">
            <summary>
            Lactation
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiolRecord.Wool">
            <summary>
            Wool growth (sheep only)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiolRecord.Gain">
            <summary>
            Weight gain (after efficiency losses)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiolRecord.Metab">
            <summary>
            Basal metabolism
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiolRecord.Cold">
            <summary>
            Heat production in the cold
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PhysiolRecord.Total">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.GrazPlan.AnimalOutput">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.IntakeLimitLegume">
            <summary>
            Potential intake, after correction for legume content of the diet
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.IntakePerHead">
            <summary>
            Intakes for interface with pasture model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.PaddockIntake">
            <summary>
            Intakes summarised for use in the nutrition model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.SuppIntake">
            <summary>
            Intakes summarised for use in the nutrition model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DM_Intake">
            <summary>
            Daily dry matter intake (kg) - not milk
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.CP_Intake">
            <summary>
            Daily crude protein intake (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Phos_Intake">
            <summary>
            Daily phosphorus intake (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Sulf_Intake">
            <summary>
            Daily sulphur intake (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.ME_Intake">
            <summary>
            Metabolizable energy intake (MJ)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Digestibility">
            <summary>
            Digestibility of diet components (0-1)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.ProteinConc">
            <summary>
            Crude protein concentrations (0-1)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.ME_2_DM">
            <summary>
            ME:dry matter ratios (MJ/kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DietPropn">
            <summary>
            Proportion of each component in the diet 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.CorrDgProt">
            <summary>
            Degradability of protein in diet (0-1), corrected 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.MicrobialCP">
            <summary>
            Microbial crude protein (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DPLS">
            <summary>
            Digestible protein leaving the stomach (kg): total
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DPLS_Milk">
            <summary>
            Digestible protein leaving the stomach (kg): from milk
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DPLS_MCP">
            <summary>
            Digestible protein leaving the stomach (kg): from MCP
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DPLS_Avail_Wool">
            <summary>
            DPLS available for wool growth (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.UDP_Intake">
            <summary>
            Intake of undegradable protein (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.UDP_Dig">
            <summary>
            Digestibility of UDP (0-1)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.UDP_Reqd">
            <summary>
            Requirement for UDP (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.RDP_Intake">
            <summary>
            Daily intake for RDP (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.RDP_Reqd">
            <summary>
            Daily requirement for RDP (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.EnergyUse">
            <summary>
            Allocation of energy
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.ProteinUse">
            <summary>
            Allocation of protein
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Phos_Use">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Sulf_Use">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Efficiency">
            <summary>
            Efficiencies of ME use (0-1)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.EndoFaeces">
            <summary>
            Endogenous faecal losses      (N,S,P)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.OrgFaeces">
            <summary>
            Total organic faecal losses   (DM,N,S,P)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.InOrgFaeces">
            <summary>
            Total inorganic faecal losses (N,S,P)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Urine">
            <summary>
            Total urinary losses of       (N,S,P)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.DermalNLoss">
            <summary>
            N in dermal losses (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.GainEContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.GainPContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.ConceptusGrowth">
            <summary>
            Increase in conceptus weight (kg/d)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.TotalWoolEnergy">
            <summary>
            Net energy retained in wool (MJ)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.Therm0HeatProdn">
            <summary>
            Thermoneutral heat production (MJ)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.LowerCritTemp">
            <summary>
            Lower critical temperature from the chilling submodel (oC)      
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalOutput.RDP_IntakeEffect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalOutput.Copy">
            <summary>
            Copy a AnimalOutput object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.GrazPlan.AgeListElement">
            <summary>
            An age list item
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeListElement.iAgeDays">
            <summary>
            Age in days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeListElement.iNoMales">
            <summary>
            Number of males
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeListElement.iNoFemales">
            <summary>
            Number of females
            </summary>
        </member>
        <member name="T:Models.GrazPlan.AgeList">
            <summary>
            An agelist
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Pack">
            <summary>
            Gets rid of empty elements of a AgeList                                  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeList.RandFactory">
            <summary>
            Random number factory instance
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AgeList.#ctor(StdUnits.MyRandom)">
            <summary>
            AgeList constructor
            </summary>
            <param name="RandomFactory">An instance of a random number object</param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.#ctor(Models.GrazPlan.AgeList,StdUnits.MyRandom)">
            <summary>
            CreateCopy
            </summary>
            <param name="srcList"></param>
            <param name="RandomFactory"></param>
        </member>
        <member name="P:Models.GrazPlan.AgeList.Count">
            <summary>
            Items in the age list
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Input(System.Int32,System.Int32,System.Int32)">
            <summary>
            { Used instead of Add or Insert to add data to the age list.  The Input     
            method ensures that there are no duplicate ages in the list and that it   
            is maintained in increasing order of age                                  
            </summary>
            <param name="A"></param>
            <param name="NM"></param>
            <param name="NF"></param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Resize(System.Int32,System.Int32)">
            <summary>
            Change the numbers of male and female animals to new values.              
            Parameters:                                                               
              NM   New total number of male animals to place in the list              
              NF   New total number of female animals to place in the list            
            </summary>
            <param name="NM"></param>
            <param name="NF"></param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Clear">
            <summary>
            Set the count of items to 0
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Merge(Models.GrazPlan.AgeList)">
            <summary>
            Add all elements of OtherAges into the object.  Unlike AnimalGroup.Merge,
            AgeList.Merge does not free OtherAges.                                   
            </summary>
            <param name="OtherAges"></param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.Split(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Split the age group by age. If ByAge=TRUE, oldest animals are placed in the result.
            If ByAge=FALSE, the age structures are made the same as far as possible.
            </summary>
            <param name="NM"></param>
            <param name="NF"></param>
            <param name="ByAge">Split by age</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AgeList.AgeBy(System.Int32)">
            <summary>
            Increase all ages by the same amount (NoDays)                             
            </summary>
            <param name="NoDays"></param>
        </member>
        <member name="M:Models.GrazPlan.AgeList.MeanAge">
            <summary>
            Compute the mean age of all animals in the list                           
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AgeList.GetOlder(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns the number of male and female animals (NM and NF, respectively)     
            which are aged greater than A days                                        
            </summary>
            <param name="A"></param>
            <param name="NM"></param>
            <param name="NF"></param>
        </member>
        <member name="T:Models.GrazPlan.DifferenceRecord">
            <summary>
            Set of differences between two sub-groups of animals.  Used in the Split  
            method of AnimalGroup                                                     
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DifferenceRecord.StdRefWt">
            <summary>
            Standard reference weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DifferenceRecord.BaseWeight">
            <summary>
            Base weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.DifferenceRecord.FleeceWt">
            <summary>
            Fleece weight
            </summary>
        </member>
        <member name="T:Models.GrazPlan.AnimalWeather">
            <summary>
            Climatic inputs to the animal model                                       
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalWeather.Latitude">
            <summary>
            Latitude (degrees, +ve=north)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalWeather.TheDay">
            <summary>
            Date at which environment prevails
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalWeather.MaxTemp">
            <summary>
            Maximum air temperature (deg C)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalWeather.MinTemp">
            <summary>
            Minimum air temperature (deg C)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalWeather.MeanTemp">
            <summary>
            Mean of MaxTemp and MinTemp
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalWeather.Precipitation">
            <summary>
            Precipitation (mm)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalWeather.WindSpeed">
            <summary>
            Average daily windspeed (m/s)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalWeather.DayLength">
            <summary>
            Daylength including civil twilight (hr)
            </summary>
        </member>
        <member name="T:Models.GrazPlan.AnimalStateInfo">
            <summary>
            AnimalStateInfo type. Information required to reset the state in the case of RDP insufficiency                                                                
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.fBaseWeight">
            <summary>
            Base weight without wool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.fWoolWt">
            <summary>
            Weight of wool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.fWoolMicron">
            <summary>
            Wool microns
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.fCoatDepth">
            <summary>
            Depth of coat
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.fFoetalWt">
            <summary>
            Foetal weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.fLactAdjust">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.fLactRatio">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.fBasePhos">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalStateInfo.fBaseSulf">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.GrazPlan.ExcretionInfo">
            <summary>
            ExcretionInfo type. Totalled amounts of excretion                           
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.OrgFaeces">
            <summary>
            Organic faeces pool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.InOrgFaeces">
            <summary>
            Inorganic faeces pool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.Urine">
            <summary>
            Urine pool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.dDefaecations">
            <summary>
            Number in the time step by all animals (not including unweaned young)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.dDefaecationVolume">
            <summary>
            Volume per defaecation, m^3 (fresh basis)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.dDefaecationArea">
            <summary>
            Area per defaecation, m^2 (fresh basis)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.dDefaecationEccentricity">
            <summary>
            Eccentricity of faeces
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.dFaecalNO3Propn">
            <summary>
            Proportion of faecal inorganic N that is nitrate
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.dUrinations">
            <summary>
            Number in the time step by all animals (not including unweaned young)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.dUrinationVolume">
            <summary>
            Fluid volume per urination, m^3
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.dUrinationArea">
            <summary>
            Area covered by each urination at the soil surface, m^2
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ExcretionInfo.dUrinationEccentricity">
            <summary>
            Eccentricity of urinations
            </summary>
        </member>
        <member name="T:Models.GrazPlan.AnimalGroup">
            <summary>
            AnimalGroup class
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.AnimalsDynamicGlb">
            <summary>
            AnimalsDynamicGlb differentiates between the "static" version of the      
            model used in GrazFeed and the "dynamic" version used elsewhere           
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.NODIFF">
            <summary>
            Represents no difference
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.LatePregLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.STUBBLE_MM">
            <summary>
            Depth of wool left after shearing (cm)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.AParams">
            <summary>
            This animal's parameters
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FMatedTo">
            <summary>
            Paramters of the animal mated to
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Ages">
            <summary>
            Distribution of ages
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.MeanAge">
            <summary>
            Mean age of all animals (days)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.NoMales">
            <summary>
            Number of male animals in the group 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.NoFemales">
            <summary>
            Number of female animals in the group
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.TotalWeight">
            <summary>
            All weights in kg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.WoolWt">
            <summary>
            Greasy fleece weight (including stubble)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.DeltaWoolWt">
            <summary>
            Growth of greasy fleece (kg/d)           
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.WoolMicron">
            <summary>
            Average fibre diameter (microns)         
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.DeltaWoolMicron">
            <summary>
            Diameter of new wool (microns)           
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.ReproStatus">
            <summary>
            Reproduction status
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.LactStatus">
            <summary>
            Lactation status
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FNoFoetuses">
            <summary>
            Number of foetuses
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FNoOffspring">
            <summary>
            Number of offspring
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FPrevOffspring">
            <summary>
            Previous offspring
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FDeaths">
            <summary>
            The daily deaths
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Mothers">
            <summary>
            The mothers animal group
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.MateCycle">
            <summary>
            Day in the mating cycle; -1 if not mating
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.DaysToMate">
            <summary>
            Days left in joining period
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FoetalAge">
            <summary>
            Days since conception
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FoetalWt">
            <summary>
            Weight of foetus 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.MidLatePregWt">
            <summary>
            Base weight 42 days before parturition   
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.BasalWeight">
            <summary>
            Fleece-free, conceptus-free weight (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.DeltaBaseWeight">
            <summary>
            Change in BaseWeight (kg/d)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.MaxPrevWt">
            <summary>
            Highest previous weight (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FCoatDepth">
            <summary>
            Hair or fleece depth (cm)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.ConditionAtBirthing">
            <summary>
            Value of Condition at parturition
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.BasePhos">
            <summary>
            Phosphorus in base weight (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.BaseSulf">
            <summary>
            Sulphur in base weight (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Size">
            <summary>
            Relative size
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Condition">
            <summary>
            Relative condition
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.BirthWt">
            <summary>
            Weight of these animals at birth (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.StdRefWt">
            <summary>
            Standard reference weight of the group
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.NormalWt">
            <summary>
            Normal weight (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.DaysLactating">
            <summary>
            Days since parturition (if lactating)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Milk_MJProdn">
            <summary>
            Milk production (MJ)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Milk_ProtProdn">
            <summary>
            Protein in milk production (kg)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Milk_PhosProdn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Milk_SulfProdn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Milk_Weight">
            <summary>
            Weight of milk (4% fat equiv.)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.PropnOfMaxMilk">
            <summary>
            Proportion of potential milk production  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.LactAdjust">
            <summary>
            Scales max. intake etc for underweight in lactating animals  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.LactRatio">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.DryOffTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.IntakeLimit">
            <summary>
            Potential intake (uncorrected for legume)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FeedingLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Start_FU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.BWGain_Solid">
            <summary>
            Fraction of base weight gain from solid intake. 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FDistanceWalked">
            <summary>
            Additional distance walked -dairy cattle
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FAnimalsPerHa">
            <summary>
            Overall stocking pressure
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Steepness">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Inputs">
            <summary>
            The grazing inputs
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.TheEnv">
            <summary>
            The animal's environment
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.WaterLog">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.TheRation">
            <summary>
            The ration being fed
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FIntakeSupp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Supp_FWI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.NetSupp_DMI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.TimeStepNetSupp_DMI">
            <summary>
            Sub time step value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.ChillIndex">
            <summary>
            Chill index
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.ImplantEffect">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.FIntakeModifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AddDietElement(Models.GrazPlan.GrazType.IntakeRecord@,System.Double,Models.GrazPlan.GrazType.IntakeRecord@)">
            <summary>
            
            </summary>
            <param name="ClssAttr"></param>
            <param name="NetClassIntake"></param>
            <param name="SummaryIntake"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SummariseIntakeRecord(Models.GrazPlan.GrazType.IntakeRecord@)">
            <summary>
            
            </summary>
            <param name="SummaryIntake"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.DescribeTheDiet(System.Double[]@,System.Double[0:,0:]@,System.Double@,Models.GrazPlan.AnimalOutput@)">
            <summary>
             DescribeTheDiet                                                           
            Calculate the following for each applicable component of the diet         
            (herbage, supplement and milk):                                             
              - Dry weight of intake             - Intake of ME                       
              - Weight of protein in the intake  - Intake of P                        
              - Digestibility                    - Intake of S                        
              - Digestible organic matter (DOM)  - Concentration of protein           
              - ME:DM ratio                                                           
            These results are all stored in the TimeStepState static variable for     
            reference by other routines.                                              
            </summary>
            <param name="HerbageRI"></param>
            <param name="SeedRI"></param>
            <param name="SuppRI"></param>
            <param name="timeStepState"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeRDP(System.Double,System.Int32,System.Double,System.Double,Models.GrazPlan.DietRecord@,System.Double@,System.Double@,Models.GrazPlan.DietRecord@)">
            <summary>
            Compute RDP intake and requirement for a given MEI and feeding level      
            </summary>
            <param name="Latitude"></param>
            <param name="Day"></param>
            <param name="IntakeScale"></param>
            <param name="FL"></param>
            <param name="CorrDg"></param>
            <param name="RDPI"></param>
            <param name="RDPR"></param>
            <param name="UDPIs"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ComputeSRW">
            <summary>
            Set the standard reference weight of a group of animals based on breed  
            and sex                                                                   
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.fBirthWtForSize">
            <summary>
            Reference birth weight, adjusted for number of foetuses and relative size 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.FoetalNormWt">
            <summary>
             "Normal weight" of the foetus and the weight of the conceptus in pregnant }
            animals.                                                                  }
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.fGompertz(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gompertz function, constrained to give f(A)=1.0                              
            </summary>
            <param name="T"></param>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ConceptusWt">
            <summary>
            Weight of the conceptus, i.e. foetus(es) plus uterus etc                  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.MaxNormWtFunc(System.Double,System.Double,System.Int32,Models.GrazPlan.AnimalParamSet)">
            <summary>
            GrowthCurve calculates MaxNormalWt (see below) for an animal with the   
            default birth weight.                                                   
            </summary>
            <param name="SRW"></param>
            <param name="BW"></param>
            <param name="AgeDays"></param>
            <param name="Params"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.NormalWeightFunc(System.Int32,System.Double,System.Double)">
            <summary>
            Normal weight equation                                                 
            </summary>
            <param name="iAgeDays"></param>
            <param name="fMaxOldWt"></param>
            <param name="fWeighting"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Calc_Weights">
            <summary>
            Calculate normal weight, size and condition of a group of animals.      
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Calc_CoatDepth">
            <summary>
            Compute coat depth from GFW and fibre diameter                              
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.CoatDepth2Wool(System.Double)">
            <summary>
            In sheep, the coat depth is used to set the total wool weight (this is the  
            way that shearing is done)                                                  
            Parameter:                                                                  
              CM  Coat depth for which a greasy wool weight is to be calculated (cm)    
            </summary>
            <param name="CM"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.getConceptionRates">
            <summary>
            Get the conception rates array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.makePregnantAnimals(System.Double[],Models.GrazPlan.AnimalList@)">
            <summary>
            Make the animals pregnant
            </summary>
            <param name="ConceptionRate"></param>
            <param name="NewGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.constructOffspringParams">
            <summary>
            Used in createYoung() to set up the genotypic parameters of the lambs     
            or calves that are about to be born/created.                              
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Conceive(Models.GrazPlan.AnimalList@)">
            <summary>
             Carry out one cycle's worth of conceptions                                
            </summary>
            <param name="NewGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.DeathRateFunc">
            <summary>
            Death rate calculation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ExposureFunc">
            <summary>
            Exposure calculations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Kill(System.Double,Models.GrazPlan.AnimalList@)">
            <summary>
            Mortality submodel                                                        
            </summary>
            <param name="Chill"></param>
            <param name="NewGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.LoseYoung(Models.GrazPlan.AnimalGroup,System.Int32)">
            <summary>
            Decrease the number of young by N per mother                               
            </summary>
            <param name="aGroup"></param>
            <param name="N"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.KillEndPreg(Models.GrazPlan.AnimalList@)">
            <summary>
            Pregnancy toxaemia and dystokia                                           
            </summary>
            <param name="NewGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.YoungStopSuckling">
            <summary>
            Automatic end to lactation in response to reduced milk production         
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.NoSuckling">
            <summary>
            Number of offspring that are actually suckling
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SplitSex(System.Int32,System.Int32,System.Boolean,Models.GrazPlan.DifferenceRecord)">
            <summary>
            Used by the public Split function
            </summary>
            <param name="NMale"></param>
            <param name="NFemale"></param>
            <param name="ByAge"></param>
            <param name="Diffs"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.setGenotype(Models.GrazPlan.AnimalParamSet)">
            <summary>
            Set the genotype
            </summary>
            <param name="aValue"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetNoAnimals">
            <summary>
            Get the total number of females and males
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetNoAnimals(System.Int32)">
            <summary>
            Set the number of animals
            </summary>
            <param name="N"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetLiveWt(System.Double)">
            <summary>
            Set the live weight
            </summary>
            <param name="LW"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetFleeceCutWt">
            <summary>
            Weight of fleece that would be cut if the animals were shorn (kg greasy) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetFleeceCutWt(System.Double)">
            <summary>
            Set the weight of fleece
            </summary>
            <param name="GFW"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetWoolWt(System.Double)">
            <summary>
            Total weight of wool including stubble (kg greasy)                        
            </summary>
            <param name="WWt"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetMaxPrevWt(System.Double)">
            <summary>
            Set the maximum previous weight
            </summary>
            <param name="MPW"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetCoatDepth(System.Double)">
            <summary>
            In sheep, the coat depth is used to set the total wool weight 
            Parameter:                                                                  
            CM  New coat depth (cm)                                                     
            </summary>
            <param name="CM"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.setMatedTo(Models.GrazPlan.AnimalParamSet)">
            <summary>
            Set the animal to be mated to
            </summary>
            <param name="aValue"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetPregnancy(System.Int32)">
            <summary>
            Set the pregnancy progress
            </summary>
            <param name="P"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GrowthCurve(System.Int32,Models.GrazPlan.GrazType.ReproType,Models.GrazPlan.AnimalParamSet)">
            <summary>
            Normal weight as a function of age and sex                                
            </summary>
            <param name="iAgeDays"></param>
            <param name="Repr"></param>
            <param name="Params"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetLactation(System.Int32)">
            <summary>
            
            </summary>
            <param name="L"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetNoFoetuses(System.Int32)">
            <summary>
            Set the number of foetuses
            </summary>
            <param name="iValue"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetNoOffspring(System.Int32)">
            <summary>
             On creation, lambs and calves are always suckling their mothers. This may 
            change in the course of a simulation (see the YoungStopSuckling function) 
            </summary>
            <param name="iValue"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetOrgFaeces">
            <summary>
            Return the total faecal carbon and nitrogen an urine nitrogen produced by 
            a group of animals.  The values are in kilograms, not kg/head (i.e. they  
            are totalled over all animals in the group)                               
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetInOrgFaeces">
            <summary>
            Get the inorganic faeces amount
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetUrine">
            <summary>
            Get the urine amount
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.getExcretion">
            <summary>
            Get excretion parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetAnimal">
            <summary>
            Get the animal type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetBreed">
            <summary>
            Get the breed name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetAgeClass">
            <summary>
            Get the age class 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMaleWeight">
            <summary>
            Get the weight of the male
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetFemaleWeight">
            <summary>
            Get the weight of the female
            </summary>
            <returns></returns>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.DSE_REF_MEI">
            <summary>
            Herbage ME intake corresponding to 1 dry sheep equivalent (MJ/d)          
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetDSEs">
            <summary>
            Get the animal DSE's
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetCFW">
            <summary>
            Get the clean fleece weight
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetDeltaCFW">
            <summary>
            CleanFleeceGrowth
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMaxMilkYield">
            <summary>
            Get the maximum milk yield
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMilkVolume">
            <summary>
            Get the milk volume
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMethaneEnergy">
            <summary>
            Get the methane energy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMethaneWeight">
            <summary>
            Get the methane weight
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetMethaneVolume">
            <summary>
            Get the methane volume
            </summary>
            <returns></returns>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.RandFactory">
            <summary>
            ptr to the hosts random number factory
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.Young">
            <summary>
            Pointers to the young of lactating animals, or the mothers of suckling ones
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.AnimalState">
            <summary>
            Animal output
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.#ctor(Models.GrazPlan.AnimalParamSet,Models.GrazPlan.GrazType.ReproType,System.Int32,System.Int32,System.Double,System.Double,StdUnits.MyRandom,System.Boolean)">
            <summary>
            Animal group constructor
            </summary>
            <param name="Params"></param>
            <param name="Repro"></param>
            <param name="Number"></param>
            <param name="AgeD"></param>
            <param name="LiveWt"></param>
            <param name="GFW"></param>
            <param name="RandomFactory"></param>
            <param name="bTakeParams"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Construct(Models.GrazPlan.AnimalParamSet,Models.GrazPlan.GrazType.ReproType,System.Int32,System.Int32,System.Double,System.Double,StdUnits.MyRandom,System.Boolean)">
            <summary>
            Used during construction
            </summary>
            <param name="Params"></param>
            <param name="Repro"></param>
            <param name="Number"></param>
            <param name="AgeD"></param>
            <param name="LiveWt"></param>
            <param name="GFW"></param>
            <param name="RandomFactory"></param>
            <param name="bTakeParams"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.#ctor(Models.GrazPlan.AnimalGroup,System.Double)">
            <summary>
            CreateYoung
            </summary>
            <param name="Parents"></param>
            <param name="LiveWt"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Copy">
            <summary>
            Copy a AnimalGroup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AverageField(System.Int32,System.Int32,System.Double@,System.Double)">
            <summary>
            Weighted average of corresponding fields in the two TAnimalGroups.    }
            </summary>
            <param name="Total1"></param>
            <param name="Total2"></param>
            <param name="Field1"></param>
            <param name="Field2"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Merge(Models.GrazPlan.AnimalGroup@)">
            <summary>
            Merge two animal groups
            </summary>
            <param name="OtherGrp"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Split(System.Int32,System.Boolean,Models.GrazPlan.DifferenceRecord,Models.GrazPlan.DifferenceRecord)">
            <summary>
            Split the animal group
            </summary>
            <param name="Number"></param>
            <param name="ByAge"></param>
            <param name="Diffs"></param>
            <param name="YngDiffs"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SexAve(System.Double,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="MaleScale"></param>
            <param name="NM"></param>
            <param name="NF"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SplitNumbers(Models.GrazPlan.AnimalList@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Split the numbers off the group
            </summary>
            <param name="NewGroups"></param>
            <param name="NF"></param>
            <param name="NYM"></param>
            <param name="NYF"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SplitYoung(Models.GrazPlan.AnimalList@)">
            <summary>
            
            </summary>
            <param name="NewGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Similar(Models.GrazPlan.AnimalGroup)">
            <summary>
            Is an animal group similar enough to another for them to be merged?       
            </summary>
            <param name="AG"></param>
            <returns></returns>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Genotype">
            <summary>
            The animals genotype
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.NoAnimals">
            <summary>
            Number of animals in the group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MaleNo">
            <summary>
            Number of males
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.FemaleNo">
            <summary>
            Number of females
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.AgeDays">
            <summary>
            Mean age of the group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.LiveWeight">
            <summary>
            Libe weight of the group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.BaseWeight">
            <summary>
            Animal base weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.EmptyShornWeight">
            <summary>
            Fleece-free, conceptus-free weight, but including the wool stubble        
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.FleeceCutWeight">
            <summary>
            Cut weight of fleece
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.WoolWeight">
            <summary>
            Wool weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.CoatDepth">
            <summary>
            Depth of coat
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MaxPrevWeight">
            <summary>
            Maximum previous weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.FibreDiam">
            <summary>
            Wool fibre diameter
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MatedTo">
            <summary>
            Animal parameters for the animal mated to
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Pregnancy">
            <summary>
            Stage of pregnancy
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Lactation">
            <summary>
            Days lactating
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.NoFoetuses">
            <summary>
            Number of foetuses
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.NoOffspring">
            <summary>
            Number of offspring
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.BirthCondition">
            <summary>
            Condition at birth
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Deaths">
            <summary>
            The daily deaths
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.fConditionScore(Models.GrazPlan.AnimalParamSet.Cond_System)">
            <summary>
            Condition score
            </summary>
            <param name="System"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.setConditionScore(System.Double,Models.GrazPlan.AnimalParamSet.Cond_System)">
            <summary>
            Set the condition score
            </summary>
            <param name="fValue"></param>
            <param name="System"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.setConditionAtWeight(System.Double)">
            <summary>
            Sets the value of MaxPrevWeight using current base weight, age and a      
            (relative) body condition. Intended for use with young animals.           
            </summary>
            <param name="fBodyCond"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.WOOD(System.Double,System.Double,System.Double)">
            <summary>
            Wood-type function, scaled to give a maximum of 1.0 at time Tmax          
            </summary>
            <param name="T"></param>
            <param name="Tmax"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.InverseWOOD(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Inverse of the WOOD function, evaluated iteratively                       
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.setDryoffTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the drying off time
            </summary>
            <param name="iDaysSinceBirth"></param>
            <param name="iDaysSinceDryoff"></param>
            <param name="iPrevSuckling"></param>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.PaddSteep">
            <summary>
            Steepness of the paddock
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Weather">
            <summary>
            The animals environment
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Herbage">
            <summary>
            The herbage being eaten
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.WaterLogging">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.RationFed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.AnimalsPerHa">
            <summary>
            Animals per hectare
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.DistanceWalked">
            <summary>
            Distance walked
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.IntakeModifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SetUpForYesterday(Models.GrazPlan.AnimalGroup)">
            <summary>
            Used in GrazFeed to initialise the state variables for which yesterday's  
            value must be known in order to get today's calculation                   
            </summary>
            <param name="PrevGroup"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AdvanceAge(Models.GrazPlan.AnimalGroup,System.Int32,Models.GrazPlan.AnimalList@)">
            <summary>
            Advance the age of the animals
            </summary>
            <param name="AG"></param>
            <param name="NoDays"></param>
            <param name="NewGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Age(System.Int32,Models.GrazPlan.AnimalList@)">
            <summary>
            
            </summary>
            <param name="NoDays"></param>
            <param name="NewGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Grow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Calc_IntakeLimit">
            <summary>
            { Routine to compute the potential intake of a group of animals.  The       
            result is stored as TheAnimals^.IntakeLimit.  A variety of other fields   
            of TheAnimals^ are also updated: the normal weight, mature normal weight, 
            highest previous weight (in young animals), relative size and relative    
            condition.                                                                
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Reset_Grazing">
            <summary>
            Reset the grazing values
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalGroup.TimeStepState">
            <summary>
            Output at this step
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateFloat(System.Double,System.Double@,System.Double)">
            <summary>
            Update the value for the timestep
            </summary>
            <param name="TimeStep"></param>
            <param name="full"></param>
            <param name="TS"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateAve(System.Double@,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="full"></param>
            <param name="FullDenom"></param>
            <param name="TS"></param>
            <param name="TSDenom"></param>
            <param name="DT"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateGrazingOutputs(System.Double,Models.GrazPlan.GrazType.GrazingOutputs@,Models.GrazPlan.GrazType.GrazingOutputs)">
            <summary>
            
            </summary>
            <param name="TimeStep"></param>
            <param name="full"></param>
            <param name="TS"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateIntakeRecord(Models.GrazPlan.GrazType.IntakeRecord@,Models.GrazPlan.GrazType.IntakeRecord,System.Double)">
            <summary>
            
            </summary>
            <param name="full"></param>
            <param name="TS"></param>
            <param name="DT"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateDietRecord(System.Double,System.Boolean,Models.GrazPlan.DietRecord@,Models.GrazPlan.DietRecord)">
            <summary>
            
            </summary>
            <param name="TimeStep"></param>
            <param name="SuppFullDay"></param>
            <param name="full"></param>
            <param name="TS"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateDietAve(Models.GrazPlan.DietRecord@,Models.GrazPlan.DietRecord,Models.GrazPlan.DietRecord,Models.GrazPlan.DietRecord,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="full"></param>
            <param name="FullDenom"></param>
            <param name="TS"></param>
            <param name="TSDenom"></param>
            <param name="HerbDT"></param>
            <param name="SuppDT"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.UpdateAnimalState(System.Double,System.Boolean,System.Double)">
            <summary>
            
            </summary>
            <param name="TimeStep"></param>
            <param name="SuppFullDay"></param>
            <param name="SuppRI"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Grazing(System.Double,System.Boolean,System.Boolean,Models.GrazPlan.GrazType.GrazingOutputs@,System.Double@)">
            <summary>
            
            </summary>
            <param name="DeltaT">Fraction of an animal's active day</param>
            <param name="Reset">TRUE at the start of the day</param>
            <param name="FeedSuppFirst"></param>
            <param name="pastIntakeRate"></param>
            <param name="fSuppIntakeRate"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Grazing(System.Double,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="DeltaT"></param>
            <param name="Reset"></param>
            <param name="FeedSuppFirst"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Efficiencies">
            <summary>
            Compute proportional contribution of diet components (milk, fodder and      
            supplement) and the efficiencies of energy use                            
            This procedure corresponds to section 5 of the model specification        
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Compute_Maintenance">
            <summary>
            Basal metabolism routine.  Outputs (EnergyUse.Metab,EnergyUse.Maint,      
            ProteinUse.Maint) are stored in AnimalState.                              
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.DUDPFunc(System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="IsRoughage"></param>
            <param name="CP"></param>
            <param name="DG"></param>
            <param name="ADIP_2_CP"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Compute_DPLS">
            <summary>
            Compute microbial crude protein and DPLS
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Compute_Pregnancy">
            <summary>
            Requirements for pregnancy:                                               
              'Normal' weight of foetus is calculated from its age, maturity of       
              the mother and her no. of young and is adjusted for mother's            
              condition. The "FoetalWt" field of TheAnimals^ is updated here, as      
              are the "EnergyUse.Preg" and "ProteinUse.Preg" fields of TimeStepState   
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Compute_Lactation">
            <summary>
            Requirements for lactation:                                             
              The potential production of milk on the particular day of lactation,  
              expressed as the ME value of the milk for the young, is predicted     
              from a Wood-type function, scaled for the absolute and relative size  
              of the mother, her condition at parturition and the no. of young.     
              If ME intake is inadequate for potential production, yield is reduced 
              by a proportion of the energy deficit.                                
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Compute_Wool(System.Double)">
            <summary>
            Wool production is calculated from the intake of ME, except that used   
            for pregnancy and lactation, and from the intake of undegraded dietary  
            protein. N.B. that the stored fleece weights are on a greasy basis      
            </summary>
            <param name="DPLS_Adjust"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Compute_Chilling">
            <summary>
            Chilling routine.                                                       
            Energy use in maintaining body temperature is computed in 2-hour blocks.
            Although the "day" in the animal model runs from 9 am, we first compute 
            the value of the insulation and the lower critical temperature in the   
            middle of the night (i.e. at the time of minimum temperature).  Even    
            though wind increases during the day, the minimum value of the          
            Insulation variable will be no less than half the value of Insulation   
            at this time for any reasonable value of wind speed; we can therefore   
            put a bound on LCT.                                                     
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Adjust_K_Gain">
            <summary>
            Computes the efficiency of energy use for weight change.  This routine  
            is called twice if chilling energy use is computed                      
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Compute_Gain">
            <summary>
            The remaining surplus of net energy is converted to weight gain in a      
            logistic function dependent on the relative size of the animal.           
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Compute_Phosphorus">
            <summary>
            Usage of and mass balance for phosphorus                                  
            * Only a proportion of the phosphorus intake is absorbed (available).     
            * There are endogenous losses of P which will appear in the excreta       
              regardless of intake.                                                   
            * P content of the day's conceptus growth varies with stage of pregnancy. 
            * P contents of milk and wool are constants.                              
            * P usage in liveweight change is computed to try and maintain body P     
              content at PhosC[9].                                                    
            * All P is excreted in faeces, but some is organic and the rest is        
              inorganic.  Organic P excretion is a constant proportion of DMI.        
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Compute_Sulfur">
            <summary>
            Usage of and mass balance for sulphur                                     
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Compute_AshAlk">
            <summary>
            Proton balance                                                            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Nutrition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.RDP_IntakeFactor">
            <summary>
            Test whether intake of RDP matches the requirement for RDP.               
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.completeGrowth(System.Double)">
            <summary>
            
            </summary>
            <param name="fRDPFactor"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.storeStateInfo(Models.GrazPlan.AnimalStateInfo@)">
            <summary>
            Records state information prior to the grazing and nutrition calculations     
            so that it can be restored if there is an RDP insufficiency.                
            </summary>
            <param name="Info"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.revertStateInfo(Models.GrazPlan.AnimalStateInfo)">
            <summary>
            Restores state information about animal groups if there is an RDP insufficiency.                                                              
            </summary>
            <param name="Info"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ExceededUreaLimit">
            <summary>
            Test to see whether urea intake in the supplement has exceeded the limit of 
            3 g per 10 kg liveweight.                                                   
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AddGrazingOutputs(Models.GrazPlan.GrazType.GrazingOutputs@)">
            <summary>
            
            </summary>
            <param name="GO"></param>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.OrgFaeces">
            <summary>
            Organic faeces
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.InOrgFaeces">
            <summary>
            Inorganic faeces
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Urine">
            <summary>
            Urine
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Excretion">
            <summary>
            Excretion information
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Join(Models.GrazPlan.AnimalParamSet,System.Int32)">
            <summary>
             Commence joining                                                          
            </summary>
            <param name="MaleParams"></param>
            <param name="MatingPeriod"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.CheckAnimList(Models.GrazPlan.AnimalList@)">
            <summary>
            
            </summary>
            <param name="AL"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ExportWeaners(Models.GrazPlan.AnimalGroup@,Models.GrazPlan.AnimalList@)">
            <summary>
            
            </summary>
            <param name="WeanedGroup"></param>
            <param name="WeanedOff"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ExportWithYoung(Models.GrazPlan.AnimalGroup@,Models.GrazPlan.AnimalGroup@,System.Int32,Models.GrazPlan.AnimalList@)">
            <summary>
            
            </summary>
            <param name="MotherGroup"></param>
            <param name="YoungGroup"></param>
            <param name="NYoung"></param>
            <param name="NewGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.SplitMothers(Models.GrazPlan.AnimalGroup@,System.Int32,System.Double,Models.GrazPlan.AnimalList@)">
            <summary>
            In the case where only one sex of lambs has been weaned, re-constitute
            groups of mothers with unweaned lambs or calves.                      
            For example, if male lambs have been weaned (bDoFemales=TRUE), then:  
            - if pre-weaning lambs/ewe = 1, 100% of the ewe lambs become singles  
            - if pre-weaning lambs/ewe = 2, 50% of the ewe lambs become singles   
                                            50% remain as twins                   
            - if pre-weaning lambs/ewe = 3, 25% of the ewe lambs become singles   
                                            50% become twins                      
                                            25% remain as triplets                
            * We then have to round the numbers of lambs (or calves) that remain  
              twins or triplets down so that they have an integer number of       
              mothers.                                                            
            * In order to conserve animals numbers, the number remaining as       
              singles is done by difference                                       
            * The re-constituted groups of mothers are sent off to the NewGroups  
              list, leaving Self as the group of mothers whach has had all its    
              offspring weaned                                                    
            </summary>
            <param name="YoungGroup"></param>
            <param name="iTotalYoung"></param>
            <param name="GroupPropn"></param>
            <param name="NewGroups"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Wean(System.Boolean,System.Boolean,Models.GrazPlan.AnimalList@,Models.GrazPlan.AnimalList@)">
            <summary>
            Wean male or female lambs/calves
            </summary>
            <param name="WeanFemales"></param>
            <param name="WeanMales"></param>
            <param name="NewGroups"></param>
            <param name="WeanedOff"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Shear(System.Double@)">
            <summary>
            Shear the animals and return the cfw per head
            </summary>
            <param name="CFW_Head"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.DryOff">
            <summary>
            End lactation in cows whose calves have already been weaned               
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.Castrate">
            <summary>
            Castrate the animals
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ImplantHormone(System.Boolean)">
            <summary>
            Implant hormones
            </summary>
            <param name="bInsert"></param>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.Animal">
            <summary>
            Get the animal
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.sBreed">
            <summary>
            The breed name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.StdReferenceWt">
            <summary>
            Standard reference weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.AgeClass">
            <summary>
            Age class of the animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.ReproState">
            <summary>
            Reproductive state
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MotherGroup">
            <summary>
            The mother's group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.RelativeSize">
            <summary>
            Relative size of the animal
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.BodyCondition">
            <summary>
            Body condition
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.WeightChange">
            <summary>
            Weight change
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ConditionScoreChange(Models.GrazPlan.AnimalParamSet.Cond_System)">
            <summary>
            Owing to the requirements of the calculation order, the stored value of   
            Condition is that at the start of the previous time step. We have to      
            compute tomorrow's value of Condition before we can compute the rate of   
            change in condition score                                                 
            </summary>
            <param name="System"></param>
            <returns></returns>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.CleanFleeceWeight">
            <summary>
            Clean fleece weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.CleanFleeceGrowth">
            <summary>
            Clean fleece growth
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.GreasyFleeceGrowth">
            <summary>
            Greasy fleece growth
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.DayFibreDiam">
            <summary>
            The days fibre diameter
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MilkYield">
            <summary>
            Milk yield
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MilkVolume">
            <summary>
            Milk volume
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MaxMilkYield">
            <summary>
            Milk yield
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MilkEnergy">
            <summary>
            Milk energy
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MilkProtein">
            <summary>
            Milk protein
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.FoetalWeight">
            <summary>
            Foetal weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.ConceptusWeight">
            <summary>
            Conceptus weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MaleWeight">
            <summary>
            Male weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.FemaleWeight">
            <summary>
            Female weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.DrySheepEquivs">
            <summary>
            DSE
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.PotIntake">
            <summary>
            Potential intake
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.SupptFW_Intake">
            <summary>
            Fresh weight supplement intake
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.IntakeSuppt">
            <summary>
            Intake of supplement
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MethaneEnergy">
            <summary>
            Methane energy
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MethaneWeight">
            <summary>
            Methane weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.MethaneVolume">
            <summary>
            Methane volume
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalGroup.UreaWarning">
            <summary>
            Exceeded urea warning
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.WeightChangeAtCondition(System.Double)">
            <summary>
             Returns the weight change required for these animals to have a given      
             change in body condition                                                  
            </summary>
            <param name="fDeltaBC">desired rate of change in body condition (/d)</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.GetOlder(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="iAgeDays"></param>
            <param name="NM"></param>
            <param name="NF"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.fExpectedSurvival(System.Int32)">
            <summary>
            Integration of the age-dependent mortality function                       
            </summary>
            <param name="iOverDays"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.AddDMPool(Models.GrazPlan.GrazType.DM_Pool,Models.GrazPlan.GrazType.DM_Pool)">
            <summary>
            
            </summary>
            <param name="Pool1"></param>
            <param name="Pool2"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.MultiplyDMPool(Models.GrazPlan.GrazType.DM_Pool,System.Double)">
            <summary>
            
            </summary>
            <param name="Src"></param>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.EatSupplement(Models.GrazPlan.AnimalGroup,System.Double,System.Double,Models.GrazPlan.FoodSupplement,System.Double,System.Boolean,System.Double@,System.Double@)">
            <summary>
            Supplement relative intake.
            </summary>
            <param name="TheAnimals"></param>
            <param name="fTimeStepLength"></param>
            <param name="fSuppDWPerHead"></param>
            <param name="aSupp"></param>
            <param name="fSuppRQ"></param>
            <param name="bEatenFirst"></param>
            <param name="fSuppRI"></param>
            <param name="fFracUnsat"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.fRelativeFill(Models.GrazPlan.AnimalGroup,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            "Relative fill" of pasture [F(d)]                                     
            </summary>
            <param name="TheAnimals"></param>
            <param name="FU"></param>
            <param name="ClassFeed"></param>
            <param name="TotalFeed"></param>
            <param name="HR"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.EatPasture(Models.GrazPlan.AnimalGroup,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="TheAnimals"></param>
            <param name="ClassFeed"></param>
            <param name="TotalFeed"></param>
            <param name="HR"></param>
            <param name="RelQ"></param>
            <param name="RI"></param>
            <param name="FU"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.fWeightAverage(System.Double@,System.Double,System.Double,System.Double)">
            <summary>
            Weighted average of two values                                            
            </summary>
            <param name="X1"></param>
            <param name="Y1"></param>
            <param name="X2"></param>
            <param name="Y2"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.CalculateRelIntake(Models.GrazPlan.AnimalGroup,System.Double,System.Boolean,System.Double,System.Double[]@,System.Double[0:,0:]@,System.Double@)">
            <summary>
            Calculate relative intake
            </summary>
            <param name="TheAnimals"></param>
            <param name="fTimeStepLength"></param>
            <param name="bFeedSuppFirst"></param>
            <param name="fWaterLogScalar"></param>
            <param name="fHerbageRI"></param>
            <param name="fSeedRI"></param>
            <param name="fSuppRelIntake"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.WeightRangeForCond(Models.GrazPlan.GrazType.ReproType,System.Int32,System.Double,Models.GrazPlan.AnimalParamSet,System.Double@,System.Double@)">
            <summary>
            Feasible range of weights for a given age and (relative) body condition   
            This weight range is a consequence of the normal weight function          
            (AnimalGroup.NormalWeightFunc)                                           
            </summary>
            <param name="Repr"></param>
            <param name="iAgeDays"></param>
            <param name="fBodyCond"></param>
            <param name="Params"></param>
            <param name="fLowBaseWt"></param>
            <param name="fHighBaseWt"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalGroup.ChillFunc(System.Double,System.Double,System.Double)">
            <summary>
            Chill index
            </summary>
            <param name="T"></param>
            <param name="W"></param>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="T:Models.GrazPlan.AnimalList">
            <summary>
            The animal list of animal groups
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalList.GAINDAYCOUNT">
            <summary>
            Days of weight gain
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalList.FValidGainsCount">
            <summary>
            keep count of how many valid entries have been made
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalList.RandFactory">
            <summary>
            Random number container
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalList.Copy">
            <summary>
            Copy an AnimalList
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalList.ClearOut">
            <summary>
            Remove all animals
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalList.Merge">
            <summary>
            Remove empty AnimalGroups and unite similar ones
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalList.At(System.Int32)">
            <summary>
            Get the animal group at this position
            </summary>
            <param name="Posn"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalList.SetAt(System.Int32,Models.GrazPlan.AnimalGroup)">
            <summary>
            Set the animal group at this position
            </summary>
            <param name="Posn"></param>
            <param name="AG"></param>
        </member>
        <member name="P:Models.GrazPlan.AnimalList.ValidGainDays">
            <summary>
            Days of weight gain
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalList.addWtGain(System.Double)">
            <summary>
            Add a daily weight gain value in kg. Uses an array as a cheap fifo queue.
            Use gain = MISSING when a value is unavailable.
            </summary>
            <param name="gain"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalList.avGainOver(System.Int32)">
            <summary>
            Calc the average weight gain over the last number of days.
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="T:Models.GrazPlan.GlobalAnimalParams">
            <summary>
            The animal parameters object
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GlobalAnimalParams.AnimalParamsGlb">
            <summary>
            The object that contains the animal parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.GrazPlan.AnimalParamBlend">
            <summary>
            Contains a blended genotype
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamBlend.Breed">
            <summary>
            Breed parameters
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamBlend.fPropn">
            <summary>
            Proportion of the breed
            </summary>
        </member>
        <member name="T:Models.GrazPlan.AnimalParamSet">
            <summary>
            Animal parameter set
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.Copy">
            <summary>
            Return a copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.GrazPlan.AnimalParamSet.Cond_System">
            <summary>
            Condition score system to use
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.Cond_System.csSYSTEM1_5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.Cond_System.csSYSTEM1_8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.Cond_System.csSYSTEM1_9">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.getDeaths(System.Boolean)">
            <summary>
            TODO: Test this
            </summary>
            <param name="bIsWeaner"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.setDeaths(System.Boolean,System.Double)">
            <summary>
            
            </summary>
            <param name="bIsWeaner"></param>
            <param name="AnnDeaths"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.getConceptions">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.computeConception(System.Double[],System.Int32,System.Double@)">
            <summary>
            
            </summary>
            <param name="Sigs"></param>
            <param name="N"></param>
            <param name="fCR1"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.setConceptions(System.Double[])">
            <summary>
            
            </summary>
            <param name="Rates">Rates array[1..  3]</param>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.copyParams(Models.GrazPlan.ParameterSet,System.Boolean)">
            <summary>
            Overrides the base function and copies all the animal parameters
            </summary>
            <param name="srcSet"></param>
            <param name="bCopyData"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.makeChild">
            <summary>
            Make a new animal parameter set that is a child of this one
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.defineEntries">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.getRealParam(System.String[])">
            <summary>
            Get the floating point value
            </summary>
            <param name="sTagList"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.getIntParam(System.String[])">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.getTextParam(System.String[])">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.getBoolParam(System.String[])">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.setRealParam(System.String[],System.Double)">
            <summary>
            Set the floating point value
            </summary>
            <param name="sTagList"></param>
            <param name="fValue"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.setIntParam(System.String[],System.Int32)">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <param name="iValue"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.setTextParam(System.String[],System.String)">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <param name="sValue"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.setBoolParam(System.String[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <param name="bValue"></param>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.sEditor">
            <summary>
            Editor of the parameters
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.sEditDate">
            <summary>
            Date edited
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.Animal">
            <summary>
            Animal type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.MaxYoung">
            <summary>
            Maximum young
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.SRWScalars">
            <summary>
            Standard reference weights
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.FleeceRatio">
            <summary>
            Potential greasy fleece weight:SRW
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.MaxFleeceDiam">
            <summary>
            In microns
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.bDairyBreed">
            <summary>
            Fixed attribute (read in)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.PeakMilk">
            <summary>
            WM(peak)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.MortRate">
            <summary>
            Background death rate, per day  [1..2]      
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.MortAge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.MortIntensity">
            <summary>
            Rate of mortality increase for underweight animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.MortCondConst">
            <summary>
            Fraction of normal body weight in animals of Size=1 at which mortality starts to increase
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.MortWtDiff">
            <summary>
            Weight differential in dying animals  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.GrowthC">
            <summary>
            C(N)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.IntakeC">
            <summary>
            C(I)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.IntakeLactC">
            <summary>
            C(I,15)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.GrazeC">
            <summary>
            C(R)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.EfficC">
            <summary>
            C(K)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.MaintC">
            <summary>
            C(M)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.DgProtC">
            <summary>
            C(RDP)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.ProtC">
            <summary>
            C(A)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.PregC">
            <summary>
            C(P)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.PregScale">
            <summary>
            C(P,14,Y)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.BirthWtScale">
            <summary>
            C(P,15,Y)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.PeakLactC">
            <summary>
            C(L,0,Y)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.LactC">
            <summary>
            C(L)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.WoolC">
            <summary>
            C(W)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.ChillC">
            <summary>
            C(C)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.GainC">
            <summary>
            C(G)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.PhosC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.SulfC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.MethC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.AshAlkC">
            <summary>
            Ash alkalinity values
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.OvulationPeriod">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.Puberty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.DayLengthConst">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.ConceiveSigs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.FertWtDiff">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.ToxaemiaSigs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.DystokiaSigs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.ExposureConsts">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.SelfWeanPropn">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.#ctor">
            <summary>
            Construct and animal parameter set
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.#ctor(Models.GrazPlan.AnimalParamSet)">
            <summary>
            Construct an animal parameter set from a source one
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.#ctor(Models.GrazPlan.ParameterSet,Models.GrazPlan.AnimalParamSet)">
            <summary>
            Alternative copy constructor
            </summary>
            <param name="aParent"></param>
            <param name="srcSet"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.CreateFactory(System.String)">
            <summary>
            Copies a parameter set from AnimalParamsGlb
            </summary>
            <param name="sBreedName"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.CreateFactory(System.String,Models.GrazPlan.AnimalParamBlend[])">
            <summary>
            Creates an object based on the parameters passed
            </summary>
            <param name="sBreedName"></param>
            <param name="Blend"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.InitParameterSet(System.String,Models.GrazPlan.AnimalParamBlend[])">
            <summary>
            Called by CreateFactory() and creates a mixture of several genotypes                                       
            </summary>
            <param name="sBreedName"></param>
            <param name="Blend"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.CreateFactory(System.String,Models.GrazPlan.AnimalParamSet,Models.GrazPlan.AnimalParamSet,System.Int32)">
            <summary>
            Mix of two genotypes (as at mating)
            </summary>
            <param name="sBreedName"></param>
            <param name="damBreed"></param>
            <param name="sireBreed"></param>
            <param name="iGeneration"></param>
            <returns>The new object</returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.deriveParams">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.bFunctionallySame(Models.GrazPlan.AnimalParamSet)">
            <summary>
            Returns TRUE i.f.f. all parameters other than the breed name are identical
            </summary>
            <param name="otherSet"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.Match(System.String)">
            <summary>
            Returns the parameter set corresponding to a given name.                 
            * sBreedName may actually be the name of a "breed group", i.e. a comma-   
              separated list of functionally identical breeds. In this case the       
              parameter set for the first member of the group is returned.            
            </summary>
            <param name="sBreedName"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.iBreedCount(Models.GrazPlan.GrazType.AnimalType)">
            <summary>
            Returns the number of breeds of a given animal type
            </summary>
            <param name="aAnimal"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.sBreedName(Models.GrazPlan.GrazType.AnimalType,System.Int32)">
            <summary>
            Iterates through breeds of a given animal type and returns the breed name
            </summary>
            <param name="aAnimal"></param>
            <param name="iBreed"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.getBreedGroups(Models.GrazPlan.GrazType.AnimalType,System.Collections.Generic.List{System.String})">
            <summary>
            Populates a string list with the names of "breed groups", i.e. sets of    
            parameter sets that are identical in all respects save their names.       
            </summary>
            <param name="aAnimal"></param>
            <param name="aList"></param>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.iParentageCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.sParentageBreed(System.Int32)">
            <summary>
            
            </summary>
            <param name="Idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.fParentagePropn(System.Int32)">
            <summary>
            
            </summary>
            <param name="Idx"></param>
            <returns></returns>
        </member>
        <member name="P:Models.GrazPlan.AnimalParamSet.BreedSRW">
            <summary>
            Breed standard reference weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalParamSet.PotentialGFW">
            <summary>
            Potential fleece weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalParamSet.MaxMicrons">
            <summary>
            Maximum fleece microns
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalParamSet.FleeceYield">
            <summary>
            Fleece yield
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalParamSet.PotMilkYield">
            <summary>
            Potential milk yield
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.AnnualDeaths(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bWeaners"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.SetAnnualDeaths(System.Boolean,System.Double)">
            <summary>
            
            </summary>
            <param name="bWeaners"></param>
            <param name="AnnDeaths"></param>
        </member>
        <member name="P:Models.GrazPlan.AnimalParamSet.Conceptions">
            <summary>
            Conception values
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalParamSet.Gestation">
            <summary>
            Get gestation
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.fSexStdRefWt(Models.GrazPlan.GrazType.ReproType)">
            <summary>
            Standard reference weight
            </summary>
            <param name="Repro"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.fSRWToPFW(System.Double)">
            <summary>
            
            </summary>
            <param name="fSRW"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.StdBirthWt(System.Int32)">
            <summary>
            Standard birth weight
            </summary>
            <param name="iNoYoung"></param>
            <returns></returns>
        </member>
        <member name="P:Models.GrazPlan.AnimalParamSet.bUseDairyCurve">
            <summary>
            Flag that is set when PotMilkYield is assigned
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.BASESCORE">
            <summary>
            Condition score for condition = 1.0
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalParamSet.SCOREUNIT">
            <summary>
            Change in condition for unit CS change   
            </summary>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.CondScore2Condition(System.Double,Models.GrazPlan.AnimalParamSet.Cond_System)">
            <summary>
            
            </summary>
            <param name="CondScore"></param>
            <param name="System"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.Condition2CondScore(System.Double,Models.GrazPlan.AnimalParamSet.Cond_System)">
            <summary>
            
            </summary>
            <param name="Condition"></param>
            <param name="System"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.fDefaultFleece(Models.GrazPlan.AnimalParamSet,System.Int32,Models.GrazPlan.GrazType.ReproType,System.Int32)">
            <summary>
            Default fleece weight as a function of age, sex and time since shearing     
            </summary>
            <param name="Params"></param>
            <param name="iAgeDays"></param>
            <param name="Repr"></param>
            <param name="iFleeceDays"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.AnimalParamSet.fDefaultMicron(Models.GrazPlan.AnimalParamSet,System.Int32,Models.GrazPlan.GrazType.ReproType,System.Int32,System.Double)">
            <summary>
            Default fibre diameter as a function of age, sex, time since shearing and fleece weight                                                             
            </summary>
            <param name="Params"></param>
            <param name="iAgeDays"></param>
            <param name="Repr"></param>
            <param name="iFleeceDays"></param>
            <param name="fGFW"></param>
            <returns></returns>
        </member>
        <member name="T:Models.GrazPlan.GrazEnv">
            <summary>
            Environment interface
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.DAY2RAD">
            <summary>
            Convert day-of-year to radians
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.DEG2RAD">
            <summary>
            Convert degrees to radians
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.KMD_2_MS">
            <summary>
            Convert km/d to m/s
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.WM2_2_MJM2">
            <summary>
            Convert W/m^2 to MJ/m^2/d
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.C_2_K">
            <summary>
            Convert degrees C to K
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.HERBAGE_ALBEDO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazEnv.REFERENCE_CO2">
            <summary>
            Reference [CO2] in ppm
            </summary>
        </member>
        <member name="T:Models.GrazPlan.ParameterDefinition">
            <summary>
            ParameterDefinition                                                         
            Class used for the definition of parameter names and types, and for storing  
            whether the value(s) of the parameter is defined. A definition may be either 
            a single parameter, or it may be an array of parameter definitions. Array    
            definitions are indexed by string references                                 
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.#ctor(System.String[],CMPServices.TTypedValue.TBaseType,System.Int32)">
            <summary>
            Each element of a "definition string" array may take one of two forms:       
            * val:val        Integer subrange (e.g. "1:8")                              
            * text[;text]*   List of text indices                                       
                                                                                        
            For example, if the original string from which sDefnStrings was constructed  
            was "KQ-1:4-leaf;stem", then the resulting tree of definitions would be:     
            KQ                                                                         
             |                                                                         
             +-+-------------+-------------+-------------+                             
               |             |             |             |                             
               1             2             3             4                             
               +-+-----+     +-+-----+     +-+-----+     +-+-----+                     
                 |     |       |     |       |     |       |     |                     
                 leaf  stem    leaf  stem    leaf  stem    leaf  stem                  
            </summary>
            <param name="sDefnStrings"></param>
            <param name="aType"></param>
            <param name="iOffset"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.#ctor(Models.GrazPlan.ParameterDefinition)">
            <summary>
            Initalises ParameterDefinition from another instance
            </summary>
            <param name="Source"></param>
        </member>
        <member name="P:Models.GrazPlan.ParameterDefinition.sFullName">
            <summary>
            Full name of the parameter
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ParameterDefinition.sPartName">
            <summary>
            Part name of the parameter
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ParameterDefinition.paramType">
            <summary>
            Parameter type
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.bIsScalar">
            <summary>
            Is a scalar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.iDimension">
            <summary>
            Get the dimension of the parameter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.GrazPlan.ParameterDefinition.iCount">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.item(System.Int32)">
            <summary>
            Get item
            </summary>
            <param name="Idx"></param>
            <returns></returns>
        </member>
        <member name="P:Models.GrazPlan.ParameterDefinition.iParamCount">
            <summary>
            Parameter count
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.getParam(System.Int32)">
            <summary>
            Get the parameter definition at Idx
            </summary>
            <param name="Idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.FindParam(System.String[],System.Int32)">
            <summary>
            Find parameter by name
            </summary>
            <param name="sParam"></param>
            <param name="iOffset"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.ParamIsDefined(System.String[])">
            <summary>
            Returns true if the parameter is defined
            </summary>
            <param name="sParam"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.ValueIsDefined">
            <summary>
            Returns true if a value is defined
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.setDefined(System.Boolean)">
            <summary>
            Set defined
            </summary>
            <param name="bValue"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterDefinition.setDefined(Models.GrazPlan.ParameterDefinition)">
            <summary>
            Set defined for the source
            </summary>
            <param name="Source"></param>
        </member>
        <member name="T:Models.GrazPlan.Translation">
            <summary>
            Encoding translation
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Translation.sLang">
            <summary>
            Language
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Translation.sText">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.GrazPlan.ParameterSet">
            <summary>
            Parameter set class
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ParameterSet.ptyReal">
            <summary>
            Real-single type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ParameterSet.ptyInt">
            <summary>
            Integer type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ParameterSet.ptyBool">
            <summary>
            Boolean type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ParameterSet.ptyText">
            <summary>
            String type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ParameterSet.PARAM_KEY">
            <summary>
            Registry key used to store setting
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ParameterSet.ALL_LOCALES">
            <summary>
            Represents all locales
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.setCurrLocale(System.String)">
            <summary>
            Propagates the new current locale to the entire parameter set              
            </summary>
            <param name="sValue"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.defineParameters(System.String,CMPServices.TTypedValue.TBaseType)">
            <summary>
            
            </summary>
            <param name="sTagDefinition"></param>
            <param name="aType"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.Tokenise(System.String,System.String[]@,System.String)">
            <summary>
            Parse tokens from the string
            </summary>
            <param name="sList">Input string</param>
            <param name="sTags">Parsed tokens</param>
            <param name="sDelim">Delimiter to use</param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.copyDefinition(Models.GrazPlan.ParameterSet,Models.GrazPlan.ParameterDefinition)">
            <summary>
            
            </summary>
            <param name="srcSet"></param>
            <param name="Defn"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.copyParams(Models.GrazPlan.ParameterSet,System.Boolean)">
            <summary>
            
            </summary>
            <param name="srcSet"></param>
            <param name="bCopyData"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.makeChild">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.defineEntries">
            <summary>
            This is over-ridden in descendant classes and then called within the         
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.getRealParam(System.String[])">
            <summary>
            These routines are over-ridden in descendant classes
            </summary>
            <param name="sTagList"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.getIntParam(System.String[])">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.getBoolParam(System.String[])">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.getTextParam(System.String[])">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.setRealParam(System.String[],System.Double)">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <param name="fValue"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.setIntParam(System.String[],System.Int32)">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <param name="iValue"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.setBoolParam(System.String[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <param name="bValue"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.setTextParam(System.String[],System.String)">
            <summary>
            
            </summary>
            <param name="sTagList"></param>
            <param name="sValue"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.#ctor">
            <summary>
            Constructor for the root set
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.#ctor(Models.GrazPlan.ParameterSet)">
            <summary>
            Copy constructor (with parent)
            </summary>
            <param name="aParent"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.ConstructCopy(Models.GrazPlan.ParameterSet)">
            <summary>
            After calling the constructor, this must be called to 
            configure the definitions.
            </summary>
            <param name="srcSet"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.deriveParams">
            <summary>
            This is over-ridden in descendant classes and then called within the         
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.CopyAll(Models.GrazPlan.ParameterSet)">
            <summary>
            
            </summary>
            <param name="srcSet"></param>
        </member>
        <member name="P:Models.GrazPlan.ParameterSet.sVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ParameterSet.sName">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ParameterSet.sEnglishName">
            <summary>
            English name
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.iTranslationCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.addTranslation(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="lang"></param>
            <param name="text"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.getTranslation(System.Int32)">
            <summary>
            
            </summary>
            <param name="Idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.deleteTranslation(System.Int32)">
            <summary>
            Delete the translation at index
            </summary>
            <param name="Idx"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.iLocaleCount">
            <summary>
            Count of locales
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.getLocale(System.Int32)">
            <summary>
            Get local at index
            </summary>
            <param name="Idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.AddLocale(System.String)">
            <summary>
            
            </summary>
            <param name="sLocale"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.GetLocaleText">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.SetLocaleText(System.String)">
            <summary>
            TODO: Test this
            </summary>
            <param name="sText"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.bInLocale(System.String)">
            <summary>
            
            </summary>
            <param name="sLocale"></param>
            <returns></returns>
        </member>
        <member name="P:Models.GrazPlan.ParameterSet.sCurrLocale">
            <summary>
            Current locale
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ParameterSet.Parent">
            <summary>
            Parent parameter set
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.ChildCount">
            <summary>
            Count of children
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.GetChild(System.Int32)">
            <summary>
            
            </summary>
            <param name="Idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.GetChild(System.String)">
            <summary>
            
            </summary>
            <param name="sChild"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.AddChild">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.DeleteChild(System.Int32)">
            <summary>
            
            </summary>
            <param name="Idx"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.NodeIsRoot">
            <summary>
            Returns TRUE i.f.f. this is the root (ultimate parent) node                  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.NodeIsLeaf">
            <summary>
            Returns TRUE i.f.f. this node has no child nodes                             
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.NodeCount">
            <summary>
            Total number of nodes in the tree of parameter sets, including the current node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.GetNode(System.Int32)">
            <summary>
            Locate a node in the tree by ordinal value. Node 0 is the current node;      
            the search then proceeds depth-first (i.e. the first child of node N is node N+1)                                                                         
            </summary>
            <param name="iNode"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.GetNode(System.String)">
            <summary>
            
            </summary>
            <param name="sNode"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.LeafCount(System.Boolean)">
            <summary>
            Leaf count
            </summary>
            <param name="bUseLocale"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.GetLeaf(System.Int32,System.Boolean)">
            <summary>
            Locate leaf nodes that match a locale
            </summary>
            <param name="iLeaf"></param>
            <param name="bUseLocale"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.DefinitionCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.GetDefinition(System.Int32)">
            <summary>
            
            </summary>
            <param name="Idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.GetDefinition(System.String)">
            <summary>
            Get the parameter definition for sTag
            </summary>
            <param name="sTag"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.GetDefinition(System.String[])">
            <summary>
            
            </summary>
            <param name="sTags"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.ParamCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.getParam(System.Int32)">
            <summary>
            Get parameter at index
            </summary>
            <param name="Idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.fParam(System.String)">
            <summary>
            Returns a floating-point parameter
            </summary>
            <param name="sTag"></param>
            <returns>Returns a floating-point parameter</returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.iParam(System.String)">
            <summary>
            Returns an integer parameter.
            </summary>
            <param name="sTag"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.bParam(System.String)">
            <summary>
            Returns a Boolean parameter.
            </summary>
            <param name="sTag"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.sParam(System.String)">
            <summary>
            Returns a string parameter.
            </summary>
            <param name="sTag"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.SetParam(System.String,System.Double)">
            <summary>
            Sets the value of a floating-point parameter, noting that its value is now defined
            </summary>
            <param name="sTag"></param>
            <param name="fValue"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.SetParam(System.String,System.Int32)">
            <summary>
            Sets the value of an integer parameter, noting that its value is now defined 
            </summary>
            <param name="sTag"></param>
            <param name="iValue"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.SetParam(System.String,System.Boolean)">
            <summary>
            Sets the value of a Boolean parameter, noting that its value is now defined
            </summary>
            <param name="sTag"></param>
            <param name="bValue"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.SetParam(System.String,System.String)">
            <summary>
            1. Sets the value of a string parameter, noting that its value is now defined.                                                                  
            2. Parses and sets the value of a floating-point, integer or Boolean parameter.                                                                
            </summary>
            <param name="sTag"></param>
            <param name="sValue"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.SetUndefined(System.String)">
            <summary>
            Un-defines a parameter value 
            </summary>
            <param name="sTag"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.IsDefined(System.String)">
            <summary>
            
            </summary>
            <param name="sTag"></param>
            <returns>Returns TRUE i.f.f. the nominated parameter has a defined value</returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.IsComplete">
            <summary>
            Returns TRUE i.f.f. all parameters in the set have defined values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.LocaliseNames">
            <summary>
            Convert the name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ParameterSet.FileSource">
            <summary>
            Source file name
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.GetUILang">
            <summary>
            Returns the 2-letter ISO 639 language code, or 'en' if that fails            
            TODO: Test this
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterSet.SetUILang(System.String)">
            <summary>
            Set the IU language
            </summary>
            <param name="sLang"></param>
        </member>
        <member name="T:Models.GrazPlan.GrazLocale">
            <summary>
            Common locale for use across models and programs
            * The locale is a two-character country code that is stored in the registry. 
            * If there is no entry in the registry, 'au' is returned.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazLocale.sDefaultLocale">
            <summary>
            Common locale for use across models and programs                             
            * The locale is a two-character country code that is stored in the registry. 
            * If there is no entry in the registry, 'au' is returned.                     
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.GrazPlan.GlobalParameterFactory">
            <summary>
            Class that wraps the XML param reader
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GlobalParameterFactory.ParamXMLFactory">
            <summary>
            Returns a ptr to the _GParamFactory. ParamFactory is loaded on demand only.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.ParameterXMLFactory">
            <summary>
            The DTD for the XML parameter format is:                                     
            <![CDATA[
            <!ELEMENT parameters (par? set?) >                                           
            <!ATTLIST parameters name    CDATA "" >                                    
            <!ATTLIST parameters version CDATA "" >                                    
            <!ELEMENT set (par? set? translate?) >                                       
            <!ATTLIST set name CDATA #REQUIRED >                                       
            <!ATTLIST set locales CDATA "" >                                           
            <!ELEMENT translate #PCDATA >                                                
            <!ATTLIST translate lang CDATA #REQUIRED >                                 
            <!ELEMENT par #PCDATA >                                                      
            <!ATTLIST par name CDATA #REQUIRED >                                       
            ]]>                                                                           
            * Parameter value data are contained within the &lt;par&gt; elements.              
            * The name attribute of a &lt;par&gt; element is parsed to determine which         
            parameter value(s) it holds.                                               
            * Lists of values within an element are separated by commas (this means that 
            the comma is not permitted in text parameter values).                      
            * A blank parameter value (including in a list) denotes "leave at the value  
            in the parent parameter set", which may be undefined.                      
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ParameterXMLFactory.ptyReal">
            <summary>
            Type real-single
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ParameterXMLFactory.ptyInt">
            <summary>
            Type integer
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ParameterXMLFactory.ptyBool">
            <summary>
            Type Boolean
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ParameterXMLFactory.ptyText">
            <summary>
            Type string
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.readParamNode(CMPServices.XMLParser,System.Xml.XmlNode,Models.GrazPlan.ParameterSet@,System.Boolean)">
            <summary>
            Parses a &lt;parameters&gt; or &lt;set&gt; element in an XML parameter document          
            </summary>
            <param name="Parser"></param>
            <param name="aNode"></param>
            <param name="Params"></param>
            <param name="bModify"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.readParamValues(Models.GrazPlan.ParameterSet@,System.String,System.String,System.Boolean)">
            <summary>
            Parses the contents of a &lt;par&gt; element in an XML parameter document.         
            </summary>
            <param name="Params"></param>
            <param name="sTag"></param>
            <param name="sValues"></param>
            <param name="bPropagate"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.assignParameter(Models.GrazPlan.ParameterSet@,System.String,System.String,System.Boolean)">
            <summary>
            Sets the value of a parameter in a set, and optionally propagates the value  
            to descendant parameter sets                                                 
            </summary>
            <param name="Params"></param>
            <param name="sTag"></param>
            <param name="sValue"></param>
            <param name="bPropagate"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.stripValue(System.String@)">
            <summary>
            Reads a string from a comma-separated list                                   
            </summary>
            <param name="sValues"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.readFromXML(System.String,Models.GrazPlan.ParameterSet@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sText"></param>
            <param name="Params"></param>
            <param name="bModify"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.bDiffers(Models.GrazPlan.ParameterSet,Models.GrazPlan.ParameterDefinition)">
            <summary>
            
            </summary>
            <param name="subSet"></param>
            <param name="Definition"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.writeParamSet(Models.GrazPlan.ParameterSet,System.Collections.Generic.List{System.String},System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="subSet"></param>
            <param name="Strings"></param>
            <param name="sElem"></param>
            <param name="iIndent"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.readDefaults(System.String,Models.GrazPlan.ParameterSet@)">
            <summary>
            The strategy for obtaining default parameters is:                            
            1. Attempt to read a base parameter set from a resource called sPrmID in the 
               current module.                                                           
            </summary>
            <param name="sPrmID"></param>
            <param name="Params"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.readFromResource(System.String,Models.GrazPlan.ParameterSet@,System.Boolean)">
            <summary>
            Read from internal resource
            </summary>
            <param name="sResID"></param>
            <param name="Params"></param>
            <param name="bModify"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.readFromFile(System.String,Models.GrazPlan.ParameterSet,System.Boolean)">
            <summary>
            Read the parameters from a file
            </summary>
            <param name="sFileName"></param>
            <param name="Params"></param>
            <param name="bModify"></param>
        </member>
        <member name="M:Models.GrazPlan.ParameterXMLFactory.sParamXML(Models.GrazPlan.ParameterSet)">
            <summary>
            Parameter set as XML
            </summary>
            <param name="Params"></param>
            <returns></returns>
        </member>
        <member name="T:Models.GrazPlan.GrazType">
            <summary>
            Container for many GrazPlan constants
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.NONE">
            <summary>
            None item
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TOTAL">
            <summary>
            Total item
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.SURFACE">
            <summary>
            Surface item
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.VeryLarge">
            <summary>
            Represents a large value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.VerySmall">
            <summary>
            Represents a small value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DigClassNo">
            <summary>
            Number of digestibility classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.HerbClassNo">
            <summary>
            Total number of herbage classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.MaxPlantSpp">
            <summary>
            Maximum plant species
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.Ungrazeable">
            <summary>
            The ungrazeable amount of green in a paddock
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.MaxSoilLayers">
            <summary>
            Maximum soil layers
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.TOMElement">
            <summary>
            Organic material elements
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TOMElement.c">
            <summary>
            Carbon
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TOMElement.n">
            <summary>
            Nitrogen
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TOMElement.p">
            <summary>
            Phosphorous
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.TOMElement.s">
            <summary>
            Sulphur
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.TPlantNutrient">
            <summary>
            Plant nutrients
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.DM_Pool">
            <summary>
            Dry matter pool
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DM_Pool.DM">
            <summary>
            Dry matter in kg/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DM_Pool.Nu">
            <summary>
            Nutrients in kg element/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DM_Pool.AshAlk">
            <summary>
            Ash alkalinity in mol/ha
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazType.ZeroDMPool(Models.GrazPlan.GrazType.DM_Pool@)">
            <summary>
            Zero the DM pool
            </summary>
            <param name="Pool">Pool to zero</param>
        </member>
        <member name="T:Models.GrazPlan.GrazType.AnimalType">
            <summary>
            Sheep or Cattle animal type
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.AgeType">
            <summary>
            Age type of the animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeType.LambCalf">
            <summary>
            Lamb or calf
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeType.Weaner">
            <summary>
            A weaner
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeType.Yearling">
            <summary>
            A yearling animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeType.TwoYrOld">
            <summary>
            A two year old
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeType.Mature">
            <summary>
            A mature animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AgeText">
            <summary>
            Text for the age types
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.ReproType">
            <summary>
            Reproduction type
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.LactType">
            <summary>
            Lactation type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.AnimalText">
            <summary>
            Sheep or cattle text
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.IntakeRecord">
            <summary>
            One element of the available feed
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.Biomass">
            <summary>
            Biomass
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.Digestibility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.CrudeProtein">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.Degradability">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.PhosContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.SulfContent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.HeightRatio">
            <summary>
            Average pasture height:default height
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.IntakeRecord.AshAlkalinity">
            <summary>
            Units are moles/kg DM
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.GrazingInputs">
            <summary>
            Grazing inputs
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.Herbage">
            <summary>
            Available herbage
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.TotalGreen">
            <summary>
            Total live + senescing pasture (kg/ha)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.TotalDead">
            <summary>
            Total dead pasture + litter (kg/ha)      
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.LegumePropn">
            <summary>
            Proportion of legume
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.Seeds">
            <summary>
            Seeds of various type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.SeedClass">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.SelectFactor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingInputs.LegumeTrop">
            <summary>
            "Tropicality" of legumes 0 => temperate; 1 => tropical 
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazType.GrazingInputs.#ctor">
            <summary>
            Construct a GrazingInputs object
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazType.GrazingInputs.CopyFrom(Models.GrazPlan.GrazType.GrazingInputs)">
            <summary>
            Copy the whole object
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazType.GrazingInputs.#ctor(Models.GrazPlan.GrazType.GrazingInputs)">
            <summary>
            Copy constructor
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazType.zeroGrazingInputs(Models.GrazPlan.GrazType.GrazingInputs@)">
            <summary>
            Zero the grazing inputs
            </summary>
            <param name="Inputs"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazType.addGrazingInputs(System.Int32,Models.GrazPlan.GrazType.GrazingInputs,Models.GrazPlan.GrazType.GrazingInputs@)">
            <summary>
            Add grazing inputs to total inputs
            </summary>
            <param name="iPopn"></param>
            <param name="partInputs"></param>
            <param name="totalInputs"></param>
        </member>
        <member name="T:Models.GrazPlan.GrazType.PopulationnHerbageAttr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationnHerbageAttr.fMass_DM">
            <summary>
            kg/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationnHerbageAttr.fDM_Digestibility">
            <summary>
            kg/kg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationnHerbageAttr.fNutrientConc">
            <summary>
            kg/kg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationnHerbageAttr.fNDegradability">
            <summary>
            kg/kg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationnHerbageAttr.fAshAlkalinity">
            <summary>
            mol/kg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationnHerbageAttr.fBulkDensity">
            <summary>
            kg/m^3
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationnHerbageAttr.fGroundAreaFract">
            <summary>
            0-1, bite-size scale
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.PopulationHerbageData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationHerbageData.bIsLegume">
            <summary>
            Is a legume
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationHerbageData.fSelectFactor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationHerbageData.Herbage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationHerbageData.Seeds">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.PopulationHerbageData.iSeedClass">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazType.GrazingOutputs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingOutputs.Herbage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.GrazingOutputs.Seed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazType.GrazingOutputs.CopyFrom(Models.GrazPlan.GrazType.GrazingOutputs)">
            <summary>
            Copy from grazing outputs
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ClassDig">
            <summary>
            Default class digestibilities
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DM2Carbon">
            <summary>
            Carbon content of dry matter
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.N2Protein">
            <summary>
            Conversion from N content to protein     
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.DM2Height">
            <summary>
            Default conversion:  kg/ha -> cm height  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.REF_HERBAGE_BD">
            <summary>
            Herbage bulk density for HR=1 (kg/m^3)   
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.HerbageE2DM">
            <summary>
            Energy content of herbage (MJ/kg DM)     
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.FatE2DM">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazType.ProteinE2DM">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazType.fGrazingHeight(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Height below which herbage is unavailable for grazing, GH (metres). From GRAZGRZE.PAS
            </summary>
            <param name="fHeight">Height of herbage, H                  (metres)</param>
            <param name="fMaxGH">Maximum value of GH                    (metres)</param>
            <param name="fCurvature">Curvature                          (0-1)</param>
            <param name="fSlope">Initial slope of the GH-H relationship (0-1)</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazType.fWeightAverage(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Get a weighted average
            </summary>
            <param name="X1"></param>
            <param name="Y1"></param>
            <param name="X2"></param>
            <param name="Y2"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazType.scaleGrazingInputs(Models.GrazPlan.GrazType.GrazingInputs,System.Double)">
            <summary>
            Scale the grazing inputs
            </summary>
            <param name="Inputs"></param>
            <param name="fScale"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazType.PoolFraction(Models.GrazPlan.GrazType.DM_Pool,System.Double)">
            <summary>
            Rescale the DM pool
            </summary>
            <param name="aPool"></param>
            <param name="fPropn"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazType.MultiplyDMPool(Models.GrazPlan.GrazType.DM_Pool,System.Double)">
            <summary>
            Multiply the DM pool
            </summary>
            <param name="aPool"></param>
            <param name="fScale"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazType.AddDMPool(Models.GrazPlan.GrazType.DM_Pool,Models.GrazPlan.GrazType.DM_Pool)">
            <summary>
            Add dry matter pool to the total pool
            </summary>
            <param name="PartPool"></param>
            <param name="TotPool"></param>
        </member>
        <member name="T:Models.GrazPlan.ObjectCopier">
            <summary>
            Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx
            Provides a method for performing a deep copy of an object.
            Binary Serialization is used to perform the copy.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ObjectCopier.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:Models.GrazPlan.Stock">
             <summary>
             #GrazPlan Stock
             The STOCK component encapsulates the GRAZPLAN animal biology model, as described in [FREER1997].
            
             [The GrazPlan animal model technical description](http://www.grazplan.csiro.au/files/TechPaperMay12.pdf)
             
             Animals may be of different genotypes. In particular, sheep and cattle may be represented within a single STOCK instance.
             
             Usually a single STOCK module is added to an AusFarm simulation, at the top level in the
             module hierarchy.
             
             In a grazing system, however, there may be a variety of different classes of livestock. Animals
             may be of different genotypes (including both sheep and cattle); may be males, females or
             castrates; are likely to have a range of different ages; and females may be pregnant and/or
             lactating. The set of classes of livestock can change over time as animals enter or leave the
             system, are mated, give birth or are weaned. Further, animals that are otherwise similar may be
             placed in different paddocks, where their growth rates may differ.
             
             ![Alt Text](StockGroupsExample.png)
             
             **Figure [FigureNumber]:**  The list of animal groups at a particular time during a hypothetical simulation containing a
             STOCK module. Group 1 is distinct from the others because it has a different genotype and sex. Groups 2
             and 3 are distinct because they are in different age classes (yearling vs mature). Groups 2 and 4 are
             distinct because they are in different reproductive states (pregnant vs lactating). Note how the unweaned
             lambs are associated with their mothers.
             
             In the STOCK component, this complexity is handled by representing the set of animals in a
             simulated system as a list of animal groups (Figure 2.1). The members of each animal group
             have the same genotype and age class, but may have a range of ages (for example, an animal
             group containing mature animals may include four-year-old, five-year-old and six-year-old
             stock). The members of each animal group also have the same stage of pregnancy and/or
             lactation; the same number of suckling offspring; and occupy the same paddock.
             
             The set of animal groups changes as animals enter and leave the simulation, and as
             physiological events such as maturation, mating, birth or weaning take place. Animal groups
             that become sufficiently similar are merged into a single group. The state of any unweaned
             lambs or calves is stored alongside that of their mothers; at weaning, the male and female
             weaners are transferred into two new animal groups within the main list.
             
             In addition to the biological state variables that describe the animals, each animal group has
             four attributes that are of particular interest when writing management scripts.
             
             **Index**
             
             Each animal group has a unique, internally-assigned integer index, starting at 1.
             Because the set of groups present in a component instance is dynamic, the index
             number associated with a particular group of animals can – and usually does – change
             over time. This dynamic numbering scheme has consequences for the way that animals
             of a particular kind must be located when writing management scripts.
             
             **Paddock**
             
             Each animal group is also assigned a paddock. The forage and supplementary feed
             available to a group of animals are determined by the paddock it occupies. Paddocks are
             referred to by name in the STOCK component:
             
             * To set the paddock occupied by an animal group, use the **move** event.
             * To determine the paddock occupied by an animal group, use the **paddock** variable.
             
             It is the user’s responsibility to ensure that paddock names correspond to PADDOCK
             modules or other sources of necessary driving variables.
             
             **Tag Value**
             
             Each animal group also has a user-assigned tag value that takes an integer value. Tag
             values have two purposes:
             
             * They can be used to manage distinct groups of animals in a common fashion. For
             example, all lactating ewes might be assigned the same tag value, and then all
             animals with this tag value might undergo the same supplementary feeding regime.
             * If tag values are assigned sequentially (starting at 1), they can be used to generate
             summary variables. For example, **weight_tag[1]** gives the average live weight
             of all animals in groups with a tag value of 1.
             
             Note that animal groups with different tag values are never merged, even if they are
             otherwise similar.
             
             * To set the tag value of an animal group, use the **tag** method.
             * To determine the tag value of an animal group, use the **tag_no** variable.
             
             **Priority Score**
             
             Finally, each animal group has a user-assigned *priority score* that takes an integer value.
             Priority scores are used to control the operation of the **draft** method. Positive values for
             the priority score denote the order in which animals should be moved to the available
             paddocks (with a score of 1 denoting that the animals should be moved to the highest-
             quality pasture). Animal groups with the same priority score are placed in the same
             paddock by a draft event. Animals with a zero or negative priority score are not
             drafted.
             
             * To set the priority score of an animal group, use the prioritise event.
             * To determine the priority score of an animal group, use the priority variable. 
             
              **Merging groups of similar animals**
              
             Animal groups that become sufficiently similar are merged into a single group.
             Animals are similar if all these are the same:
             
             * Occupy the same paddock
             * Reproduction status (Castrated, Male, Empty, Early Preg,  Late Preg)
             * Number of foetuses
             * Mating cycle (day in the mating cycle)
             * Days to mating (Days left in joining period)
             * Pregnancy (Days since conception)
             * Lactation status (Days since parturition (if lactating)) – within 7 days
             * Has (not) young
             * If young exist, their reproductive status must be the same
             * Implants (hormone implants)
             * Mean age (if the animals are less than one year old )
             
             **Mangement Operations in Stock**
            
            **1. Add**
            
             * Causes a set of related age cohorts of animals to enter the simulation. 
             Each age cohort may contain animals that are pregnant and/or lactating, in 
             which case distributions of numbers of foetuses and/or suckling offspring are computed automatically. 
             This event is primarily intended to simplify the initialisation of flocks and herds in simulations.
            
            **2. Buy**
             
             * Buys animals (i.e. they enter the simulation). The purchased animals will form a new animal group that is placed at the end of the list of animal groups
            
             ***Method details:***
             
                  public void Buy(StockBuy stock)
                
                  public void Buy(string genotype, double number, string sex, double age, double weight, double fleeceWeight)
            
             _StockBuy_ type:
             
            |Field       .|Type  .|Units  .|Description                   .| 
            |---           |---     |---    |:--- |
            |Genotype      |string  |       |Genotype of the animals to be bought. Must match the name field of a member of the genotypes property       |
            |Number        |int     |       |Number of animals to be bought       |
            |Sex           |string  |       |Sex of the animals. Feasible values are as for sheep: ram, crypto, wether, ewe or cattle: bull, steer, heifer, cow as appropriate       |
            |Age           |int     |Months |Average age of the animals       |
            |Weight        |double  |kg     |Average unfasted live weight of the animals. If a value of zero is given, a default value will be calculated, making use of the cond_score parameter if it is non-zero. |
            |FleeceWt      |double  |kg     |Average greasy fleece weight of the animals. Only meaningful in sheep. |
            |CondScore     |double  |       |Average condition score of the animals. If a value of zero is given, the default condition score for the weight and age will be used |
            |MatedTo       |string  |       |Genotype of the rams or bulls with which the animals were mated prior to entry. Only meaningful if pregnant or lactating is non-zero. Must match the name field of a member of the genotypes property|
            |Pregnant      |int     |days   |Zero denotes not pregnant; 1 or more denotes the time since conception. Only meaningful for females|
            |Lactating     |int     |days   |Zero denotes not lactating; 1 or more denotes the time since parturition in lactating animals. Only meaningful for females|
            |NumYoung      |int     |       |Number of foetuses and/or suckling offspring|
            |YoungWt       |double  |kg     |Average unfasted live weight of any suckling lambs or calves.|
            |YoungFleeceWt |double  |kg     |Average greasy fleece weight of any suckling lambs.|
            |UseTag        |int     |       |Tag the new animals with this tag number|
            
            **3. Castrate**
            
             * Converts ram lambs to wether lambs, or bull calves to steers.  
             If the animal group(s) denoted by group has no suckling young, has no effect. 
             If the number of male lambs or calves in a nominated group is greater than the number to be castrated, 
             the animal group will be split; the sub-group with castrated offspring will remain at the original index 
             and the sub-group with offspring that were not castrated will be added at the end of the set of animal groups.
             
            **4. Draft** 
             
             * Assigns animals to paddocks. The process is as follows:
                 1. Animal groups with a positive priority score are removed from their current paddock; groups with a zero or negative priority score remain in their current paddock.
                 2. The set of unoccupied non-excluded paddocks is identified and then ranked according the quality of the pasture(the best paddock is that which would give highest DM intake).
                 3. The unallocated animal groups are ranked by their priority(lowest values first).
                 4. Unallocated animal groups are then assigned to paddocks in rank order(e.g.those with the lowest positive score are placed in the best unoccupied paddock). 
                 Animal groups with the same priority score are placed in the same paddock.
             
            
            **5. DryOff**
            
             * Ends lactation in cows that have already had their calves weaned.  The event has no effect on other animals.
             If the number of cows in a nominated group is greater than the number to be dried off, 
             the animal group will be split; the sub-group that is no longer lactating will remain at 
             the original index and the sub-group that continues lactating will be added at the end of the set of animal groups.
             
             
            **6. Join** 
            
             * Commences mating of a particular group of animals.  If the animals are not empty females, or if they are too young, has no effect.
             
            **7. Move**
            
             * Changes the paddock to which an animal group is assigned. 
             
            **8. Prioritise**
            
             * Sets the "priority" of an animal group for later use in a draft event. It is usual practice to use positive values for priorities.
             
            **9. Sell**
            
             * Removes animals from the simulation.
             
            **10. SellTag**
            
             * Removes animals from the simulation based on their tag number.
             
            **11. Shear**
            
             * Shears sheep. The event has no effect on cattle.
             
            **12. Sort** 
            
             * Rearranges the list of animal groups in ascending order of tag value. This event has no parameters.
             
            **13. Split**
            
             * Creates two or more animal groups from the nominated group.  One of these groups is placed at the end of 
             the animal group list. The new groups remain in the same paddock and keep the same tag value as the original animal group. 
             The division may only persist until the beginning of the next do_stock step, when sufficiently similar groups of 
             animals are merged.Splitting an animal group is therefore usually carried out as a preliminary to some other management event.
            
            **14. SplitAll**
            
             * Creates new animal groups from all the animal groups.  The new groups are placed at the end of the animal group list. 
             This event is for when splits need to occur over all animal groups. Description of split event also applies.
             
            **15. Tag**
            
             * Changes the “tag value” associated with an animal group.  This value is used to sort animals; it can also be used 
             to group animals for user-defined purposes (e.g. to identify animals that are to be managed as a single mob even though
             they differ physiologically) and to keep otherwise similar animal groups distinct from one another.
             
            **16. Wean**
            
             * Weans some or all of the lambs or calves from an animal group. The newly weaned animals are added to the end of
             the list of animal groups, with males and females in separate groups. 
             
             ---
             </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.userForages">
            <summary>
            The list of user specified forage component names
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.userPaddocks">
            <summary>
            The list of user specified paddocks
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.stockModel">
            <summary>
            The main stock model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.localWeather">
            <summary>
            Weather used by the model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.isFirstStep">
            <summary>
            True if at the first step of the run
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.genotypeInits">
            <summary>
            The list of specified genotypes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.animalInits">
            <summary>
            The init values for the animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.paddocksGiven">
            <summary>
            If the paddocks are specified by the user
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.randSeed">
            <summary>
            The random seed for the mortality model
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.randFactory">
            <summary>
            The random number host
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.suppFed">
            <summary>
            The supplement used
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.excretionInfo">
            <summary>
            The excretion info
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.currentTime">
            <summary>
            The current time value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.UNKNOWN">
            <summary>
            Used to show it is unset
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.systemClock">
            <summary>
            The simulation clock
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.locWtr">
            <summary>
            The simulation weather component
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.suppFeed">
            <summary>
            The supplement component
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.sim">
            <summary>
            The simulation host
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Stock.OutputSummary">
            <summary>Link to APSIM summary (logs the messages raised during model run).</summary>
        </member>
        <member name="M:Models.GrazPlan.Stock.#ctor">
            <summary>
            The Stock class constructor
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RandSeed">
            <summary>
            Gets or sets the Seed for the random number generator. Used when computing numbers of animals dying and conceiving from the equations for mortality and conception rates
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.GenoTypes">
            <summary>
            Gets or sets the information about each animal genotype
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Sheep">
            <summary>
            Gets or sets the initial state of each animal group for sheep
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Cattle">
            <summary>
            Gets or sets the initial state of each animal group for cattle
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PaddockList">
            <summary>
            Gets or sets the manually-specified structure of paddocks and forages 
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.EnterpriseList">
            <summary>
            Gets or sets the livestock enterprises and their management options
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.GrazingPeriods">
            <summary>
            Gets or sets the livestock grazing rotations
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Trampling">
            <summary>
            Gets the mass of grazers per unit area
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppEaten">
            <summary>
            Gets the consumption of supplementary feed by animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoGroups">
            <summary>
            Gets the number of animal groups
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Number">
            <summary>
            Gets the number of animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NumberAll">
            <summary>
            Gets the total number of animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NumberTag">
            <summary>
            Gets the number of animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NumberYng">
            <summary>
            Gets the number of unweaned young animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NumberYngAll">
            <summary>
            Gets the total number of unweaned young animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NumberYngTag">
            <summary>
            Gets the number of unweaned young animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemale">
            <summary>
            Gets the number of female animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemaleAll">
            <summary>
            Gets the total number of female animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemaleTag">
            <summary>
            Gets the number of female animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemaleYng">
            <summary>
            Gets the number of unweaned female animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemaleYngAll">
            <summary>
            Gets the total number of unweaned female animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFemaleYngTag">
            <summary>
            Gets the number of unweaned female animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMale">
            <summary>
            Gets the number of male animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMaleAll">
            <summary>
            Gets the total number of male animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMaleTag">
            <summary>
            Gets the number of male animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMaleYng">
            <summary>
            Gets the number of unweaned male animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMaleYngAll">
            <summary>
            Gets the total number of unweaned male animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoMaleYngTag">
            <summary>
            Gets the number of unweaned male animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DeathsAll">
            <summary>
            Gets the deaths of all non suckling animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Deaths">
            <summary>
            Gets the deaths of non suckling animals in each group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DeathsTag">
            <summary>
            Gets the deaths of non suckling animals in each tag group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Sex">
            <summary>
            Gets the sex field of the sheep and cattle initialisation variables
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Age">
            <summary>
            Gets the age of animals by group.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeAll">
            <summary>
            Gets the age of animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeTag">
            <summary>
            Gets the age of animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeYng">
            <summary>
            Gets the age of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeYngAll">
            <summary>
            Gets the age of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeYngTag">
            <summary>
            Gets the age of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonths">
            <summary>
            Gets the age of animals, in months by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonthsAll">
            <summary>
            Gets the age of animals, in months total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonthsTag">
            <summary>
            Gets the age of animals, in months by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonthsYng">
            <summary>
            Gets the age of unweaned young animals, in months by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonthsYngAll">
            <summary>
            Gets the age of unweaned young animals, in months total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.AgeMonthsYngTag">
            <summary>
            Gets the age of unweaned young animals, in months by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Weight">
            <summary>
            Gets the average live weight by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WeightAll">
            <summary>
            Gets the averge live weight total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WeightTag">
            <summary>
            Gets the average live weight by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WeightYng">
            <summary>
            Gets the average live weight of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WeightYngAll">
            <summary>
            Gets the average live weight of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WeightYngTag">
            <summary>
            Gets the average live weight of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWt">
            <summary>
            Gets the fleece-free, conceptus-free weight by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWtAll">
            <summary>
            Gets the fleece-free, conceptus-free weight total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWtTag">
            <summary>
            Gets the fleece-free, conceptus-free weight by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWtYng">
            <summary>
            Gets the fleece-free, conceptus-free weight of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWtYngAll">
            <summary>
            Gets the fleece-free, conceptus-free weight of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BaseWtYngTag">
            <summary>
            Gets the fleece-free, conceptus-free weight of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScore">
            <summary>
            Gets the condition score of animals (1-5 scale) by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScoreAll">
            <summary>
            Gets the condition score of animals (1-5 scale) total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScoreTag">
            <summary>
            Gets the condition score of animals (1-5 scale) by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScoreYng">
            <summary>
            Gets the condition score of unweaned young animals (1-5 scale) by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScoreYngAll">
            <summary>
            Gets the condition score of unweaned young animals (1-5 scale) total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CondScoreYngTag">
            <summary>
            Gets the condition score of unweaned young animals (1-5 scale) by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWt">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWtAll">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWtTag">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWtYng">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWtYngAll">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MaxPrevWtYngTag">
            <summary>
            Gets the maximum previous basal weight (fleece-free, conceptus-free) attained of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWt">
            <summary>
            Gets the current greasy fleece weight by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWtAll">
            <summary>
            Gets the current greasy fleece weight total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWtTag">
            <summary>
            Gets the current greasy fleece weight by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWtYng">
            <summary>
            Gets the current greasy fleece weight of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWtYngAll">
            <summary>
            Gets the current greasy fleece weight of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FleeceWtYngTag">
            <summary>
            Gets the current greasy fleece weight of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWt">
            <summary>
            Gets the current clean fleece weight by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWtAll">
            <summary>
            Gets the current clean fleece weight total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWtTag">
            <summary>
            Gets the current clean fleece weight by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWtYng">
            <summary>
            Gets the current clean fleece weight of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWtYngAll">
            <summary>
            Gets the current clean fleece weight of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceWtYngTag">
            <summary>
            Gets the current clean fleece weight of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiam">
            <summary>
            Gets the current average wool fibre diameter by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiamAll">
            <summary>
            Gets the current average wool fibre diameter total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiamTag">
            <summary>
            Gets the current average wool fibre diameter by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiamYng">
            <summary>
            Gets the current average wool fibre diameter of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiamYngAll">
            <summary>
            Gets the current average wool fibre diameter of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreDiamYngTag">
            <summary>
            Gets the current average wool fibre diameter of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Pregnant">
            <summary>
            Gets the the pregnecy status. If the animals are pregnant, the number of days since conception; zero otherwise, by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PregnantAll">
            <summary>
            Gets the the pregnecy status. If the animals are pregnant, the number of days since conception; zero otherwise, total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PregnantTag">
            <summary>
            Gets the the pregnecy status. If the animals are pregnant, the number of days since conception; zero otherwise, by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Lactating">
            <summary>
            Gets the lactation status. If the animals are lactating, the number of days since birth of the lamb or calf; zero otherwise, by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.LactatingAll">
            <summary>
            Gets the lactation status. If the animals are lactating, the number of days since birth of the lamb or calf; zero otherwise, total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.LactatingTag">
            <summary>
            Gets the lactation status. If the animals are lactating, the number of days since birth of the lamb or calf; zero otherwise, by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFoetuses">
            <summary>
            Gets the number of foetuses per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFoetusesAll">
            <summary>
            Gets the number of foetuses per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoFoetusesTag">
            <summary>
            Gets the number of foetuses per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoSuckling">
            <summary>
            Gets the number of unweaned lambs or calves per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoSucklingAll">
            <summary>
            Gets the number of unweaned lambs or calves per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.NoSucklingTag">
            <summary>
            Gets the number of unweaned lambs or calves per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BirthCS">
            <summary>
            Gets the condition score at last parturition; zero if lactating=0, by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BirthCSAll">
            <summary>
            Gets the condition score at last parturition; zero if lactating=0, total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.BirthCSTag">
            <summary>
            Gets the condition score at last parturition; zero if lactating=0, by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Paddock">
            <summary>
            Gets the paddock occupied by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.TagNo">
            <summary>
            Gets the tag value assigned to each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Priority">
            <summary>
            Gets the priority score assigned to each animal group; used in drafting
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSE">
            <summary>
            Gets the dry sheep equivalents, based on potential intake by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSEAll">
            <summary>
            Gets the dry sheep equivalents, based on potential intake total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSETag">
            <summary>
            Gets the dry sheep equivalents, based on potential intake by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSEYng">
            <summary>
            Gets the dry sheep equivalents, based on potential intake of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSEYngAll">
            <summary>
            Gets the dry sheep equivalents, based on potential intake of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.DSEYngTag">
            <summary>
            Gets the dry sheep equivalents, based on potential intake of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChange">
            <summary>
            Gets the rate of change of base weight of each animal by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChangeAll">
            <summary>
            Gets the rate of change of base weight of each animal total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChangeTag">
            <summary>
            Gets the rate of change of base weight of each animal by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChangeYng">
            <summary>
            Gets the rate of change of base weight of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChangeYngAll">
            <summary>
            Gets the rate of change of base weight of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.WtChangeYngTag">
            <summary>
            Gets the rate of change of base weight of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Intake">
            <summary>
            Gets the total intake per head of dry matter and nutrients by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeAll">
            <summary>
            Gets the total intake per head of dry matter and nutrients
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeTag">
            <summary>
            Gets the total intake per head of dry matter and nutrients by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeYng">
            <summary>
            Gets the total intake per head of dry matter and nutrients of unweaned animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeYngAll">
            <summary>
            Gets the total intake per head of dry matter and nutrients of unweaned animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeYngTag">
            <summary>
            Gets the total intake per head of dry matter and nutrients of unweaned animals by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntake">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntakeAll">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntakeTag">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntakeYng">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients of unweaned animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntakeYngAll">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients of unweaned animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PastIntakeYngTag">
            <summary>
            Gets the intake per head of pasture dry matter and nutrients of unweaned animals by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntake">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntakeAll">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntakeTag">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntakeYng">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients of unweaned animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntakeYngAll">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients of unweaned animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.SuppIntakeYngTag">
            <summary>
            Gets the intake per head of supplement dry matter and nutrients of unweaned animals by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntake">
            <summary>
            Gets the intake per head of metabolizable energy by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntakeAll">
            <summary>
            Gets the intake per head of metabolizable energy total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntakeTag">
            <summary>
            Gets the intake per head of metabolizable energy by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntakeYng">
            <summary>
            Gets the intake per head of metabolizable energy of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntakeYngAll">
            <summary>
            Gets the intake per head of metabolizable energy of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MEIntakeYngTag">
            <summary>
            Gets the intake per head of metabolizable energy of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntake">
            <summary>
            Gets the crude protein intake per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntakeAll">
            <summary>
            Gets the crude protein intake per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntakeTag">
            <summary>
            Gets the crude protein intake per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntakeYng">
            <summary>
            Gets the crude protein intake per head of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntakeYngAll">
            <summary>
            Gets the crude protein intake per head of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CPIntakeYngTag">
            <summary>
            Gets the crude protein intake per head of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowth">
            <summary>
            Gets the growth rate of clean fleece by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowthAll">
            <summary>
            Gets the growth rate of clean fleece total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowthTag">
            <summary>
            Gets the growth rate of clean fleece by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowthYng">
            <summary>
            Gets the growth rate of clean fleece of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowthYngAll">
            <summary>
            Gets the growth rate of clean fleece of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.CFleeceGrowthYngTag">
            <summary>
            Gets the growth rate of clean fleece of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiam">
            <summary>
            Gets the fibre diameter of the current day's wool growth by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiamAll">
            <summary>
            Gets the fibre diameter of the current day's wool growth total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiamTag">
            <summary>
            Gets the fibre diameter of the current day's wool growth by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiamYng">
            <summary>
            Gets the fibre diameter of the current day's wool growth of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiamYngAll">
            <summary>
            Gets the fibre diameter of the current day's wool growth of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FibreGrowthDiamYngTag">
            <summary>
            Gets the fibre diameter of the current day's wool growth of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkWt">
            <summary>
            Gets the weight of milk produced per head, on a 4pc fat-corrected basis by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkWtAll">
            <summary>
            Gets the weight of milk produced per head, on a 4pc fat-corrected basis total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkWtTag">
            <summary>
            Gets the weight of milk produced per head, on a 4pc fat-corrected basis by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkME">
            <summary>
            Gets the metabolizable energy produced in milk (per head) by each animal group by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkMEAll">
            <summary>
            Gets the metabolizable energy produced in milk (per head) by each animal group total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MilkMETag">
            <summary>
            Gets the metabolizable energy produced in milk (per head) by each animal group by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedN">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedNAll">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedNTag">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedNYng">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedNYngAll">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedNYngTag">
            <summary>
            Gets the nitrogen retained within the animals, on a per-head basis of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedP">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedPAll">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedPTag">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedPYng">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedPYngAll">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedPYngTag">
            <summary>
            Gets the phosphorus retained within the animals, on a per-head basis of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedS">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedSAll">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedSTag">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedSYng">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedSYngAll">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RetainedSYngTag">
            <summary>
            Gets the sulphur retained within the animals, on a per-head basis of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Faeces">
            <summary>
            Gets the faecal dry matter and nutrients per head by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesAll">
            <summary>
            Gets the faecal dry matter and nutrients per head
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesTag">
            <summary>
            Gets the faecal dry matter and nutrients per head by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesYng">
            <summary>
            Gets the faecal dry matter and nutrients per head of unweaned animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesYngAll">
            <summary>
            Gets the faecal dry matter and nutrients per head of unweaned animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesYngTag">
            <summary>
            Gets the faecal dry matter and nutrients per head of unweaned animals by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorg">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head by each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorgAll">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorgTag">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorgYng">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head of unweaned animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorgYngAll">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head of unweaned animals
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.FaecesInorgYngTag">
            <summary>
            Gets the inorganic nutrients excreted in faeces, per head of unweaned animals by tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.EnergyUse">
            <summary>
            Gets the metabolizable energy use for each animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.Methane">
            <summary>
            Gets the output of methane (per head) by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MethaneAll">
            <summary>
            Gets the output of methane (per head) total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MethaneTag">
            <summary>
            Gets the output of methane (per head) by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MethaneYng">
            <summary>
            Gets the output of methane (per head) of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MethaneYngAll">
            <summary>
            Gets the output of methane (per head) of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.MethaneYngTag">
            <summary>
            Gets the output of methane (per head) of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineN">
            <summary>
            Gets the urinary nitrogen output per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineNAll">
            <summary>
            Gets the urinary nitrogen output per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineNTag">
            <summary>
            Gets the urinary nitrogen output per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineNYng">
            <summary>
            Gets the urinary nitrogen output per head of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineNYngAll">
            <summary>
            Gets the urinary nitrogen output per head of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineNYngTag">
            <summary>
            Gets the urinary nitrogen output per head of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineP">
            <summary>
            Gets the urinary phosphorus output per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrinePAll">
            <summary>
            Gets the urinary phosphorus output per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrinePTag">
            <summary>
            Gets the urinary phosphorus output per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrinePYng">
            <summary>
            Gets the urinary phosphorus output per head of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrinePYngAll">
            <summary>
            Gets the urinary phosphorus output per head of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrinePYngTag">
            <summary>
            Gets the urinary phosphorus output per head of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineS">
            <summary>
            Gets the urinary sulphur output per head by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineSAll">
            <summary>
            Gets the urinary sulphur output per head total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineSTag">
            <summary>
            Gets the urinary sulphur output per head by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineSYng">
            <summary>
            Gets the urinary sulphur output per head of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineSYngAll">
            <summary>
            Gets the urinary sulphur output per head of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.UrineSYngTag">
            <summary>
            Gets the urinary sulphur output per head of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntake">
            <summary>
            Gets the intake per head of rumen-degradable protein by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntakeAll">
            <summary>
            Gets the intake per head of rumen-degradable protein total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntakeTag">
            <summary>
            Gets the intake per head of rumen-degradable protein by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntakeYng">
            <summary>
            Gets the intake per head of rumen-degradable protein of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntakeYngAll">
            <summary>
            Gets the intake per head of rumen-degradable protein of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPIntakeYngTag">
            <summary>
            Gets the intake per head of rumen-degradable protein of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqd">
            <summary>
            Gets the requirement per head of rumen-degradable protein by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqdAll">
            <summary>
            Gets the requirement per head of rumen-degradable protein total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqdTag">
            <summary>
            Gets the requirement per head of rumen-degradable protein by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqdYng">
            <summary>
            Gets the requirement per head of rumen-degradable protein of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqdYngAll">
            <summary>
            Gets the requirement per head of rumen-degradable protein of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPReqdYngTag">
            <summary>
            Gets the requirement per head of rumen-degradable protein of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactor">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactorAll">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactorTag">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactorYng">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactorYngAll">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.RDPFactorYngTag">
            <summary>
            Gets the effect of rumen-degradable protein availability on rate of intake (1 = no limitation to due lack of RDP) of unweaned young animals by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.PaddockRank">
            <summary>
            Gets the list of all paddocks identified by the component. In decreasing order of herbage relative intake (computed for the first group of animals in the list)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifier">
            <summary>
            Gets the externally-imposed scaling factor for potential intake. This property is resettable by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifierAll">
            <summary>
            Gets the externally-imposed scaling factor for potential intake. This property is resettable, total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifierTag">
            <summary>
            Gets the externally-imposed scaling factor for potential intake. This property is resettable by tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifierYng">
            <summary>
            Gets the externally-imposed scaling factor for potential intake. This property is resettable, of unweaned young animals by group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifierYngAll">
            <summary>
            Gets the externally-imposed scaling factor for potential intake. This property is resettable, of unweaned young animals total
            </summary>
        </member>
        <member name="P:Models.GrazPlan.Stock.IntakeModifierYngTag">
            <summary>
            Gets the externally-imposed scaling factor for potential intake. This property is resettable, of unweaned young animals by tag number
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Stock.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            At the start of the simulation, initialise all the paddocks and forages and nitrogen returns.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.OnNewWeatherDataAvailable(System.Object,System.EventArgs)">
            <summary>
            New weather data available handler
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument parameters</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>
            Handle the start of day event and get the latitude, time and weather
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument parameters</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.OnEndOfDay(System.Object,System.EventArgs)">
            <summary>
            Handle the end of day event 
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.OnDoStock(System.Object,System.EventArgs)">
            <summary>
            Initialisation step
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Add(Models.GrazPlan.StockAdd)">
            <summary>
            Causes a set of related age cohorts of animals to enter the simulation. 
            Each age cohort may contain animals that are pregnant and/or lactating, in which case distributions of numbers of foetuses and/or suckling offspring are computed automatically. 
            This event is primarily intended to simplify the initialisation of flocks and herds in simulations.
            </summary>
            <param name="animals">The animal data</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Buy(Models.GrazPlan.StockBuy)">
            <summary>
            Buys animals (i.e. they enter the simulation). The purchased animals will form a new animal group that is placed at the end of the list of animal groups.
            </summary>
            <param name="stock">The stock data</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Buy(System.String,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Buys animals (i.e. they enter the simulation). The purchased animals will form a new animal group that is placed at the end of the list of animal groups.
            </summary>
            <param name="genotype">The genotype</param>
            <param name="number">The number of animals</param>
            <param name="sex">The sex of animals</param>
            <param name="age">The age of animals</param>
            <param name="weight">The weight of animals (kg)</param>
            <param name="fleeceWeight">The fleece weight of animals (kg)</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Draft(Models.GrazPlan.StockDraft)">
            <summary>
            Assigns animals to paddocks. The process is as follows:
            (a) Animal groups with a positive priority score are removed from their current paddock; groups with a zero or negative priority score remain in their current paddock.
            (b) The set of unoccupied non-excluded paddocks is identified and then ranked according the quality of the pasture(the best paddock is that which would give highest DM intake).
            (c) The unallocated animal groups are ranked by their priority(lowest values first).
            (d) Unallocated animal groups are then assigned to paddocks in rank order(e.g.those with the lowest positive score are placed in the best unoccupied paddock). 
                Animal groups with the same priority score are placed in the same paddock
            </summary>
            <param name="closedZones">Names of paddocks to be excluded from consideration as possible destinations</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Sell(System.Int32,System.Double)">
            <summary>
            Removes animals from the simulation.  sell without parameters will remove all sheep in the stock sub-model.
            </summary>
            <param name="group">Index number of the animal group from which animals are to be removed. 
            A value of zero denotes that each animal group should be processed in turn until the nominated number of animals has been removed.</param>
            <param name="number">Number of animals to sell.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.SellTag(System.Int32,System.Int32)">
            <summary>
            Removes animals from the simulation by tag number.
            </summary>
            <param name="tag">Tag number of the animals from which animals are to be removed. 
            Animals are removed starting from the group with the smallest index.</param>
            <param name="number">Number of animals to sell.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Shear(System.Int32,System.String)">
            <summary>
            Shears sheep. The event has no effect on cattle
            </summary>
            <param name="group">Index number of the animal group to be shorn. 
            A value of zero denotes that all animal groups should be processed.</param>
            <param name="subGroup">Denotes whether the main group of animals, suckling lambs, or both should be shorn. 
            Feasible values are the null string (main group), ‘adults’ (main group), ‘lambs’ (suckling lambs), ‘both’ (both).</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Move(System.Int32,System.String)">
            <summary>
            Changes the paddock to which an animal group is assigned.
            </summary>
            <param name="group">Index number of the animal group to be moved.</param>
            <param name="paddock">Name of the paddock to which the animal group is to be moved.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Join(System.Int32,System.String,System.Int32)">
            <summary>
            Commences mating of a particular group of animals.  If the animals are not empty females, or if they are too young, has no effect
            </summary>
            <param name="group">Index number of the animal group for which mating is to commence. 
            A value of zero denotes that all empty females of sufficient age should be mated</param>
            <param name="mateTo">Genotype of the rams or bulls with which the animals are mated. 
            Must match the name field of a member of the genotypes property.</param>
            <param name="mateDays">Length of the mating period in days.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Castrate(System.Int32,System.Int32)">
            <summary>
            Converts ram lambs to wether lambs, or bull calves to steers.  If the animal group(s) denoted by group has no suckling young, has no effect. 
            If the number of male lambs or calves in a nominated group is greater than the number to be castrated, the animal group will be split; 
            the sub-group with castrated offspring will remain at the original index and the sub-group with offspring that were not castrated will 
            be added at the end of the set of animal groups.
            </summary>
            <param name="group">Index number of the animal group, the lambs or calves of which are to be castrated. 
            A value of zero denotes that each animal group should be processed in turn until the nominated number of offspring has been castrated.</param>
            <param name="number">Number of male lambs or calves to be castrated.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Wean(Models.GrazPlan.StockWean)">
            <summary>
            Weans some or all of the lambs or calves from an animal group. 
            The newly weaned animals are added to the end of the list of animal groups, with males and females in separate groups.
            </summary>
            <param name="wean">The weaning data</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.DryOff(System.Int32,System.Int32)">
            <summary>
            Ends lactation in cows that have already had their calves weaned.  The event has no effect on other animals.
            If the number of cows in a nominated group is greater than the number to be dried off, the animal group will be split; 
            the sub-group that is no longer lactating will remain at the original index and the sub-group that continues lactating will be added at the end of the set of animal groups
            </summary>
            <param name="group">Index number of the animal group for which lactation is to end. 
            A value of zero denotes that each animal group should be processed in turn until the nominated number of cows has been dried off.</param>
            <param name="number">Number of females for which lactation is to end.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.SplitAll(Models.GrazPlan.StockSplitAll)">
            <summary>
            Creates new animal groups from all the animal groups.  The new groups are placed at the end of the animal group list. 
            This event is for when splits need to occur over all animal groups. Description of split event also applies.
            </summary>
            <param name="splitall">The split data</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Split(Models.GrazPlan.StockSplit)">
            <summary>
            Creates two or more animal groups from the nominated group.  
            One of these groups is placed at the end of the animal group list. 
            The new groups remain in the same paddock and keep the same tag value as the original animal group. 
            The division may only persist until the beginning of the next do_stock step, when sufficiently similar 
            groups of animals are merged.Splitting an animal group is therefore usually carried out as a preliminary to some other management event.
            </summary>
            <param name="split">The split data</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Tag(System.Int32,System.Int32)">
            <summary>
            Changes the “tag value” associated with an animal group.  
            This value is used to sort animals; it can also be used to group animals for user-defined purposes 
            (e.g. to identify animals that are to be managed as a single mob even though they differ physiologically) 
            and to keep otherwise similar animal groups distinct from one another.
            </summary>
            <param name="group">Index number of the animal group to be assigned a tag value.</param>
            <param name="value">Tag value to be assigned.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Prioritise(System.Int32,System.Int32)">
            <summary>
            Sets the "priority" of an animal group for later use in a draft event. It is usual practice to use positive values for priorities.
            </summary>
            <param name="group">Index number of the animal group for which priority is to be set.</param>
            <param name="value">New priority value for the group.</param>
        </member>
        <member name="M:Models.GrazPlan.Stock.Sort">
            <summary>
            Rearranges the list of animal groups in ascending order of tag value. This event has no parameters.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Stock.GetTimeAndWeather">
            <summary>
            Get the current time and weather values
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Stock.RequestAvailableToAnimal">
            <summary>
            Do a request for all the biomasses in every paddock
            Note: This could be optimised to not request paddocks that are unstocked (drafting still needs to get the amounts)
            </summary>
        </member>
        <member name="M:Models.GrazPlan.Stock.PopulateFaeces(System.Int32,Models.Surface.AddFaecesType)">
            <summary>
            Populate the AddFaecesType object
            </summary>
            <param name="paddID">The paddock ID</param>
            <param name="faecesValue">The faeces data</param>
            <returns>True if the number of defaecations > 0</returns>
        </member>
        <member name="M:Models.GrazPlan.Stock.PopulateUrine(System.Int32,Models.Soils.AddUrineType)">
            <summary>
            Copy the urine info into the AddUrineType
            </summary>
            <param name="paddID">The paddock ID</param>
            <param name="urineValue">The urine data</param>
            <returns>True if the number of urinations > 0</returns>
        </member>
        <member name="M:Models.GrazPlan.Stock.ParamsFromGenotypeInits(Models.GrazPlan.AnimalParamSet,Models.GrazPlan.StockGeno[],System.Int32)">
            <summary>
            Get the parameters for this genotype
            </summary>
            <param name="mainParams">The base parameter set</param>
            <param name="genoInits">The list of genotypes</param>
            <param name="genoIdx">The index of the item in the list to use</param>
            <returns>The animal parameter set for this genotype</returns>
        </member>
        <member name="T:Models.GrazPlan.AgeInfo">
            <summary>
            Enterprise type init
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeInfo.AgeDescr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AgeInfo.TagNumber">
            <summary>
            
            </summary>
        </member>
        <member name="T:Models.GrazPlan.TagFlock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.TagFlock.MobDescr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.TagFlock.Male">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.TagFlock.Ages">
            <summary>
            age lamb,weaner, x-n
            </summary>
        </member>
        <member name="T:Models.GrazPlan.Reproduction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.MateDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.MateAge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.Conception">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.Castrate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.WeanDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.WeanAge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.MateTags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.JoinedTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.DryTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.WeanerMaleTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.WeanerFemaleTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.MaleRatio">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.KeepMales">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.Reproduction.MateWith">
            <summary>
            ausfarm unique
            </summary>
        </member>
        <member name="T:Models.GrazPlan.EnterpriseInfo">
            <summary>
            The initial state of the Enterprise
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.ENT">
            <summary>
            The stock enterprise type names
            This should parallel the TStockEnterprise enumeration 
            </summary>
        </member>
        <member name="T:Models.GrazPlan.EnterpriseInfo.StockEnterprise">
            <summary>
            Enterprise type
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.StockEnterprise.entWether">
            <summary>
            Wether
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.StockEnterprise.entEweWether">
            <summary>
            Ewes and wethers
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.StockEnterprise.entSteer">
            <summary>
            Steers
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.StockEnterprise.entBeefCow">
            <summary>
            Beef cow breeding
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.StockEnterprise.entLamb">
            <summary>
            Trading lambs
            </summary>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.EntTypeFromName(System.String)">
            <summary>
            Get the enterprise type from the name
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.SetTag(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the tag of an animal group
            </summary>
            <param name="mob"></param>
            <param name="ageidx"></param>
            <param name="value"></param>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.GetTag(System.Int32,System.Int32)">
            <summary>
            elements are indexed 1 -> n
            </summary>
            <param name="mob">1-n</param>
            <param name="ageidx">1-n</param>
            <returns></returns>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.Name">
            <summary>
            user entered name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.EntClass">
            <summary>
            Enterprise type
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.IsCattle">
            <summary>
            Is cattle
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.BaseGenoType">
            <summary>
            flock/herd genotype
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.ManageReproduction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.ManageGrazing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.tag_update_day">
            <summary>
            doy
            </summary>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.tag_flock">
            <summary>
            mob - sex,breeding
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.MateDay">
            <summary>
            Mating day
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.MateYears">
            <summary>
            Mating age in years
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.MateWith">
            <summary>
            Mate with genotype
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.Castrate">
            <summary>
            Do castrate
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.WeanDay">
            <summary>
            Weaning day
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.MateTagCount">
            <summary>
            Count of tags mated
            </summary>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.GetMateTag(System.Int32)">
            <summary>
            Get the mating tag at idx
            </summary>
            <param name="idx">1-n</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.SetMateTag(System.Int32,System.Int32)">
            <summary>
            Set the mating tag at idx
            </summary>
            <param name="idx">1-n</param>
            <param name="Value"></param>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.JoinedTag">
            <summary>
            Joined tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.DryTag">
            <summary>
            Drying off tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.WeanerFTag">
            <summary>
            Weaner female tag
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseInfo.WeanerMTag">
            <summary>
            Weaner male tag
            </summary>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.ContainsTag(System.Int32)">
            <summary>
            Determine if this Enterprise uses this tag number to specify an animal group.
            </summary>
            <param name="tagNo"></param>
            <returns></returns>
        </member>
        <member name="F:Models.GrazPlan.EnterpriseInfo.reproduction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.AsStdDate(System.String)">
            <summary>
            
            </summary>
            <param name="strDay"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseInfo.SetFromStdDate(System.Int32)">
            <summary>
            Get the string of a std date (integer). The string form is 'dd mmm'
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Models.GrazPlan.EnterpriseList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseList.Add(Models.GrazPlan.EnterpriseInfo)">
            <summary>
            
            </summary>
            <param name="ent"></param>
        </member>
        <member name="P:Models.GrazPlan.EnterpriseList.Count">
            <summary>
            Count of enterprises
            </summary>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseList.Delete(System.Int32)">
            <summary>
            Delete enterprise item 
            </summary>
            <param name="iValue">0-n</param>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseList.byName(System.String)">
            <summary>
            Get the enterprise by name
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseList.byIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="iValue">iValue: 0->n</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.EnterpriseList.IndexOf(System.String)">
            <summary>
            
            </summary>
            <param name="sName"></param>
            <returns>Returns the index of the item in the list. 0-n</returns>
        </member>
        <member name="T:Models.GrazPlan.GrazingPeriod">
            <summary>
            A period of grazing. Could be flexible or fixed dates
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.StartDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.FinishDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.Descr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.type">
            <summary>
            fixed/flexible
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.CheckEvery">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.test">
            <summary>
            cover / dm / draft
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazingPeriod.TagPaddock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.TagPaddock.tag_no">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.TagPaddock.paddock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.tag_list">
            <summary>
            used for flexible
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazingPeriod.TagIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.TagIndex.index">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.TagIndex.tag_no">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.GrazPlan.GrazingPeriod.paddock_list">
            <summary>
            used for fixed
            </summary>
        </member>
        <member name="T:Models.GrazPlan.GrazingList">
            <summary>
            List of grazing periods
            </summary>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.Count">
            <summary>
            Count of periods
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.Delete(System.Int32)">
            <summary>
            
            </summary>
            <param name="iValue">0-n</param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.Add(Models.GrazPlan.GrazingPeriod)">
            <summary>
            
            </summary>
            <param name="period"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.ByIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx">0-n</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetMoveCheck(System.Int32)">
            <summary>
            Check the paddock every x days
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetDraftCheck(System.Int32,System.Int32)">
            <summary>
            Check for drafting every x days
            </summary>
            <param name="periodIdx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetTagPaddocks(System.Int32,System.Int32)">
            <summary>
            Get the count of paddocks in the tag list
            </summary>
            <param name="periodIdx">1-n</param>
            <param name="idx">1-n</param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetTagPaddocks(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the tag list count of paddocks
            </summary>
            <param name="periodIdx">1-n</param>
            <param name="idx">1-n</param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetTag(System.Int32,System.Int32)">
            <summary>
            Get the tag item for the grazing period
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetTag(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the tag item for the grazing period
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetTagCount(System.Int32)">
            <summary>
            Get the count of tag items in the list
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetCriteria(System.Int32)">
            <summary>
            Get grazing criteria
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetCriteria(System.Int32,System.Int32)">
            <summary>
            Set the grazing criteria
            </summary>
            <param name="periodIdx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetFinishDay(System.Int32)">
            <summary>
            Get the finish day
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetFinish(System.Int32,System.Int32)">
            <summary>
            Set the finish day
            </summary>
            <param name="periodIdx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetFixedPaddCount(System.Int32,System.Int32)">
            <summary>
            Set the number of paddocks
            </summary>
            <param name="periodIdx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetFixedPaddCount(System.Int32)">
            <summary>
            Get the number of paddocks
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetFixedPadd(System.Int32,System.Int32)">
            <summary>
            Get the paddock from the list
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetFixedPadd(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the paddock in the list
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetFixedPaddTagCount(System.Int32,System.Int32)">
            <summary>
            Get the count of tags in the paddocks
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetFixedPaddTagCount(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the count of tags in the paddocks
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetFixedPaddTag(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the tag from paddock
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <param name="tagidx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetFixedPaddTag(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the tag in the paddock
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <param name="tagidx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetPeriodType(System.Int32)">
            <summary>
            Get the grazing period type
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetPeriodType(System.Int32,System.String)">
            <summary>
            Set the grazing period type
            </summary>
            <param name="periodIdx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetStartDay(System.Int32)">
            <summary>
            StartDay[1..n]
            </summary>
            <param name="periodIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetStart(System.Int32,System.Int32)">
            <summary>
            StartDay[1..n]
            </summary>
            <param name="periodIdx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.GetPaddock(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <param name="paddIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetPaddock(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="periodIdx"></param>
            <param name="idx"></param>
            <param name="paddIdx"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.AsStdDate(System.String)">
            <summary>
            "dd mmm" -> StdDate
            </summary>
            <param name="strDay"></param>
            <returns></returns>
        </member>
        <member name="M:Models.GrazPlan.GrazingList.SetFromStdDate(System.Int32)">
            <summary>
            Get the string of a std date (integer). The string form is 'dd mmm'
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Models.GrazPlan.AnimalInits">
            <summary>
            Information required to initialise a single animal group, as a record.      
            N.B. the YoungWt and YoungGFW fields may be set to MISSING, in which case    
                 TStockList will estimate defaults.                                       
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.Genotype">
            <summary>
            Genotype name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.Number">
            <summary>
            Number of animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.Sex">
            <summary>
            Sex of animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.AgeDays">
            <summary>
            Age in days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.Weight">
            <summary>
            Weight of animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.MaxPrevWt">
            <summary>
            Maximum previous weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.FleeceWt">
            <summary>
            Fleece weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.FibreDiam">
            <summary>
            Fleece fibre diameter 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.MatedTo">
            <summary>
            Mated to animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.Pregnant">
            <summary>
            Days pregnant
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.Lactating">
            <summary>
            Days lactating
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.NumFoetuses">
            <summary>
            Number of foetuses
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.NumSuckling">
            <summary>
            Number of suckling young
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.YoungGFW">
            <summary>
            Greasy fleece weight of young
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.YoungWt">
            <summary>
            Weight of young
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.BirthCS">
            <summary>
            Birth Condition score
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.Paddock">
            <summary>
            Paddock location
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.Tag">
            <summary>
            Tag of animal group
            </summary>
        </member>
        <member name="F:Models.GrazPlan.AnimalInits.Priority">
            <summary>
            Priority level
            </summary>
        </member>
        <member name="T:Models.GrazPlan.PurchaseInfo">
            <summary>
             Abbreviated animal initialisation set, used in TStockList.Buy                
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.Genotype">
            <summary>
            Genotype name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.Number">
            <summary>
            Number of animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.LiveWt">
            <summary>
            Live weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.GFW">
            <summary>
            Greasy fleece weight
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.AgeDays">
            <summary>
            Age in days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.CondScore">
            <summary>
            Condition score
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.Repro">
            <summary>
            Reproduction status
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.MatedTo">
            <summary>
            Mated to animal
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.Preg">
            <summary>
            Pregnant days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.Lact">
            <summary>
            Lactation days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.NYoung">
            <summary>
            Number of young
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.YoungWt">
            <summary>
            Weight of young
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PurchaseInfo.YoungGFW">
            <summary>
            Greasy fleece weight of young
            </summary>
        </member>
        <member name="T:Models.GrazPlan.CohortsInfo">
            <summary>
            Attributes of a set of livstock cohorts, used in TStockList.AddStock         
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.Genotype">
            <summary>
            Genotype name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.Number">
            <summary>
            Total number of animals to enter the simulation. 
            The animals will be distributed across the age cohorts, 
            taking the genotype-specific death rate into account
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.ReproClass">
            <summary>
            Reproduction status
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.MinYears">
            <summary>
            Minimum years of the youngest cohort
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.MaxYears">
            <summary>
            Maximum years of the oldest cohort
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.AgeOffsetDays">
            <summary>
            Age offset
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.MeanLiveWt">
            <summary>
            Average unfasted live weight of the animals across all age cohorts
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.CondScore">
            <summary>
            Average condition score of the animals 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.MeanGFW">
            <summary>
            Average greasy fleece weight of the animals across all age cohorts
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.FleeceDays">
            <summary>
            Days since shearing
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.MatedTo">
            <summary>
            Genotype of the rams or bulls with which the animals were mated prior to entry
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.DaysPreg">
            <summary>
            Days pregnant
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.Foetuses">
            <summary>
            Average number of foetuses per animal (including barren animals) across all age classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.DaysLact">
            <summary>
            The time since parturition in those animals that are lactating
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.Offspring">
            <summary>
            Average number of suckling offspring per animal (including dry animals) across all age classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.OffspringWt">
            <summary>
            Average unfasted live weight of any suckling lambs or calves
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.OffspringCS">
            <summary>
            Average body condition score of any suckling lambs or calves
            </summary>
        </member>
        <member name="F:Models.GrazPlan.CohortsInfo.LambGFW">
            <summary>
            Average greasy fleece weight of any suckling lambs
            </summary>
        </member>
        <member name="T:Models.GrazPlan.SingleGenotypeInits">
            <summary>
            Used to bundle animal genotype information so it can be passed to            
            TStockList.Create.                                                           
            N.B. All the numeric fields may be set to DMISSING, and MaleBreedName may     
                 be set to the null string, in which case the TStockList class will      
                 provide a default.                                                      
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SingleGenotypeInits.GenotypeName">
            <summary>
            Gets or sets the genotype name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SingleGenotypeInits.DamBreed">
            <summary>
            Gets or sets the dam breed name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SingleGenotypeInits.SireBreed">
            <summary>
            Gets or sets the sire breed name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SingleGenotypeInits.Generation">
            <summary>
            Gets or sets the generation, 1 = first cross, 2 = second cross etc
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SingleGenotypeInits.SRW">
            <summary>
            Gets or sets the standard reference weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SingleGenotypeInits.PotFleeceWt">
            <summary>
            Gets or sets the potential fleece weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SingleGenotypeInits.MaxFibreDiam">
            <summary>
            Gets or sets the maximum wool fibre diameter
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SingleGenotypeInits.FleeceYield">
            <summary>
            Gets or sets the fleece yield
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SingleGenotypeInits.PeakMilk">
            <summary>
            Gets or sets the peak milk production
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SingleGenotypeInits.DeathRate">
            <summary>
            Gets or sets the death rates
            </summary>
        </member>
        <member name="F:Models.GrazPlan.SingleGenotypeInits.Conceptions">
            <summary>
            Conception rates
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockContainer">
            <summary>
            The container for stock
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockContainer.Animals">
            <summary>
            Gets or sets the animal group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockContainer.PaddOccupied">
            <summary>
            Gets or sets the paddock occupied
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockContainer.Tag">
            <summary>
            Gets or sets the tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockContainer.Priority">
            <summary>
            Gets or sets the priority level
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockContainer.InitState">
            <summary>
            0=mothers, 1=suckling young
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockContainer.RDPFactor">
            <summary>
            RDF factor
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockContainer.InitForageInputs">
            <summary>
            Index is to forage-within-paddock
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockContainer.StepForageInputs">
            <summary>
            Forage inputs
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockContainer.PaddockInputs">
            <summary>
            Paddock grazing inputs
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockContainer.PastIntakeRate">
            <summary>
            Pasture intake
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockContainer.SuppIntakeRate">
            <summary>
            Supplement intake
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockContainer.#ctor">
            <summary>
            Create a stock container
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockList">
            <summary>
            StockList is primarily a list of AnimalGroups. Each animal group has a     
            "current paddock" (function getInPadd() ) and a "group tag" (function getTag()      
            associated with it. The correspondences between these and the animal         
            groups must be maintained.                                                   
            -                                                                               
            In addition, the class maintains two other lists:                            
            FPaddockInfo  holds paddock-specific information.  Animal groups are        
                            related to the members of FPaddockInfo by the FPaddockNos     
                            array.                                                        
            FSwardInfo    holds the herbage availabilities and amounts removed from     
                            each sward (i.e. all components which respond to the          
                            call for "sward2stock").  The animal groups never refer to    
                            this information directly; instead, the TStockList.Dynamics   
                            method (1) aggregates the availability in each sward into     
                            a paddock-level total, and (2) once the grazing logic has     
                            been executed it also allocates the amounts removed between   
                            the various swards.  Swards are allocated to paddocks on      
                            the basis of their FQDN's.                                    
            -                                                                              
             N.B. The use of a fixed-length array for priorities and paddock numbers      
                  limits the number of animal groups that can be stored in this           
                  implementation.                                                         
             N.B. The At property is 1-offset.  In many of the management methods, an     
                  index of 0 denotes "do to all groups".                                  
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.FALSE">
            <summary>
            False flag
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.TRUE">
            <summary>
            True flag
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.MONTH2DAY">
            <summary>
            Conversion factor for months to days
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.WEIGHT2DSE">
            <summary>
            Converts animal mass into "dse"s for trampling purposes                     
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.MINSRW">
            <summary>
            [AnimalType] Limits to breed SRW's                 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.MAXSRW">
            <summary>
            [AnimalType] Limits to breed SRW's                 
            </summary>          
        </member>
        <member name="F:Models.GrazPlan.StockList.paramFile">
            <summary>
            The animal parameter file name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.baseParams">
            <summary>
            Base parameters
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.genotypeParams">
            <summary>
            Set of genotype parameters
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.stock">
            <summary>
            stock[0] is kept for use as temporary storage         
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.paddockList">
            <summary>
            The paddock list
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.enterpriseList">
            <summary>
            The list of enterprises to manage
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.grazingList">
            <summary>
            The list of grazing periods
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.forageProviders">
            <summary>
            List of forage providers/components
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.RandFactory">
            <summary>
            Gets or sets the ref to the hosts random number generator
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.StartRun">
            <summary>
            Gets or sets the start of the simulation
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.ParamFile">
            <summary>
            Gets or sets the parameter file name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.Paddocks">
            <summary>
            Gets the list of paddocks
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.Enterprises">
            <summary>
            Gets the enterprise list
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.GrazingPeriods">
            <summary>
            Gets the grazing periods
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.ForagesAll">
            <summary>
            Gets all the forage providers
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.Weather">
            <summary>
            Sets the animals weather
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.MakeParamSet(System.String)">
            <summary>
            Makes a copy of TAnimalParamsGlb and modifies it according to sConstFile     
            </summary>
            <param name="constFileName">The name of the parameter file</param>
            <returns>The animal parameter set</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.SetParamFile(System.String)">
            <summary>
            Set the file name
            </summary>
            <param name="fileName">The parameter file name</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetAt(System.Int32)">
            <summary>
            posIdx is 1-offset; so is stock
            </summary>
            <param name="posIdx">The index in the stock list</param>
            <returns>Return the animal group</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.SetAt(System.Int32,Models.GrazPlan.AnimalGroup)">
            <summary>
            Set the animal group at the index position
            </summary>
            <param name="posIdx">Index in the stock list</param>
            <param name="animalGroup">The animal group value</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetPaddInfo(System.Int32)">
            <summary>
            posIdx is 1-offset; so is stock                                              
            </summary>
            <param name="posIdx">Index in the stock list</param>
            <returns>The paddock</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetInPadd(System.Int32)">
            <summary>
            posIdx is 1-offset; so is stock                                              
            </summary>
            <param name="posIdx">Index in the stock list</param>
            <returns>Get the paddock occupied</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.SetInPadd(System.Int32,System.String)">
            <summary>
            posIdx is 1-offset; so is stock
            </summary>
            <param name="posIdx">Index in stock list</param>
            <param name="value">Paddock name</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetPriority(System.Int32)">
            <summary>
            posIdx is 1-offset; so is stock                                              
            </summary>
            <param name="posIdx">Index in stock list</param>
            <returns>The priority value</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.SetPriority(System.Int32,System.Int32)">
            <summary>
            posIdx is 1-offset; so is stock
            </summary>
            <param name="posIdx">Index in stock list</param>
            <param name="value">Priority value</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SetWeather(Models.GrazPlan.AnimalWeather)">
            <summary>
            Set the weather data for the animal group
            </summary>
            <param name="theEnv">The weather data</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SetWaterLog(System.Int32,System.Double)">
            <summary>
            These values are paddock-specific and are stored in the FPaddocks list.        
            </summary>
            <param name="paddIdx">The paddock index</param>
            <param name="value">Water logging value</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Merge">
            <summary>
            Combine sufficiently-similar groups of animals and delete empty ones         
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.StoreInitialState(System.Int32)">
            <summary>
            Records state information prior to the grazing and nutrition calculations      
            so that it can be restored if there is an RDP insufficiency.                 
            </summary>
            <param name="posIdx">Index in stock list</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.RevertInitialState(System.Int32)">
            <summary>
            Restores state information about animal groups if there is an RDP            
            insufficiency. Also alters the intake limit.                                 
            * Assumes that stock[*].fRDPFactor[] has ben populated - see the            
              computeNutritiion() method.                                                
            </summary>
            <param name="posIdx">Index in stock list</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SetInitialStockInputs(System.Int32)">
            <summary>
            1. Sets the livestock inputs (other than forage and supplement amounts) for    
               animal groups occupying the paddock denoted by aPaddock.                  
            2. Sets up the amounts of herbage available to each animal group from each   
               forage (for animal groups and forages in the paddock denoted by aPaddock).  
            </summary>
            <param name="posIdx">Index in stock list</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeStepAvailability(System.Int32)">
            <summary>
            Caluculate ration availability
            </summary>
            <param name="posIdx">Index in stock list</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeStepLength(Models.GrazPlan.PaddockInfo)">
            <summary>
            Limits the length of a grazing sub-step so that no more than MAX_CONSUMPTION 
            of the herbage is consumed.                                                  
            </summary>
            <param name="paddock">The paddock</param>
            <returns>The step length</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeIntakeLimit(Models.GrazPlan.AnimalGroup)">
            <summary>
            Calculate the intake limit
            </summary>
            <param name="group">Animal group</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeGrazing(System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculate the grazing
            </summary>
            <param name="posIdx">Position in stock list</param>
            <param name="startTime">Start time</param>
            <param name="deltaTime">Time adjustment</param>
            <param name="feedSuppFirst"></param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeRemoval(Models.GrazPlan.PaddockInfo,System.Double)">
            <summary>
            Compute removal
            </summary>
            <param name="paddock">The paddock</param>
            <param name="deltaTime">Time adjustment</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ComputeNutrition(System.Int32,System.Double@)">
            <summary>
            Compute the nutrition
            </summary>
            <param name="posIdx">Index in stock list</param>
            <param name="availRDP">The rumen degradable protein value</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.CompleteGrowth(System.Int32)">
            <summary>
            Complete the animal growth
            </summary>
            <param name="posIdx">Index in the stock list</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetPaddockRank(Models.GrazPlan.PaddockInfo,Models.GrazPlan.AnimalGroup)">
            <summary>
            Get the paddock rank value
            </summary>
            <param name="paddock">The paddock</param>
            <param name="animalGroup">The animal group</param>
            <returns>The paddock rank</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.ManageDailyTasks(System.Int32,Models.GrazPlan.EnterpriseInfo)">
            <summary>
            Do daily tasks
            </summary>
            <param name="currentDay">Todays date</param>
            <param name="curEnt">Current enterprise</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ManageReproduction(System.Int32,Models.GrazPlan.EnterpriseInfo)">
            <summary>
            Process the reproduction logic specified by the dialog.
            Mating, Castrating, Weaning.
            </summary>
            <param name="currentDay">The current day</param>
            <param name="curEnt">Current enterprise</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ManageGrazing(System.Int32,System.Int32,Models.GrazPlan.EnterpriseInfo)">
            <summary>
            There can be a number of grazing periods. Each of these can include the
            movement of any number of tag groups to any paddocks. There are two types
            of grazing period, Fixed and Flexible.
            </summary>
            <param name="currentDate">The current date</param>
            <param name="currentDay">The current day</param>
            <param name="curEnt">The enterprise</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetAgeRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            For a given day of year, obtains the ages (in years, rounded down) of   
            the youngest and oldest animals in a flock/herd from the policy for     
            additions to and sales from it.                                         
            </summary>
            <param name="enterDOY">Day of year for entry to the flock/herd</param>
            <param name="enterDays">Age in days at entry</param>
            <param name="sale_yrs">The age at sale</param>
            <param name="sale_day">The day of sale</param>
            <param name="todaysDate">Today's date</param>
            <param name="youngYrs">Youngest age</param>
            <param name="oldYrs">Oldest age</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.PaddockIndexStockedByTagNo(System.Int32)">
            <summary>
            Find the index of the paddock that this tag group is currently grazing
            </summary>
            <param name="tagNo">The tag number</param>
            <returns>The paddock index</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.MoveTagToPaddock(System.Int32,System.Int32)">
            <summary>
            Move a tagged group of animals to a paddock by index.
            </summary>
            <param name="tagNo">The tag number</param>
            <param name="paddockIdx">The paddock index</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.TodayIsInPeriod(System.Int32,System.Int32,System.Int32)">
            <summary>
            Check date to see if it is in this range - handles 1 Jan wrapping.
            </summary>
            <param name="currentDay">The date to test</param>
            <param name="periodstart">Start of the period</param>
            <param name="periodfinish">End of the period</param>
            <returns>True if the date is in the period</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.#ctor(StdUnits.MyRandom)">
            <summary>
            Create a TStockList
            </summary>
            <param name="randomFactory">The random number container</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.AddGenotypes(Models.GrazPlan.SingleGenotypeInits[])">
            <summary>
            Add more genotypes
            </summary>
            <param name="breedInits">Breed init values</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.GenotypeCount">
            <summary>
            Get the genotype count
            </summary>
            <returns>The number of genotypes</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetGenotype(System.Int32)">
            <summary>
            Get the genotype at the index
            </summary>
            <param name="idx">Genotype index</param>
            <returns>The genotype</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetGenotype(System.String)">
            <summary>
            Locate a genotype in FGenotypes. If this fails, try searching for it in the  
            main parameter set and adding it to FGenotypes.                            
            </summary>
            <param name="genoName">The genotype name</param>
            <returns>The genotype</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.Add(Models.GrazPlan.AnimalGroup,Models.GrazPlan.PaddockInfo,System.Int32,System.Int32)">
            <summary>
            Add a group of animals to the list                                           
            Returns the group index of the group that was added. 0->n                    
            </summary>
            <param name="animalGroup">Animal group</param>
            <param name="paddInfo">The paddock information</param>
            <param name="tagNo">Tag value</param>
            <param name="priority">Priority number</param>
            <returns>The index of the new group in the stock array</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.Add(Models.GrazPlan.AnimalInits)">
            <summary>
            Returns the group index of the group that was added. 0->n                    
            </summary>
            <param name="animalInits">The animal data</param>
            <returns>The index of the new animal group</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.Delete(System.Int32)">
            <summary>
             * N.B. posn is 1-offset; stock list is effectively also a 1-offset array        
            </summary>
            <param name="posn">In all methods, posn is 1-offset</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Clear">
            <summary>
            Clear the list
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.Pack">
            <summary>
            Remove empty groups                   
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.Count">
            <summary>
            Only groups 1 to Length()-1 are counted                                    
            </summary>
            <returns>The number of items in the stock list</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.At(System.Int32)">
            <summary>
            Get the animal group at the position
            </summary>
            <param name="posn">The position in the list</param>
            <returns>The animal group at the index position</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetTag(System.Int32)">
            <summary>
            posIdx is 1-offset; so is stock                                              
            </summary>
            <param name="posIdx">The position in the stock list</param>
            <returns>The tag number</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.SetTag(System.Int32,System.Int32)">
            <summary>
            Set the tag value
            </summary>
            <param name="posIdx">The position in the stock list</param>
            <param name="value">Tag value</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.HighestTag">
            <summary>
            Get the highest tag number
            </summary>
            <returns>The highest tag value in the list</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.PlaceSuppInPadd(System.String,System.Double,Models.GrazPlan.FoodSupplement,System.Boolean)">
            <summary>
            Place the supplement in the paddock
            </summary>
            <param name="paddName">Paddock name</param>
            <param name="suppKG">The amount of supplement</param>
            <param name="supplement">The supplement to use</param>
            <param name="feedSuppFirst"></param>
        </member>
        <member name="M:Models.GrazPlan.StockList.BeginTimeStep">
            <summary>
            Initiate the time step for the paddocks
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.Dynamics">
            <summary>
            Advance the list by one time step.  All the input properties should be set first                                                                        
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.ReturnMassPerArea(System.Int32,Models.GrazPlan.ForageProvider,System.String)">
            <summary>
            Get the mass for the area
            </summary>
            <param name="paddID">Paddock id</param>
            <param name="provider">The forage provider object</param>
            <param name="units">The units</param>
            <returns>The mass</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.WeightedMean(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the weighted mean
            </summary>
            <param name="dY1">First Y value</param>
            <param name="dY2">Second Y value</param>
            <param name="dX1">First X value</param>
            <param name="dX2">Second X value</param>
            <returns>The weighted mean</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.AddExcretions(Models.GrazPlan.ExcretionInfo@,Models.GrazPlan.ExcretionInfo)">
            <summary>
            Used by returnExcretion()
            </summary>
            <param name="destExcretion">Output excretion data</param>
            <param name="srcExcretion">The excretion data</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ReturnExcretion(System.Int32,Models.GrazPlan.ExcretionInfo@)">
            <summary>
            Parameters:                                                               
            OrgFaeces    kg/ha  Excretion of organic matter in faeces                 
            InorgFaeces  kg/ha  Excretion of inorganic nutrients in faeces            
            Urine        kg/ha  Excretion of nutrients in urine                       
            -                                                                          
            Note:  TAnimalGroup.OrgFaeces returns the OM faecal excretion in kg, and  
                   is the total of mothers and young where appropriate; similarly for   
                   TAnimalGroup.InorgFaeces and TAnimalGroup.Urine.                   
                   TAnimalGroup.FaecalAA and TAnimalGroup.UrineAAN return weighted    
                   averages over mothers and young where appropriate. As a result we  
                   don't need to concern ourselves with unweaned young in this        
                   particular calculation except when computing PatchFract.           
            </summary>
            <param name="paddID">Paddock ID</param>
            <param name="excretion">The excretion info</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SexString(System.Int32,System.Boolean)">
            <summary>
            Return the reproductive status of the group as a string.  These strings   
            are compatible with the ParseRepro routine.                               
            </summary>
            <param name="idx">Index of the group</param>
            <param name="useYoung">For the young</param>
            <returns>The reproduction status string</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.MaxNormWtFunc(System.Double,System.Double,System.Int32,Models.GrazPlan.AnimalParamSet)">
            <summary>
            GrowthCurve calculates MaxNormalWt (see below) for an animal with the   
            default birth weight.                                                   
            </summary>
            <param name="srw">Standard reference weight</param>
            <param name="bw"></param>
            <param name="ageDays">Age in days</param>
            <param name="parameters">Breed parameter set</param>
            <returns>The maximum normal weight kg</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.GrowthCurve(System.Int32,Models.GrazPlan.GrazType.ReproType,Models.GrazPlan.AnimalParamSet)">
            <summary>
            Calculate the growth from the standard growth curve
            </summary>
            <param name="ageDays">Age in days</param>
            <param name="reprodStatus">Reproductive status</param>
            <param name="parameters">Animal parameter set</param>
            <returns>The normal weight kg</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetReproRate(Models.GrazPlan.CohortsInfo,Models.GrazPlan.AnimalParamSet,Models.GrazPlan.StockList.AgeInfo[],System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Get the reproduction rate
            </summary>
            <param name="cohortsInfo">The animal cohorts</param>
            <param name="mainGenotype">The genotype parameters</param>
            <param name="ageInfo">The age information</param>
            <param name="latitude">Latitiude value</param>
            <param name="mateDOY">Mating day of year</param>
            <param name="condition">Animal condition</param>
            <param name="chill">Chill index</param>
            <returns>The reproduction rate</returns>
        </member>
        <member name="T:Models.GrazPlan.StockList.AgeInfo">
            <summary>
            The age information
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.AgeInfo.AgeDays">
            <summary>
            Gets or sets the age of animal
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.AgeInfo.NormalBaseWt">
            <summary>
            Gets or sets the normal base weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.AgeInfo.BaseWeight">
            <summary>
            Gets or sets the animals base weight
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.AgeInfo.FleeceWt">
            <summary>
            Gets or sets the fleece weight in kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.AgeInfo.AgeAtMating">
            <summary>
            Gets or sets the age at mating in days
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockList.AgeInfo.SizeAtMating">
            <summary>
            Gets or sets the size at mating in kg
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.AddCohorts(Models.GrazPlan.CohortsInfo,System.Int32,System.Double,System.Collections.Generic.List{System.Int32})">
            <summary>
            Add animal cohorts
            </summary>
            <param name="cohortsInfo">The animal cohort</param>
            <param name="dayOfYear">Day of the year</param>
            <param name="latitude">The latitude</param>
            <param name="newGroups">List of new animal groups</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Buy(Models.GrazPlan.PurchaseInfo)">
            <summary>
            Executes a "buy" event
            </summary>
            <param name="animalInfo">The animal details</param>
            <returns>The index of the new group</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.Sell(System.Int32,System.Int32)">
            <summary>
            If groupIdx=0, work through all groups, removing animals until Number        
            animals (not including unweaned lambs/calves) have been removed.  If         
            GroupIdx>0, then remove the lesser of Number animals and all animals in      
            the group                                                                    
            </summary>
            <param name="groupIdx">The animal group index</param>
            <param name="number">The number to sell</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SellTag(System.Int32,System.Int32)">
            <summary>
            Sell the animals that have this tag. Sells firstly from the group with the
            smallest index.
            </summary>
            <param name="tagNo">The tag number</param>
            <param name="number">Number to sell</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Shear(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            If groupIdx=0, shear all groups; otherwise shear the nominated group.        
            Unweaned lambs are not shorn.                                                
            </summary>
            <param name="groupIdx">The animal group index</param>
            <param name="adults">Do adults</param>
            <param name="lambs">Do lambs</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Join(System.Int32,System.String,System.Int32)">
            <summary>
            If groupIdx=0, commence joining of all groups; otherwise commence joining    
            of the nominated group.                                                      
            </summary>
            <param name="groupIdx">The animal group index</param>
            <param name="mateTo">Mate to these animals</param>
            <param name="mateDays">Mating period</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Castrate(System.Int32,System.Int32)">
            <summary>
            The castration routine is complicated somewhat by the fact that the          
            parameter refers to the number of male lambs or calves to castrate.          
            When this number is less than the number of male lambs or calves in a        
            group, the excess must be split off.                                         
            </summary>
            <param name="groupIdx">The animal grou index</param>
            <param name="number">Number of animals</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Wean(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            See the notes to the Castrate method; but weaning is even further         
            complicated because males and/or females may be weaned.                   
            </summary>
            <param name="groupIdx">The animal group index</param>
            <param name="number">The number of animals</param>
            <param name="weanFemales">Wean the females</param>
            <param name="weanMales">Wean the males</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.DryOff(System.Int32,System.Int32)">
            <summary>
            If groupIdx=0, end lactation of all groups; otherwise end lactation of    
            of the nominated group.                                                   
            </summary>
            <param name="groupIdx">Group index</param>
            <param name="number">Number of animals</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Split(System.Int32,System.Int32)">
            <summary>
            Break an animal group up in various ways; by number, by age, by weight    
            or by sex of lambs/calves.  The new group(s) have the same priority and   
            paddock as the original.  SplitWeight assumes a distribution of weights   
            around the group average.                                                 
            </summary>
            <param name="groupIdx">The animal group index</param>
            <param name="numToKeep">Number to keep</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SplitAge(System.Int32,System.Int32)">
            <summary>
            Split the group by age
            </summary>
            <param name="groupIdx">The animal group index</param>
            <param name="ageDays">Age in days</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SplitWeight(System.Int32,System.Double)">
            <summary>
            Split the group by weight
            </summary>
            <param name="groupIdx">The animal group index</param>
            <param name="splitWt">The weight</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.SplitYoung(System.Int32)">
            <summary>
            Split off the young
            </summary>
            <param name="groupIdx">The animal group index</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Sort">
            <summary>
            Sorting is done using the one-offset stock array                            
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.Draft(System.Collections.Generic.List{System.String})">
            <summary>
            Perform a drafting operation
            </summary>
            <param name="closedList">List of closed paddocks</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Draft(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Perform a drafting operation
            </summary>
            <param name="tagNo">The tag number</param>
            <param name="closedPaddocks">List of closed paddocks</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ManageInternalInit(System.Int32,System.Double)">
            <summary>
            Setup the stock groups using the internal criteria the user has defined
            for this component.
            </summary>
            <param name="currentDay">Todays date</param>
            <param name="latitude">Latitude</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ManageInternalTasks(System.Int32)">
            <summary>
            Follow the management events described by the user for this stock component.
            </summary>
            <param name="currentDate">Todays date</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.RankPaddocks(System.Collections.Generic.List{System.String})">
            <summary>
            Rank the paddocks
            </summary>
            <param name="paddockList">List of paddocks returned</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.Value2GenotypeInits(Models.GrazPlan.StockGeno,Models.GrazPlan.SingleGenotypeInits@)">
            <summary>
            Convert the Stock geno object to SingleGenotypeInits
            </summary>
            <param name="genoValue">A genotype value</param>
            <param name="genoInits">Genotype initial value</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.GenotypeInits2Value(Models.GrazPlan.SingleGenotypeInits[],Models.GrazPlan.StockGeno[]@)">
            <summary>
            Convert the inits into a StockGeno array
            </summary>
            <param name="genoInits">The array of genotype inits</param>
            <param name="genoValues">The returned array of StockGeno</param>
        </member>
        <member name="T:Models.GrazPlan.StockList.ReproRecord">
            <summary>
            The reproduction record
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.ReproRecord.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockList.ReproRecord.Repro">
            <summary>
            The reproduction record
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockList.ReproRecord.#ctor(System.String,Models.GrazPlan.GrazType.ReproType)">
            <summary>
            The ReproRecord constructor
            </summary>
            <param name="name">Name of the reproduction</param>
            <param name="repro">Reproduction type</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.ParseRepro(System.String,Models.GrazPlan.GrazType.ReproType@)">
            <summary>
            Converts a keyword to a ReproType.  Allows plurals in the keyword. 
            N.B. The routine is animal-insensitive, i.e. if 'COW' is passed in,      
                 Empty will be returned regardless of whether sheep or cattle are    
                 under consideration                                                 
            </summary>
            <param name="keyword">The keyword to match</param>
            <param name="repro">The reproduction record</param>
            <returns>True if the keyword is found</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.SheepValue2AnimalInits(Models.GrazPlan.SheepInit,Models.GrazPlan.AnimalInits@)">
            <summary>
            Convert sheep data to an animal init
            </summary>
            <param name="sheepValue">The sheep data</param>
            <param name="animalInit">The animal init</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.CattleValue2AnimalInits(Models.GrazPlan.CattleInit,Models.GrazPlan.AnimalInits@)">
            <summary>
            Conver the cattle value to an animal init
            </summary>
            <param name="cattleValue">The cattle information</param>
            <param name="animalInit">The animal init</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.PosInterval(System.Int32,System.Int32)">
            <summary>
            These functions return the number of days from the first date to the  
            second.  PosInterval assumes that its arguments are days-of-year, i.e.    
            YearOf(DOY1)=YearOf(DOY2)=0, while DaysFromDOY treats its first argument  
            as though it is a day-of-year and computes the number of days from that   
            day-of-year to the second date.                                           
            </summary>
            <param name="dayOfYear1">Start day</param>
            <param name="dayOfYear2">End day</param>
            <returns>The interval in days</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.DaysFromDOY(System.Int32,System.Int32)">
            <summary>
            Get the days difference
            </summary>
            <param name="dayOfYear">Start date</param>
            <param name="theDate">The end date</param>
            <returns>The difference</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.IsGiven(System.Double)">
            <summary>
            Tests for a non-MISSING, non-zero value                                      
            </summary>
            <param name="x">The test value</param>
            <returns>True if this is not a missing value</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.DaysFromDOY365(System.Int32,System.Int32)">
            <summary>
            Calculate the days from the day of year in a non leap year
            </summary>
            <param name="dayOfYear">Start day</param>
            <param name="otherDay">End day</param>
            <returns>The days in the interval</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.MakeEmptyGenotype(Models.GrazPlan.SingleGenotypeInits@)">
            <summary>
            Initialises a SingleGenotypeInits so that most parameters revert to their         
            defaults.  Can't be done as a constant because MISSING is a typed value      
            </summary>
            <param name="genotype">Returns the empty genotype</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.AddDMPool(Models.GrazPlan.GrazType.DM_Pool,Models.GrazPlan.GrazType.DM_Pool)">
            <summary>
            Utility routines for manipulating the DM_Pool type.  AddDMPool adds the   
            contents of two pools together
            </summary>
            <param name="pool1">DM pool 1</param>
            <param name="pool2">DM pool 2</param>
            <returns>The combined pool</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.MultiplyDMPool(Models.GrazPlan.GrazType.DM_Pool,System.Double)">
            <summary>
            MultiplyDMPool scales the contents of a pool                                                                 
            </summary>
            <param name="srcPool">The dm pool to scale</param>
            <param name="scale">The scale</param>
            <returns>The scaled pool</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.GetOffspringRates(Models.GrazPlan.AnimalParamSet,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Get the young offspring rates
            </summary>
            <param name="parameters">The animal parameters</param>
            <param name="latitude">The latitude</param>
            <param name="mateDOY">Mating day of year</param>
            <param name="ageDays">Age in days</param>
            <param name="matingSize">Mating size</param>
            <param name="condition">Animal condition</param>
            <param name="chillIndex">The chill index</param>
            <returns>Offspring rates</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.Add(Models.GrazPlan.AnimalList,Models.GrazPlan.PaddockInfo,System.Int32,System.Int32)">
            <summary>
            Add( TAnimalList, TPaddockInfo, integer, integer )                           
            Private variant. Adds all members of a TAnimalList back into the stock list  
            </summary>
            <param name="animalList">The source animal list</param>
            <param name="paddInfo">The paddock info</param>
            <param name="tagNo">The tag number</param>
            <param name="priority">Priority value</param>
        </member>
        <member name="M:Models.GrazPlan.StockList.FindGenotype(Models.GrazPlan.AnimalParamSet,Models.GrazPlan.SingleGenotypeInits[],System.String,System.Int32)">
            <summary>
            Find the genotype
            </summary>
            <param name="mainParams">The animal parameters</param>
            <param name="genoInits">Genotype inits</param>
            <param name="searchName">The name to search</param>
            <param name="searchBefore"></param>
            <returns>The animal parametes</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.ParamsFromGenotypeInits(Models.GrazPlan.AnimalParamSet,Models.GrazPlan.SingleGenotypeInits[],System.Int32)">
            <summary>
            Always makes a copy
            </summary>
            <param name="mainParams">The animal parameters</param>
            <param name="genoInits">Genotype inits</param>
            <param name="genoIdx">The genoptype index</param>
            <returns>The animal parametes</returns>
        </member>
        <member name="M:Models.GrazPlan.StockList.DoStockManagement(Models.GrazPlan.StockList,Models.GrazPlan.IStockEvent,System.Int32,System.Double)">
            <summary>
            The main stock management function that handles a number of events.
            </summary>
            <param name="model">The stock model</param>
            <param name="stockEvent">The event parameters</param>
            <param name="dateToday">Today's date</param>
            <param name="latitude">The latitiude</param>
        </member>
        <member name="T:Models.GrazPlan.IStockEvent">
            <summary>
            Common interface for data passed to stock management events.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockAdd">
            <summary>
            The AddStock event
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Genotype">
            <summary>
            Gets or sets the genotype of the animals to enter the simulation. 
            Must match the name field of a member of the genotypes property.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Number">
            <summary>
            Gets or sets the total number of animals to enter the simulation. 
            The animals will be distributed across the age cohorts, taking the genotype-specific death rate into account.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Sex">
            <summary>
            Gets or sets the sex of the animals. Feasible values are as for sheep:sex or cattle:sex, as appropriate.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.BirthDay">
            <summary>
            Gets or sets the day of year (1-365) on which all animals are assumed to have been born.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.MinYears">
            <summary>
            Gets or sets the age in years of the youngest age cohort (their exact age will depend on the current day of year and the value of birth_day).
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.MaxYears">
            <summary>
            Gets or sets the age in years of the oldest age cohort
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.MeanWeight">
            <summary>
            Gets or sets the average unfasted live weight of the animals across all age cohorts. 
            Animals in each age cohort will be given different weights, based on their normal weight for age, such that the overall average weight is that specified by this parameter. 
            This parameter may also be set to zero, in which case a default set of live weights will be computed, taking cond_score into account if it is nonzero.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.CondScore">
            <summary>
            Gets or sets the average condition score of the animals (assumed to be the same for all age cohorts). 
            If a value of zero is given, the default condition score for the weight and age will be used.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.MeanFleeceWt">
            <summary>
            Gets or sets the average greasy fleece weight of the animals across all age cohorts. 
            Different values will be computed for each age cohort, such that the weighted average fleece weight equals the specified value. 
            This parameter may be set to zero, in which case a default set of fleece weights will be computed based on the current day of year and the shear_day parameter. 
            Only meaningful in sheep.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.ShearDay">
            <summary>
            Gets or sets the day of year on which the animals were last shorn. Only meaningful in sheep.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.MatedTo">
            <summary>
            Gets or sets the genotype of the rams or bulls with which the animals were mated prior to entry. 
            Only meaningful if pregnant or lactating is non-zero. 
            Must match the name field of a member of the genotypes property.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Pregnant">
            <summary>
            Gets or sets the pregnancy status. Zero denotes no animals are pregnant; 1 or more denotes the time since conception of those animals that are pregnant. 
            Only meaningful for females.
            d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Foetuses">
            <summary>
            Gets or sets the average number of foetuses per animal (including barren animals) across all age classes. 
            Different pregnancy rates will be computed for each age cohort, such that the weighted average number of foetuses per animal equals the specified value. 
            Only meaningful for females.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Lactating">
            <summary>
            Gets or sets the lactation status. Zero denotes no animals are lactating; 1 or more denotes the time since parturition in those animals that are lactating. 
            Only meaningful for females.
            d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.Offspring">
            <summary>
            Gets or sets the average number of suckling offspring per animal (including dry animals) across all age classes. 
            Different numbers of offspring will be computed for each age cohort, such that the weighted average number of offspring per animal equals the specified value. 
            Only meaningful for females.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.YoungWt">
            <summary>
            Gets or sets the average unfasted live weight of any suckling lambs or calves.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.YoungCondScore">
            <summary>
            Gets or sets the average body condition score of any suckling lambs or calves.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.YoungFleeceWt">
            <summary>
            Gets or sets the average greasy fleece weight of any suckling lambs.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockAdd.UseTag">
            <summary>
            Gets or sets the optional tag number to use.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockBuy">
            <summary>
            Buy stock
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockBuy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Genotype">
            <summary>
            Gets or sets the genotype of the animals to be bought. 
            Must match the name field of a member of the genotypes property.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Number">
            <summary>
            Gets or sets the number of animals to be bought.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Sex">
            <summary>
            Gets or sets the sex of the animals. 
            Feasible values are as for sheep:sex or cattle:sex, as appropriate,
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Age">
            <summary>
            Gets or sets the average age of the animals.
            Months
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Weight">
            <summary>
            Gets or sets the average unfasted live weight of the animals. 
            If a value of zero is given, a default value will be calculated, making use of the cond_score parameter if it is non-zero.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.FleeceWt">
            <summary>
            Gets or sets the average greasy fleece weight of the animals. 
            Only meaningful in sheep.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.CondScore">
            <summary>
            Gets or sets the average condition score of the animals. 
            If a value of zero is given, the default condition score for the weight and age will be used.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.MatedTo">
            <summary>
            Gets or sets the genotype of the rams or bulls with which the animals were mated prior to entry. 
            Only meaningful if pregnant or lactating is non-zero. 
            Must match the name field of a member of the genotypes property.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Pregnant">
            <summary>
            Gets or sets the pregnancy status. Zero denotes not pregnant; 1 or more denotes the time since conception. 
            Only meaningful for females.
            d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.Lactating">
            <summary>
            Gets or sets the latation status. Zero denotes not lactating; 1 or more denotes the time since parturition in lactating animals. 
            Only meaningful for females.
            d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.NumYoung">
            <summary>
            Gets or sets the number of foetuses and/or suckling offspring.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.YoungWt">
            <summary>
            Gets or sets the average unfasted live weight of any suckling lambs or calves.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.YoungFleeceWt">
            <summary>
            Gets or sets the average greasy fleece weight of any suckling lambs.
            kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockBuy.UseTag">
            <summary>
            Gets or sets the optional tag to use.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockSell">
            <summary>
            Removes animals from the simulation.  sell without parameters will remove all sheep in the stock sub-model
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSell.Group">
            <summary>
            Gets or sets the index number of the animal group from which animals are to be removed. 
            A value of zero denotes that each animal group should be processed in turn until the nominated number of animals has been removed.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSell.Number">
            <summary>
            Gets or sets the number of animals to remove.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockCastrate">
            <summary>
            Castrate event
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockCastrate.Group">
            <summary>
            Gets or sets the index number of the animal group, the lambs or calves of which are to be castrated. 
            A value of zero denotes that each animal group should be processed in turn until the nominated number of offspring has been castrated.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockCastrate.Number">
            <summary>
            Gets or sets the number of male lambs or calves to be castrated.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockDryoff">
            <summary>
            Dryoff event
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockDryoff.Group">
            <summary>
            Gets or sets the index number of the animal group for which lactation is to end. 
            A value of zero denotes that each animal group should be processed in turn until the nominated number of cows has been dried off.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockDryoff.Number">
            <summary>
            Gets or sets the number of females for which lactation is to end.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockSellTag">
            <summary>
            Removes animals from the simulation by tag number.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSellTag.Tag">
            <summary>
            Gets or sets the tag number of the animals from which animals are to be removed. 
            Animals are removed starting from the group with the smallest index.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSellTag.Number">
            <summary>
            Gets or sets the number of animals to remove.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockShear">
            <summary>
            Shears sheep. The event has no effect on cattle.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockShear.Group">
            <summary>
            Gets or sets the index number of the animal group to be shorn. 
            A value of zero denotes that all animal groups should be processed.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockShear.SubGroup">
            <summary>
            Gets or sets the subgroup. Denotes whether the main group of animals, suckling lambs, or both should be shorn. 
            Feasible values are the null string (main group), ‘adults’ (main group), ‘lambs’ (suckling lambs), ‘both’ (both).
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockMove">
            <summary>
            Changes the paddock to which an animal group is assigned
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockMove.Group">
            <summary>
            Gets or sets the index number of the animal group to be moved.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockMove.Paddock">
            <summary>
            Gets or sets the name of the paddock to which the animal group is to be moved.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockJoin">
            <summary>
            Stock joining
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockJoin.Group">
            <summary>
            Gets or sets the index number of the animal group for which mating is to commence. 
            A value of zero denotes that all empty females of sufficient age should be mated 
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockJoin.MateTo">
            <summary>
            Gets or sets the genotype of the rams or bulls with which the animals are mated. 
            Must match the name field of a member of the genotypes property.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockJoin.MateDays">
            <summary>
            Gets or sets the length of the mating period.
            d
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockWean">
            <summary>
            Weans some or all of the lambs or calves from an animal group. 
            The newly weaned animals are added to the end of the list of animal groups, with males and females in separate groups.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockWean.Group">
            <summary>
            Gets or sets the index number of the animal group from which animals are to be removed. 
            A value of zero denotes that each animal group should be processed in turn until the nominated number of lambs or calves has been weaned.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockWean.Sex">
            <summary>
            Gets or sets the sex to wean.
            Feasible values are:
            ‘all’       Female and male lambs or calves are to be weaned.
            ‘females’   Only female lambs or calves are to be weaned.
            ‘males’     Only male lambs or calves are to be weaned
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockWean.Number">
            <summary>
            Gets or sets the number of lambs or calves to be weaned.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockSplitAll">
            <summary>
            Creates new animal groups from all the animal groups.  The new groups are placed at the end of the animal group list. 
            This event is for when splits need to occur over all animal groups. Description of split event also applies.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSplitAll.Type">
            <summary>
            Gets or sets the type of animal to split.
            Feasible values are:
            ‘age’       All animals older than value days are moved to a new group.
            ‘weight’    All animals with live weight less than value kg are moved to a new group.
            ‘young’     Only animals with suckling offspring are affected.Mothers with different sexes of young are divided, with the group with all male offspring remaining in place.
                        For mothers with twins, three groups are created; a group with two male offspring, a group with two female offspring, and a group with one of each.
            ‘number’    value animals remain in place and the remainder form a new group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSplitAll.Value">
            <summary>
            Gets or sets the threshold age or weight, or the number to be split, depending on the value of type. Ignored if type is ‘young’.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSplitAll.OtherTag">
            <summary>
            Gets or sets the tag number. If this value is given then the animals moved into the new animal group will have this tag number. 
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockSplit">
            <summary>
            Creates two or more animal groups from the nominated group.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSplit.Group">
            <summary>
            Gets or sets the index number of the animal group to be split.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSplit.Type">
            <summary>
            Gets or sets the type of animal.
            Feasible values are:
            ‘age’       All animals older than value days are moved to a new group.
            ‘weight’    All animals with live weight less than value kg are moved to a new group.
            ‘young’     Only animals with suckling offspring are affected.Mothers with different sexes of young are divided, with the group with all male offspring remaining in place.
                        For mothers with twins, three groups are created; a group with two male offspring, a group with two female offspring, and a group with one of each.
            ‘number’    value animals remain in place and the remainder form a new group
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSplit.Value">
            <summary>
            Gets or sets the threshold age or weight, or the number to be split, depending on the value of type. Ignored if type is ‘young’.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockSplit.OtherTag">
            <summary>
            Gets or sets the tag number. If this value is given then the animals moved into the new animal group will have this tag number.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockTag">
            <summary>
            Changes the “tag value” associated with an animal group.  
            This value is used to sort animals; it can also be used to group animals for user-defined purposes 
            (e.g. to identify animals that are to be managed as a single mob even though they differ physiologically) 
            and to keep otherwise similar animal groups distinct from one another.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockTag.Group">
            <summary>
            Gets or sets the index number of the animal group to be assigned a tag value.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockTag.Value">
            <summary>
            Gets or sets the tag value to be assigned.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockPrioritise">
            <summary>
            Sets the "priority" of an animal group for later use in a draft event. It is usual practice to use positive values for priorities.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockPrioritise.Group">
            <summary>
            Gets or sets the index number of the animal group for which priority is to be set.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockPrioritise.Value">
            <summary>
            Gets or sets the new priority value for the group.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockSort">
            <summary>
            For the sort event.
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockDraft">
            <summary>
            Draft event
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockDraft.Closed">
            <summary>
            Gets or sets the names of paddocks to be excluded from consideration as possible destinations
            </summary>
        </member>
        <member name="T:Models.GrazPlan.ChemData">
            <summary>
            Chemistry data for the forage
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ChemData.MassKgHa">
            <summary>
            Mass in kg/ha 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ChemData.NitrogenKgHa">
            <summary>
            N in kg/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ChemData.PhosphorusKgHa">
            <summary>
            P in kg/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ChemData.SulphurKgHa">
            <summary>
            S in kg/ha
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ChemData.AshAlkMolHa">
            <summary>
            Ash alkalinity mol/ha
            </summary>
        </member>
        <member name="T:Models.GrazPlan.ForageInfo">
            <summary>
            Up to 12 classes with separate digestible and indigestible pools
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.MISSINGPOINT">
            <summary>
            Missing value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.CLASSWIDTH">
            <summary>
            Width of the digestibility class
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.HIGHESTDMD">
            <summary>
            Highest disgestibility value
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.EPSILON">
            <summary>
            Used in CalcDMDDistribution()
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.MAXCHEMCLASSES">
            <summary>
            Maximum number of chemistry classes
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.useForageData">
            <summary>
            Use the forage data
            The computed attributes of this "forage", in the form used by AnimalGroup
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.forageData">
            <summary>
            The grazing forage data
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.greenBulkDensity">
            <summary>
            The bulk density of the green
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.legumeMass">
            <summary>
            Mass of the legume
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.C4GrassMass">
            <summary>
            Mass of the C4 grass
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.seedType">
            <summary>
            0 = non-seed, UNRIPE or RIPE
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.bottomMM">
            <summary>
            The herbage bottom
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.topMM">
            <summary>
            The herbage top
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.chemData">
            <summary>
            Chemistry details for each chem class
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.herbageDMDFract">
            <summary>
            Herbage dmd fraction
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageInfo.seedRipeFract">
            <summary>
            See ripe fraction
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.#ctor">
            <summary>
            Construct a forage info
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.GreenMass">
            <summary>
            Gets or sets the green mass of the forage
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.TotalLive">
            <summary>
            Gets the total live herbage used as input in GrazingInputs
            Units: the same as the forage object
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.TotalDead">
            <summary>
            Gets the total dead herbage used as input in GrazingInputs
            Units: the same as the forage object
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.Name">
            <summary>
            Gets or sets the full identifier for this forage e.g. Crop or pasture component full path name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.CohortID">
            <summary>
            Gets or sets the cohortID from the incoming AvailableToAnimal forage component
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.Organ">
            <summary>
            Gets or sets the forage organ
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.AgeClass">
            <summary>
            Gets or sets the forage item age class
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.InPaddock">
            <summary>
            Gets or sets the paddock of this forage
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.HerbageData">
            <summary>
            Gets or sets the herbage info
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.RemovalKG">
            <summary>
            Gets or sets the amount of this forage removed (output)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.Bottom">
            <summary>
            Gets or sets the bottom of forage
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageInfo.Top">
            <summary>
            Gets or sets the top of forage
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.GetBottom">
            <summary>
            Gets the bottom position
            </summary>
            <returns>The bottom mm</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.GetTop">
            <summary>
            Gets the top postion
            </summary>
            <returns>The top in mm</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.SummariseInitHerbage">
            <summary>
            Summarise the initial herbage 
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.CalcDMDDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the proportions in a DMD distribution
            </summary>
            <param name="meanDMD">The mean DMD</param>
            <param name="maxDMD">Upper range</param>
            <param name="minDMD">Lower range</param>
            <returns>A digestibility distribution</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.PopulateIntakeRecord(Models.GrazPlan.GrazType.IntakeRecord@,System.Int32,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Populate the intake record
            </summary>
            <param name="intakeRecord">The intake record to return</param>
            <param name="dmdClass">Digestibility class</param>
            <param name="useMeanDMD">Use mean digestibility</param>
            <param name="totalMass">Total herbage mass</param>
            <param name="meanDMD">Mean digestiblity</param>
            <param name="massFract">Mass fraction</param>
            <param name="ddm_N">Digestible N</param>
            <param name="idm_N">Indigestible N</param>
            <param name="ddm_P">Digestible P</param>
            <param name="idm_P">Indigestible P</param>
            <param name="ddm_S">Digestible sulphur</param>
            <param name="idm_S">Indigestible sulphur</param>
            <param name="ddm_AA">Digestible AshAlk</param>
            <param name="idm_AA">Indigestible AshAlk</param>
            <param name="bulkDensity">Bulk density</param>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.PopulateSeedRecord(Models.GrazPlan.GrazType.GrazingInputs@,System.Double,System.Int32,System.Int32)">
            <summary>
            Populate the seed record
            </summary>
            <param name="grazingInput">The grazing input</param>
            <param name="availPropn">Available proportion</param>
            <param name="idxDDM">Digestible index</param>
            <param name="idxIDM">Indigestible index</param>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.PopulateHerbageType(Models.GrazPlan.GrazType.GrazingInputs@)">
            <summary>
            Set the LegumePropn, SelectFactor and TropLegume fields of a GrazingInputs
            * Expects that the TotalGreen and TotalDead fields have already been computed
            </summary>
            <param name="grazingInput">The grazing inputs</param>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.SetAvailForage(Models.GrazPlan.GrazType.GrazingInputs)">
            <summary>
            The the forage data
            </summary>
            <param name="forageInputs">Forage inputs</param>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.AvailForage">
            <summary>
            Calculates the GrazingInputs values from the values stored during addForageData() 
            </summary>
            <returns>The grazing inputs</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageInfo.SomethingRemoved">
            <summary>
            Returns True if something has been removed from herbage or seed pool.
            </summary>
            <returns>True if some forage amount has been removed by the animals</returns>
        </member>
        <member name="T:Models.GrazPlan.ForageList">
            <summary>
            List of ForageInfo forages 
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageList.items">
            <summary>
            The list of forage infos
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageList.ownsList">
            <summary>
            This object manages the lifetime of the item list
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageList.#ctor(System.Boolean)">
            <summary>
            Construct the forage list
            </summary>
            <param name="ownsForages">The object will manage the lifetime of the forage list</param>
        </member>
        <member name="M:Models.GrazPlan.ForageList.Count">
            <summary>
            Count of forages
            </summary>
            <returns>The count of forages</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageList.Add(Models.GrazPlan.ForageInfo)">
            <summary>
            Add a forage item
            </summary>
            <param name="forageInfo">The forage information</param>
        </member>
        <member name="M:Models.GrazPlan.ForageList.Add(System.String)">
            <summary>
            Add a forage by name
            </summary>
            <param name="forageName">Forage name</param>
            <returns>The new forage item</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageList.Delete(System.Int32)">
            <summary>
            Delete a forage by index
            </summary>
            <param name="indexValue">Index value</param>
        </member>
        <member name="M:Models.GrazPlan.ForageList.ByIndex(System.Int32)">
            <summary>
            Get a forage by index
            </summary>
            <param name="indexValue">The forage index</param>
            <returns>The forage. If not found then return null</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageList.ByName(System.String)">
            <summary>
            Get a forage by name
            </summary>
            <param name="forageName">The forage name</param>
            <returns>The forage info. If not found then null.</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageList.IndexOf(System.String)">
            <summary>
            Get the index of a forage by name
            </summary>
            <param name="forageName">The forage name</param>
            <returns>Returns the forage index</returns>
        </member>
        <member name="T:Models.GrazPlan.ForageProvider">
            <summary>
            New forage interface for AvailableToAnimal support
            TForageProvider maps to a cmp component such as Plant or AgPasture.
            Each of these can contain 0..n forage. The forage will be named
            with the cohortid string.
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProvider.forages">
            <summary>
            The list of forages
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProvider.forageHostName">
            <summary>
            host crop, pasture component name
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProvider.hostID">
            <summary>
            plant/pasture comp
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProvider.paddockOwnerName">
            <summary>
            owning paddock FQN
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProvider.owningPaddock">
            <summary>
            Ref to the paddock object in the model
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.#ctor">
            <summary>
            Construct the forage provider
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.PastureGreenDM">
            <summary>
            Gets or sets the total calculated green dm for the paddock
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.OwningPaddock">
            <summary>
            Gets or sets the owning paddock
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.PaddockOwnerName">
            <summary>
            Gets or sets the paddock owner name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.ForageHostName">
            <summary>
            Gets or sets the forage host name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.HostID">
            <summary>
            Gets or sets the component id of the host
            </summary>
        </member>
        <member name="P:Models.GrazPlan.ForageProvider.ForageObj">
            <summary>
            Gets or sets the crop, pasture component
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.UpdateForages(System.Object)">
            <summary>
            Update the forage data for this crop/agpasture object
            </summary>
            <param name="forageObj">The crop/pasture object</param>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.ForageByName(System.String)">
            <summary>
            The forage name is the name of the cohort.
            </summary>
            <param name="forageName">The forage name</param>
            <returns>The forage object</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.ForageByIndex(System.Int32)">
            <summary>
            Get the forage by index
            </summary>
            <param name="idx">The index. 0..n</param>
            <returns>The forage index</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.PassGrazingInputs(Models.GrazPlan.ForageInfo,Models.GrazPlan.GrazType.GrazingInputs,System.String)">
            <summary>
            Use the GrazingInputs to initialise the forage object
            </summary>
            <param name="forage">The forage object</param>
            <param name="grazingInput">The grazing inputs</param>
            <param name="units">The units</param>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.Crop2GrazingInputs(System.Object)">
            <summary>
            Copies a Plant/AgPasture object biomass organs into GrazingInputs object
            This object may then get scaled to kg/ha
            </summary>
            <param name="forageObj">The forage object - a Plant/AgPasture component</param>
            <returns>The grazing inputs</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.RemoveHerbageFromPlant">
            <summary>
            The herbage is removed from the plant/agpasture
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.ReturnRemoval(Models.GrazPlan.ForageInfo,System.String)">
            <summary>
            Return the removal
            </summary>
            <param name="forage">The forage</param>
            <param name="units">The units</param>
            <returns>The grazing outputs/consumed</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProvider.SomethingRemoved">
            <summary>
            Test the Removal to determine if there is any quantity of forage removed.
            </summary>
            <returns>True if some herbage has been removed</returns>
        </member>
        <member name="T:Models.GrazPlan.ForageProviders">
            <summary>
            ForageProviders is a collection of forage/cmp components that each in turn
            supply 1..n forage plants/species
            </summary>
        </member>
        <member name="F:Models.GrazPlan.ForageProviders.forageProviderList">
            <summary>
            The list of forage providers
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.#ctor">
            <summary>
            Construct a forage provider
            </summary>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.Count">
            <summary>
            Count of forage providers
            </summary>
            <returns>The count of forage providers</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.AddProvider(Models.GrazPlan.PaddockInfo,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            Add a forage provider component
            </summary>
            <param name="paddock">The paddock info</param>
            <param name="paddName">The paddock name</param>
            <param name="forageName">The forage name</param>
            <param name="hostID">Component ID</param>
            <param name="driverID">Driver ID</param>
            <param name="forageObj">The forage object</param>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.FindProvider(System.String)">
            <summary>
            Find the forage provider for this forage/provider name
            </summary>
            <param name="providerName">The forage provider (component) name</param>
            <returns>The ForageProvider</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.FindProvider(System.Int32)">
            <summary>
            Find the forage provider for this component ID.
            </summary>
            <param name="hostID">The host component ID</param>
            <returns>The forage provider</returns>
        </member>
        <member name="M:Models.GrazPlan.ForageProviders.ForageProvider(System.Int32)">
            <summary>
            Get a forage provider from the list. idx = 0..n
            </summary>
            <param name="idx">The index</param>
            <returns>The forage provider</returns>
        </member>
        <member name="T:Models.GrazPlan.PaddockInfo">
            <summary>
            Paddock details
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockInfo.NOTTHERE">
            <summary>
            Missing item
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockInfo.slope">
            <summary>
            Slope in degrees
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockInfo.steepness">
            <summary>
            Steepness code (1-2)
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockInfo.forages">
            <summary>
            CAREFUL - FForages does not own its members
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockInfo.suppInPadd">
            <summary>
            The supplement placed in the paddock
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockInfo.feedSupplementFirst">
            <summary>
            Feed the supplement before eating pasture
            </summary>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.#ctor">
            <summary>
            Create the PaddockInfo
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.FSummedGreenMass">
            <summary>
            Gets or sets the summed green mass
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Name">
            <summary>
            Gets or sets the paddock name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.PaddID">
            <summary>
            Gets or sets the paddock ID
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.PaddObj">
            <summary>
            Gets or sets the paddock object
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.ExcretionDest">
            <summary>
            Gets or sets the excretion destination
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.UrineDest">
            <summary>
            Gets or sets the urine destination
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.AddFaecesObj">
            <summary>
            Gets or sets the faeces destination
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.AddUrineObj">
            <summary>
            Gets or sets the urine destination
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Area">
            <summary>
            Gets or sets the paddock area (ha)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Waterlog">
            <summary>
            Gets or sets the waterlogging index (0-1)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.SummedPotIntake">
            <summary>
            Gets or sets the total pot. intake
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.SuppRemovalKG">
            <summary>
            Gets or sets the supplement removal amount
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Slope">
            <summary>
            Gets or sets the paddock slope
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Steepness">
            <summary>
            Gets the steepness code (1-2)
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.SuppInPadd">
            <summary>
            Gets the supplement that is in the paddock
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.Forages">
            <summary>
            Gets the forage list
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInfo.FeedSuppFirst">
            <summary>
            Gets a value indicating whether feeding the supplement first. Bail feeding.
            </summary>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.SetSlope(System.Double)">
            <summary>
            Set the paddock slope value
            </summary>
            <param name="slopeValue">The value in degrees</param>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.AssignForage(Models.GrazPlan.ForageInfo)">
            <summary>
            Assign a forage to this paddock
            </summary>
            <param name="forage">The forage object to assign to this paddock</param>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.ComputeTotals">
            <summary>
            Aggregates the initial forage availability of each species in the list       
            * If FForages.Count=0, then the aggregate forage availability is taken to    
              have been passed at the paddock level using setGrazingInputs()             
            </summary>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.ZeroRemoval">
            <summary>
            Zero the removal amounts
            </summary>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.FeedSupplement(System.Double,Models.GrazPlan.FoodSupplement,System.Boolean)">
            <summary>
            Feed the supplement
            </summary>
            <param name="newAmount">The amount to feed in kg</param>
            <param name="newSupp">The supplement to feed</param>
            <param name="feedSuppFirst">True if bail feeding</param>
        </member>
        <member name="M:Models.GrazPlan.PaddockInfo.ClearSupplement">
            <summary>
            Clear the supplement ration that is in the paddock
            </summary>
        </member>
        <member name="T:Models.GrazPlan.PaddockList">
            <summary>
            The PaddockList class
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockList.items">
            <summary>
            List of paddock info objects
            </summary>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.#ctor">
            <summary>
            Create the PaddockList
            </summary>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.Count">
            <summary>
            Get the count of paddocks
            </summary>
            <returns>The count of paddocks</returns>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.Add(Models.GrazPlan.PaddockInfo)">
            <summary>
            Add a paddock
            </summary>
            <param name="paddInfo">The paddock info</param>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.Add(System.Int32,System.String)">
            <summary>
            Add a new paddock using ID and name
            </summary>
            <param name="paddockID">Paddock ID</param>
            <param name="paddName">The name of the paddock</param>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.Add(System.Object,System.String)">
            <summary>
            Add a new paddock object using reference and name
            </summary>
            <param name="paddObj">The paddock object</param>
            <param name="paddName">The name of the paddock</param>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.Delete(System.Int32)">
            <summary>
            Delete the paddock at the index
            </summary>
            <param name="indexValue">Paddock index</param>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.ByIndex(System.Int32)">
            <summary>
            Get the paddock info at the index
            </summary>
            <param name="indexValue">The paddock index. 0-n</param>
            <returns>The paddock info</returns>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.ByID(System.Int32)">
            <summary>
            Get the paddock index by ID
            </summary>
            <param name="idValue">The paddock ID</param>
            <returns>The paddock index</returns>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.ByObj(System.Object)">
            <summary>
            Get the paddock by object
            </summary>
            <param name="paddObj">The paddock object</param>
            <returns>The paddock info</returns>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.ByName(System.String)">
            <summary>
            Get the paddock by name
            </summary>
            <param name="paddName">Paddock name</param>
            <returns>The PaddockInfo object</returns>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.IndexOf(System.String)">
            <summary>
            Get the index of the paddock by name
            </summary>
            <param name="paddName">The paddock name. Case insensitive test.</param>
            <returns>The index. 0->n</returns>
        </member>
        <member name="M:Models.GrazPlan.PaddockList.BeginTimeStep">
            <summary>
            Initialise at the first timestep
            </summary>
        </member>
        <member name="T:Models.GrazPlan.EnergyUse">
            <summary>
            Livestock metabolizable energy partition
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.MaintBase">
            <summary>
            Gets or sets the basal maintenance requirement       
            MJ
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.MaintMoveGraze">
            <summary>
            Gets or sets the E(graze) + E(move)                  
            MJ
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.MaintCold">
            <summary>
            Gets or sets the E(cold)         
            MJ
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.Conceptus">
            <summary>
            Gets or sets the ME(c)           
            MJ
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.Lactation">
            <summary>
            Gets or sets the ME(l) 
            MJ
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.Fleece">
            <summary>
            Gets or sets the ME(w) = NE(w) / k(w)           
            MJ
            </summary>
        </member>
        <member name="P:Models.GrazPlan.EnergyUse.Gain">
            <summary>
            Gets or sets the ME(g)      
            MJ
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockGeno">
            <summary>
            The stock genotype. The initial values in the stock component.
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.Name">
            <summary>
            Gets or sets the name of the genotype
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.DamBreed">
            <summary>
            Gets or sets the mother breed
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.SireBreed">
            <summary>
            Gets or sets the male parent
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.Generation">
            <summary>
            Gets or sets the generation count
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.SRW">
            <summary>
            Gets or sets the standard Reference Weight kg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockGeno.Conception">
            <summary>
            Gets or sets the conception rates
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.DeathRate">
            <summary>
            Gets or sets the death rate /y
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.RefFleeceWt">
            <summary>
            Gets or sets the reference fleece weight kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.MaxFibreDiam">
            <summary>
            Gets or sets the fibre diameter in um
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.FleeceYield">
            <summary>
            Gets or sets the fleece yield kg/kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.PeakMilk">
            <summary>
            Gets or sets the peak milk production kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.StockGeno.WnrDeathRate">
            <summary>
            Gets or sets the weaner death rate /y
            </summary>
        </member>
        <member name="T:Models.GrazPlan.AnimalInit">
            <summary>
            Parent class for the sheep and cattle init classes
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.Genotype">
            <summary>
            Gets or sets the genotype name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.Number">
            <summary>
            Gets or sets the count
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.Sex">
            <summary>
            Gets or sets the animal sex type
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.Age">
            <summary>
            Gets or sets the in days
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.Weight">
            <summary>
            Gets or sets the weight in kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.MaxPrevWt">
            <summary>
            Gets or sets the maximum previous weight kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.MatedTo">
            <summary>
            Gets or sets the mated to genotype
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.Pregnant">
            <summary>
            Gets or sets the number of days pregnant d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.Lactating">
            <summary>
            Gets or sets the days lactating d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.BirthCS">
            <summary>
            Gets or sets the condition score at birth
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.Paddock">
            <summary>
            Gets or sets the occupied paddock name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.Tag">
            <summary>
            Gets or sets the tag number
            </summary>
        </member>
        <member name="P:Models.GrazPlan.AnimalInit.Priority">
            <summary>
            Gets or sets the priority number
            </summary>
        </member>
        <member name="T:Models.GrazPlan.SheepInit">
            <summary>
            The sheep init type
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SheepInit.FleeceWt">
            <summary>
            Gets or sets the fleece weight in kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SheepInit.FibreDiam">
            <summary>
            Gets or sets the fibre diameter in um
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SheepInit.NumYoung">
            <summary>
            Gets or sets the number of young
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SheepInit.LambWt">
            <summary>
            Gets or sets the lamb weight kg
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SheepInit.LambFleeceWt">
            <summary>
            Gets or sets the lamb fleece weight kg
            </summary>
        </member>
        <member name="T:Models.GrazPlan.CattleInit">
            <summary>
            The cattle init type
            </summary>
        </member>
        <member name="P:Models.GrazPlan.CattleInit.NumFoetuses">
            <summary>
            Gets or sets the number of foetuses
            </summary>
        </member>
        <member name="P:Models.GrazPlan.CattleInit.NumSuckling">
            <summary>
            Gets or sets the number of suckling young
            </summary>
        </member>
        <member name="P:Models.GrazPlan.CattleInit.CalfWt">
            <summary>
            Gets or sets the calf weight in kg
            </summary>
        </member>
        <member name="T:Models.GrazPlan.PaddockInit">
            <summary>
            The paddock init type
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInit.Name">
            <summary>
            Gets or sets the name of the paddock
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInit.Area">
            <summary>
            Gets or sets the paddock area in ha
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInit.Slope">
            <summary>
            Gets or sets the paddock slope in deg
            </summary>
        </member>
        <member name="F:Models.GrazPlan.PaddockInit.Forages">
            <summary>
            Gets or sets the list of forages
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInit.Excretion">
            <summary>
            Gets or sets the destination for excreta or faeces
            </summary>
        </member>
        <member name="P:Models.GrazPlan.PaddockInit.Urine">
            <summary>
            Gets or sets the destination for urine
            </summary>
        </member>
        <member name="T:Models.GrazPlan.SupplementEaten">
            <summary>
            Supplement eaten type
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SupplementEaten.Paddock">
            <summary>
            Gets or sets the paddock name
            </summary>
        </member>
        <member name="P:Models.GrazPlan.SupplementEaten.Eaten">
            <summary>
            Gets or sets the supplement eaten in kg
            </summary>
        </member>
        <member name="T:Models.GrazPlan.DMPoolHead">
            <summary>
            Dry matter pool
            </summary>
        </member>
        <member name="P:Models.GrazPlan.DMPoolHead.Weight">
            <summary>
            Gets or sets the dry matter pool weight in kg/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.DMPoolHead.N">
            <summary>
            Gets or sets the dry matter pool N amount kg/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.DMPoolHead.P">
            <summary>
            Gets or sets the dry matter pool P amount kg/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.DMPoolHead.S">
            <summary>
            Gets or sets the dry matter pool S amount mol/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.DMPoolHead.AshAlk">
            <summary>
            Gets or sets the dry matter pool AshAlk amount mol/d
            </summary>
        </member>
        <member name="T:Models.GrazPlan.InorgFaeces">
            <summary>
            Inorganic faeces type
            </summary>
        </member>
        <member name="P:Models.GrazPlan.InorgFaeces.N">
            <summary>
            Gets or sets the N amount in kg/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.InorgFaeces.P">
            <summary>
            Gets or sets the P amount in kg/d
            </summary>
        </member>
        <member name="P:Models.GrazPlan.InorgFaeces.S">
            <summary>
            Gets or sets the S amount in mol/d
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockProps">
            <summary>
            Definitions of many property constants in the Stock component
            </summary>
        </member>
        <member name="T:Models.GrazPlan.StockVars">
            <summary>
            Container for Stock property access
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockVars.MONTH2DAY">
            <summary>
            Convert to days
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockVars.MakeGenotypesValue(Models.GrazPlan.StockList,Models.GrazPlan.StockGeno[]@)">
            <summary>
            Copies the parameters into an array of genotype structures
            </summary>
            <param name="model">The animal model</param>
            <param name="genoValues">The genotypes returned</param>
        </member>
        <member name="M:Models.GrazPlan.StockVars.MakeSheepValue(Models.GrazPlan.StockList,Models.GrazPlan.GrazType.AnimalType,Models.GrazPlan.SheepInit[]@)">
            <summary>
            Fill a sheep init value
            </summary>
            <param name="model">The animal model</param>
            <param name="animal">The animal type</param>
            <param name="initValue">The sheep data</param>
        </member>
        <member name="M:Models.GrazPlan.StockVars.MakeCattleValue(Models.GrazPlan.StockList,Models.GrazPlan.GrazType.AnimalType,Models.GrazPlan.CattleInit[]@)">
            <summary>
            Fill a cattle init value
            </summary>
            <param name="model">The animal model</param>
            <param name="animal">The animal type</param>
            <param name="initValue">The cattle init value</param>
        </member>
        <member name="M:Models.GrazPlan.StockVars.MakePaddockList(Models.GrazPlan.StockList,Models.GrazPlan.PaddockInit[]@)">
            <summary>
            Fill the paddock init list
            </summary>
            <param name="model">The stock model</param>
            <param name="initValue">The init value</param>
        </member>
        <member name="M:Models.GrazPlan.StockVars.MakePaddockRank(Models.GrazPlan.StockList,System.String[]@)">
            <summary>
            Rank the paddocks
            </summary>
            <param name="model">The animal model</param>
            <param name="initValue">The paddock ranks</param>
        </member>
        <member name="T:Models.GrazPlan.StockVars.CountType">
            <summary>
            The output counts for these type of animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockVars.CountType.eBoth">
            <summary>
            Both males and females
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockVars.CountType.eFemale">
            <summary>
            Female animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockVars.CountType.eMale">
            <summary>
            Male animals
            </summary>
        </member>
        <member name="F:Models.GrazPlan.StockVars.CountType.eDeaths">
            <summary>
            Deaths of non suckling animals
            </summary>
        </member>
        <member name="M:Models.GrazPlan.StockVars.PopulateNumberValue(Models.GrazPlan.StockList,Models.GrazPlan.StockVars.CountType,System.Boolean,System.Boolean,System.Boolean,System.Int32[]@)">
            <summary>
            Populate the numbers array for the type of output required
            </summary>
            <param name="model">The Stock list model</param>
            <param name="code">The count type</param>
            <param name="useYoung">Report for young animals</param>
            <param name="useAll">Combined value</param>
            <param name="useTag">Use tag groups</param>
            <param name="numbers">The populated array of numbers</param>
            <returns>True if the code type is valid</returns>
        </member>
        <member name="M:Models.GrazPlan.StockVars.PopulateRealValue(Models.GrazPlan.StockList,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Double[]@)">
            <summary>
            Fill the double[] with values from the model.
            </summary>
            <param name="model">The animal model</param>
            <param name="varCode">The variable code</param>
            <param name="useYoung">For young animals</param>
            <param name="useAll">For all groups</param>
            <param name="useTag">Use the tag number</param>
            <param name="arrayValues">The returned double array</param>
            <returns>True if the varCode is valid</returns>
        </member>
        <member name="M:Models.GrazPlan.StockVars.DMPool2Value(Models.GrazPlan.GrazType.DM_Pool,Models.GrazPlan.DMPoolHead@,System.Boolean)">
            <summary>
            Convert the dry matter pool
            </summary>
            <param name="pool">The DM pool</param>
            <param name="poolValue">The pool data</param>
            <param name="onlyNPSVal">The NPS values only</param>
        </member>
        <member name="M:Models.GrazPlan.StockVars.PopulateDMPoolValue(Models.GrazPlan.StockList,System.Int32,System.Boolean,System.Boolean,System.Boolean,Models.GrazPlan.DMPoolHead[]@)">
            <summary>
            Populate the dry matter pool
            </summary>
            <param name="model">The stock model</param>
            <param name="propCode">The property code</param>
            <param name="useYoung">For young</param>
            <param name="useAll">For all groups</param>
            <param name="useTag">For tag number</param>
            <param name="poolValues">The DM pool value returned</param>
            <returns>True if the propCode is valid</returns>
        </member>
        <member name="M:Models.GrazPlan.StockVars.MakeSuppEaten(Models.GrazPlan.StockList,Models.GrazPlan.SupplementEaten[]@)">
            <summary>
            Copy the supplement eaten into a SupplementEaten[]
            </summary>
            <param name="model">The animal model</param>
            <param name="suppValues">The supplement data returned</param>
        </member>
        <member name="M:Models.GrazPlan.StockVars.MakeEnergyUse(Models.GrazPlan.StockList,Models.GrazPlan.EnergyUse[]@)">
            <summary>
            Populate metabolizable energy use array 
            Note: these are an* ME* partition                                          
            </summary>
            <param name="model">The animal model</param>
            <param name="energyValues">The energy use returned</param>
        </member>
        <member name="T:Models.IClock">
            <summary>Interface for a time server,</summary>
        </member>
        <member name="P:Models.IClock.Today">
            <summary>Simulation date.</summary>
        </member>
        <member name="P:Models.IClock.FractionComplete">
            <summary>Returns the current fraction of the overall simulation which has been completed</summary>
        </member>
        <member name="T:Models.IIrrigation">
            <summary>Interface for an irrigation class.</summary>
        </member>
        <member name="P:Models.IIrrigation.IrrigationApplied">
            <summary>The amount of irrigation actually applied (mm).</summary>
        </member>
        <member name="P:Models.IIrrigation.Depth">
            <summary>The depth at which irrigation is applied (mm).</summary>
        </member>
        <member name="P:Models.IIrrigation.Efficiency">
            <summary>The efficiency of the irrigation system (mm/mm).</summary>
        </member>
        <member name="P:Models.IIrrigation.Duration">
            <summary>The duration of the irrigation event (minutes).</summary>
        </member>
        <member name="P:Models.IIrrigation.WillRunoff">
            <summary>The flag for whether the irrigation can run off (true/false).</summary>
        </member>
        <member name="E:Models.IIrrigation.Irrigated">
            <summary>Invoked when an irrigation occurs.</summary>
        </member>
        <member name="M:Models.IIrrigation.Apply(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double,System.Double,System.Boolean)">
            <summary>Called to apply some irrigation.</summary>
            <param name="amount">The amount to apply (mm).</param>
            <param name="depth">The depth of application (mm).</param>
            <param name="duration">The duration of irrigation event (minutes).</param>
            <param name="efficiency">The irrigation efficiency (mm/mm).</param>
            <param name="willRunoff">Whether irrigation can run off (<c>true</c>/<c>false</c>).</param>
            <param name="no3">Amount of NO3 in irrigation water</param>
            <param name="nh4">Amount of NH4 in irrigation water</param>
            <param name="doOutput">If true, output will be written to the summary.</param>
        </member>
        <member name="T:Models.Map">
            <summary>
            # [Name]
            [DocumentView]
            </summary>
        </member>
        <member name="T:Models.Map.Coordinate">
            <summary>
            Class for representing a latitude and longitude.
            </summary>
        </member>
        <member name="P:Models.Map.Coordinate.Latitude">
            <summary>The latitude</summary>
        </member>
        <member name="P:Models.Map.Coordinate.Longitude">
            <summary>The longitude</summary>
        </member>
        <member name="M:Models.Map.GetCoordinates(System.Collections.Generic.List{System.String})">
            <summary>List of coordinates to show on map</summary>
        </member>
        <member name="F:Models.Map._Center">
            <summary>
            Coordinate of map center
            </summary>
        </member>
        <member name="P:Models.Map.Center">
            <summary>
            Coordinate of the center of the map
            </summary>
        </member>
        <member name="F:Models.Map._Zoom">
            <summary>
            Zoom level
            </summary>
        </member>
        <member name="P:Models.Map.Zoom">
            <summary>
            Zoom factor for the map
            </summary>
        </member>
        <member name="T:Models.MicroClimate">
            <summary>
            # [Name]
            The module MICROMET, described here, has been developed to allow the calculation of 
            potential transpiration for multiple competing canopies that can be either layered or intermingled.
            </summary>
        </member>
        <member name="T:Models.MicroClimate.CanopyType">
            <summary>Wraps a canopy object.</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.Canopy">
            <summary>The canopy.</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.Ktot">
            <summary>The ktot</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.K">
            <summary>The k</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.LAI">
            <summary>The layer lai</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.LAItot">
            <summary>The layer la itot</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.Ftot">
            <summary>The ftot</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.Fgreen">
            <summary>The fgreen</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.Rs">
            <summary>The rs</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.Rl">
            <summary>The rl</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.Rsoil">
            <summary>The rsoil</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.Gc">
            <summary>The gc</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.Ga">
            <summary>The ga</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.PET">
            <summary>The pet</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.PETr">
            <summary>The pe tr</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.PETa">
            <summary>The pe ta</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.Omega">
            <summary>The omega</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyType.interception">
            <summary>The interception</summary>
        </member>
        <member name="M:Models.MicroClimate.CanopyType.#ctor(Models.Interfaces.ICanopy)">
            <summary>Constructor</summary>
            <param name="canopy">The canopy to wrap.</param>
        </member>
        <member name="T:Models.MicroClimate.MicroClimateZone">
            <summary>
            MicroClimateZone
            </summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.weather">
            <summary>The weather</summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.Albedo">
            <summary>The Albedo of the combined soil-plant system for this zone</summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.Emissivity">
            <summary>
            Emissivity of the combined soil-plant system for this zone
            </summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.NetLongWaveRadiation">
            <summary>Net long-wave radiation of the whole system</summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.sumRs">
            <summary>The sum rs</summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.DeltaZ">
            <summary>The delta z</summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.layerKtot">
            <summary>The layer ktot</summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.LAItotsum">
            <summary>The layer la isum</summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.numLayers">
            <summary>The number layers</summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.soil_heat">
            <summary>The soil_heat</summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.dryleaffraction">
            <summary>The dryleaffraction</summary>
        </member>
        <member name="F:Models.MicroClimate.MicroClimateZone.Canopies">
            <summary>Gets or sets the component data.</summary>
        </member>
        <member name="M:Models.MicroClimate.MicroClimateZone.DoCanopyCompartments">
            <summary>Canopies the compartments.</summary>
        </member>
        <member name="M:Models.MicroClimate.MicroClimateZone.DefineLayers">
            <summary>Break the combined Canopy into layers</summary>
        </member>
        <member name="M:Models.MicroClimate.MicroClimateZone.DivideComponents">
            <summary>Break the components into layers</summary>
        </member>
        <member name="M:Models.MicroClimate.MicroClimateZone.LightExtinction">
            <summary>Calculate light extinction parameters</summary>
        </member>
        <member name="M:Models.MicroClimate.MicroClimateZone.Reset">
            <summary>
            Reset class state
            </summary>
        </member>
        <member name="P:Models.MicroClimate.MicroClimateZone.petr">
            <summary>Gets the petr.</summary>
        </member>
        <member name="P:Models.MicroClimate.MicroClimateZone.peta">
            <summary>Gets the peta.</summary>
        </member>
        <member name="P:Models.MicroClimate.MicroClimateZone.NetRadiation">
            <summary>Gets the net_radn.</summary>
        </member>
        <member name="P:Models.MicroClimate.MicroClimateZone.NetShortWaveRadiation">
            <summary>Gets the net_rs.</summary>
        </member>
        <member name="M:Models.MicroClimate.MicroClimateZone.RadnGreenFraction(System.Int32)">
            <summary>
            Calculate the proportion of light intercepted by a given component that corresponds to green leaf
            </summary>
        </member>
        <member name="F:Models.MicroClimate.svp_A">
            <summary>The SVP_ a Teten coefficient</summary>
        </member>
        <member name="F:Models.MicroClimate.svp_B">
            <summary>The SVP_ b Teten coefficient</summary>
        </member>
        <member name="F:Models.MicroClimate.svp_C">
            <summary>The SVP_ c Teten coefficient</summary> 
        </member>
        <member name="F:Models.MicroClimate.abs_temp">
            <summary>0 C in Kelvin (k)</summary>
        </member>
        <member name="F:Models.MicroClimate.r_gas">
            <summary>universal gas constant (J/mol/K)</summary>
        </member>
        <member name="F:Models.MicroClimate.mwh2o">
            <summary>molecular weight water (kg/mol)</summary>
        </member>
        <member name="F:Models.MicroClimate.mwair">
            <summary>molecular weight air (kg/mol)</summary>
        </member>
        <member name="F:Models.MicroClimate.molef">
            <summary>molecular fraction of water to air ()</summary>
        </member>
        <member name="F:Models.MicroClimate.Cp">
            <summary>Specific heat of air at constant pressure (J/kg/K)</summary>
        </member>
        <member name="F:Models.MicroClimate.stef_boltz">
            <summary>Stefan-Boltzman constant</summary>
        </member>
        <member name="F:Models.MicroClimate.c_cloud">
            <summary>constant for cloud effect on longwave radiation</summary>
        </member>
        <member name="F:Models.MicroClimate.Deg2Rad">
            <summary>convert degrees to radians</summary>
        </member>
        <member name="F:Models.MicroClimate.RhoW">
            <summary>Density of water (kg/m3)</summary>
        </member>
        <member name="F:Models.MicroClimate.svp_fract">
            <summary>weights vpd towards vpd at maximum temperature</summary>
        </member>
        <member name="F:Models.MicroClimate.SunSetAngle">
            <summary>The sun set angle (degrees)</summary>
        </member>
        <member name="F:Models.MicroClimate.SunAngleNetPositiveRadiation">
            <summary>The sun angle for net positive radiation (degrees)</summary>
        </member>
        <member name="F:Models.MicroClimate.hr2s">
            <summary>Convert hours to seconds</summary>
        </member>
        <member name="F:Models.MicroClimate.vonKarman">
            <summary>von Karman constant</summary>
        </member>
        <member name="F:Models.MicroClimate.CanopyEmissivity">
            <summary>Canopy emissivity</summary>
        </member>
        <member name="F:Models.MicroClimate.SoilEmissivity">
            <summary>The soil_emissivity</summary>
        </member>
        <member name="F:Models.MicroClimate.Clock">
            <summary>The clock</summary>
        </member>
        <member name="F:Models.MicroClimate.weather">
            <summary>The weather</summary>
        </member>
        <member name="F:Models.MicroClimate.microClimateZones">
            <summary>List of uptakes</summary>
        </member>
        <member name="M:Models.MicroClimate.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="F:Models.MicroClimate.dayLengthEvap">
            <summary>This is the length of time within the day during which evaporation will take place</summary>
        </member>
        <member name="F:Models.MicroClimate.dayLengthLight">
            <summary>This is the length of time within the day during which the sun is above the horizon</summary>
        </member>
        <member name="P:Models.MicroClimate.a_interception">
            <summary>Gets or sets the a_interception.</summary>
        </member>
        <member name="P:Models.MicroClimate.b_interception">
            <summary>Gets or sets the b_interception.</summary>
        </member>
        <member name="P:Models.MicroClimate.c_interception">
            <summary>Gets or sets the c_interception.</summary>
        </member>
        <member name="P:Models.MicroClimate.d_interception">
            <summary>Gets or sets the d_interception.</summary>
        </member>
        <member name="P:Models.MicroClimate.soil_albedo">
            <summary>Gets or sets the soil_albedo.</summary>
        </member>
        <member name="P:Models.MicroClimate.SoilHeatFluxFraction">
            <summary>Fraction of solar radiation reaching the soil surface that results in soil heating</summary>
        </member>
        <member name="P:Models.MicroClimate.NightInterceptionFraction">
            <summary>The fraction of intercepted rainfall that evaporates at night</summary>
        </member>
        <member name="P:Models.MicroClimate.ReferenceHeight">
            <summary>Height of the weather instruments</summary>
        </member>
        <member name="M:Models.MicroClimate.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when simulation commences.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.MicroClimate.CreateMCZone(Models.Core.Zone)">
            <summary>
            Create a new MicroClimateZone for a given simulation zone
            </summary>
            <param name="newZone"></param>
        </member>
        <member name="M:Models.MicroClimate.DoEnergyArbitration(System.Object,System.EventArgs)">
            <summary>Called when the canopy energy balance needs to be calculated.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.MicroClimate.CalculateGc(Models.MicroClimate.MicroClimateZone)">
            <summary>Calculate the canopy conductance for system compartments</summary>
        </member>
        <member name="M:Models.MicroClimate.CalculateGa(Models.MicroClimate.MicroClimateZone)">
            <summary>Calculate the aerodynamic conductance for system compartments</summary>
        </member>
        <member name="M:Models.MicroClimate.CalculateInterception(Models.MicroClimate.MicroClimateZone)">
            <summary>Calculate the interception loss of water from the canopy</summary>
        </member>
        <member name="M:Models.MicroClimate.CalculatePM(Models.MicroClimate.MicroClimateZone)">
            <summary>Calculate the Penman-Monteith water demand</summary>
        </member>
        <member name="P:Models.MicroClimate.interception">
            <summary>Gets the interception.</summary>
        </member>
        <member name="M:Models.MicroClimate.CalculateOmega(Models.MicroClimate.MicroClimateZone)">
            <summary>Calculate the aerodynamic decoupling for system compartments</summary>
        </member>
        <member name="M:Models.MicroClimate.SetCanopyEnergyTerms(Models.MicroClimate.MicroClimateZone)">
            <summary>Send an energy balance event</summary>
        </member>
        <member name="M:Models.MicroClimate.CanopyConductance(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the crop canopy conductance
            <param name="cropGsMax">crop-specific maximum stomatal conductance (m/s)</param>
            <param name="cropR50">crop-specific SolRad at which stomatal conductance decreases to 50% (W/m2)</param>
            <param name="cropRGfac">crop-specific relative growth stress factor (0-1)</param>
            <param name="cropLAIfac">crop-specific LAI fraction of total LAI in current layer (0-1)</param>
            <param name="layerK">layer-averaged light extinction coeficient (-)</param>
            <param name="layerLAI">LAI within the current layer (m2/m2)</param>
            <param name="layerSolRad">solar radiation arriving at the top of the current layer(W/m2)</param>
            </summary>
        </member>
        <member name="M:Models.MicroClimate.AerodynamicConductanceFAO(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the aerodynamic conductance using FAO approach
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcPenmanMonteith(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the Penman-Monteith water demand
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcPETr(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the radiation-driven term for the Penman-Monteith water demand
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcPETa(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the aerodynamically-driven term for the Penman-Monteith water demand
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcRhoA(System.Double,System.Double)">
            <summary>
            Calculate the density of air (kg/m3) at a given temperature
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcOmega(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the Jarvis and McNaughton decoupling coefficient, omega
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcNondQsdT(System.Double,System.Double)">
            <summary>
            Calculate Non_dQs_dT - the dimensionless valu for 
            d(sat spec humidity)/dT ((kg/kg)/K) FROM TETEN FORMULA
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcSVP(System.Double)">
            <summary>
            Calculate the saturated vapour pressure for a given temperature
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcSpecificVPD(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the vapour pressure deficit
            <param name="vp">(INPUT) vapour pressure (hPa = mbar)</param>
            <param name="mint">(INPUT) minimum temperature (oC)</param>
            <param name="maxt">(INPUT) maximum temperature (oC)</param>
            <param name="airPressure">(INPUT) Air pressure (hPa)</param>
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcSpecificHumidity(System.Double,System.Double)">
            <summary>
            Calculate specific humidity from vapour pressure
            <param name="vp">vapour pressure (hPa = mbar)</param>
            <param name="airPressure">air pressure (hPa)</param>
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcVPD(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the vapour pressure deficit
            <param name="vp">(INPUT) vapour pressure (hPa = mbar)</param>
            <param name="mint">(INPUT) minimum temperature (oC)</param>
            <param name="maxt">(INPUT) maximum temperature (oC)</param>
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalcLambda(System.Double)">
            <summary>
            Calculate the lambda (latent heat of vapourisation for water) (J/kg)
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalculateShortWaveRadiation(Models.MicroClimate.MicroClimateZone)">
            <summary>
            Calculates interception of short wave by canopy compartments
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalculateEnergyTerms(Models.MicroClimate.MicroClimateZone)">
            <summary>
            Calculate the overall system energy terms
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalculateLongWaveRadiation(Models.MicroClimate.MicroClimateZone)">
            <summary>
            Calculate Net Long Wave Radiation Balance
            </summary>
        </member>
        <member name="M:Models.MicroClimate.LongWave(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the net longwave radiation 'in' (W/m2)
            <param name="temperature">temperature  (oC)</param>
            <param name="fracClearSkyRad">R/Ro, SunshineHrs/DayLength (0-1)</param>
            <param name="emmisCanopy">canopy emmissivity</param>
            <returns>net longwave radiation 'in' (W/m2)</returns>
            </summary>
        </member>
        <member name="M:Models.MicroClimate.CalculateSoilHeatRadiation(Models.MicroClimate.MicroClimateZone)">
            <summary>
            Calculate Radiation loss to soil heating
            </summary>
        </member>
        <member name="M:Models.MicroClimate.SoilHeatFlux(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the daytime soil heat flux
            <param name="radn">(INPUT) Incoming Radiation</param>
            <param name="radnint">(INPUT) Intercepted incoming radiation</param>
            <param name="soilHeatFluxFraction">(INPUT) Fraction of surface radiation absorbed</param>
            </summary>
        </member>
        <member name="T:Models.PostSimulationTools.Probability">
            <summary>
            # [Name]
            A post processing model that creates a probability table.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.Probability.TableName">
            <summary>
            Gets or sets the name of the predicted/observed table name.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.Probability.Exceedence">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Models.PostSimulationTools.Probability"/> is exceedence.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.Probability.FieldToSplitOn">
            <summary>
            The field name the probability function should split series on.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.Probability.Run(Models.Core.IStorageReader)">
            <summary>
            The main run method called to fill tables in the specified DataStore.
            </summary>
            <param name="dataStore">The DataStore to work with</param>
        </member>
        <member name="T:Models.PostSimulationTools.ExcelInput">
            <summary>
            # [Name]
            Reads the contents of a specific sheet from an EXCEL file and stores into the DataStore. 
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.ExcelInput.FileName">
            <summary>
            Gets or sets the file name to read from.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.ExcelInput.FileNameMetadata">
            <summary>Gets or sets the texture metadata.</summary>
            <value>The texture metadata.</value>
        </member>
        <member name="F:Models.PostSimulationTools.ExcelInput.sheetNames">
            <summary>
            List of Excel sheet names to read from.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.ExcelInput.SheetNames">
            <summary>
            Gets or sets the list of EXCEL sheet names to read from.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.ExcelInput.GetReferencedFileNames">
            <summary>Return our input filenames</summary>
        </member>
        <member name="P:Models.PostSimulationTools.ExcelInput.Simulation">
            <summary>
            Gets the parent simulation or null if not found
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.ExcelInput.AbsoluteFileName">
            <summary>Gets the absolute file name.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.ExcelInput.Run(Models.Core.IStorageReader)">
            <summary>
            Main run method for performing our calculations and storing data.
            </summary>
            <param name="dataStore">The data store to store the data</param>
        </member>
        <member name="M:Models.PostSimulationTools.ExcelInput.TruncateDates(System.Data.DataTable)">
            <summary>
            If the data table contains DateTime fields, convert them to hold
            only the "Date" portion, and not the "Time" within the day.
            We do this because in estatablishing PredictedObserved connections,
            we commonly use the DateTime fields, but are (currently) only 
            interested in the Date.
            WARNING: This could potentially cause issues in the future, especially
            if we begin to make use of sub-day model steps.
            </summary>
            <param name="table">Table to be adjusted</param>
        </member>
        <member name="T:Models.PostSimulationTools.TimeSeriesStats">
            <summary>
            # [Name]
            A post processing model that produces time series stats.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.TimeSeriesStats.TableName">
            <summary>
            Gets or sets the name of the predicted/observed table name.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.TimeSeriesStats.Run(Models.Core.IStorageReader)">
            <summary>
            The main run method called to fill tables in the specified DataStore.
            </summary>
            <param name="dataStore">The DataStore to work with</param>
        </member>
        <member name="M:Models.PostSimulationTools.TimeSeriesStats.CalcStatsRow(System.Data.DataView,System.String,System.String,System.String,System.Data.DataTable)">
            <summary>
            Calculate stats on the 'view' passed in and add a DataRow to 'statsData'
            </summary>
            <param name="view">The data view to calculate stats on</param>
            <param name="observedColumnName">The observed column name to use</param>
            <param name="predictedColumnName">The predicted column name to use</param>
            <param name="seriesName">The name of the series</param>
            <param name="statsData">The stats data table to add rows to</param>
        </member>
        <member name="T:Models.PostSimulationTools.PredictedObserved">
            <summary>
            # [Name]
            Reads the contents of a file (in apsim format) and stores into the DataStore.
            If the file has a column name of 'SimulationName' then this model will only input data for those rows
            where the data in column 'SimulationName' matches the name of the simulation under which
            this input model sits.
            If the file does NOT have a 'SimulationName' column then all data will be input.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.PredictedTableName">
            <summary>Gets or sets the name of the predicted table.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.ObservedTableName">
            <summary>Gets or sets the name of the observed table.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.FieldNameUsedForMatch">
            <summary>Gets or sets the field name used for match.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.FieldName2UsedForMatch">
            <summary>Gets or sets the second field name used for match.</summary>
        </member>
        <member name="P:Models.PostSimulationTools.PredictedObserved.FieldName3UsedForMatch">
            <summary>Gets or sets the third field name used for match.</summary>
        </member>
        <member name="M:Models.PostSimulationTools.PredictedObserved.Run(Models.Core.IStorageReader)">
            <summary>Main run method for performing our calculations and storing data.</summary>
            <param name="dataStore">The data store.</param>
            <exception cref="T:Models.Core.ApsimXException">
            Could not find model data table:  + PredictedTableName
            or
            Could not find observed data table:  + ObservedTableName
            </exception>
        </member>
        <member name="T:Models.PostSimulationTools.Input">
            <summary>
            # [Name]
            Reads the contents of a file (in apsim format) and stores into the DataStore. 
            If the file has a column name of 'SimulationName' then this model will only input data for those rows
            where the data in column 'SimulationName' matches the name of the simulation under which
            this input model sits. 
            
            If the file does NOT have a 'SimulationName' column then all data will be input.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.Input.FileName">
            <summary>
            Gets or sets the file name to read from.
            </summary>
        </member>
        <member name="P:Models.PostSimulationTools.Input.FullFileName">
            <summary>
            Gets or sets the full file name (with path). The user interface uses this. 
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.Input.GetReferencedFileNames">
            <summary>Return our input filenames</summary>
        </member>
        <member name="M:Models.PostSimulationTools.Input.Run(Models.Core.IStorageReader)">
            <summary>
            Main run method for performing our calculations and storing data.
            </summary>
        </member>
        <member name="F:Models.PostSimulationTools.Input.ErrorMessage">
            <summary>
            Provides an error message to display if something is wrong.
            </summary>
        </member>
        <member name="M:Models.PostSimulationTools.Input.GetTable">
            <summary>
            Return a datatable for this input file. Returns null if no data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Models.Factorial.Factor">
            <summary>
            A class representing a series of factor values.
            </summary>
        </member>
        <member name="T:Models.Factorial.Factor.PathValuesPair">
            <summary>A simple type for combining a path with multiple values.</summary>
        </member>
        <member name="F:Models.Factorial.Factor.PathValuesPair.path">
            <summary>A path</summary>
        </member>
        <member name="F:Models.Factorial.Factor.PathValuesPair.value">
            <summary>A value.</summary>
        </member>
        <member name="P:Models.Factorial.Factor.Specifications">
            <summary>
            A list of factor specifications.
            </summary>
        </member>
        <member name="M:Models.Factorial.Factor.CreateValues">
            <summary>
            Return all possible factor values for this factor.
            </summary>
        </member>
        <member name="M:Models.Factorial.Factor.PathValuesPairToFactorValue(System.Collections.Generic.List{Models.Factorial.FactorValue},System.Collections.Generic.List{Models.Factorial.Factor.PathValuesPair},System.Collections.Generic.List{Models.Factorial.Factor.PathValuesPair})">
            <summary>Convert a PathValuesPair to a new FactorValue.</summary>
            <param name="factorValues"></param>
            <param name="fixedValues"></param>
            <param name="combination"></param>
        </member>
        <member name="M:Models.Factorial.Factor.ParseSimpleSpecification(System.String)">
            <summary>
            Convert a simple specification into factor values.
            </summary>
            <param name="specification">The specification to examine</param>
        </member>
        <member name="M:Models.Factorial.Factor.ParseRangeSpecification(System.String)">
            <summary>
            Convert a range specification into factor values.
            </summary>
            <param name="specification">The specification to examine</param>
        </member>
        <member name="M:Models.Factorial.Factor.ParseModelReplacementSpecification(System.String)">
            <summary>
            Convert a range specification into factor values.
            </summary>
            <param name="specification">The specification to examine</param>
        </member>
        <member name="T:Models.Factorial.Experiment">
            <summary>
            # [Name]
            Encapsulates a factorial experiment.
            </summary>
        </member>
        <member name="P:Models.Factorial.Experiment.DisabledSimNames">
            <summary>
            List of names of the disabled simulations. Any simulation name not in this list is assumed to be enabled.
            </summary>
        </member>
        <member name="M:Models.Factorial.Experiment.OnBeginRun">
            <summary>Simulation runs are about to begin.</summary>
        </member>
        <member name="M:Models.Factorial.Experiment.NextSimulationToRun(System.Boolean)">
            <summary>Gets the next job to run</summary>
        </member>
        <member name="M:Models.Factorial.Experiment.GenerateApsimXFile(System.String)">
            <summary>
            Generates an .apsimx file for each simulation in the experiment and returns an error message (if it fails).
            </summary>
            <param name="path">Full path including filename and extension.</param>
            <returns>Empty string if successful, error message if it fails.</returns>
        </member>
        <member name="M:Models.Factorial.Experiment.GetSimulationNames(System.Boolean)">
            <summary>Gets a list of simulation names</summary>
        </member>
        <member name="M:Models.Factorial.Experiment.GetFactors">
            <summary>Gets a list of factors</summary>
        </member>
        <member name="M:Models.Factorial.Experiment.Initialise(System.Boolean)">
            <summary>
            Initialise the experiment ready for creating simulations.
            </summary>
        </member>
        <member name="M:Models.Factorial.Experiment.PushFactorsToReportModels(Models.Core.Simulation,System.Collections.Generic.List{Models.Factorial.FactorValue})">
            <summary>Find all report models and give them the factor values.</summary>
            <param name="factorValues">The factor values to send to each report model.</param>
            <param name="simulation">The simulation to search for report models.</param>
        </member>
        <member name="M:Models.Factorial.Experiment.GetFactorNamesAndValues(System.Collections.Generic.List{Models.Factorial.FactorValue},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Get a list of factor names and values.</summary>
            <param name="factorValues">The factor value instances</param>
            <param name="names">The return list of factor names</param>
            <param name="values">The return list of factor values</param>
        </member>
        <member name="M:Models.Factorial.Experiment.StoreFactorsInDataStore(Models.Core.Simulation,System.Collections.Generic.List{Models.Factorial.FactorValue})">
            <summary>Find all report models and give them the factor values.</summary>
            <param name="factorValues">The factor values to send to each report model.</param>
            <param name="simulation">The simulation to search for report models.</param>
        </member>
        <member name="P:Models.Factorial.Experiment.BaseSimulation">
            <summary>
            Gets the base simulation
            </summary>
        </member>
        <member name="M:Models.Factorial.Experiment.CreateSpecificSimulation(System.String)">
            <summary>
            Create a specific simulation.
            </summary>
        </member>
        <member name="M:Models.Factorial.Experiment.AllCombinations">
            <summary>
            Return a list of list of factorvalue objects for all permutations.
            </summary>
        </member>
        <member name="M:Models.Factorial.Experiment.EnabledCombinations">
            <summary>
            Generates a partial factorial list of lists of factor values, based on the list of enabled factor names.
            If this list is empty, this function will return a full factorial list of simulations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Models.Factorial.Experiment.GetName(System.Collections.Generic.List{Models.Factorial.FactorValue})">
            <summary>
            Generates the name for a combination of FactorValues.
            </summary>
            <param name="factors"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Factorial.Experiment.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Factorial.Factors">
            <summary>
            A model representing an experiment's factors
            </summary>
        </member>
        <member name="P:Models.Factorial.Factors.factors">
            <summary>Gets the factors.</summary>
            <value>The factors.</value>
        </member>
        <member name="T:Models.Factorial.FactorValue">
            <summary>
            This class represents a series of paths and the same number of object values.
            Its sole purpose is to apply the object values to the model represented by the paths.
            </summary>
        </member>
        <member name="F:Models.Factorial.FactorValue.factor">
            <summary>Parent factor.</summary>
        </member>
        <member name="P:Models.Factorial.FactorValue.Name">
            <summary>
            Name of factor value
            </summary>
        </member>
        <member name="P:Models.Factorial.FactorValue.Factor">
            <summary>Gets the parent factor.</summary>
        </member>
        <member name="F:Models.Factorial.FactorValue.paths">
            <summary>
            The paths to the models.
            </summary>
        </member>
        <member name="F:Models.Factorial.FactorValue.values">
            <summary>
            The values for each path.
            </summary>
        </member>
        <member name="M:Models.Factorial.FactorValue.#ctor">
            <summary>Parameterless constrctor needed for serialisation</summary>
        </member>
        <member name="M:Models.Factorial.FactorValue.#ctor(Models.Factorial.Factor,System.String,System.String,System.Object)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.Factorial.FactorValue.#ctor(Models.Factorial.Factor,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Models.Factorial.FactorValue.Values">
            <summary>Gets all values.</summary>
        </member>
        <member name="P:Models.Factorial.FactorValue.Paths">
            <summary>
            Gets all paths.
            </summary>
        </member>
        <member name="M:Models.Factorial.FactorValue.ApplyToSimulation(Models.Core.Simulation)">
            <summary>
            Apply this FactorValue to the specified simulation
            </summary>
        </member>
        <member name="M:Models.Factorial.FactorValue.ApplyStringAsValue(Models.Core.Simulation,System.String,System.String)">
            <summary>
            Use the name of this object as a value to insert into the specified 'newSimulation'
            </summary>
        </member>
        <member name="M:Models.Factorial.FactorValue.ApplyDoubleAsValue(Models.Core.Simulation,System.String,System.Double)">
            <summary>
            Use the name of this object as a value to insert into the specified 'newSimulation'
            </summary>
        </member>
        <member name="M:Models.Factorial.FactorValue.ApplyModelReplacement(Models.Core.Simulation,System.String,Models.Core.IModel)">
            <summary>
            Replace the object specified by 'path' in 'newSimulation' with the specified 'value'
            </summary>
        </member>
        <member name="T:Models.Memo">
            <summary>This is a memo/text component that stores user entered text information.</summary>
        </member>
        <member name="P:Models.Memo.Text">
            <summary>Gets or sets the memo text.</summary>
        </member>
        <member name="M:Models.Memo.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Writes documentation for this function by adding to the list of documentation tags.</summary>
            <param name="tags">The list of tags to add to.</param>
            <param name="headingLevel">The level (e.g. H2) of the headings.</param>
            <param name="indent">The level of indentation 1, 2, 3 etc.</param>
        </member>
        <member name="T:Models.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.Chicory">
            <summary>
              Looks up a localized string similar to {
             &quot;CropType&quot;: &quot;Chicory&quot;,
             &quot;ResourceName&quot;: null,
             &quot;Name&quot;: &quot;Chicory&quot;,
             &quot;Children&quot;: [
               {
                 &quot;$type&quot;: &quot;Models.Memo, Models&quot;,
                 &quot;CodeCData&quot;: &quot;\r\n# Presentation\r\n\r\nThis model has been developed to simulate the growth of a forage chicory crop.  The chicory model focus, thus, on describing primarily the vegetative growth, with a simplified account of the reproductive phase, without explicit considering flowers and seeds (these may be included in future releases).  The model was built usin [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.Maize">
            <summary>
              Looks up a localized string similar to {
             &quot;CropType&quot;: &quot;Maize&quot;,
             &quot;ResourceName&quot;: null,
             &quot;Name&quot;: &quot;Maize&quot;,
             &quot;Children&quot;: [
               {
                 &quot;$type&quot;: &quot;Models.PMF.OrganArbitrator, Models&quot;,
                 &quot;Name&quot;: &quot;Arbitrator&quot;,
                 &quot;Children&quot;: [
                   {
                     &quot;$type&quot;: &quot;Models.PMF.RelativeAllocation, Models&quot;,
                     &quot;Name&quot;: &quot;NArbitrator&quot;,
                     &quot;Children&quot;: [],
                     &quot;IncludeInDocumentation&quot;: true,
                     &quot;Enabled&quot;: true,
                     &quot;ReadOnly&quot;: false
                   },
                   {
                     &quot;$type&quot;: &quot;Models.PMF.RelativeAllocation, Model [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.Oats">
             <summary>
               Looks up a localized string similar to &lt;Plant&gt;
              &lt;Name&gt;Oats&lt;/Name&gt;
              &lt;Memo&gt;
                &lt;Name&gt;Introduction&lt;/Name&gt;
                &lt;IncludeInDocumentation&gt;true&lt;/IncludeInDocumentation&gt;
                &lt;Enabled&gt;true&lt;/Enabled&gt;
                &lt;ReadOnly&gt;false&lt;/ReadOnly&gt;
                &lt;MemoText&gt;
                  &lt;![CDATA[
            # The APSIM Oats Model
             
            _Allan Peake, Hamish Brown, Rob Zyskowski, Edmar I. Teixeira, Neil Huth_
            
            The APSIM oats model has been developed using the Plant Modelling Framework (PMF) of [brown_plant_2014]. This new framework provides a library of plant organ and process submodels that  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Models.Properties.Resources.OilPalm">
            <summary>
              Looks up a localized string similar to {
             &quot;interception&quot;: 0.0,
             &quot;UnderstoryCoverMax&quot;: 0.4,
             &quot;UnderstoryLegumeFraction&quot;: 1.0,
             &quot;InterceptionFraction&quot;: 0.0,
             &quot;MaximumRootDepth&quot;: 5000.0,
             &quot;RootDepth&quot;: 0.0,
             &quot;DltDM&quot;: 0.0,
             &quot;ReproductiveGrowthFraction&quot;: 0.0,
             &quot;UnderstoryCoverGreen&quot;: 0.0,
             &quot;UnderstoryPotNUptake&quot;: null,
             &quot;ResourceName&quot;: null,
             &quot;Name&quot;: &quot;OilPalm&quot;,
             &quot;Children&quot;: [
               {
                 &quot;$type&quot;: &quot;Models.Memo, Models&quot;,
                 &quot;CodeCData&quot;: &quot;The base configuration of the oil palm model has been configured to match commercial  [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.Plantain">
            <summary>
              Looks up a localized string similar to {
             &quot;CropType&quot;: &quot;Plantain&quot;,
             &quot;ResourceName&quot;: null,
             &quot;Name&quot;: &quot;Plantain&quot;,
             &quot;Children&quot;: [
               {
                 &quot;$type&quot;: &quot;Models.Memo, Models&quot;,
                 &quot;CodeCData&quot;: &quot;\r\n## Presentation\r\n\r\nThis model has been built using the Plant Modelling Framework (PMF) of [brown_plant_2014] to simulate the growth of a forage plantain crop ( _Plantago lanceolata_ ).  The model focus, thus, on describing primarily the vegetative growth, with a simplified account of the reproductive phase, without explicit considering flowe [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.Potato">
            <summary>
              Looks up a localized string similar to {
             &quot;CropType&quot;: &quot;Potato&quot;,
             &quot;ResourceName&quot;: null,
             &quot;Name&quot;: &quot;Potato&quot;,
             &quot;Children&quot;: [
               {
                 &quot;$type&quot;: &quot;Models.Memo, Models&quot;,
                 &quot;CodeCData&quot;: &quot;\r\n# The APSIM Potato Model\r\n\r\n_Brown, H.E., Huth, N.I. and Holzworth, D.P._\r\n\r\n#Building the model.\r\nThe APSIM potato model has been described in part by [Brown_etal_2011] and developed using the Plant Modelling Framework (PMF) of [brown_plant_2014]. This new framework provides a library of plant organ and process submodels that can be coupl [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.RUMINANT_PARAM_GLB">
            <summary>
              Looks up a localized string similar to &lt;parameters name=&quot;standard&quot; version=&quot;2.0&quot;&gt;
             &lt;par name=&quot;editor&quot;&gt;Andrew Moore&lt;/par&gt;
             &lt;par name=&quot;edited&quot;&gt;30 Jan 2013&lt;/par&gt;
             &lt;par name=&quot;dairy&quot;&gt;false&lt;/par&gt;
             &lt;par name=&quot;c-srs-&quot;&gt;1.2,1.4&lt;/par&gt;
             &lt;par name=&quot;c-i-&quot;&gt;,1.7,,,,25.0,22.0,,,,,0.15,,0.002,0.5,1.0,0.01,20.0,3.0,1.5&lt;/par&gt;
             &lt;par name=&quot;c-r-&quot;&gt;0.8,0.17,1.7,,0.6,,,,0.14,0.28,10.5,0.8,0.35,1.0,0.0,0.0,0.012,1.0,1.0,11.5&lt;/par&gt;
             &lt;par name=&quot;c-k-&quot;&gt;0.5,0.02,0.85,0.7,0.4,0.02,0.6,0.133,0.95,0.84,0.8,0.7,0.035,0.33,0.12,0.043&lt;/par&gt;
             &lt;par name=&quot;c-m-&quot;&gt;0.09,,0. [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.SCRUM">
            <summary>
              Looks up a localized string similar to {
             &quot;CropType&quot;: &quot;SCRUM&quot;,
             &quot;ResourceName&quot;: null,
             &quot;Name&quot;: &quot;SCRUM&quot;,
             &quot;Children&quot;: [
               {
                 &quot;$type&quot;: &quot;Models.Memo, Models&quot;,
                 &quot;CodeCData&quot;: &quot;\r\n# SCRUM: the Simple Crop Resource Uptake Model\r\n\r\n_Hamish Brown and Rob Zyskowski, Plant and Food Research, New Zealand_\r\n\r\nThis model has been built using the Plant Modelling Framework (PMF) of [brown_plant_2014] to simulate a range of different crops in simulations where water and nitrogen balance are of interest but a fully mechanistic plan [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.Slurp">
            <summary>
              Looks up a localized string similar to {
             &quot;CropType&quot;: &quot;Slurp&quot;,
             &quot;ResourceName&quot;: null,
             &quot;Name&quot;: &quot;Slurp&quot;,
             &quot;Children&quot;: [
               {
                 &quot;$type&quot;: &quot;Models.Memo, Models&quot;,
                 &quot;CodeCData&quot;: &quot;\r\n# SLURP: the Sound of a crop using water\r\n\r\nThis model has been built using the Plant Modelling Framework (PMF) of [brown_plant_2014] to provide a simple representation of crops.  It is usefull for water and nitrogen balance studies where the focus is on soil processes and a very simple crop is adequate.  The model does not predict crop growth, de [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.Supplement">
             <summary>
               Looks up a localized string similar to Name                              |R    DM    DMD    M/D     EE     CP     dg    ADIP     P        S       AA    MaxP Locales
            Alfalfa Hay Early-bloom           |Y  0.900  0.640   9.50  0.030  0.200  0.650  0.110  0.00250  0.00300  1.200  0.000 ca;us         es:&quot;Alfalfa Heno florac temprana&quot;
            Alfalfa Hay Full-bloom            |Y  0.900  0.610   9.00  0.030  0.170  0.650  0.160  0.00240  0.00300  1.200  0.000 ca;us         es:&quot;Alfalfa Heno plena floración&quot;
            Alfalfa Hay Mature                |Y  0.900  0.540  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Models.Properties.Resources.SurfaceOrganicMatter">
            <summary>
              Looks up a localized string similar to {
             &quot;InitialResidueName&quot;: null,
             &quot;InitialResidueType&quot;: null,
             &quot;InitialResidueMass&quot;: 0.0,
             &quot;InitialStandingFraction&quot;: 0.0,
             &quot;InitialCPR&quot;: 0.0,
             &quot;InitialCNR&quot;: 0.0,
             &quot;FractionFaecesAdded&quot;: 0.5,
             &quot;ResourceName&quot;: null,
             &quot;Name&quot;: &quot;SurfaceOrganicMatter&quot;,
             &quot;Children&quot;: [
               {
                 &quot;$type&quot;: &quot;Models.Surface.ResidueTypes, Models&quot;,
                 &quot;Types&quot;: [
                   {
                     &quot;fom_type&quot;: &quot;base_type&quot;,
                     &quot;derived_from&quot;: null,
                     &quot;fraction_C&quot;: 0.4,
                     &quot;po4ppm&quot;: 0.0,
                     &quot;nh4 [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Models.Properties.Resources.Wheat">
            <summary>
              Looks up a localized string similar to {
             &quot;CropType&quot;: &quot;Wheat&quot;,
             &quot;ResourceName&quot;: null,
             &quot;Name&quot;: &quot;Wheat&quot;,
             &quot;Children&quot;: [
               {
                 &quot;$type&quot;: &quot;Models.Memo, Models&quot;,
                 &quot;CodeCData&quot;: &quot;\r\n# The APSIM Wheat Model\r\n\r\n_Brown, H.E., Huth, N.I. and Holzworth, D.P._\r\n\r\nThe APSIM wheat model has been developed using the Plant Modelling Framework (PMF) of [brown_plant_2014]. This new framework provides a library of plant organ and process submodels that can be coupled, at runtime, to construct a model in much the same way that models c [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="T:Models.Report.IReportColumn">
            <summary>An interface for a column in a report table.</summary>
        </member>
        <member name="P:Models.Report.IReportColumn.Name">
            <summary>Name of column.</summary>
        </member>
        <member name="P:Models.Report.IReportColumn.Units">
            <summary>Units of measurement</summary>
        </member>
        <member name="M:Models.Report.IReportColumn.GetValue">
            <summary>Retrieve the current value</summary>
        </member>
        <member name="T:Models.Report.ReportColumnWithValues">
            <summary>A class for containing values for a report column</summary>
        </member>
        <member name="P:Models.Report.ReportColumnWithValues.Values">
            <summary>The values</summary>
        </member>
        <member name="P:Models.Report.ReportColumnWithValues.Name">
            <summary>Name of column</summary>
        </member>
        <member name="P:Models.Report.ReportColumnWithValues.Units">
            <summary>Units of measurement</summary>
        </member>
        <member name="M:Models.Report.ReportColumnWithValues.#ctor(System.String,System.String)">
            <summary>Constructor for a report column that has simple values.</summary>
            <param name="columnName">The column name to write to the output</param>
            <param name="units">Units of measurement</param>
        </member>
        <member name="M:Models.Report.ReportColumnWithValues.#ctor(System.String,System.Object[],System.String)">
            <summary>Constructor for a report column that has simple values.</summary>
            <param name="columnName">The column name to write to the output</param>
            <param name="units">Units of measurement</param>
            <param name="initialValues">Values for column - used for testing.</param>
        </member>
        <member name="M:Models.Report.ReportColumnWithValues.Add(System.Object)">
            <summary>Add a value.</summary>
            <param name="value">The value to add</param>
        </member>
        <member name="M:Models.Report.ReportColumnWithValues.GetValue">
            <summary>Return the next value</summary>
        </member>
        <member name="T:Models.Report.ReportColumnConstantValue">
            <summary>A class for outputting a constant value in a report column.</summary>
        </member>
        <member name="P:Models.Report.ReportColumnConstantValue.Name">
            <summary>The column name for the constant</summary>
        </member>
        <member name="P:Models.Report.ReportColumnConstantValue.Units">
            <summary>The column name for the constant</summary>
        </member>
        <member name="F:Models.Report.ReportColumnConstantValue.value">
            <summary>The constant value</summary>
        </member>
        <member name="M:Models.Report.ReportColumnConstantValue.#ctor(System.String,System.Object,System.String)">
            <summary>
            Constructor for a plain report variable.
            </summary>
            <param name="columnName">The column name to write to the output</param>
            <param name="units">Units of measurement</param>
            <param name="constantValue">The constant value</param>
        </member>
        <member name="M:Models.Report.ReportColumnConstantValue.GetValue">
            <summary>Retrieve the current value</summary>
        </member>
        <member name="T:Models.Report.ReportColumn">
            <summary>
            A class for looking after a column of output. A column will store a value 
            each time it is told to do so (by calling StoreValue method). This value
            can be a scalar, an array of scalars, a structure, or an array of structures.
            It can handle array sizes changing through a simulation. 
            It "flattens" arrays and structures
            e.g. if the variable is sw_dep and has 3 elements then
                 Names -> sw_dep(1), sw_dep(2), sw_dep(3)
                 Types ->    double,    double,    double
            e.g. if the variable is a struct {double A; double B; double C;}
                 Names -> struct.A, struct.B, struct.C
            </summary>
        </member>
        <member name="P:Models.Report.ReportColumn.Name">
            <summary>The column heading.</summary>
        </member>
        <member name="P:Models.Report.ReportColumn.Values">
            <summary>The values for each report event (e.g. daily)</summary>
        </member>
        <member name="F:Models.Report.ReportColumn.storage">
            <summary>An instance of a storage service.</summary>
        </member>
        <member name="F:Models.Report.ReportColumn.locator">
            <summary>An instance of a locator service.</summary>
        </member>
        <member name="F:Models.Report.ReportColumn.events">
            <summary>An instance of an events service.</summary>
        </member>
        <member name="F:Models.Report.ReportColumn.fromDate">
            <summary>
            The from field converted to a date.
            </summary>
        </member>
        <member name="F:Models.Report.ReportColumn.fromHasNoYear">
            <summary>
            True when from field has no year specified
            </summary>
        </member>
        <member name="F:Models.Report.ReportColumn.toDate">
            <summary>
            The to field converted as a date
            </summary>
        </member>
        <member name="F:Models.Report.ReportColumn.toHasNoYear">
            <summary>
            The to field has no year specified
            </summary>
        </member>
        <member name="F:Models.Report.ReportColumn.clock">
            <summary>
            Reference to the clock model.
            </summary>
        </member>
        <member name="F:Models.Report.ReportColumn.variableName">
            <summary>
            The full name of the variable we are retrieving from APSIM.
            </summary>
        </member>
        <member name="F:Models.Report.ReportColumn.valuesToAggregate">
            <summary>
            The values for each report event (e.g. daily)
            </summary>
        </member>
        <member name="F:Models.Report.ReportColumn.inCaptureWindow">
            <summary>
            True when the simulation is within the capture window for this variable
            </summary>
        </member>
        <member name="F:Models.Report.ReportColumn.aggregationFunction">
            <summary>
            The aggregation function if specified. Null if not specified.
            </summary>
        </member>
        <member name="P:Models.Report.ReportColumn.Units">
            <summary>
            Units as specified in the descriptor.
            </summary>
        </member>
        <member name="F:Models.Report.ReportColumn.lastStoreDate">
            <summary>
            The date when an aggregation value was last stored
            </summary>
        </member>
        <member name="F:Models.Report.ReportColumn.haveGotUnits">
            <summary>Have we tried to get units yet?</summary>
        </member>
        <member name="M:Models.Report.ReportColumn.#ctor(System.String,System.String,System.String,System.String,System.String,Models.IClock,Models.Core.IStorageWriter,Models.Core.ILocator,Models.Core.IEvent)">
            <summary>
            Constructor for an aggregated column.
            </summary>
            <param name="aggregationFunction">The aggregation function</param>
            <param name="variableName">The name of the APSIM variable to retrieve</param>
            <param name="columnName">The column name to write to the output</param>
            <param name="from">The beginning of the capture window</param>
            <param name="to">The end of the capture window</param>
            <param name="clock">An instance of a clock model</param>
            <param name="storage">An instance of a storage service</param>
            <param name="locator">An instance of a locator service</param>
            <param name="events">An instance of an events service</param>
            <returns>The newly created ReportColumn</returns>
        </member>
        <member name="M:Models.Report.ReportColumn.#ctor(System.String,System.String,Models.IClock,Models.Core.IStorageWriter,Models.Core.ILocator,Models.Core.IEvent)">
            <summary>
            Constructor for a plain report variable.
            </summary>
            <param name="variableName">The name of the APSIM variable to retrieve</param>
            <param name="columnName">The column name to write to the output</param>
            <param name="clock">An instance of a clock model</param>
            <param name="storage">An instance of a storage service</param>
            <param name="locator">An instance of a locator service</param>
            <param name="events">An instance of an events service</param>
        </member>
        <member name="M:Models.Report.ReportColumn.Create(System.String,Models.IClock,Models.Core.IStorageWriter,Models.Core.ILocator,Models.Core.IEvent)">
            <summary>
            Factory create method. Can throw if invalid descriptor found.
            </summary>
            <remarks>
            A descriptor is passed in that describes what the column represents.
            The syntax of this descriptor is:
            Evaluate TypeOfAggregation of APSIMVariable/Expression [from Event/Date to Event/Date] as OutputLabel [Units]
            -    TypeOfAggregation – Sum, Ave, Min, Max, First, Last, Diff, (others?) (see below)
            -    APSIMVariable/Expression – APSIM output variable or an expression (see below)
            -    Event/Date – optional, an events or dates to begin and end the aggregation 
            -    OutputLabel – the label to use in the output file
            -    Units – optional, the label to use in the output file
            TypeOfAggregation
            -    Sum – arithmetic summation over  the aggregation period
            -    Ave – arithmetic average over  the aggregation period
            -    Min – minimum value during the aggregation period
            -    Max – maximum value during the aggregation period
            -    First – first or earliest value during the aggregation period
            -    Last – last or latest value during the aggregation period
            -    Diff – difference in the value of the variable or expression from the beginning to the end
            -    Others???? Stdev?, sum pos?
            APSIMVariable
            -    Any output variable or single array element (e.g. sw_dep(1)) from any APSIM module
            Expression
            -    Needs lots of explanation so see more below
            Event or Date
            -    Any APSIM event (e.g. ‘sowing’) or date (e.g. ‘31-Dec’, ’15-Jan-2001’)
            -    Events are acted on immediately that they are triggered
            -    A ‘from’ date is assumed to be at the beginning of the day and a ‘to’ date is assumed to be at the end of the day
            -    These are optional.  If omitted then the aggregation is assumed to coincide with the reporting interval
            OutputLabel
            -    The label to use in the output file
            Units
            -    The units (e.g. ‘mm’) to use in the output file
            -    This is optional.  If omitted then the units will appear are ‘()’
            </remarks>
            <param name="descriptor">A column descriptor</param>
            <param name="clock">An instance of a clock model</param>
            <param name="storage">An instance of a storage service</param>
            <param name="locator">An instance of a locator service</param>
            <param name="events">An instance of an event service</param>
            <returns>The newly created ReportColumn</returns>
        </member>
        <member name="M:Models.Report.ReportColumn.RemoveWordAfter(System.String@,System.String)">
            <summary>Remove the end of a string following word and return it.</summary>
            <param name="st">The string.</param>
            <param name="word">Word to look for.</param>
            <returns>The value after the word or null if not found.</returns>
        </member>
        <member name="M:Models.Report.ReportColumn.RemoveWordBefore(System.String@,System.String)">
            <summary>Remove the start of a string before the word.</summary>
            <param name="st">The string.</param>
            <param name="word">Word to look for.</param>
            <returns>The value before the word or null if not found.</returns>
        </member>
        <member name="M:Models.Report.ReportColumn.OnSimulationCompleted">
            <summary>
            Simulation is terminating. Perform clean up.
            </summary>
        </member>
        <member name="M:Models.Report.ReportColumn.OnBeginCapture(System.Object,System.EventArgs)">
            <summary>
            The from property is an event name. This is the event handler for the from event.,
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Report.ReportColumn.OnEndCapture(System.Object,System.EventArgs)">
            <summary>
            The to property is an event name. This is the event handler for the to event.,
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Report.ReportColumn.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>
            Start of day event handler.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Report.ReportColumn.OnEndOfDay(System.Object,System.EventArgs)">
            <summary>
            End of day event handler.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Report.ReportColumn.GetValue">
            <summary>Retrieve the current value and store it in our array of values.</summary>
        </member>
        <member name="M:Models.Report.ReportColumn.StoreValueForAggregation">
            <summary>
            Retrieve the current value and store it in our aggregation array of values.
            </summary>
        </member>
        <member name="M:Models.Report.ReportColumn.ApplyAggregation">
            <summary>
            Apply the aggregation function if necessary to the list of values we
            have stored.
            </summary>
        </member>
        <member name="T:Models.Report.Report">
            <summary>
            A report class for writing output to the data store.
            </summary>
        </member>
        <member name="F:Models.Report.Report.columns">
            <summary>The columns to write to the data store.</summary>
        </member>
        <member name="F:Models.Report.Report.columnNames">
            <summary>An array of column names to write to storage.</summary>
        </member>
        <member name="F:Models.Report.Report.columnUnits">
            <summary>An array of columns units to write to storage.</summary>
        </member>
        <member name="F:Models.Report.Report.simulation">
            <summary>Link to a simulation</summary>
        </member>
        <member name="F:Models.Report.Report.clock">
            <summary>Link to a clock model.</summary>
        </member>
        <member name="F:Models.Report.Report.storage">
            <summary>Link to a storage service.</summary>
        </member>
        <member name="F:Models.Report.Report.locator">
            <summary>Link to a locator service.</summary>
        </member>
        <member name="F:Models.Report.Report.events">
            <summary>Link to an event service.</summary>
        </member>
        <member name="F:Models.Report.Report.ActiveTabIndex">
            <summary>
            Temporarily stores which tab is currently displayed.
            Meaningful only within the GUI
            </summary>
        </member>
        <member name="P:Models.Report.Report.ExperimentFactorNames">
            <summary>Experiment factor names</summary>
        </member>
        <member name="P:Models.Report.Report.ExperimentFactorValues">
            <summary>Experiment factor values</summary>
        </member>
        <member name="P:Models.Report.Report.VariableNames">
            <summary>
            Gets or sets variable names for outputting
            </summary>
        </member>
        <member name="P:Models.Report.Report.EventNames">
            <summary>
            Gets or sets event names for outputting
            </summary>
        </member>
        <member name="M:Models.Report.Report.OnCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialize ourselves.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Report.Report.DoOutput">
            <summary>A method that can be called by other models to perform a line of output.</summary>
        </member>
        <member name="M:Models.Report.Report.WriteAllTables(Models.Core.IStorageReader,System.String)">
            <summary>Create a text report from tables in this data store.</summary>
            <param name="storage">The data store.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Models.Report.Report.SortColumnsOfDataTable(System.Data.DataTable)">
            <summary>Sort the columns alphabetically</summary>
            <param name="table">The table to sort</param>
        </member>
        <member name="M:Models.Report.Report.DoOutputEvent(System.Object,System.EventArgs)">
            <summary>Called when one of our 'EventNames' events are invoked</summary>
        </member>
        <member name="M:Models.Report.Report.FindVariableMembers">
            <summary>
            Fill the Members list with VariableMember objects for each variable.
            </summary>
        </member>
        <member name="M:Models.Report.Report.AddExperimentFactorLevels">
            <summary>Add the experiment factor levels as columns.</summary>
        </member>
        <member name="T:Models.SoluteManager">
            <summary>
            Manages access to solutes.
            </summary>
        </member>
        <member name="F:Models.SoluteManager.solutes">
            <summary>List of all solutes</summary>
        </member>
        <member name="F:Models.SoluteManager.soluteModels">
            <summary>List of all models that have solutes.</summary>
        </member>
        <member name="T:Models.SoluteManager.SoluteSetterType">
            <summary>The known types of solute setters.</summary>
        </member>
        <member name="F:Models.SoluteManager.SoluteSetterType.Plant">
            <summary>The setting model is a plant model</summary>
        </member>
        <member name="F:Models.SoluteManager.SoluteSetterType.Soil">
            <summary>The setting model is a soil model</summary>
        </member>
        <member name="F:Models.SoluteManager.SoluteSetterType.Fertiliser">
            <summary>The setting model is a fertiliser model</summary>
        </member>
        <member name="P:Models.SoluteManager.SoluteNames">
            <summary>Return a list of solute names.</summary>
        </member>
        <member name="M:Models.SoluteManager.GetSolute(System.String)">
            <summary>
            Return the value of a solute. Will throw if solute not found.
            </summary>
            <param name="name">Name of solute</param>
        </member>
        <member name="M:Models.SoluteManager.SetSolute(System.String,Models.SoluteManager.SoluteSetterType,System.Double[])">
            <summary>
            Set the value of a solute. Will throw if solute not found.
            </summary>
            <param name="name">Name of solute</param>
            <param name="callingModelType">Type of calling model</param>
            <param name="value">Value of solute</param>
        </member>
        <member name="M:Models.SoluteManager.Add(System.String,Models.SoluteManager.SoluteSetterType,System.Double[])">
            <summary>
            Set the value of a solute by specifying a delta. Will throw if solute not found.
            </summary>
            <param name="name">Name of solute</param>
            <param name="callingModelType">Type of calling model</param>
            <param name="delta">Delta values to be added to solute</param>
        </member>
        <member name="M:Models.SoluteManager.AddToLayer(System.Int32,System.String,Models.SoluteManager.SoluteSetterType,System.Double)">
            <summary>
            Add a delta value to the top layer of a solute. Will throw if solute not found.
            </summary>
            <param name="name">Name of solute</param>
            <param name="callingModelType">Type of calling model</param>
            <param name="layerIndex">Layer index to add delta to</param>
            <param name="delta">Value to be added to top layer of solute</param>
        </member>
        <member name="M:Models.SoluteManager.Subtract(System.String,Models.SoluteManager.SoluteSetterType,System.Double[])">
            <summary>
            Set the value of a solute by specifying a delta. Will throw if solute not found.
            </summary>
            <param name="name">Name of solute</param>
            <param name="callingModelType">Type of calling model</param>
            <param name="delta">Delta values to be subtracted from solute</param>
        </member>
        <member name="M:Models.SoluteManager.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Performs the initial checks and setup</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.SoluteManager.FindSolutes">
            <summary>Find all solutes.</summary>
        </member>
        <member name="T:Models.SoluteManager.Solute">
            <summary>
            Internal solute class.
            </summary>
        </member>
        <member name="T:Models.Sugarcane">
             <summary>
             # [Name]
            ##Model Components Overview
            
            Crop dry weight accumulation is driven by the conversion of intercepted radiation to biomass, via a radiation-use efficiency (RUE). 
            
            RUE is reduced whenever extremes of temperature, soil water shortage or excess, or plant nitrogen deficit limit photosynthesis. 
            
            The crop leaf canopy, which intercepts radiation, expands its area as a function of temperature, and can also be limited by extremes of temperature, soil water shortage or excess, or plant nitrogen deficit.
            
            Biomass is partitioned among the various plant components (leaf, cabbage, structural stem, roots and sucrose) as determined by crop phenological stage.
            
            Nitrogen uptake is simulated, as is the return of carbon and nitrogen to the soil in trash and roots. 
            
            In many sugarcane production systems, commercial yield is measured as the fresh weight of sugarcane stems and their sucrose concentration. Hence, the water content in addition to the dry weight of the stem is simulated. 
            
            Since sugarcane is grown both as a plant and ratoon crop, the model also needs to be able to simulate differences between crop classes based on any known physiological differences between these classes.
            
             
            ##Crop growth in the absence of nitrogen or water limitation
            
            ###Thermal time
            
            Thermal time is used in the model to drive phenological development and canopy expansion. 
            
            In APSIM-Sugarcane, thermal time is calculated using a base temperature of 9 oC, optimum temperature of 32 oC, and maximum temperature of 45 oC.
            
            The optimum and maximum temperatures were taken from those used for maize [jones_ceres-maize:_1986]. 
            
            Base temperatures for sugarcane have been variously reported between 8 oC and 15 oC [inman-bamber_temperature_1994][robertson_simulating_1998]. 
            The base of 9 oC used in APSIM sugarcane was chosen to be consistent with those studies which sampled the greatest temperature range, namely [inman-bamber_temperature_1994][robertson_simulating_1998] who identified base temperatures of 10 oC and 8 oC respectively. 
            
            For thermal time calculations in the model, temperature is estimated every three hours from a sine function fitted to daily maximum and minimum temperatures, using the method described by [jones_ceres-maize:_1986]. 
            
            ###Phenology
            
            The sugar model uses six different stages to define crop growth and status. 
            
             
            |Stage     |Description                                   |
            |----------|:---------------------------------------------|
            |sowing    |From sowing to sprouting                      |
            |sprouting |From sprouting to emergence                   |
            |emergence |From emergence to the beginning of cane growth|
            |begin_cane|From the beginning of cane growth to flowering|
            |flowering |From flowering to the end of the crop         |
            |end_crop  |Crop is not currently in the simulated system.|
             
            Sprouting occurs after a lag period, set to 350 oCdays for plant crops and 100 oCdays for ratoon crops. 
            
            Provided the soil water content of the layer is adequate, shoots will elongate towards the soil surface at a rate of 0.8 mm per oCday. 
            
            The thermal duration between emergence and beginning of stalk growth is a genotype coefficient in the range 1200 to 1800 oCdays. 
            
            Although, sugarcane does produce flowers, the number of stalks producing flowers in a field is highly variable, and its physiological basis is not fully understood.
            
            While the model structure has been developed to include flowering as a phenological stage, it has been deactivated until a better physiological basis for prediction is available. 
            
            
            ###Canopy expansion
            
            The experimental basis for the canopy expansion model is described by [robertson_simulation_2016].
            
            Briefly, green leaf area index is the product of ***green leaf area per stalk*** and the ***number of stalks per unit ground area***. 
            
            ***Green leaf area per stalk*** is simulated by summing the fully-expanded area of successive leaves that appear on each stalk, and adding a correction factor for the area of expanding leaves (set to 1.6 leaves per stalk).
            Profiles of leaf area per leaf are input as genotype coefficients. 
            [robertson_simulation_2016] found leaf appearance rates declined as a continuous function of cumulative thermal time, so that at emergence leaves took 80 oCd to appear while leaf 40 required 150 oCd.
            These responses are reproduced in the model (via a series of linear interpolations) in both plant and ratoon crops.
            
            ***Stalk number*** rises rapidly to a peak during the first 1400 oCdays from emergence, thereafter declining to reach a stable stalk number (e.g. [inman-bamber_temperature_1994]). 
            Ratoon crops commonly reach an earlier peak stalk number than plant crops, with consequently faster early canopy expansion in ratoons [robertson_growth_1996].
            In the model, the complexity of simulating the dynamics of tillering in order to predict LAI during early growth is avoided. 
            Instead, the crop is conceived to have a notional constant stalk number throughout growth, usually set at 10 stalks m-2 , although this value can be varied as an input. 
            The additional leaf area associated with tillers that appear and subsequently die, is captured via a calibrated tillering factor, that effectively increases the area of the leaves that are produced over the early tillering period.
            
            The known faster early expansion of LAI in ratoon crops is simulated via two effects. 
            * Firstly, the lag time for regrowth of shoots after harvest is shorter in a ratoon crop than is the equivalent thermal time for a plant crop to initiate stalk elongation.
            * Secondly, tillering is recognised in the model coefficients as making a larger contribution to leaf area development in a ratoon crop than a plant crop.
            
            The daily rate of senescence of green leaf area is calculated as the maximum of four rates determined by the factors of ageing, light competition, water stress and frost.
            
            
            In the model, ageing causes senescence by not allowing at any time more than 13 fully-expanded green leaves per stalk.
            
            Light competition is simulated to induce senescence once fractional radiation interception reaches 0.85.
            
            Water stress induces senescence once the soil water deficit factor for photosynthesis declines below 1.0.
            
            Frosting removes 10% of the LAI per day if the minimum temperature reaches 0 oC, and 100% if it reaches -5 oC. 
            
            
            ###Root growth and development
            
            Root biomass is produced independently from the shoot, so that a proportion of daily above-ground biomass production is added to the root system. 
            The proportion decreases from a maximum of 0.30 at emergence and asymptotes to 0.20 at flowering. 
            
            Root biomass is converted to root length via a specific root length of 18000 mm g-1 . 
            The depth of the root front in plant crops increases by 1.5 cm day-1 [_glover_proceedings_nodate] from emergence, with the maximum depth of rooting set by the user.
            
            At harvest, 17% of roots in all the occupied soil layer die [ball-coelho_root_1992]. 
            
            
            
            ###Biomass accumulation and partitioning
            
            The sugar model partitions dry matter to **five different plant pools**. These are as follows: 
            
            |Plant Part |Description                              |
            |-----------|:----------------------------------------|
            |Root       |Below-ground biomass                     |
            |Leaf       |Leaf                                     |
            |Sstem      |Structural component of millable stalk   |
            |Cabbage    |Leaf sheath and tip of growing stalks etc|
            |Sucrose    |Sucrose content of millable stalk        |
            
            In addition to the five live biomass pools outlined above, senescent leaf and cabbage is maintained as trash on the plant or progressively detached to become residues on the soil surface. 
            In APSIM, the RESIDUE module [probert_apsim_1996] takes on the role of decomposition of crop residues. 
            
            LAI is used in the model to intercept incident solar radiation following Beer's Law, using a radiation extinction coefficient of 0.38, determined by [muchow_radiation_1994][robertson_growth_1996].
            Intercepted radiation is used to produce daily biomass production using a radiation-use efficiency (RUE) of 1.80 g MJ-1 for plant crops and 1.65 g MJ-1 for ratoon crops. 
            The values of RUE used in the model are those adjusted upwards from field-measured values [muchow_radiation_1994][robertson_growth_1996] due to the underestimate of biomass production caused by incomplete recovery of senesced leaf material [robertson_growth_1996]. 
            In the model, RUE is reduced if the mean daily temperature falls below 15 oC or exceeds 35 oC, and becomes zero if the mean temperature reaches 5 or 50 oC, respectively. 
            These effects are similar to those used in other models of C4 crop species [hammer_assessing_1994]. 
            
            
            
            Four above-ground biomass pools are modelled: **leaf**, **cabbage**, **structural stem**, **stem sucrose**, 
            (and an additional pool for **roots** that is simulated separately from above-ground production). 
            
            Between emergence and the beginning of stalk growth, above-ground biomass is partitioned between leaf and cabbage in the ratio 1.7:1 [robertson_growth_1996].
            
            After the beginning of stem growth 0.7 of above-ground biomass is partitioned to the stem robertson_growth_1996, with the remainder partitioned between leaf and cabbage in the ratio 1.7:1. 
            After a minimum amount of stem biomass has accumulated, the daily biomass partitioned to stem is divided between structural and sucrose pools, following the framework developed by [muchow_effect_1996] and [robertson_growth_1996]. Thereafter, the stem biomass is equal to the sum of structural and sucrose pools.
            
            If biomass partitioned to leaf is insufficient for growth of the leaf area, as determined by a maximum specific leaf area, then daily leaf area expansion is reduced. 
            If biomass partitioned to leaf is in excess of that required to grow the leaf area on that day, then specific leaf area is permitted to decrease to a lower limit, beyond which the “excess” biomass is partitioned to sucrose and structural stem. 
            
            A stalk growth stress factor is calculated as the most limiting of the water, nitrogen and temperature limitations on photosynthesis. 
            This stress factor influences both the onset and rate of assimilate partitioning to sucrose at the expense of structural stem. 
            
            
            ###Stem water content
            
            A stem water pool is simulated for the purposes of calculating cane fresh weight and CCS%. 
            
            For every gram of structural stem grown, a weight of water is considered to have been accumulated by the cane stems. 
            
            This relationship varies with thermal time, ranging from 9 g g-1 initially, to 5 g g-1 late in the crop life cycle. 
            
            The former represents the water content of young stem (eg. cabbage) while the latter represents a combination of young stem growth and thickening of older stem. 
            
            Sucrose deposition in the stem removes water content at the rate of 1 g water g-1 sucrose. 
            
            ###Varietal effects
            
            Currently varieties differ in only two respects in the model. 
            
            * Firstly, Inman-Bamber (1991) found that varieties in South Africa differed in the fully-expanded area of individual leaves. 
            The distributions for NCo376 and N14 were taken from Inman-Bamber and Thompson (1989), while that for Q117 and Q96 was those assigned values that gave best fit to the time-course of LAI during the model calibration stage. 
            * Secondly, [robertson_growth_1996] found that varieties from South Africa and Australia differed in terms of partitioning of biomass to sucrose in the stem. 
            There is scope for incorporating other varietal differences as new knowledge becomes available.
            
            
            
            
            ##Water deficit limitation
            
            Soil water infiltration and redistribution, evaporation and drainage is simulated by other modules in the APSIM framework [probert_apsim_1996] and (Verburg et al, 1997). 
            
            Water stress in the model reduces the rate of leaf area expansion and radiation-use efficiency, via two soil water deficit factors, which vary from zero to 1.0, following the concepts embodied in the CERES models (Ritchie, 1986). 
            Soil water deficit factor 1 (SWDEF1), which is less sensitive to soil drying, reduces the radiation-use efficiency (i.e. net photosynthesis) and hence transpiration, below its maximum. 
            Soil water deficit factor 2 (SWDEF2), which is more sensitive to soil drying, reduces the rate of processes governed primarily by cell expansion, i.e. daily leaf expansion rate. 
            
            SWDEF1 and 2 are calculated as a function of the ratio of (potential soil water supply from the root system) and the (transpiration demand). 
            Following [sinclair_water_1986 and Monteith (1986), transpiration demand is modelled as a function of the (current day's crop growth rate), divided by the transpiration-use efficiency.
            When soil water supply exceeds transpiration demand, assimilate fixation is a function of radiation interception and radiation use efficiency. 
            When soil water supply is less than transpiration demand, assimilate fixation is a function of water supply and transpiration efficiency and the vapour pressure deficit (VPD). 
            
            Transpiration-use efficiency has not been directly measured for sugarcane, but calibration of the current model on datasets exhibiting water deficits (Robertson et al, unpubl. data) resulted in the use of a transpiration-use efficiency of 8 g kg-1 at a VPD of 1 kPa.
            This efficiency declines linearly as a function of VPD (Tanner and Sinclair, 1983). 
            This compares with reported values of 9 g kg-1 kPa-1 for other C 4 species (Tanner and Sinclair 1983), a value that has been used in the models of sorghum (Hammer and Muchow, 1994) and maize [muchow_tailoring_1991]. 
            
            Potential soil water uptake is calculated using the approach first advocated by Monteith (1986) and subsequently tested for sunflower [meinke_sunflower_1993] and grain sorghum (Robertson et al., 1994). 
            It is the sum of root water uptake from each profile layer occupied by roots. 
            The potential rate of extraction in a layer is calculated using a rate constant, which defines the fraction of available water able to be extracted per day. 
            The actual rate of water extraction is the lesser of the potential extraction rate and the transpiration demand. 
            If the computed potential extraction rate from the profile exceeds demand, then the extracted water is removed from the occupied layers in proportion to the values of potential root water uptake in each layer.
            If the computed potential extraction from the profile is less than the demand then SWDEF2 declines in proportion, and the actual root water uptake from a layer is equal to the computed potential uptake. 
            
            In addition to the effects on canopy expansion and biomass accumulation, water stress influence biomass partitioning in the stem in two ways.
            Firstly, the minimum amount of stem biomass required to initiate sucrose accumulation declines with accumulated stress.
            Secondly, the daily dry weight increment between structural stem and sucrose shifts in favour of sucrose as water deficits develop. 
            
            
            ##Water excess limitation
            The proportion of the root system exposed to saturated or near saturated soil water conditions is calculated and used to calculate a water logging stress factor. 
            This factor reduces photosynthetic activity via an effect on RUE.
            
            
            ##Nitrogen limitation
            N supply from the soil is simulated in other modules in the APSIM framework [probert_apsim_1996]. 
            
            Crop nitrogen demand is simulated using an approach similar to that used in the CERES models [godwin_simulation_1985]. 
            Crop N demand is calculated as the product of maximum tissue N concentration and the increment in tissue weight. 
            
            Separate N pools are described for green leaf, cabbage, millable stalk and dead leaf. The sucrose pool is assumed to have no nitrogen associated with it. 
            Only the leaf N concentrations influence crop growth processes. Growth is unaffected until leaf N concentrations fall below a critical concentration. 
            Sugarcane has been shown to exhibit luxury N uptake [muchow_radiation_1994](Catchpoole and Keating 1995) and the difference between the maximum and critical N concentrations is intended to simulate this phenomenon. 
            Nitrogen stress is proportional to the extent to which leaf N falls between the critical and the minimum N concentration. 
            
            Senescing leaves (and the associated leaf sheaths contained in the cabbage pool) are assumed to die at their minimum N concentrations and the balance of the N in these tissues is retranslocated to the green leaf and cabbage pools. 
            
            Maximum, critical and minimum N concentrations are all functions of thermal time, and were chosen on the basis of the findings of Catchpoole and Keating (1995) and [muchow_radiation_1994] and subsequently refined during the model calibration.
            Critical green leaf concentrations used in the model differ between photosynthetic, leaf expansion and stem growth processes. 
            For photosynthesis they begin at 1.2% N at emergence or ratooning and asymptote towards 0.5%N at flowering. 
            For leaf area expansion they are 1.3 and 0.5% N 
            and stem growth, 1.5 and 0.5%N. 
            
            N uptake cannot exceed N demand by the crop and is simulated to take place by mass flow in the water that is used for transpiration. 
            Should mass flow not meet crop demand and nitrate be available in soil layers, the approach of [van_keulen_simulation_1987] is used to simulate the uptake of nitrate over and above that which can be accounted for by mass flow. 
            While van Keulen and Seligman (1987) referred to this approach as “diffusion”, the routine more realistically serves as a surrogate for a number of sources of uncertainty in nitrate uptake. 
            
            Nitrogen stress also influences biomass partitioning in the stem, in a similar fashion to that described above for water stress.
            
            
            ##Other features of the sugar module
            APSIM-Sugarcane includes a number of features relevant to sugarcane production systems.
            
            Either plant or ratoon crops can be simulated at the outset or a plant crop will regenerate as a ratoon crop if a crop cycle is being simulated. 
            Production systems of plant - multiple ratoon - fallow can be simulated or alternatively other APSIM crop or pasture modules can be included in rotation with sugarcane. 
            
            Trash can be burnt or retained at harvest time. 
            
            Insect or other biological or mechanical damage to the canopy can be simulated via “graze” actions. 
            
            Many sugarcane crops are “hilled-up” early in canopy development, an operation that involves the movement of soil from the interrow to the crop row. 
            This operation facilitates irrigation operations and improves the crop's ability to stand upright. 
            APSIM-Sugarcane responds to a management event of hilling-up by removal of lower leaf area and stem from the biomass pools. 
            
            Lodging is a widespread phenomenon in high-yielding sugarcane crops. 
            The APSIM-MANAGER [mccown_apsim:_1996] can initiate a lodging event in response to any aspect of the system state (eg crop size, time of year and weather). 
            APSIM SUGARCANE responds to lodging via four effects:
            
            A low rate of stalk death which has been widely observed in heavily lodged crops (Muchow et al., 1995; Robertson et al., 1996)[singh_lodging_2002];
            
            A reduction in radiation use efficiency (Singh et al., 1999)[singh_lodging_2002]
            
            A reduction in the proportion of daily biomass that is partitioned as sucrose [singh_lodging_2002]; and
            
            A reduction in the maximum number of green leaves, to capture the reported reduction in leaf appearance rate and increase in leaf senescence [singh_lodging_2002]
            
             
            ##Parameterisation
            
            **(Structure of the xml in the .apsimx file)**
            
            There are **4** separate categories of variables in the Sugarcane modules xml. 
            
            They are listed below with some examples of the type of parameters included in each.
                
            1. **Constants**
                * Upper and lower bounds for met and soil variables
            2. **Plant_crop**
                * Growth and partitioning parameters
                * Water Use Parameters and Water and temperature Stress Factors
                * Frosting Factors
                * Nitrogen Contents and Nitrogen Stress Factors
            3. **Ratoon_crop**
                * Same as Plant crop section but there is the ability to change the parameters between plant and ratoon crops.
            4. **Cultivar (Plant Crop and Ratoon Crop)**
                 * **Plant Crop Cultivar**
                    * Leaf Development Parameters
                    * Phenology
                    * Sucrose and Cane Stalk  (Partitioning Parameters)
                 * **Ratoon Crop Cultivar**
                    * Same as for the Plant Crop Cultivar
                    * ***By creating a completely new cultivar with the same name as the plant crop cultivar but appending "_ratoon" to the end of the name, 
                 the Sugarcane module will then automatically use this ratoon crop cultivar rather then the plant crop cultivar 
                 when the crop changes from a Plant Crop to a Ratoon Crop.***
             
             
             
            **Sugar Module Outputs**
            
            
             |Variable Name  | Units      | Description                                                               |
             |---------------|:-----------|:--------------------------------------------------------------------------| 
             |Stage_name     |            | Name of the current crop growth stage                                     |
             |Stage          |            | Current growth stage number                                               |
             |Crop_status    |            | Status of the current crop (alive,dead,out)                               |
             |ratoon_no      |            | Ratoon number (0 for plant crop, 1 for 1st ratoon, 2 for 2nd ratoon, …etc)|
             |das            | Days       | Days after sowing (ie. crop duration)                                     |
             |Ep             | mm         | Crop evapotranspiration (extraction) for each soil layer                  |
             |cep            | mm         | Cumulative plant evapotranspiration                                       |
             |rlv            | mm/mm^3    | root length per volume of soil in each soil layer                         |
             |esw            | mm         | Extractable Soil water in each soil layer                                 |
             |root_depth     | mm         | Root depth                                                                |
             |sw_demand      | mm         | Daily demand for soil water                                               |
             |biomass        | g/m^2      | Total crop above-ground biomass (Green + Trash)                           |
             |green_biomass  | g/m^2      | Total green crop above-ground biomass                                     |
             |biomass_n      | g/m^2      | Total Nitrogen in above-ground biomass (Green + Trash)                    |
             |green_biomass_n| g/m^2      | Amount of Nitrogen in green above-ground biomass                          |
             |dlt_dm         | g/m^2      | Daily increase in plant dry matter (photosynthesis)                       |
             |dm_senesced    | g/m^2      | Senesced dry matter in each plant pool                                    |
             |n_senesced     | g/m^2      | Amount of Nitrogen in senesced material for each plant pool               |
             |Canefw         | t/ha       | Fresh Cane weight                                                         |
             |ccs            | %          | Commercial Cane Sugar                                                     |
             |Cane_wt        | g/m^2      | Weight of cane dry matter                                                 |
             |leaf_wt        | g/m^2      | Weight of plant green leaf                                                |
             |root_wt        | g/m^2      | Weight of plant roots                                                     |
             |sstem_wt       | g/m^2      | Weight of plant structural stem                                           |
             |sucrose_wt     | g/m^2      | Weight of plant sucrose                                                   |
             |cabbage_wt     | g/m^2      | Weight of plant cabbage                                                   |
             |n_conc_cane    | g/g        | Nitrogen concentration in cane                                            |
             |n_conc_leaf    | g/g        | Nitrogen concentration in green leaf                                      |
             |n_conc_cabbage | g/g        | Nitrogen concentration in green cabbage                                   |
             |n_demand       | g/m^2      | Daily demand for Nitrogen                                                 |
             |cover_green    | 0-1        | Fractional cover by green plant material                                  |
             |cover_tot      | 0-1        | Fractional cover by total plant material (Green + Trash)                  |
             |lai            | mm^2/mm^2  | Leaf area index of green leaves                                           |
             |tlai           | mm^2/mm^2  | Total plant leaf area index (green + senesced)                            |
             |slai           | mm^2/mm^2  | Senesced leaf area index                                                  |
             |n_leaf_crit    | g/m^2      | Critical Nitrogen level for the current crop                              |
             |n_leaf_min     | g/m^2      | Minimum Nitrogen level for the current crop                               |
             |nfact_photo    | 0-1        | Nitrogen stress factor for photosynthesis                                 |
             |nfact_expan    | 0-1        | Nitrogen stress factor for cell expansion                                 |
             |swdef_photo    | 0-1        | Soil water stress factor for photosynthesis                               |
             |swdef_expan    | 0-1        | Soil water stress factor for cell expansion                               |
             |swdef_phen     | 0-1        | Soil water stress factor for phenology                                    |
            
             </summary>
        </member>
        <member name="P:Models.Sugarcane.CanopyType">
            <summary>
            Canopy type
            </summary>
        </member>
        <member name="P:Models.Sugarcane.Albedo">
            <summary>Albedo.</summary>
        </member>
        <member name="P:Models.Sugarcane.Gsmax">
            <summary>Gets or sets the gsmax.</summary>
        </member>
        <member name="P:Models.Sugarcane.R50">
            <summary>Gets or sets the R50.</summary>
        </member>
        <member name="P:Models.Sugarcane.LAI">
            <summary>
            Gets the LAI (m^2/m^2)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.LAITotal">
            <summary>
            Gets the maximum LAI (m^2/m^2)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.CoverGreen">
            <summary>
            Gets the cover green (0-1)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.CoverTotal">
            <summary>
            Gets the cover total (0-1)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.Height">
            <summary>
            Gets the canopy height (mm)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.Depth">
            <summary>
            Gets the canopy depth (mm)
            </summary>
        </member>
        <member name="P:Models.Sugarcane.FRGR">
            <summary>
            Gets  FRGR.
            </summary>
        </member>
        <member name="P:Models.Sugarcane.PotentialEP">
            <summary>
            Sets the potential evapotranspiration.
            </summary>
        </member>
        <member name="P:Models.Sugarcane.WaterDemand">
            <summary>Sets the actual water demand.</summary>
        </member>
        <member name="P:Models.Sugarcane.LightProfile">
            <summary>
            MicroClimate calculates a layered canopy energy balance and sets
            this property in the crop.
            </summary>
        </member>
        <member name="F:Models.Sugarcane.Clock">
            <summary>
            The clock
            </summary>
        </member>
        <member name="F:Models.Sugarcane.Weather">
            <summary>
            The weather
            </summary>
        </member>
        <member name="F:Models.Sugarcane.Soil">
            <summary>
            The soil
            </summary>
        </member>
        <member name="F:Models.Sugarcane.Summary">
            <summary>
            The summary
            </summary>
        </member>
        <member name="F:Models.Sugarcane.solutes">
            <summary>Link to Apsim's solute manager module.</summary>
        </member>
        <member name="P:Models.Sugarcane.Legumosity">
            <summary>Gets a value indicating how leguminous a plant is</summary>
        </member>
        <member name="P:Models.Sugarcane.IsC4">
            <summary>Gets a value indicating whether the biomass is from a c4 plant or not</summary>
        </member>
        <member name="P:Models.Sugarcane.AboveGround">
            <summary>Aboveground mass</summary>
        </member>
        <member name="F:Models.Sugarcane.max_leaf">
            <summary>
            The max_leaf
            </summary>
        </member>
        <member name="F:Models.Sugarcane.max_layer">
            <summary>
            The max_layer
            </summary>
        </member>
        <member name="F:Models.Sugarcane.max_table">
            <summary>
            The max_table
            </summary>
        </member>
        <member name="F:Models.Sugarcane.crop_alive">
            <summary>
            The crop_alive
            </summary>
        </member>
        <member name="F:Models.Sugarcane.crop_dead">
            <summary>
            The crop_dead
            </summary>
        </member>
        <member name="F:Models.Sugarcane.crop_out">
            <summary>
            The crop_out
            </summary>
        </member>
        <member name="F:Models.Sugarcane.photo">
            <summary>
            The photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.expansion">
            <summary>
            The expansion
            </summary>
        </member>
        <member name="F:Models.Sugarcane.pheno">
            <summary>
            The pheno
            </summary>
        </member>
        <member name="F:Models.Sugarcane.root">
            <summary>
            The root
            </summary>
        </member>
        <member name="F:Models.Sugarcane.leaf">
            <summary>
            The leaf
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sstem">
            <summary>
            The sstem
            </summary>
        </member>
        <member name="F:Models.Sugarcane.cabbage">
            <summary>
            The cabbage
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sucrose">
            <summary>
            The sucrose
            </summary>
        </member>
        <member name="F:Models.Sugarcane.max_part">
            <summary>
            The max_part
            </summary>
        </member>
        <member name="F:Models.Sugarcane.part_name">
            <summary>
            The part_name
            </summary>
        </member>
        <member name="F:Models.Sugarcane.max_stage">
            <summary>
            The max_stage
            </summary>
        </member>
        <member name="F:Models.Sugarcane.now">
            <summary>
            The now
            </summary>
        </member>
        <member name="F:Models.Sugarcane.crop_end">
            <summary>
            The crop_end
            </summary>
        </member>
        <member name="F:Models.Sugarcane.fallow">
            <summary>
            The fallow
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sowing">
            <summary>
            The sowing
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sow_to_sprouting">
            <summary>
            The sow_to_sprouting
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sprouting">
            <summary>
            The sprouting
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sprouting_to_emerg">
            <summary>
            The sprouting_to_emerg
            </summary>
        </member>
        <member name="F:Models.Sugarcane.emerg">
            <summary>
            The emerg
            </summary>
        </member>
        <member name="F:Models.Sugarcane.emerg_to_begcane">
            <summary>
            The emerg_to_begcane
            </summary>
        </member>
        <member name="F:Models.Sugarcane.begcane">
            <summary>
            The begcane
            </summary>
        </member>
        <member name="F:Models.Sugarcane.begcane_to_flowering">
            <summary>
            The begcane_to_flowering
            </summary>
        </member>
        <member name="F:Models.Sugarcane.flowering">
            <summary>
            The flowering
            </summary>
        </member>
        <member name="F:Models.Sugarcane.flowering_to_crop_end">
            <summary>
            The flowering_to_crop_end
            </summary>
        </member>
        <member name="P:Models.Sugarcane.crop_type">
            <summary>
            Gets or sets the crop_type.
            </summary>
            <value>
            The crop_type.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tt_emerg_to_begcane_ub">
            <summary>
            Gets or sets the tt_emerg_to_begcane_ub.
            </summary>
            <value>
            The tt_emerg_to_begcane_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tt_begcane_to_flowering_ub">
            <summary>
            Gets or sets the tt_begcane_to_flowering_ub.
            </summary>
            <value>
            The tt_begcane_to_flowering_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tt_flowering_to_crop_end_ub">
            <summary>
            Gets or sets the tt_flowering_to_crop_end_ub.
            </summary>
            <value>
            The tt_flowering_to_crop_end_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_uptake_option">
            <summary>
            Gets or sets the n_uptake_option.
            </summary>
            <value>
            The n_uptake_option.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NO3_diffn_const">
            <summary>
            Gets or sets the n o3_diffn_const.
            </summary>
            <value>
            The n o3_diffn_const.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_supply_preference">
            <summary>
            Gets or sets the n_supply_preference.
            </summary>
            <value>
            The n_supply_preference.
            </value>
        </member>
        <member name="P:Models.Sugarcane.kno3">
            <summary>
            Gets or sets the kno3.
            </summary>
            <value>
            The kno3.
            </value>
        </member>
        <member name="P:Models.Sugarcane.no3ppm_min">
            <summary>
            Gets or sets the no3ppm_min.
            </summary>
            <value>
            The no3ppm_min.
            </value>
        </member>
        <member name="P:Models.Sugarcane.knh4">
            <summary>
            Gets or sets the KNH4.
            </summary>
            <value>
            The KNH4.
            </value>
        </member>
        <member name="P:Models.Sugarcane.nh4ppm_min">
            <summary>
            Gets or sets the nh4ppm_min.
            </summary>
            <value>
            The nh4ppm_min.
            </value>
        </member>
        <member name="P:Models.Sugarcane.total_n_uptake_max">
            <summary>
            Gets or sets the total_n_uptake_max.
            </summary>
            <value>
            The total_n_uptake_max.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ll_ub">
            <summary>
            Gets or sets the ll_ub.
            </summary>
            <value>
            The ll_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.kl_ub">
            <summary>
            Gets or sets the kl_ub.
            </summary>
            <value>
            The kl_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.minsw">
            <summary>
            Gets or sets the minsw.
            </summary>
            <value>
            The minsw.
            </value>
        </member>
        <member name="P:Models.Sugarcane.latitude_ub">
            <summary>
            Gets or sets the latitude_ub.
            </summary>
            <value>
            The latitude_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.latitude_lb">
            <summary>
            Gets or sets the latitude_lb.
            </summary>
            <value>
            The latitude_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.maxt_ub">
            <summary>
            Gets or sets the maxt_ub.
            </summary>
            <value>
            The maxt_ub.
            </value>
        </member>
        <member name="F:Models.Sugarcane.maxt_lb">
            <summary>
            The maxt_lb
            </summary>
        </member>
        <member name="P:Models.Sugarcane.mint_ub">
            <summary>
            Gets or sets the mint_ub.
            </summary>
            <value>
            The mint_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.mint_lb">
            <summary>
            Gets or sets the mint_lb.
            </summary>
            <value>
            The mint_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.radn_ub">
            <summary>
            Gets or sets the radn_ub.
            </summary>
            <value>
            The radn_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.radn_lb">
            <summary>
            Gets or sets the radn_lb.
            </summary>
            <value>
            The radn_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlayer_ub">
            <summary>
            Gets or sets the dlayer_ub.
            </summary>
            <value>
            The dlayer_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlayer_lb">
            <summary>
            Gets or sets the dlayer_lb.
            </summary>
            <value>
            The dlayer_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dul_dep_ub">
            <summary>
            Gets or sets the dul_dep_ub.
            </summary>
            <value>
            The dul_dep_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dul_dep_lb">
            <summary>
            Gets or sets the dul_dep_lb.
            </summary>
            <value>
            The dul_dep_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sw_dep_ub">
            <summary>
            Gets or sets the sw_dep_ub.
            </summary>
            <value>
            The sw_dep_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sw_dep_lb">
            <summary>
            Gets or sets the sw_dep_lb.
            </summary>
            <value>
            The sw_dep_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NO3_ub">
            <summary>
            Gets or sets the n o3_ub.
            </summary>
            <value>
            The n o3_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NO3_lb">
            <summary>
            Gets or sets the n o3_lb.
            </summary>
            <value>
            The n o3_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NO3_min_ub">
            <summary>
            Gets or sets the n o3_min_ub.
            </summary>
            <value>
            The n o3_min_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NO3_min_lb">
            <summary>
            Gets or sets the n o3_min_lb.
            </summary>
            <value>
            The n o3_min_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NH4_ub">
            <summary>
            Gets or sets the n h4_ub.
            </summary>
            <value>
            The n h4_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NH4_lb">
            <summary>
            Gets or sets the n H4_LB.
            </summary>
            <value>
            The n H4_LB.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NH4_min_ub">
            <summary>
            Gets or sets the n h4_min_ub.
            </summary>
            <value>
            The n h4_min_ub.
            </value>
        </member>
        <member name="P:Models.Sugarcane.NH4_min_lb">
            <summary>
            Gets or sets the n h4_min_lb.
            </summary>
            <value>
            The n h4_min_lb.
            </value>
        </member>
        <member name="P:Models.Sugarcane.plant">
            <summary>
            Gets or sets the plant.
            </summary>
            <value>
            The plant.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ratoon">
            <summary>
            Gets or sets the ratoon.
            </summary>
            <value>
            The ratoon.
            </value>
        </member>
        <member name="F:Models.Sugarcane.crop">
            <summary>
            The crop
            </summary>
        </member>
        <member name="P:Models.Sugarcane.cultivars">
            <summary>
            Gets or sets the cultivars.
            </summary>
            <value>
            The cultivars.
            </value>
        </member>
        <member name="F:Models.Sugarcane.cult">
            <summary>
            The cult
            </summary>
        </member>
        <member name="P:Models.Sugarcane.eo_crop_factor">
            <summary>
            Gets or sets the eo_crop_factor.
            </summary>
            <value>
            The eo_crop_factor.
            </value>
        </member>
        <member name="P:Models.Sugarcane.uptake_source">
            <summary>
            Gets or sets the uptake_source.
            </summary>
            <value>
            The uptake_source.
            </value>
        </member>
        <member name="F:Models.Sugarcane.xf">
            <summary>
            The xf
            </summary>
        </member>
        <member name="F:Models.Sugarcane.ll">
            <summary>
            The ll
            </summary>
        </member>
        <member name="F:Models.Sugarcane.kl">
            <summary>
            The kl
            </summary>
        </member>
        <member name="P:Models.Sugarcane.rlv_init">
            <summary>
            Gets or sets the rlv_init.
            </summary>
            <value>
            The rlv_init.
            </value>
        </member>
        <member name="M:Models.Sugarcane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Models.Sugarcane"/> class.
            </summary>
        </member>
        <member name="F:Models.Sugarcane.fr_intc_radn_">
            <summary>
            The fr_intc_radn_
            </summary>
        </member>
        <member name="F:Models.Sugarcane.swim3">
            <summary>
            The swim3
            </summary>
        </member>
        <member name="F:Models.Sugarcane.dlayer">
            <summary>
            The dlayer
            </summary>
        </member>
        <member name="P:Models.Sugarcane.num_layers">
            <summary>
            Gets the num_layers.
            </summary>
            <value>
            The num_layers.
            </value>
        </member>
        <member name="F:Models.Sugarcane.bd">
            <summary>
            The bd
            </summary>
        </member>
        <member name="F:Models.Sugarcane.dul_dep">
            <summary>
            The dul_dep
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sw_dep">
            <summary>
            The sw_dep
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sat_dep">
            <summary>
            The sat_dep
            </summary>
        </member>
        <member name="F:Models.Sugarcane.ll15_dep">
            <summary>
            The ll15_dep
            </summary>
        </member>
        <member name="P:Models.Sugarcane.plants">
            <summary>
            Gets or sets the plants.
            </summary>
            <value>
            The plants.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lodge_redn_photo">
            <summary>
            Gets or sets the lodge_redn_photo.
            </summary>
            <value>
            The lodge_redn_photo.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lodge_redn_sucrose">
            <summary>
            Gets or sets the lodge_redn_sucrose.
            </summary>
            <value>
            The lodge_redn_sucrose.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lodge_redn_green_leaf">
            <summary>
            Gets or sets the lodge_redn_green_leaf.
            </summary>
            <value>
            The lodge_redn_green_leaf.
            </value>
        </member>
        <member name="F:Models.Sugarcane.g_ll_dep">
            <summary>
            The g_ll_dep
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_root_length">
            <summary>
            The g_root_length
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_crop_status">
            <summary>
            The g_crop_status
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_crop_cultivar">
            <summary>
            The g_crop_cultivar
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_plant_status_out_today">
            <summary>
            The g_plant_status_out_today
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sowing_depth">
            <summary>
            The g_sowing_depth
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_year">
            <summary>
            The g_year
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_day_of_year">
            <summary>
            The g_day_of_year
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_temp_stress_photo">
            <summary>
            The g_temp_stress_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_temp_stress_stalk">
            <summary>
            The g_temp_stress_stalk
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_swdef_expansion">
            <summary>
            The g_swdef_expansion
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_swdef_stalk">
            <summary>
            The g_swdef_stalk
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_swdef_photo">
            <summary>
            The g_swdef_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_swdef_pheno">
            <summary>
            The g_swdef_pheno
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_swdef_fixation">
            <summary>
            The g_swdef_fixation
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nfact_expansion">
            <summary>
            The g_nfact_expansion
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nfact_stalk">
            <summary>
            The g_nfact_stalk
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nfact_photo">
            <summary>
            The g_nfact_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nfact_pheno">
            <summary>
            The g_nfact_pheno
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lodge_redn_photo">
            <summary>
            The g_lodge_redn_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lodge_redn_sucrose">
            <summary>
            The g_lodge_redn_sucrose
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lodge_redn_green_leaf">
            <summary>
            The g_lodge_redn_green_leaf
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sucrose_fraction">
            <summary>
            The g_sucrose_fraction
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_oxdef_photo">
            <summary>
            The g_oxdef_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_cnd_photo">
            <summary>
            The g_cnd_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_cswd_photo">
            <summary>
            The g_cswd_photo
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_cswd_expansion">
            <summary>
            The g_cswd_expansion
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_cswd_pheno">
            <summary>
            The g_cswd_pheno
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_tt">
            <summary>
            The G_DLT_TT
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_tt_tot">
            <summary>
            The g_tt_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_phase_tt">
            <summary>
            The g_phase_tt
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_stage">
            <summary>
            The g_dlt_stage
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_current_stage">
            <summary>
            The g_current_stage
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_previous_stage">
            <summary>
            The g_previous_stage
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_days_tot">
            <summary>
            The g_days_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_canopy_height">
            <summary>
            The g_dlt_canopy_height
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_canopy_height">
            <summary>
            The g_canopy_height
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_phase_devel">
            <summary>
            The g_phase_devel
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_ratoon_no">
            <summary>
            The g_ratoon_no
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_plants">
            <summary>
            The g_plants
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants">
            <summary>
            The g_dlt_plants
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_initial_plant_density">
            <summary>
            The g_initial_plant_density
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_root_depth">
            <summary>
            The g_dlt_root_depth
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_root_depth">
            <summary>
            The g_root_depth
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lodge_flag">
            <summary>
            The g_lodge_flag
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_transpiration_tot">
            <summary>
            The g_transpiration_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_demand_tot">
            <summary>
            The g_n_demand_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_conc_act_stover_tot">
            <summary>
            The g_n_conc_act_stover_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lai_max">
            <summary>
            The g_lai_max
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_isdate">
            <summary>
            The g_isdate
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_plant_wc">
            <summary>
            The g_plant_wc
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plant_wc">
            <summary>
            The g_dlt_plant_wc
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_sw_dep">
            <summary>
            The g_dlt_sw_dep
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sw_demand">
            <summary>
            The g_sw_demand
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sw_demand_te">
            <summary>
            The g_sw_demand_te
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sw_avail_pot">
            <summary>
            The g_sw_avail_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sw_avail">
            <summary>
            The g_sw_avail
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sw_supply">
            <summary>
            The g_sw_supply
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_root_length">
            <summary>
            The g_dlt_root_length
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_root_length_senesced">
            <summary>
            The g_dlt_root_length_senesced
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants_death_drought">
            <summary>
            The g_dlt_plants_death_drought
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants_failure_leaf_sen">
            <summary>
            The g_dlt_plants_failure_leaf_sen
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants_failure_emergence">
            <summary>
            The g_dlt_plants_failure_emergence
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants_failure_germ">
            <summary>
            The g_dlt_plants_failure_germ
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_plants_death_lodging">
            <summary>
            The g_dlt_plants_death_lodging
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm">
            <summary>
            The G_DLT_DM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_green">
            <summary>
            The g_dlt_dm_green
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_senesced">
            <summary>
            The g_dlt_dm_senesced
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_realloc">
            <summary>
            The g_dlt_dm_realloc
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_detached">
            <summary>
            The g_dlt_dm_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_dead_detached">
            <summary>
            The g_dlt_dm_dead_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_green_retrans">
            <summary>
            The g_dlt_dm_green_retrans
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dm_dead">
            <summary>
            The g_dm_dead
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dm_green">
            <summary>
            The g_dm_green
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dm_senesced">
            <summary>
            The g_dm_senesced
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dm_plant_top_tot">
            <summary>
            The g_dm_plant_top_tot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_partition_xs">
            <summary>
            The g_partition_xs
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_pot_rue">
            <summary>
            The g_dlt_dm_pot_rue
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_pot_te">
            <summary>
            The g_dlt_dm_pot_te
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_dm_pot_rue_pot">
            <summary>
            The g_dlt_dm_pot_rue_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_radn_int">
            <summary>
            The g_radn_int
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_transp_eff">
            <summary>
            The g_transp_eff
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_min_sstem_sucrose">
            <summary>
            The g_min_sstem_sucrose
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_slai">
            <summary>
            The g_slai
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai">
            <summary>
            The g_dlt_slai
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_lai">
            <summary>
            The g_dlt_lai
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_lai_pot">
            <summary>
            The g_dlt_lai_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_lai_stressed">
            <summary>
            The g_dlt_lai_stressed
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_lai">
            <summary>
            The g_lai
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_tlai_dead">
            <summary>
            The g_tlai_dead
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai_detached">
            <summary>
            The g_dlt_slai_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_tlai_dead_detached">
            <summary>
            The g_dlt_tlai_dead_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai_age">
            <summary>
            The g_dlt_slai_age
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai_light">
            <summary>
            The g_dlt_slai_light
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai_water">
            <summary>
            The g_dlt_slai_water
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_slai_frost">
            <summary>
            The g_dlt_slai_frost
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_sla_min">
            <summary>
            The g_sla_min
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_leaf_no_zb">
            <summary>
            The g_leaf_no_zb
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_node_no_zb">
            <summary>
            The g_node_no_zb
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_node_no_dead_zb">
            <summary>
            The g_node_no_dead_zb
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_leaf_no">
            <summary>
            The g_dlt_leaf_no
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_node_no">
            <summary>
            The g_dlt_node_no
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_node_no_dead">
            <summary>
            The g_dlt_node_no_dead
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_leaf_area_zb">
            <summary>
            The g_leaf_area_zb
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_leaf_dm_zb">
            <summary>
            The g_leaf_dm_zb
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_node_no_detached_ob">
            <summary>
            The g_node_no_detached_ob
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_demand">
            <summary>
            The g_n_demand
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_green">
            <summary>
            The g_dlt_n_green
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_senesced">
            <summary>
            The g_dlt_n_senesced
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_realloc">
            <summary>
            The g_dlt_n_realloc
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_detached">
            <summary>
            The g_dlt_n_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_dead_detached">
            <summary>
            The g_dlt_n_dead_detached
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_dead">
            <summary>
            The g_n_dead
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_green">
            <summary>
            The g_n_green
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_senesced">
            <summary>
            The g_n_senesced
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_n_retrans">
            <summary>
            The g_dlt_n_retrans
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_no3gsm">
            <summary>
            The g_dlt_no3gsm
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_dlt_nh4gsm">
            <summary>
            The G_DLT_NH4GSM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_no3gsm">
            <summary>
            The g_no3gsm
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nh4gsm">
            <summary>
            The G_NH4GSM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_no3gsm_min">
            <summary>
            The g_no3gsm_min
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nh4gsm_min">
            <summary>
            The g_nh4gsm_min
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_no3gsm_diffn_pot">
            <summary>
            The g_no3gsm_diffn_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_no3gsm_mflow_avail">
            <summary>
            The g_no3gsm_mflow_avail
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_no3gsm_uptake_pot">
            <summary>
            The g_no3gsm_uptake_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_nh4gsm_uptake_pot">
            <summary>
            The g_nh4gsm_uptake_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_fix_pot">
            <summary>
            The g_n_fix_pot
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_conc_crit">
            <summary>
            The g_n_conc_crit
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g_n_conc_min">
            <summary>
            The g_n_conc_min
            </summary>
        </member>
        <member name="M:Models.Sugarcane.ZeroArray(System.Double[]@)">
            <summary>
            Zeroes the array.
            </summary>
            <param name="A">a.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_zero_globals">
            <summary>
            Sugar_zero_globalses this instance.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.sugar_zero_daily_variables">
            <summary>
            Sugar_zero_daily_variableses this instance.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.sugar_zero_variables">
            <summary>
            Sugar_zero_variableses this instance.
            </summary>
        </member>
        <member name="F:Models.Sugarcane.smm2m">
            <summary>
            The SMM2M
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sm2smm">
            <summary>
            The SM2SMM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.smm2sm">
            <summary>
            The SMM2SM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.kg2gm">
            <summary>
            The KG2GM
            </summary>
        </member>
        <member name="F:Models.Sugarcane.ha2sm">
            <summary>
            The ha2sm
            </summary>
        </member>
        <member name="F:Models.Sugarcane.fract2pcnt">
            <summary>
            The fract2pcnt
            </summary>
        </member>
        <member name="F:Models.Sugarcane.gm2kg">
            <summary>
            The GM2KG
            </summary>
        </member>
        <member name="F:Models.Sugarcane.sm2ha">
            <summary>
            The sm2ha
            </summary>
        </member>
        <member name="F:Models.Sugarcane.t2g">
            <summary>
            The T2G
            </summary>
        </member>
        <member name="F:Models.Sugarcane.g2t">
            <summary>
            The G2T
            </summary>
        </member>
        <member name="M:Models.Sugarcane.FindLayerNo_ob(System.Double)">
            <summary>
            Finds the layer no_ob.
            </summary>
            <param name="Depth">The depth.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.root_proportion(System.Int32,System.Double[],System.Double)">
            <summary>
            Root_proportions the specified layer_ob.
            </summary>
            <param name="Layer_ob">The layer_ob.</param>
            <param name="Dlayer">The dlayer.</param>
            <param name="RootDepth">The root depth.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.on_day_of(System.Int32,System.Double)">
            <summary>
            On_day_ofs the specified stage_no.
            </summary>
            <param name="stage_no">The stage_no.</param>
            <param name="current_stage">The current_stage.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.stage_is_between(System.Int32,System.Int32,System.Double)">
            <summary>
            Stage_is_betweens the specified start_ob.
            </summary>
            <param name="start_ob">The start_ob.</param>
            <param name="finish_ob">The finish_ob.</param>
            <param name="current_stage">The current_stage.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.linint_3hrly_temp(System.Double,System.Double,System.Double[],System.Double[])">
            <summary>
            Linint_3hrly_temps the specified i_tmax.
            </summary>
            <param name="i_tmax">The i_tmax.</param>
            <param name="i_tmin">The i_tmin.</param>
            <param name="i_temps">The i_temps.</param>
            <param name="i_y">The i_y.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.temp_3hr(System.Double,System.Double,System.Int32)">
            <summary>
            Temp_3hrs the specified i_tmax.
            </summary>
            <param name="i_tmax">The i_tmax.</param>
            <param name="i_tmin">The i_tmin.</param>
            <param name="i_period">The i_period.</param>
            <returns></returns>
            <exception cref="T:Models.Core.ApsimXException">
             3 hr. number + i_period +  is below 1
            or
             3 hr. number + i_period +  is above 8
            </exception>
        </member>
        <member name="M:Models.Sugarcane.accumulate_ob(System.Double,System.Double[]@,System.Double,System.Double)">
            <summary>
            Accumulate_obs the specified i_value.
            </summary>
            <param name="i_value">The i_value.</param>
            <param name="i_array_zb">The i_array_zb.</param>
            <param name="i_index_ob">The i_index_ob.</param>
            <param name="i_dlt_index">The i_dlt_index.</param>
        </member>
        <member name="M:Models.Sugarcane.accumulate_zb(System.Double,System.Double[]@,System.Double,System.Double)">
            <summary>
            Accumulate_zbs the specified i_value.
            </summary>
            <param name="i_value">The i_value.</param>
            <param name="io_array_zb">The io_array_zb.</param>
            <param name="i_index_zb">The i_index_zb.</param>
            <param name="i_dlt_index">The i_dlt_index.</param>
        </member>
        <member name="M:Models.Sugarcane.error_margin(System.Double)">
            <summary>
            Error_margins the specified variable.
            </summary>
            <param name="Variable">The variable.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.get_cumulative_index_real(System.Double,System.Double[])">
            <summary>
            Get_cumulative_index_reals the specified cum_sum.
            </summary>
            <param name="cum_sum">The cum_sum.</param>
            <param name="A">a.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.count_of_real_vals(System.Double[],System.Int32)">
            <summary>
            Count_of_real_valses the specified a.
            </summary>
            <param name="A">a.</param>
            <param name="StopLayer_ob">The stop layer_ob.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.AddArray(System.Double[],System.Double[]@,System.Int32)">
            <summary>
            Adds the array.
            </summary>
            <param name="AddThis_zb">The add this_zb.</param>
            <param name="ToThis_zb">To this_zb.</param>
            <param name="NumElemToAdd_ob">The number elem to add_ob.</param>
        </member>
        <member name="M:Models.Sugarcane.SubtractArray(System.Double[],System.Double[]@,System.Int32)">
            <summary>
            Subtracts the array.
            </summary>
            <param name="SubThis_zb">The sub this_zb.</param>
            <param name="FromThis_zb">From this_zb.</param>
            <param name="NumElemToSub_ob">The number elem to sub_ob.</param>
        </member>
        <member name="M:Models.Sugarcane.SumArray(System.Double[],System.Int32)">
            <summary>
            Sums the array.
            </summary>
            <param name="A">a.</param>
            <param name="StopLayer_ob">The stop layer_ob.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sum_between(System.Int32,System.Int32,System.Double[])">
            <summary>
            Sum_betweens the specified start_ob.
            </summary>
            <param name="start_ob">The start_ob.</param>
            <param name="finish_ob">The finish_ob.</param>
            <param name="array_zb">The array_zb.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sum_between_zb(System.Int32,System.Int32,System.Double[])">
            <summary>
            Sum_between_zbs the specified start_zb.
            </summary>
            <param name="start_zb">The start_zb.</param>
            <param name="finish_zb">The finish_zb.</param>
            <param name="array_zb">The array_zb.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.fill_real_array(System.Double[]@,System.Double,System.Int32)">
            <summary>
            Fill_real_arrays the specified a_zb.
            </summary>
            <param name="A_zb">The a_zb.</param>
            <param name="Value">The value.</param>
            <param name="StopLayer_ob">The stop layer_ob.</param>
        </member>
        <member name="M:Models.Sugarcane.l_bound(System.Double,System.Double)">
            <summary>
            L_bounds the specified a.
            </summary>
            <param name="A">a.</param>
            <param name="MinVal">The minimum value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.u_bound(System.Double,System.Double)">
            <summary>
            U_bounds the specified a.
            </summary>
            <param name="A">a.</param>
            <param name="MaxVal">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.bound(System.Double,System.Double,System.Double)">
            <summary>
            Bounds the specified a.
            </summary>
            <param name="A">a.</param>
            <param name="MinVal">The minimum value.</param>
            <param name="MaxVal">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.max(System.Double[])">
            <summary>
            Allows any number of parameters (unlike Math.Max())
            </summary>
            <param name="A">a.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.min(System.Double[])">
            <summary>
            Allows any number of parameters (unlike Math.Min())
            </summary>
            <param name="A">a.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.bound_check_real_array(System.Double[],System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Bound_check_real_arrays the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="lower_bound">The lower_bound.</param>
            <param name="upper_bound">The upper_bound.</param>
            <param name="array_name">The array_name.</param>
            <param name="array_size">The array_size.</param>
        </member>
        <member name="M:Models.Sugarcane.bound_check_integer_var(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Bound_check_integer_vars the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <param name="vname">The vname.</param>
        </member>
        <member name="M:Models.Sugarcane.bound_check_real_var(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Bound_check_real_vars the specified variable.
            </summary>
            <param name="Variable">The variable.</param>
            <param name="LowerBound">The lower bound.</param>
            <param name="UpperBound">The upper bound.</param>
            <param name="VariableName">Name of the variable.</param>
        </member>
        <member name="M:Models.Sugarcane.zb(System.Int32)">
            <summary>
            Returns Zero Based Index from One Based Index
            </summary>
            <param name="OneBased">The one based.</param>
            <returns>
            Zero Based Index
            </returns>
        </member>
        <member name="M:Models.Sugarcane.ob(System.Int32)">
            <summary>
            Returns One Based Index from Zero Based Index
            </summary>
            <param name="ZeroBased">The zero based.</param>
            <returns>
            One Based Index
            </returns>
        </member>
        <member name="M:Models.Sugarcane.zb_d(System.Double)">
            <summary>
            ZB_Ds the specified one based.
            </summary>
            <param name="OneBased">The one based.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_nfact(System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double@)">
            <summary>
            Sugar_nfacts the specified i_dm_green.
            </summary>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_N_conc_crit">The i_ n_conc_crit.</param>
            <param name="i_N_conc_min">The i_ n_conc_min.</param>
            <param name="i_N_green">The i_ n_green.</param>
            <param name="c_k_nfact">The c_k_nfact.</param>
            <param name="o_nfact">The o_nfact.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_temperature_stress(System.Int32,System.Double[],System.Double[],System.Double,System.Double,System.Double@)">
            <summary>
            Sugar_temperature_stresses the specified c_num_ave_temp.
            </summary>
            <param name="c_num_ave_temp">The c_num_ave_temp.</param>
            <param name="c_x_ave_temp">The c_x_ave_temp.</param>
            <param name="c_y_stress_photo">The c_y_stress_photo.</param>
            <param name="i_maxt">The i_maxt.</param>
            <param name="i_mint">The i_mint.</param>
            <param name="o_tfac">The o_tfac.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_radn_int(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_radn_ints the specified c_extinction_coef.
            </summary>
            <param name="c_extinction_coef">The c_extinction_coef.</param>
            <param name="i_fr_intc_radn">The i_fr_intc_radn.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_radn">The i_radn.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_transp_eff1(System.Double,System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Cproc_transp_eff1s the specified c_svp_fract.
            </summary>
            <param name="c_svp_fract">The c_svp_fract.</param>
            <param name="c_transp_eff_cf">The c_transp_eff_cf.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_maxt">The i_maxt.</param>
            <param name="i_mint">The i_mint.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.vapour_pressure_deficit(System.Double,System.Double,System.Double)">
            <summary>
            Vapour_pressure_deficits the specified c_svp_fract.
            </summary>
            <param name="c_svp_fract">The c_svp_fract.</param>
            <param name="i_maxt">The i_maxt.</param>
            <param name="i_mint">The i_mint.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.svp(System.Double)">
            <summary>
            SVPs the specified temp_arg.
            </summary>
            <param name="temp_arg">The temp_arg.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_water_demand(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_water_demands the specified i_dlt_dm_pot_rue.
            </summary>
            <param name="i_dlt_dm_pot_rue">The i_dlt_dm_pot_rue.</param>
            <param name="i_transp_eff">The i_transp_eff.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_eo">The i_eo.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_sw_demand_bound(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Cproc_sw_demand_bounds the specified i_sw_demand_unbounded.
            </summary>
            <param name="i_sw_demand_unbounded">The i_sw_demand_unbounded.</param>
            <param name="i_eo_crop_factor">The i_eo_crop_factor.</param>
            <param name="i_eo">The i_eo.</param>
            <param name="i_cover_green">The i_cover_green.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_nit_demand_est(System.Double[],System.Double,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Sugar_nit_demand_ests the specified i_dm_green.
            </summary>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dlt_dm_pot_rue_pot">The i_dlt_dm_pot_rue_pot.</param>
            <param name="i_N_conc_crit">The i_ n_conc_crit.</param>
            <param name="i_N_green">The i_ n_green.</param>
            <param name="o_N_demand">The o_ n_demand.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_demand(System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Sugar_s the n_demand.
            </summary>
            <param name="i_dlt_dm_green_pot">The i_dlt_dm_green_pot.</param>
            <param name="i_dlt_dm_pot_rue_pot">The i_dlt_dm_pot_rue_pot.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_N_conc_crit">The i_ n_conc_crit.</param>
            <param name="i_N_green">The i_ n_green.</param>
            <param name="o_N_demand">The o_ n_demand.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_root_depth_growth(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double@,System.Double)">
            <summary>
            Sugar_root_depth_growthes the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="c_x_sw_ratio">The c_x_sw_ratio.</param>
            <param name="c_y_sw_fac_root">The c_y_sw_fac_root.</param>
            <param name="c_x_afps">The c_x_afps.</param>
            <param name="c_y_afps_fac">The c_y_afps_fac.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="c_root_depth_rate">The c_root_depth_rate.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_xf">The i_xf.</param>
            <param name="o_dlt_root_depth">The o_dlt_root_depth.</param>
            <param name="i_root_depth">The i_root_depth.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_sw_avail_fac(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Crop_sw_avail_facs the specified c_x_sw_ratio.
            </summary>
            <param name="c_x_sw_ratio">The c_x_sw_ratio.</param>
            <param name="c_y_sw_fac_root">The c_y_sw_fac_root.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="i_layer_ob">The i_layer_ob.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_afps_fac(System.Int32)">
            <summary>
            Sugar_afps_facs the specified i_layer_ob.
            </summary>
            <param name="i_layer_ob">The i_layer_ob.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_root_depth_increase(System.Double[],System.Double,System.Double[],System.Double,System.Double,System.Double[])">
            <summary>
            Crop_root_depth_increases the specified c_root_depth_rate.
            </summary>
            <param name="c_root_depth_rate">The c_root_depth_rate.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_avail_fac_deepest_layer_ob">The i_sw_avail_fac_deepest_layer_ob.</param>
            <param name="i_xf">The i_xf.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_init_root_depth(System.Double[],System.Double[],System.Double,System.Double@)">
            <summary>
            Sugar_init_root_depthes the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_dlt_root_depth">The o_dlt_root_depth.</param>
        </member>
        <member name="M:Models.Sugarcane.GetSupplyFromSWIM">
            <summary>
            Gets the supply from swim.
            </summary>
            <exception cref="T:Models.Core.ApsimXException"> Sugar can't get 'supply' from  SWIM yet</exception>
        </member>
        <member name="M:Models.Sugarcane.cproc_sw_supply1(System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Cproc_sw_supply1s the specified C_SW_LB.
            </summary>
            <param name="c_sw_lb">The C_SW_LB.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_kl">The i_kl.</param>
            <param name="o_sw_avail">The o_sw_avail.</param>
            <param name="o_sw_avail_pot">The o_sw_avail_pot.</param>
            <param name="o_sw_supply">The o_sw_supply.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_check_sw(System.Double,System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Crop_check_sws the specified c_minsw.
            </summary>
            <param name="c_minsw">The c_minsw.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_sw_avail_pot(System.Double[],System.Double[],System.Double,System.Double[],System.Double[]@)">
            <summary>
            Crop_sw_avail_pots the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="o_sw_avail_pot">The o_sw_avail_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_sw_avail(System.Double[],System.Double,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Crop_sw_avails the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="o_sw_avail">The o_sw_avail.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_sw_supply(System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Crop_sw_supplies the specified idlayer.
            </summary>
            <param name="idlayer">The idlayer.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_kl">The i_kl.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="o_sw_supply">The o_sw_supply.</param>
        </member>
        <member name="M:Models.Sugarcane.GetUptakeFromSWIM">
            <summary>
            Gets the uptake from swim.
            </summary>
            <exception cref="T:Models.Core.ApsimXException"> Sugar can't get 'uptake' from SWIM yet</exception>
        </member>
        <member name="M:Models.Sugarcane.cproc_sw_uptake1(System.Double[],System.Double,System.Double,System.Double[],System.Double[]@)">
            <summary>
            Cproc_sw_uptake1s the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_demand">The i_sw_demand.</param>
            <param name="i_sw_supply">The i_sw_supply.</param>
            <param name="o_dlt_sw_dep">The o_dlt_sw_dep.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_swdef_expansion(System.Double[],System.Double[],System.Double,System.Double,System.Double[],System.Double@)">
            <summary>
            Crop_swdef_expansions the specified c_x_sw_demand_ratio.
            </summary>
            <param name="c_x_sw_demand_ratio">The c_x_sw_demand_ratio.</param>
            <param name="c_y_swdef_leaf">The c_y_swdef_leaf.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_demand">The i_sw_demand.</param>
            <param name="i_sw_supply">The i_sw_supply.</param>
            <param name="o_swdef">The o_swdef.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_swdef_demand_ratio(System.Double[],System.Double[],System.Double,System.Double,System.Double[],System.Double@)">
            <summary>
            Sugar_swdef_demand_ratioes the specified c_x_sw_demand_ratio.
            </summary>
            <param name="c_x_sw_demand_ratio">The c_x_sw_demand_ratio.</param>
            <param name="c_y_swdef_leaf">The c_y_swdef_leaf.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_demand">The i_sw_demand.</param>
            <param name="i_sw_supply">The i_sw_supply.</param>
            <param name="o_swdef">The o_swdef.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_swdef_pheno(System.Double[],System.Double[],System.Double,System.Double[],System.Double[],System.Double@)">
            <summary>
            Crop_swdef_phenoes the specified c_x_sw_avail_ratio.
            </summary>
            <param name="c_x_sw_avail_ratio">The c_x_sw_avail_ratio.</param>
            <param name="c_y_swdef_pheno">The c_y_swdef_pheno.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_avail">The i_sw_avail.</param>
            <param name="i_sw_avail_pot">The i_sw_avail_pot.</param>
            <param name="o_swdef">The o_swdef.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_swdef_photo(System.Double,System.Double,System.Double[],System.Double@)">
            <summary>
            Crop_swdef_photoes the specified i_root_depth.
            </summary>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_demand">The i_sw_demand.</param>
            <param name="i_sw_supply">The i_sw_supply.</param>
            <param name="o_swdef">The o_swdef.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_min_sstem_sucrose(System.Double@)">
            <summary>
            Sugar_min_sstem_sucroses the specified io_min_sstem_sucrose.
            </summary>
            <param name="io_min_sstem_sucrose">The io_min_sstem_sucrose.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_phen_init(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[]@)">
            <summary>
            Sugar_phen_inits the specified c_shoot_lag.
            </summary>
            <param name="c_shoot_lag">The c_shoot_lag.</param>
            <param name="c_shoot_rate">The c_shoot_rate.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_sowing_depth">The i_sowing_depth.</param>
            <param name="i_ratoon_no">The i_ratoon_no.</param>
            <param name="c_tt_begcane_to_flowering">The c_tt_begcane_to_flowering.</param>
            <param name="c_tt_emerg_to_begcane">The c_tt_emerg_to_begcane.</param>
            <param name="c_tt_flowering_to_crop_end">The c_tt_flowering_to_crop_end.</param>
            <param name="io_phase_tt">The io_phase_tt.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_thermal_time(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Crop_thermal_times the specified c_x_temp.
            </summary>
            <param name="c_x_temp">The c_x_temp.</param>
            <param name="c_y_tt">The c_y_tt.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_maxt">The i_maxt.</param>
            <param name="i_mint">The i_mint.</param>
            <param name="i_start_stress_stage">The i_start_stress_stage.</param>
            <param name="i_end_stress_stage">The i_end_stress_stage.</param>
            <param name="i_nfact_pheno">The i_nfact_pheno.</param>
            <param name="i_swdef_pheno">The i_swdef_pheno.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_phase_devel(System.Int32,System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Int32,System.Double,System.Double[],System.Double[],System.Int32,System.Double,System.Double[],System.Double[],System.Double[],System.Double@,System.Double[],System.Double[])">
            <summary>
            Crop_phase_devels the specified i_sowing_stage.
            </summary>
            <param name="i_sowing_stage">The i_sowing_stage.</param>
            <param name="i_germ_stage">The i_germ_stage.</param>
            <param name="i_end_development_stage">The i_end_development_stage.</param>
            <param name="c_pesw_germ">The c_pesw_germ.</param>
            <param name="c_fasw_emerg">The c_fasw_emerg.</param>
            <param name="c_rel_emerg_rate">The c_rel_emerg_rate.</param>
            <param name="c_num_fasw_emerg">The c_num_fasw_emerg.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_days_tot">The i_days_tot.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <param name="i_sowing_depth">The i_sowing_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="io_dlt_tt">The io_dlt_tt.</param>
            <param name="i_phase_tt">The i_phase_tt.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_germination(System.Int32,System.Int32,System.Double,System.Double,System.Double[],System.Double,System.Double[],System.Double[])">
            <summary>
            Crop_germinations the specified i_sowing_stage.
            </summary>
            <param name="i_sowing_stage">The i_sowing_stage.</param>
            <param name="i_germ_stage">The i_germ_stage.</param>
            <param name="c_pesw_germ">The c_pesw_germ.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_sowing_depth">The i_sowing_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_germ_dlt_tt(System.Double[],System.Double[],System.Double,System.Int32,System.Double,System.Double[],System.Double[],System.Double[],System.Double@)">
            <summary>
            Crop_germ_dlt_tts the specified c_fasw_emerg.
            </summary>
            <param name="c_fasw_emerg">The c_fasw_emerg.</param>
            <param name="c_rel_emerg_rate">The c_rel_emerg_rate.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_germ_phase">The i_germ_phase.</param>
            <param name="i_sowing_depth">The i_sowing_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="io_dlt_tt">The io_dlt_tt.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_phase_tt(System.Double,System.Double[],System.Double[],System.Double)">
            <summary>
            Crop_phase_tts the specified i_dlt_tt.
            </summary>
            <param name="i_dlt_tt">The i_dlt_tt.</param>
            <param name="i_phase_tt">The i_phase_tt.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="i_stage_no">The i_stage_no.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_devel(System.Double,System.Int32,System.Double,System.Double@,System.Double@)">
            <summary>
            Crop_devels the specified i_current_stage.
            </summary>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_max_stage">The i_max_stage.</param>
            <param name="i_phase_devel">The i_phase_devel.</param>
            <param name="o_dlt_stage">The o_dlt_stage.</param>
            <param name="io_current_stage">The io_current_stage.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_canopy_height(System.Double,System.Double[],System.Double[],System.Double[],System.Double,System.Int32)">
            <summary>
            Cproc_canopy_heights the specified i_canopy_height.
            </summary>
            <param name="i_canopy_height">The i_canopy_height.</param>
            <param name="i_x_stem_wt">The i_x_stem_wt.</param>
            <param name="i_y_height">The i_y_height.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_stem">The i_stem.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_leaf_no_init1(System.Double,System.Double,System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Cproc_leaf_no_init1s the specified c_leaf_no_at_emerg.
            </summary>
            <param name="c_leaf_no_at_emerg">The c_leaf_no_at_emerg.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_emerg">The i_emerg.</param>
            <param name="o_leaf_no_zb">The o_leaf_no_zb.</param>
            <param name="o_node_no_zb">The o_node_no_zb.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_leaf_no_pot1(System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double[],System.Double@,System.Double@)">
            <summary>
            Cproc_leaf_no_pot1s the specified c_x_node_no_app.
            </summary>
            <param name="c_x_node_no_app">The c_x_node_no_app.</param>
            <param name="c_y_node_app_rate">The c_y_node_app_rate.</param>
            <param name="c_x_node_no_leaf">The c_x_node_no_leaf.</param>
            <param name="c_y_leaves_per_node">The c_y_leaves_per_node.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_start_node_app">The i_start_node_app.</param>
            <param name="i_end_node_app">The i_end_node_app.</param>
            <param name="i_emerg">The i_emerg.</param>
            <param name="i_dlt_tt">The i_dlt_tt.</param>
            <param name="i_node_no_zb">The i_node_no_zb.</param>
            <param name="o_dlt_leaf_no_pot">The o_dlt_leaf_no_pot.</param>
            <param name="o_dlt_node_no_pot">The o_dlt_node_no_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_area_devel(System.Double,System.Double,System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Sugar_leaf_area_devels the specified c_leaf_no_correction.
            </summary>
            <param name="c_leaf_no_correction">The c_leaf_no_correction.</param>
            <param name="i_dlt_leaf_no">The i_dlt_leaf_no.</param>
            <param name="i_leaf_no_zb">The i_leaf_no_zb.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="c_leaf_size">The c_leaf_size.</param>
            <param name="c_leaf_size_no">The c_leaf_size_no.</param>
            <param name="c_tillerf_leaf_size">The c_tillerf_leaf_size.</param>
            <param name="c_tillerf_leaf_size_no">The c_tillerf_leaf_size_no.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_size(System.Double[],System.Double[],System.Double[],System.Double[],System.Double)">
            <summary>
            Sugar_leaf_sizes the specified c_leaf_size.
            </summary>
            <param name="c_leaf_size">The c_leaf_size.</param>
            <param name="c_leaf_size_no">The c_leaf_size_no.</param>
            <param name="c_tillerf_leaf_size">The c_tillerf_leaf_size.</param>
            <param name="c_tillerf_leaf_size_no">The c_tillerf_leaf_size_no.</param>
            <param name="i_leaf_no_ob">The i_leaf_no_ob.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_bio_water1(System.Double,System.Double[],System.Double)">
            <summary>
            Cproc_bio_water1s the specified i_root_depth.
            </summary>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_supply">The i_sw_supply.</param>
            <param name="i_transp_eff">The i_transp_eff.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_oxdef_photo1(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double)">
            <summary>
            Crop_oxdef_photo1s the specified c_oxdef_photo.
            </summary>
            <param name="c_oxdef_photo">The c_oxdef_photo.</param>
            <param name="c_oxdef_photo_rtfr">The c_oxdef_photo_rtfr.</param>
            <param name="i_ll15_dep">The i_ll15_dep.</param>
            <param name="i_sat_dep">The i_sat_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_root_dist(System.Double[],System.Double[],System.Double,System.Double[]@,System.Double)">
            <summary>
            Crop_root_dists the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_root_array">The o_root_array.</param>
            <param name="i_root_sum">The i_root_sum.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_dm_pot_rue(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_dm_pot_rues the specified c_rue.
            </summary>
            <param name="c_rue">The c_rue.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_radn_int">The i_radn_int.</param>
            <param name="i_nfact_photo">The i_nfact_photo.</param>
            <param name="i_temp_stress_photo">The i_temp_stress_photo.</param>
            <param name="i_oxdef_photo">The i_oxdef_photo.</param>
            <param name="i_lodge_redn_photo">The i_lodge_redn_photo.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_rue_reduction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_rue_reductions the specified i_nfact_photo.
            </summary>
            <param name="i_nfact_photo">The i_nfact_photo.</param>
            <param name="i_temp_stress_photo">The i_temp_stress_photo.</param>
            <param name="i_oxdef_photo">The i_oxdef_photo.</param>
            <param name="i_lodge_redn_photo">The i_lodge_redn_photo.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_dm_pot_rue_pot(System.Double[],System.Double,System.Double)">
            <summary>
            Sugar_dm_pot_rue_pots the specified c_rue.
            </summary>
            <param name="c_rue">The c_rue.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_radn_int">The i_radn_int.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_dm_init(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double,System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Sugar_dm_inits the specified c_dm_cabbage_init.
            </summary>
            <param name="c_dm_cabbage_init">The c_dm_cabbage_init.</param>
            <param name="c_dm_leaf_init">The c_dm_leaf_init.</param>
            <param name="c_dm_sstem_init">The c_dm_sstem_init.</param>
            <param name="c_dm_sucrose_init">The c_dm_sucrose_init.</param>
            <param name="c_specific_root_length">The c_specific_root_length.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="io_dm_green">The io_dm_green.</param>
            <param name="o_leaf_dm">The o_leaf_dm.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_sucrose_fraction(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_sucrose_fractions the specified c_stress_factor_stalk.
            </summary>
            <param name="c_stress_factor_stalk">The c_stress_factor_stalk.</param>
            <param name="c_sucrose_fraction_stalk">The c_sucrose_fraction_stalk.</param>
            <param name="i_swdef_stalk">The i_swdef_stalk.</param>
            <param name="i_nfact_stalk">The i_nfact_stalk.</param>
            <param name="i_temp_stress_stalk">The i_temp_stress_stalk.</param>
            <param name="i_lodge_redn_sucrose">The i_lodge_redn_sucrose.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_dm_partition_rules(System.Double,System.Double,System.Double,System.Double[],System.Double,System.Double,System.Double[],System.Double,System.Double,System.Double[],System.Double,System.Double,System.Double[]@,System.Double@)">
            <summary>
            Sugar_dm_partition_ruleses the specified c_cane_fraction.
            </summary>
            <param name="c_cane_fraction">The c_cane_fraction.</param>
            <param name="c_leaf_cabbage_ratio">The c_leaf_cabbage_ratio.</param>
            <param name="i_min_sstem_sucrose">The i_min_sstem_sucrose.</param>
            <param name="c_ratio_root_shoot">The c_ratio_root_shoot.</param>
            <param name="c_sucrose_delay">The c_sucrose_delay.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_sla_min">The i_sla_min.</param>
            <param name="i_sucrose_fraction">The i_sucrose_fraction.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="i_dlt_dm">The i_dlt_dm.</param>
            <param name="i_dlt_lai_pot">The i_dlt_lai_pot.</param>
            <param name="o_dlt_dm_green">The o_dlt_dm_green.</param>
            <param name="o_partition_xs">The o_partition_xs.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_area(System.Double[],System.Double,System.Double,System.Double[],System.Double[],System.Double[])">
            <summary>
            Sugar_leaf_areas the specified i_dlt_dm_green.
            </summary>
            <param name="i_dlt_dm_green">The i_dlt_dm_green.</param>
            <param name="i_dlt_lai_stressed">The i_dlt_lai_stressed.</param>
            <param name="i_dlt_leaf_no">The i_dlt_leaf_no.</param>
            <param name="i_leaf_no_zb">The i_leaf_no_zb.</param>
            <param name="c_sla_lfno">The c_sla_lfno.</param>
            <param name="c_sla_max">The c_sla_max.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_root_length_growth1(System.Double[]@,System.Double,System.Double[],System.Double,System.Double,System.Double,System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Cproc_root_length_growth1s the specified o_dlt_root_length.
            </summary>
            <param name="o_dlt_root_length">The o_dlt_root_length.</param>
            <param name="c_specific_root_length">The c_specific_root_length.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dlt_root_wt">The i_dlt_root_wt.</param>
            <param name="i_dlt_root_depth">The i_dlt_root_depth.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_xf">The i_xf.</param>
            <param name="c_x_sw_ratio">The c_x_sw_ratio.</param>
            <param name="c_y_sw_fac_root">The c_y_sw_fac_root.</param>
            <param name="c_x_plant_rld">The c_x_plant_rld.</param>
            <param name="c_y_rel_root_rate">The c_y_rel_root_rate.</param>
            <param name="i_dul_dep">The i_dul_dep.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <exception cref="T:Models.Core.ApsimXException">Too many layers for crop routines</exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_death_grass(System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[])">
            <summary>
            Sugar_leaf_death_grasses the specified c_green_leaf_no.
            </summary>
            <param name="c_green_leaf_no">The c_green_leaf_no.</param>
            <param name="i_lodge_redn_green_leaf">The i_lodge_redn_green_leaf.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_dlt_leaf_no">The i_dlt_leaf_no.</param>
            <param name="i_leaf_no">The i_leaf_no.</param>
            <param name="i_node_no_dead">The i_node_no_dead.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_area_sen_age0(System.Double,System.Double,System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sugar_leaf_area_sen_age0s the specified i_dlt_node_no_dead.
            </summary>
            <param name="i_dlt_node_no_dead">The i_dlt_node_no_dead.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_leaf_area_zb">The i_leaf_area_zb.</param>
            <param name="i_node_no_dead_zb">The i_node_no_dead_zb.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_slai">The i_slai.</param>
            <param name="i_node_no_detached_ob">The i_node_no_detached_ob.</param>
            <param name="c_leaf_no_at_emerg">The c_leaf_no_at_emerg.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_leaf_area_sen_water1(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Crop_leaf_area_sen_water1s the specified i_sen_rate_water.
            </summary>
            <param name="i_sen_rate_water">The i_sen_rate_water.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_swdef_photo">The i_swdef_photo.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_min_tpla">The i_min_tpla.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_leaf_area_sen_light1(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Crop_leaf_area_sen_light1s the specified i_lai_sen_light.
            </summary>
            <param name="i_lai_sen_light">The i_lai_sen_light.</param>
            <param name="i_sen_light_slope">The i_sen_light_slope.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_min_tpla">The i_min_tpla.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.crop_leaf_area_sen_frost1(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Crop_leaf_area_sen_frost1s the specified i_frost_temp.
            </summary>
            <param name="i_frost_temp">The i_frost_temp.</param>
            <param name="i_frost_fraction">The i_frost_fraction.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_mint">The i_mint.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_min_tpla">The i_min_tpla.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_dm_senescence(System.Double,System.Double,System.Double,System.Double[],System.Double,System.Double,System.Double[],System.Double[],System.Double,System.Double[],System.Double,System.Double,System.Double[],System.Double[]@)">
            <summary>
            Sugar_dm_senescences the specified c_dm_root_sen_frac.
            </summary>
            <param name="c_dm_root_sen_frac">The c_dm_root_sen_frac.</param>
            <param name="c_leaf_cabbage_ratio">The c_leaf_cabbage_ratio.</param>
            <param name="c_cabbage_sheath_fr">The c_cabbage_sheath_fr.</param>
            <param name="i_dlt_dm_green">The i_dlt_dm_green.</param>
            <param name="i_dlt_lai">The i_dlt_lai.</param>
            <param name="i_dlt_slai">The i_dlt_slai.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dm_senesced">The i_dm_senesced.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_leaf_dm">The i_leaf_dm.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_slai">The i_slai.</param>
            <param name="i_leaf_area">The i_leaf_area.</param>
            <param name="o_dlt_dm_senesced">The o_dlt_dm_senesced.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_leaf_no_from_lai(System.Double[],System.Double,System.Double)">
            <summary>
            Sugar_leaf_no_from_lais the specified i_leaf_area.
            </summary>
            <param name="i_leaf_area">The i_leaf_area.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_lai">The i_lai.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.cproc_root_length_senescence1(System.Double,System.Double[],System.Double,System.Double[],System.Double,System.Double[]@)">
            <summary>
            Cproc_root_length_senescence1s the specified c_specific_root_length.
            </summary>
            <param name="c_specific_root_length">The c_specific_root_length.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dlt_root_dm_senesced">The i_dlt_root_dm_senesced.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_dlt_root_length_senesced">The o_dlt_root_length_senesced.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_retranslocate(System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Sugar_s the n_retranslocate.
            </summary>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_n_conc_min">The i_n_conc_min.</param>
            <param name="i_n_green">The i_n_green.</param>
            <param name="o_dlt_N_retrans">The o_dlt_ n_retrans.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_retrans_avail(System.Double[],System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Sugar_s the n_retrans_avail.
            </summary>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_N_conc_min">The i_ n_conc_min.</param>
            <param name="i_N_green">The i_ n_green.</param>
            <param name="o_N_avail">The o_ n_avail.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_nit_supply(System.Int32)">
            <summary>
            Sugar_nit_supplies the specified i_option.
            </summary>
            <param name="i_option">The i_option.</param>
            <exception cref="T:Models.Core.ApsimXException">Invalid template option</exception>
        </member>
        <member name="M:Models.Sugarcane.cproc_n_supply2(System.Double[],System.Int32,System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[]@,System.Double[],System.Double[],System.Double[]@,System.Double,System.Double[],System.Double,System.Double,System.Double@)">
            <summary>
            Cproc_n_supply2s the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <param name="i_dlt_sw_dep">The i_dlt_sw_dep.</param>
            <param name="i_no3gsm">The i_no3gsm.</param>
            <param name="i_no3gsm_min">The i_no3gsm_min.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="o_NO3gsm_mflow_avail">The o_ n o3gsm_mflow_avail.</param>
            <param name="i_sw_avail">The i_sw_avail.</param>
            <param name="i_sw_avail_pot">The i_sw_avail_pot.</param>
            <param name="o_no3gsm_diffn_pot">The o_no3gsm_diffn_pot.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="c_n_fix_rate">The c_n_fix_rate.</param>
            <param name="i_fixation_determinant">The i_fixation_determinant.</param>
            <param name="i_swdef_fixation">The i_swdef_fixation.</param>
            <param name="o_n_fix_pot">The o_n_fix_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_N_mass_flow1(System.Int32,System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[]@)">
            <summary>
            Crop_s the n_mass_flow1.
            </summary>
            <param name="i_num_layer">The i_num_layer.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dlt_sw_dep">The i_dlt_sw_dep.</param>
            <param name="i_no3gsm">The i_no3gsm.</param>
            <param name="i_no3gsm_min">The i_no3gsm_min.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="o_no3gsm_mflow_pot">The o_no3gsm_mflow_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_N_diffusion1(System.Int32,System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Crop_s the n_diffusion1.
            </summary>
            <param name="i_num_layer">The i_num_layer.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_no3gsm">The i_no3gsm.</param>
            <param name="i_no3gsm_min">The i_no3gsm_min.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_avail">The i_sw_avail.</param>
            <param name="i_sw_avail_pot">The i_sw_avail_pot.</param>
            <param name="o_no3gsm_diffn_pot">The o_no3gsm_diffn_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_N_fixation_pot1(System.Double,System.Double[],System.Double,System.Double,System.Double@)">
            <summary>
            Crop_s the n_fixation_pot1.
            </summary>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="c_n_fix_rate">The c_n_fix_rate.</param>
            <param name="i_fixation_determinant">The i_fixation_determinant.</param>
            <param name="i_swdef_fixation">The i_swdef_fixation.</param>
            <param name="o_n_fix_pot">The o_n_fix_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_n_supply4(System.Double[],System.Double[],System.Int32,System.Double[],System.Double[],System.Double[]@,System.Double[],System.Double[],System.Double[]@,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Double,System.Double[],System.Double,System.Double,System.Double@)">
            <summary>
            Cproc_n_supply4s the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_bd">The i_bd.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <param name="i_no3gsm">The i_no3gsm.</param>
            <param name="i_no3gsm_min">The i_no3gsm_min.</param>
            <param name="o_no3gsm_uptake_pot">The o_no3gsm_uptake_pot.</param>
            <param name="i_nh4gsm">The i_nh4gsm.</param>
            <param name="i_nh4gsm_min">The i_nh4gsm_min.</param>
            <param name="o_nh4gsm_uptake_pot">The o_nh4gsm_uptake_pot.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="c_n_stress_start_stage">The c_n_stress_start_stage.</param>
            <param name="c_kno3">The c_kno3.</param>
            <param name="c_no3ppm_min">The c_no3ppm_min.</param>
            <param name="c_knh4">The C_KNH4.</param>
            <param name="c_nh4ppm_min">The c_nh4ppm_min.</param>
            <param name="c_total_n_uptake_max">The c_total_n_uptake_max.</param>
            <param name="i_sw_avail_pot">The i_sw_avail_pot.</param>
            <param name="i_sw_avail">The i_sw_avail.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="c_n_fix_rate">The c_n_fix_rate.</param>
            <param name="i_fixation_determinant">The i_fixation_determinant.</param>
            <param name="i_swdef_fixation">The i_swdef_fixation.</param>
            <param name="o_n_fix_pot">The o_n_fix_pot.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_init(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Sugar_s the n_init.
            </summary>
            <param name="c_N_cabbage_init_conc">The c_ n_cabbage_init_conc.</param>
            <param name="c_N_leaf_init_conc">The c_ n_leaf_init_conc.</param>
            <param name="c_N_root_init_conc">The c_ n_root_init_conc.</param>
            <param name="c_N_sstem_init_conc">The c_ n_sstem_init_conc.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_days_tot">The i_days_tot.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="o_N_green">The o_ n_green.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_nit_uptake(System.Int32)">
            <summary>
            Sugar_nit_uptakes the specified i_option.
            </summary>
            <param name="i_option">The i_option.</param>
            <exception cref="T:Models.Core.ApsimXException">Invalid template option</exception>
        </member>
        <member name="M:Models.Sugarcane.cproc_N_uptake1(System.Double,System.Double[],System.Int32,System.Double[],System.Double[],System.Double,System.String,System.Double[],System.Double[],System.Int32,System.Double,System.Double[]@)">
            <summary>
            Cproc_s the n_uptake1.
            </summary>
            <param name="c_no3_diffn_const">The c_no3_diffn_const.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <param name="i_no3gsm_diffn_pot">The i_no3gsm_diffn_pot.</param>
            <param name="i_no3gsm_mflow_avail">The i_no3gsm_mflow_avail.</param>
            <param name="i_n_fix_pot">The i_n_fix_pot.</param>
            <param name="c_n_supply_preference">The c_n_supply_preference.</param>
            <param name="i_n_demand">The i_n_demand.</param>
            <param name="i_n_max">The i_n_max.</param>
            <param name="i_max_part">The i_max_part.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_dlt_NO3gsm">The o_dlt_ n o3gsm.</param>
            <exception cref="T:Models.Core.ApsimXException">bad n supply preference</exception>
        </member>
        <member name="M:Models.Sugarcane.cproc_n_uptake3(System.Double[],System.Int32,System.Double[],System.Double[],System.Double,System.String,System.Double[],System.Double[],System.Int32,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Cproc_n_uptake3s the specified i_dlayer.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <param name="i_no3gsm_uptake_pot">The i_no3gsm_uptake_pot.</param>
            <param name="i_nh4gsm_uptake_pot">The i_nh4gsm_uptake_pot.</param>
            <param name="i_n_fix_pot">The i_n_fix_pot.</param>
            <param name="c_n_supply_preference">The c_n_supply_preference.</param>
            <param name="i_soil_n_demand">The i_soil_n_demand.</param>
            <param name="i_n_max">The i_n_max.</param>
            <param name="i_max_part">The i_max_part.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_dlt_no3gsm">The o_dlt_no3gsm.</param>
            <param name="o_dlt_nh4gsm">The o_dlt_nh4gsm.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_partition(System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[]@)">
            <summary>
            Sugar_s the n_partition.
            </summary>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dlt_NO3gsm">The i_dlt_ n o3gsm.</param>
            <param name="i_dlt_NH4gsm">The i_dlt_ n H4GSM.</param>
            <param name="i_N_demand">The i_ n_demand.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="o_dlt_N_green">The o_dlt_ n_green.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_water_content(System.Double[],System.Double[],System.Double[],System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[])">
            <summary>
            Sugar_water_contents the specified c_cane_dmf_tt.
            </summary>
            <param name="c_cane_dmf_tt">The c_cane_dmf_tt.</param>
            <param name="c_cane_dmf_min">The c_cane_dmf_min.</param>
            <param name="c_cane_dmf_max">The c_cane_dmf_max.</param>
            <param name="c_num_cane_dmf">The c_num_cane_dmf.</param>
            <param name="c_cane_dmf_rate">The c_cane_dmf_rate.</param>
            <param name="i_swdef_stalk">The i_swdef_stalk.</param>
            <param name="i_nfact_stalk">The i_nfact_stalk.</param>
            <param name="i_temp_stress_stalk">The i_temp_stress_stalk.</param>
            <param name="i_dlt_dm_green">The i_dlt_dm_green.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dlt_plant_wc">The i_dlt_plant_wc.</param>
            <param name="o_plant_wc">The o_plant_wc.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_plant_death">
            <summary>
            Sugar_plant_deathes this instance.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.sugar_failure_germination(System.Double,System.Double,System.Double[],System.Double,System.Double@)">
            <summary>
            Sugar_failure_germinations the specified c_days_germ_limit.
            </summary>
            <param name="c_days_germ_limit">The c_days_germ_limit.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_days_tot">The i_days_tot.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="o_dlt_plants">The o_dlt_plants.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_failure_emergence(System.Double,System.Double,System.Double,System.Double[],System.Double@)">
            <summary>
            Sugar_failure_emergences the specified c_tt_emerg_limit.
            </summary>
            <param name="c_tt_emerg_limit">The c_tt_emerg_limit.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="o_dlt_plants">The o_dlt_plants.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_failure_leaf_sen(System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Sugar_failure_leaf_sens the specified i_current_stage.
            </summary>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="o_dlt_plants">The o_dlt_plants.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_death_drought(System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Double,System.Double,System.Double@)">
            <summary>
            Sugar_death_droughts the specified c_leaf_no_crit.
            </summary>
            <param name="c_leaf_no_crit">The c_leaf_no_crit.</param>
            <param name="c_swdf_photo_limit">The c_swdf_photo_limit.</param>
            <param name="c_swdf_photo_rate">The c_swdf_photo_rate.</param>
            <param name="i_cswd_photo">The i_cswd_photo.</param>
            <param name="i_leaf_no">The i_leaf_no.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="i_swdef_photo">The i_swdef_photo.</param>
            <param name="o_dlt_plants">The o_dlt_plants.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_death_lodging(System.Boolean,System.Double,System.Double,System.Double[],System.Double[],System.Int32,System.Double,System.Double@)">
            <summary>
            Sugar_death_lodgings the specified i_lodge_flag.
            </summary>
            <param name="i_lodge_flag">if set to <c>true</c> [i_lodge_flag].</param>
            <param name="i_swdef_photo">The i_swdef_photo.</param>
            <param name="i_oxdef_photo">The i_oxdef_photo.</param>
            <param name="c_stress_lodge">The c_stress_lodge.</param>
            <param name="c_death_fr_lodge">The c_death_fr_lodge.</param>
            <param name="c_num_stress_lodge">The c_num_stress_lodge.</param>
            <param name="i_plants">The i_plants.</param>
            <param name="o_dlt_plants_death_lodging">The o_dlt_plants_death_lodging.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_realloc_cabbage(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Sugar_realloc_cabbages the specified i_leaf.
            </summary>
            <param name="i_leaf">The i_leaf.</param>
            <param name="i_cabbage">The i_cabbage.</param>
            <param name="i_sstem">The i_sstem.</param>
            <param name="i_max_part">The i_max_part.</param>
            <param name="c_cabbage_sheath_fr">The c_cabbage_sheath_fr.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dlt_dm_senesced">The i_dlt_dm_senesced.</param>
            <param name="i_n_green">The i_n_green.</param>
            <param name="o_dlt_dm_realloc">The o_dlt_dm_realloc.</param>
            <param name="o_dlt_n_realloc">The o_dlt_n_realloc.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_dm_detachment1(System.Int32,System.Double[],System.Double[],System.Double[]@,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Cproc_dm_detachment1s the specified i_max_part.
            </summary>
            <param name="i_max_part">The i_max_part.</param>
            <param name="c_sen_detach_frac">The c_sen_detach_frac.</param>
            <param name="i_dm_senesced">The i_dm_senesced.</param>
            <param name="o_dlt_dm_detached">The o_dlt_dm_detached.</param>
            <param name="c_dead_detach_frac">The c_dead_detach_frac.</param>
            <param name="i_dm_dead">The i_dm_dead.</param>
            <param name="o_dlt_dm_dead_detached">The o_dlt_dm_dead_detached.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_n_detachment1(System.Int32,System.Double[],System.Double[],System.Double[]@,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Cproc_n_detachment1s the specified i_max_part.
            </summary>
            <param name="i_max_part">The i_max_part.</param>
            <param name="c_sen_detach_frac">The c_sen_detach_frac.</param>
            <param name="i_n_senesced">The i_n_senesced.</param>
            <param name="o_dlt_n_detached">The o_dlt_n_detached.</param>
            <param name="c_dead_detach_frac">The c_dead_detach_frac.</param>
            <param name="i_n_dead">The i_n_dead.</param>
            <param name="o_dlt_n_dead_detached">The o_dlt_n_dead_detached.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_pool_fraction_delta(System.Int32,System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Crop_pool_fraction_deltas the specified i_num_part_ob.
            </summary>
            <param name="i_num_part_ob">The i_num_part_ob.</param>
            <param name="i_fraction_zb">The i_fraction_zb.</param>
            <param name="i_pool_zb">The i_pool_zb.</param>
            <param name="o_dlt_pool_zb">The o_dlt_pool_zb.</param>
        </member>
        <member name="M:Models.Sugarcane.cproc_lai_detachment1(System.Int32,System.Double[],System.Double,System.Double@,System.Double[],System.Double,System.Double@)">
            <summary>
            Cproc_lai_detachment1s the specified i_leaf_zb.
            </summary>
            <param name="i_leaf_zb">The i_leaf_zb.</param>
            <param name="c_sen_detach_frac">The c_sen_detach_frac.</param>
            <param name="i_slai">The i_slai.</param>
            <param name="o_dlt_slai_detached">The o_dlt_slai_detached.</param>
            <param name="c_dead_detach_frac">The c_dead_detach_frac.</param>
            <param name="i_tlai_dead">The i_tlai_dead.</param>
            <param name="o_dlt_tlai_dead_detached">The o_dlt_tlai_dead_detached.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_part_fraction_delta(System.Int32,System.Double[],System.Double,System.Double@)">
            <summary>
            Crop_part_fraction_deltas the specified i_part_no_zb.
            </summary>
            <param name="i_part_no_zb">The i_part_no_zb.</param>
            <param name="i_fraction_zb">The i_fraction_zb.</param>
            <param name="i_part">The i_part.</param>
            <param name="o_dlt_part">The o_dlt_part.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_update(System.Double@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double@,System.Double[]@,System.Double,System.Double[]@,System.Double@,System.Double@,System.Double,System.Double,System.Double,System.Double@,System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double@,System.Double)">
            <summary>
            Sugar_updates the specified io_canopy_height.
            </summary>
            <param name="io_canopy_height">The io_canopy_height.</param>
            <param name="io_cnd_photo">The io_cnd_photo.</param>
            <param name="io_cswd_expansion">The io_cswd_expansion.</param>
            <param name="io_cswd_pheno">The io_cswd_pheno.</param>
            <param name="io_cswd_photo">The io_cswd_photo.</param>
            <param name="i_dlt_canopy_height">The i_dlt_canopy_height.</param>
            <param name="i_dlt_dm">The i_dlt_dm.</param>
            <param name="i_dlt_dm_dead_detached">The i_dlt_dm_dead_detached.</param>
            <param name="i_dlt_dm_detached">The i_dlt_dm_detached.</param>
            <param name="i_dlt_dm_green">The i_dlt_dm_green.</param>
            <param name="i_dlt_dm_green_retrans">The i_dlt_dm_green_retrans.</param>
            <param name="i_dlt_dm_senesced">The i_dlt_dm_senesced.</param>
            <param name="i_dlt_dm_realloc">The i_dlt_dm_realloc.</param>
            <param name="i_dlt_lai">The i_dlt_lai.</param>
            <param name="i_dlt_leaf_no">The i_dlt_leaf_no.</param>
            <param name="i_dlt_node_no">The i_dlt_node_no.</param>
            <param name="i_dlt_node_no_dead">The i_dlt_node_no_dead.</param>
            <param name="i_dlt_n_dead_detached">The i_dlt_n_dead_detached.</param>
            <param name="i_dlt_n_detached">The i_dlt_n_detached.</param>
            <param name="i_dlt_n_green">The i_dlt_n_green.</param>
            <param name="i_dlt_n_retrans">The i_dlt_n_retrans.</param>
            <param name="i_dlt_n_senesced">The i_dlt_n_senesced.</param>
            <param name="i_dlt_n_realloc">The i_dlt_n_realloc.</param>
            <param name="i_dlt_plants">The i_dlt_plants.</param>
            <param name="i_dlt_plant_wc">The i_dlt_plant_wc.</param>
            <param name="i_dlt_root_length">The i_dlt_root_length.</param>
            <param name="i_dlt_root_length_senesced">The i_dlt_root_length_senesced.</param>
            <param name="i_dlt_root_depth">The i_dlt_root_depth.</param>
            <param name="i_dlt_slai">The i_dlt_slai.</param>
            <param name="i_dlt_slai_detached">The i_dlt_slai_detached.</param>
            <param name="i_dlt_stage">The i_dlt_stage.</param>
            <param name="i_dlt_tlai_dead_detached">The i_dlt_tlai_dead_detached.</param>
            <param name="io_dm_dead">The io_dm_dead.</param>
            <param name="io_dm_green">The io_dm_green.</param>
            <param name="io_dm_plant_top_tot">The io_dm_plant_top_tot.</param>
            <param name="io_dm_senesced">The io_dm_senesced.</param>
            <param name="io_lai">The io_lai.</param>
            <param name="io_leaf_area">The io_leaf_area.</param>
            <param name="io_leaf_dm">The io_leaf_dm.</param>
            <param name="io_leaf_no_zb">The io_leaf_no_zb.</param>
            <param name="io_node_no_zb">The io_node_no_zb.</param>
            <param name="io_node_no_dead_zb">The io_node_no_dead_zb.</param>
            <param name="i_nfact_photo">The i_nfact_photo.</param>
            <param name="io_n_conc_crit">The io_n_conc_crit.</param>
            <param name="io_n_conc_min">The io_n_conc_min.</param>
            <param name="io_n_dead">The io_n_dead.</param>
            <param name="io_n_green">The io_n_green.</param>
            <param name="io_n_senesced">The io_n_senesced.</param>
            <param name="io_plants">The io_plants.</param>
            <param name="io_plant_wc">The io_plant_wc.</param>
            <param name="i_previous_stage">The i_previous_stage.</param>
            <param name="io_root_length">The io_root_length.</param>
            <param name="io_root_depth">The io_root_depth.</param>
            <param name="io_slai">The io_slai.</param>
            <param name="i_swdef_expansion">The i_swdef_expansion.</param>
            <param name="i_swdef_pheno">The i_swdef_pheno.</param>
            <param name="i_swdef_photo">The i_swdef_photo.</param>
            <param name="io_tlai_dead">The io_tlai_dead.</param>
            <param name="c_n_conc_crit_root">The c_n_conc_crit_root.</param>
            <param name="c_n_conc_min_root">The c_n_conc_min_root.</param>
            <param name="c_x_stage_code">The c_x_stage_code.</param>
            <param name="c_y_n_conc_crit_cabbage">The c_y_n_conc_crit_cabbage.</param>
            <param name="c_y_n_conc_crit_cane">The c_y_n_conc_crit_cane.</param>
            <param name="c_y_n_conc_crit_leaf">The c_y_n_conc_crit_leaf.</param>
            <param name="c_y_n_conc_min_cabbage">The c_y_n_conc_min_cabbage.</param>
            <param name="c_y_n_conc_min_cane">The c_y_n_conc_min_cane.</param>
            <param name="c_y_n_conc_min_leaf">The c_y_n_conc_min_leaf.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="c_stage_code_list">The c_stage_code_list.</param>
            <param name="i_phase_tt">The i_phase_tt.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="io_node_no_detached_ob">The io_node_no_detached_ob.</param>
            <param name="c_leaf_no_at_emerg">The c_leaf_no_at_emerg.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_N_conc_limits(System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Sugar_s the n_conc_limits.
            </summary>
            <param name="c_n_conc_crit_root">The c_n_conc_crit_root.</param>
            <param name="c_n_conc_min_root">The c_n_conc_min_root.</param>
            <param name="c_x_stage_code">The c_x_stage_code.</param>
            <param name="c_y_n_conc_crit_cabbage">The c_y_n_conc_crit_cabbage.</param>
            <param name="c_y_n_conc_crit_cane">The c_y_n_conc_crit_cane.</param>
            <param name="c_y_n_conc_crit_leaf">The c_y_n_conc_crit_leaf.</param>
            <param name="c_y_n_conc_min_cabbage">The c_y_n_conc_min_cabbage.</param>
            <param name="c_y_n_conc_min_cane">The c_y_n_conc_min_cane.</param>
            <param name="c_y_n_conc_min_leaf">The c_y_n_conc_min_leaf.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="c_stage_code_list">The c_stage_code_list.</param>
            <param name="i_phase_tt">The i_phase_tt.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="o_n_conc_crit">The o_n_conc_crit.</param>
            <param name="o_n_conc_min">The o_n_conc_min.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_stage_code(System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Int32)">
            <summary>
            Sugar_stage_codes the specified c_stage_code_list.
            </summary>
            <param name="c_stage_code_list">The c_stage_code_list.</param>
            <param name="i_phase_tt">The i_phase_tt.</param>
            <param name="i_tt_tot">The i_tt_tot.</param>
            <param name="i_stage_no">The i_stage_no.</param>
            <param name="i_stage_table">The i_stage_table.</param>
            <param name="i_numvals">The i_numvals.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.stage_no_of_ob(System.Double,System.Double[],System.Int32)">
            <summary>
            Stage_no_of_obs the specified i_stage_code.
            </summary>
            <param name="i_stage_code">The i_stage_code.</param>
            <param name="i_stage_code_list">The i_stage_code_list.</param>
            <param name="i_list_size">The i_list_size.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.position_in_real_array_zb(System.Double,System.Double[])">
            <summary>
            Position_in_real_array_zbs the specified i_ number.
            </summary>
            <param name="i_Number">The i_ number.</param>
            <param name="i_Array">The i_ array.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_totals(System.Double,System.Double[],System.Int32,System.Double[],System.Double[],System.Double[],System.Int32@,System.Double,System.Double@,System.Double@,System.Double[],System.Double@,System.Double[],System.Double,System.Double@)">
            <summary>
            Sugar_totalses the specified i_current_stage.
            </summary>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_days_tot">The i_days_tot.</param>
            <param name="i_day_of_year">The i_day_of_year.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dlt_sw_dep">The i_dlt_sw_dep.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="o_isdate">The o_isdate.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="io_lai_max">The io_lai_max.</param>
            <param name="o_n_conc_act_stover_tot">The o_n_conc_act_stover_tot.</param>
            <param name="i_n_demand">The i_n_demand.</param>
            <param name="io_n_demand_tot">The io_n_demand_tot.</param>
            <param name="i_n_green">The i_n_green.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="io_transpiration_tot">The io_transpiration_tot.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_event(System.Double[],System.String[],System.Double,System.Double[],System.Int32,System.Double[],System.Double[],System.Double[],System.Double[],System.Double,System.Double[],System.Double,System.Double[],System.Int32,System.Double[])">
            <summary>
            Sugar_events the specified c_stage_code_list.
            </summary>
            <param name="c_stage_code_list">The c_stage_code_list.</param>
            <param name="c_stage_names">The c_stage_names.</param>
            <param name="i_current_stage">The i_current_stage.</param>
            <param name="i_days_tot">The i_days_tot.</param>
            <param name="i_day_of_year">The i_day_of_year.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_dm_dead">The i_dm_dead.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dm_senesced">The i_dm_senesced.</param>
            <param name="i_lai">The i_lai.</param>
            <param name="i_n_green">The i_n_green.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="i_sw_dep">The i_sw_dep.</param>
            <param name="i_year">The i_year.</param>
            <param name="i_ll_dep">The i_ll_dep.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_profile_fasw">
            <summary>
            Sugar_profile_fasws this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Models.Sugarcane.DaysAfterSowing">
            <summary>
            Gets the days after sowing.
            </summary>
            <value>
            The days after sowing.
            </value>
        </member>
        <member name="P:Models.Sugarcane.crop_status">
            <summary>
            Gets the crop_status.
            </summary>
            <value>
            The crop_status.
            </value>
        </member>
        <member name="P:Models.Sugarcane.stage">
            <summary>
            Gets the stage.
            </summary>
            <value>
            The stage.
            </value>
        </member>
        <member name="P:Models.Sugarcane.stage_code">
            <summary>
            Gets the stage_code.
            </summary>
            <value>
            The stage_code.
            </value>
        </member>
        <member name="P:Models.Sugarcane.stagename">
            <summary>
            Gets the stagename.
            </summary>
            <value>
            The stagename.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ratoon_no">
            <summary>
            Gets the ratoon_no.
            </summary>
            <value>
            The ratoon_no.
            </value>
        </member>
        <member name="P:Models.Sugarcane.phase_tt">
            <summary>
            Gets the phase_tt.
            </summary>
            <value>
            The phase_tt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tt_tot">
            <summary>
            Gets the tt_tot.
            </summary>
            <value>
            The tt_tot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leaf_no">
            <summary>
            Gets the leaf_no.
            </summary>
            <value>
            The leaf_no.
            </value>
        </member>
        <member name="P:Models.Sugarcane.node_no_dead">
            <summary>
            Gets the node_no_dead.
            </summary>
            <value>
            The node_no_dead.
            </value>
        </member>
        <member name="P:Models.Sugarcane.node_no_detached">
            <summary>
            Gets the node_no_detached.
            </summary>
            <value>
            The node_no_detached.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leaves">
            <summary>
            Gets the leaves.
            </summary>
            <value>
            The leaves.
            </value>
        </member>
        <member name="P:Models.Sugarcane.green_leaves">
            <summary>
            Gets the green_leaves.
            </summary>
            <value>
            The green_leaves.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dead_leaves">
            <summary>
            Gets the dead_leaves.
            </summary>
            <value>
            The dead_leaves.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leaf_area">
            <summary>
            Gets the leaf_area.
            </summary>
            <value>
            The leaf_area.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leaf_dm">
            <summary>
            Gets the leaf_dm.
            </summary>
            <value>
            The leaf_dm.
            </value>
        </member>
        <member name="P:Models.Sugarcane.height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:Models.Sugarcane.root_depth">
            <summary>
            Gets the root_depth.
            </summary>
            <value>
            The root_depth.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cover_green">
            <summary>
            Gets the cover_green.
            </summary>
            <value>
            The cover_green.
            </value>
        </member>
        <member name="P:Models.Sugarcane.radn_int">
            <summary>
            Gets the radn_int.
            </summary>
            <value>
            The radn_int.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cover_tot">
            <summary>
            Gets the cover_tot.
            </summary>
            <value>
            The cover_tot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lai_sum">
            <summary>
            Gets the lai_sum.
            </summary>
            <value>
            The lai_sum.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tlai">
            <summary>
            Gets the tlai.
            </summary>
            <value>
            The tlai.
            </value>
        </member>
        <member name="P:Models.Sugarcane.tla">
            <summary>
            Gets the tla.
            </summary>
            <value>
            The tla.
            </value>
        </member>
        <member name="P:Models.Sugarcane.slai">
            <summary>
            Gets the slai.
            </summary>
            <value>
            The slai.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lai">
            <summary>
            Gets the lai.
            </summary>
            <value>
            The lai.
            </value>
        </member>
        <member name="P:Models.Sugarcane.rlv">
            <summary>
            Gets the RLV.
            </summary>
            <value>
            The RLV.
            </value>
        </member>
        <member name="P:Models.Sugarcane.rlv_tot">
            <summary>
            Gets the rlv_tot.
            </summary>
            <value>
            The rlv_tot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ll_dep">
            <summary>
            Gets the ll_dep.
            </summary>
            <value>
            The ll_dep.
            </value>
        </member>
        <member name="P:Models.Sugarcane.lai2">
            <summary>
            Gets the lai2.
            </summary>
            <value>
            The lai2.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leaf_wt2">
            <summary>
            Gets the leaf_wt2.
            </summary>
            <value>
            The leaf_wt2.
            </value>
        </member>
        <member name="P:Models.Sugarcane.rootgreenwt">
            <summary>
            Gets the rootgreenwt.
            </summary>
            <value>
            The rootgreenwt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.leafgreenwt">
            <summary>
            Gets the leafgreenwt.
            </summary>
            <value>
            The leafgreenwt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sstem_wt">
            <summary>
            Gets the sstem_wt.
            Structural Stem Weight
            Just the Stem (without the Sucrose) of green and dead stalks.
            </summary>
            <value>
            The sstem_wt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cane_dmf">
            <summary>
            Gets the cane_dmf.
            Cane Dry Matter Fraction.
            The Millable Stalk divided by the Millable Stalk (FRESH). 
            nb. Millable Stalk is only the green "structual stem" and "sucrose".
            nb. Fresh refers to when the Cane has just been cut and still has high water content
                hence we add some extra water to the weight.
            </summary>
            <value>
            The cane_dmf.
            </value>
        </member>
        <member name="P:Models.Sugarcane.canefw">
            <summary>
            Gets the canefw.
            Cane Fresh Weight.
            nb. Cane refers to the "structual stem" and "sucrose" in green and dead stalks.
            nb. Fresh refers to when the Cane has just been cut and still has high water content
                hence we add some extra water to the weight.
            </summary>
            <value>
            The canefw.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ccs">
            <summary>
            Gets the CCS.
            Commercial Cane Sugar.
            </summary>
            <value>
            The CCS.
            </value>
        </member>
        <member name="P:Models.Sugarcane.scmstf">
            <summary>
            Gets the SCMSTF.
            Sucrose Concentration in Millable Stalk (FRESH)
            nb. Millable Stalk is only the green "structual stem" and "sucrose".
            nb. Fresh refers to when the Cane has just been cut and still has high water content
                hence we add some extra water to the weight.
            </summary>
            <value>
            The SCMSTF.
            </value>
        </member>
        <member name="P:Models.Sugarcane.scmst">
            <summary>
            Gets the SCMST.
            Sucrose Concentration in Millable Stalk.
            nb. Millable Stalk is only the green "structual stem" and "sucrose".
            </summary>
            <value>
            The SCMST.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sucrose_wt">
            <summary>
            Gets the sucrose_wt.
            Sucrose in the green and dead stalks.
            </summary>
            <value>
            The sucrose_wt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cabbage_wt">
            <summary>
            Gets the cabbage_wt.
            </summary>
            <value>
            The cabbage_wt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cane_wt">
            <summary>
            Gets the cane_wt.
            nb. Cane refers to the "structual stem" and "sucrose" in green and dead stalks.
            </summary>
            <value>
            The cane_wt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.biomass">
            <summary>
            Gets the biomass.
            </summary>
            <value>
            The biomass.
            </value>
        </member>
        <member name="P:Models.Sugarcane.green_biomass">
            <summary>
            Gets the green_biomass.
            </summary>
            <value>
            The green_biomass.
            </value>
        </member>
        <member name="P:Models.Sugarcane.greenwt">
            <summary>
            Gets the greenwt.
            </summary>
            <value>
            The greenwt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.senescedwt">
            <summary>
            Gets the senescedwt.
            </summary>
            <value>
            The senescedwt.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dm_dead">
            <summary>
            Gets the dm_dead.
            </summary>
            <value>
            The dm_dead.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlt_dm">
            <summary>
            Gets the DLT_DM.
            Delta Dry Matter.
            Todays change in biomass.
            </summary>
            <value>
            The DLT_DM.
            </value>
        </member>
        <member name="P:Models.Sugarcane.partition_xs">
            <summary>
            Gets the partition_xs.
            Todays excess biomass. 
            Not needed after partitioning todays biomass to plant organs.
            </summary>
            <value>
            The partition_xs.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlt_dm_green">
            <summary>
            Gets the dlt_dm_green.
            Delta Dry Matter Green.
            Todays change in green biomass.
            </summary>
            <value>
            The dlt_dm_green.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlt_dm_detached">
            <summary>
            Gets the dlt_dm_detached.
            Delta Dry Matter Detached.
            Todays dry matter that got detached from each plant part.
            Elements of this array are the plant parts,
            1 root
            2 leaf
            3 structural stem
            4 cabbage
            5 sucrose
            </summary>
            <value>
            The dlt_dm_detached.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_critical">
            <summary>
            Gets the n_critical.
            </summary>
            <value>
            The n_critical.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_minimum">
            <summary>
            Gets the n_minimum.
            </summary>
            <value>
            The n_minimum.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_conc_leaf">
            <summary>
            Gets the n_conc_leaf.
            </summary>
            <value>
            The n_conc_leaf.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_conc_cab">
            <summary>
            Gets the n_conc_cab.
            </summary>
            <value>
            The n_conc_cab.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_conc_cane">
            <summary>
            Gets the n_conc_cane.
            </summary>
            <value>
            The n_conc_cane.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_leaf_crit">
            <summary>
            Gets the n_leaf_crit.
            </summary>
            <value>
            The n_leaf_crit.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_leaf_min">
            <summary>
            Gets the n_leaf_min.
            </summary>
            <value>
            The n_leaf_min.
            </value>
        </member>
        <member name="P:Models.Sugarcane.biomass_n">
            <summary>
            Gets the biomass_n.
            </summary>
            <value>
            The biomass_n.
            </value>
        </member>
        <member name="P:Models.Sugarcane.plant_n_tot">
            <summary>
            Gets the plant_n_tot.
            </summary>
            <value>
            The plant_n_tot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.green_biomass_n">
            <summary>
            Gets the green_biomass_n.
            </summary>
            <value>
            The green_biomass_n.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_green">
            <summary>
            Gets the n_green.
            </summary>
            <value>
            The n_green.
            </value>
        </member>
        <member name="P:Models.Sugarcane.greenn">
            <summary>
            Gets the greenn.
            </summary>
            <value>
            The greenn.
            </value>
        </member>
        <member name="P:Models.Sugarcane.senescedn">
            <summary>
            Gets the senescedn.
            </summary>
            <value>
            The senescedn.
            </value>
        </member>
        <member name="P:Models.Sugarcane.dlt_n_green">
            <summary>
            Gets the dlt_n_green.
            </summary>
            <value>
            The dlt_n_green.
            </value>
        </member>
        <member name="P:Models.Sugarcane.swdef_pheno">
            <summary>
            Gets the swdef_pheno.
            </summary>
            <value>
            The swdef_pheno.
            </value>
        </member>
        <member name="P:Models.Sugarcane.swdef_photo">
            <summary>
            Gets the swdef_photo.
            </summary>
            <value>
            The swdef_photo.
            </value>
        </member>
        <member name="P:Models.Sugarcane.swdef_expan">
            <summary>
            Gets the swdef_expan.
            </summary>
            <value>
            The swdef_expan.
            </value>
        </member>
        <member name="P:Models.Sugarcane.swdef_stalk">
            <summary>
            Gets the swdef_stalk.
            </summary>
            <value>
            The swdef_stalk.
            </value>
        </member>
        <member name="P:Models.Sugarcane.nfact_photo">
            <summary>
            Gets the nfact_photo.
            </summary>
            <value>
            The nfact_photo.
            </value>
        </member>
        <member name="P:Models.Sugarcane.nfact_expan">
            <summary>
            Gets the nfact_expan.
            </summary>
            <value>
            The nfact_expan.
            </value>
        </member>
        <member name="P:Models.Sugarcane.oxdef_photo">
            <summary>
            Gets the oxdef_photo.
            </summary>
            <value>
            The oxdef_photo.
            </value>
        </member>
        <member name="P:Models.Sugarcane.ep">
            <summary>
            Gets the ep.
            </summary>
            <value>
            The ep.
            </value>
        </member>
        <member name="P:Models.Sugarcane.cep">
            <summary>
            Gets the cep.
            </summary>
            <value>
            The cep.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sw_uptake">
            <summary>
            Gets the sw_uptake.
            </summary>
            <value>
            The sw_uptake.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sw_demand">
            <summary>
            Gets the sw_demand.
            </summary>
            <value>
            The sw_demand.
            </value>
        </member>
        <member name="P:Models.Sugarcane.sw_demand_te">
            <summary>
            Gets the sw_demand_te.
            </summary>
            <value>
            The sw_demand_te.
            </value>
        </member>
        <member name="P:Models.Sugarcane.fasw">
            <summary>
            Gets the fasw.
            </summary>
            <value>
            The fasw.
            </value>
        </member>
        <member name="P:Models.Sugarcane.esw_layr">
            <summary>
            Gets the esw_layr.
            </summary>
            <value>
            The esw_layr.
            </value>
        </member>
        <member name="P:Models.Sugarcane.no3_tot">
            <summary>
            Gets the no3_tot.
            </summary>
            <value>
            The no3_tot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_demand">
            <summary>
            Gets the n_demand.
            </summary>
            <value>
            The n_demand.
            </value>
        </member>
        <member name="P:Models.Sugarcane.no3_demand">
            <summary>
            Gets the no3_demand.
            </summary>
            <value>
            The no3_demand.
            </value>
        </member>
        <member name="P:Models.Sugarcane.n_supply">
            <summary>
            Gets the n_supply.
            </summary>
            <value>
            The n_supply.
            </value>
        </member>
        <member name="P:Models.Sugarcane.no3_uptake">
            <summary>
            Gets the no3_uptake.
            </summary>
            <value>
            The no3_uptake.
            </value>
        </member>
        <member name="P:Models.Sugarcane.nh4_uptake">
            <summary>
            Gets the nh4_uptake.
            </summary>
            <value>
            The nh4_uptake.
            </value>
        </member>
        <member name="P:Models.Sugarcane.no3_uptake_pot">
            <summary>
            Gets the no3_uptake_pot.
            </summary>
            <value>
            The no3_uptake_pot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.nh4_uptake_pot">
            <summary>
            Gets the nh4_uptake_pot.
            </summary>
            <value>
            The nh4_uptake_pot.
            </value>
        </member>
        <member name="P:Models.Sugarcane.CropType">
            <summary>
            MicroClimate will get 'CropType' and use it to look up
            canopy properties for this crop.
            </summary>
            <value>
            The type of the crop.
            </value>
        </member>
        <member name="P:Models.Sugarcane.IsAlive">
            <summary>
            Is the plant alive?
            </summary>
        </member>
        <member name="P:Models.Sugarcane.IsReadyForHarvesting">
            <summary>Returns true if the crop is ready for harvesting</summary>
        </member>
        <member name="M:Models.Sugarcane.Harvest">
            <summary>Harvest the crop</summary>
        </member>
        <member name="P:Models.Sugarcane.CultivarNames">
            <summary>
            Gets a list of cultivar names
            </summary>
        </member>
        <member name="M:Models.Sugarcane.GetWaterUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Placeholder for SoilArbitrator
            </summary>
            <param name="soilstate"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Models.Sugarcane.GetNitrogenUptakeEstimates(Models.Soils.Arbitrator.SoilState)">
            <summary>
            Placeholder for SoilArbitrator
            </summary>
            <param name="soilstate"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Models.Sugarcane.SetActualWaterUptake(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the sw uptake for today
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Models.Sugarcane.SetActualNitrogenUptakes(System.Collections.Generic.List{Models.Soils.Arbitrator.ZoneWaterAndN})">
            <summary>
            Set the n uptake for today
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Models.Sugarcane.Sow(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sows the plant
            </summary>
            <param name="cultivar">The cultivar.</param>
            <param name="population">The population.</param>
            <param name="depth">The depth.</param>
            <param name="rowSpacing">The row spacing.</param>
            <param name="maxCover">The maximum cover.</param>
            <param name="budNumber">The bud number.</param>
        </member>
        <member name="M:Models.Sugarcane.CheckAllNUptakeOptionalsReadIn">
            <summary>
            Checks all n uptake optionals read in.
            </summary>
            <exception cref="T:Models.Core.ApsimXException">
            Using n_uptake_option == 1 and missing either 'NO3_diffn_const' or 'n_supply_preference' from ini file
            or
            Using n_uptake_option == 2 and missing either 'kno3', 'no3ppm_min', 'knh4', 'nh4ppm_min' or 'total_n_uptake_max' from ini file
            </exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_get_soil_variables(System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Sugar_get_soil_variableses the specified o_no3gsm.
            </summary>
            <param name="o_no3gsm">The o_no3gsm.</param>
            <param name="o_no3gsm_min">The o_no3gsm_min.</param>
            <param name="o_nh4gsm">The o_nh4gsm.</param>
            <param name="o_nh4gsm_min">The o_nh4gsm_min.</param>
        </member>
        <member name="M:Models.Sugarcane.OnStartOfSimulation(System.Object,System.EventArgs)">
            <summary>
            Called when [start of simulation].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Sugarcane.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Called when DoDailyInitialisation invoked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Sugarcane.OnStartOfDay(System.Object,System.EventArgs)">
            <summary>
            Called when [start of day].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Sugarcane.OnDoActualPlantGrowth(System.Object,System.EventArgs)">
            <summary>
            Called when [do actual plant growth].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:Models.Core.ApsimXException">Invalid detachment for leaf and cabbage ratio.</exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_start_crop(System.Double,System.Int32,System.Double,System.String)">
            <summary>
            Sugar_start_crops the specified plants.
            </summary>
            <param name="plants">The plants.</param>
            <param name="Ratoon">The ratoon.</param>
            <param name="sowing_depth">The sowing_depth.</param>
            <param name="Cultivar">The cultivar.</param>
            <exception cref="T:Models.Core.ApsimXException">
            \Sugarcane\ was taken out today by \end_crop\ action -
                                        + \n
                                        +  Unable to accept sow action until the next day.
            or
            \Sugarcane\  is still in the ground - unable to sow until it is taken out by \end_crop\ action.
            </exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_read_crop_constants(System.String)">
            <summary>
            Sugar_read_crop_constantses the specified crop type.
            </summary>
            <param name="CropType">Type of the crop.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_read_cultivar_params(System.String)">
            <summary>
            Sugar_read_cultivar_paramses the specified name.
            </summary>
            <param name="Name">The name.</param>
            <returns></returns>
            <exception cref="T:Models.Core.ApsimXException">Could not find in the Sugarcane ini file a cultivar called:  + Name</exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_read_root_params">
            <summary>
            Sugar_read_root_paramses this instance.
            </summary>
            <exception cref="T:Models.Core.ApsimXException">
            No Crop Lower Limit found
            or
            Bad value for uptake_source
            </exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_harvest">
            <summary>
            Sugar_harvests this instance.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.sugar_kill_crop(System.String@,System.Double[],System.Double[],System.Double[])">
            <summary>
            Sugar_kill_crops the specified i_crop_status.
            </summary>
            <param name="i_crop_status">The i_crop_status.</param>
            <param name="i_dm_dead">The i_dm_dead.</param>
            <param name="i_dm_green">The i_dm_green.</param>
            <param name="i_dm_senesced">The i_dm_senesced.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_end_crop">
            <summary>
            Sugar_end_crops this instance.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.SowNewPlant(System.Double,System.Double,System.String)">
            <summary>
            Sow a Newly Planted Sugarcane Crop. (crop_status is set to "crop_alive")
            Sugarcane will keep ratooning indefinitely until it is stopped by using an EndCrop or KillCrop.
            NB. All Ratoons are treated the same. No difference between first ratoon and second, third etc.
            </summary>
            <param name="PlantingDensity">Plant density (plants/m^2)</param>
            <param name="Depth">Sowing Depth (mm)</param>
            <param name="CultivarName">Name of the Cultivar.</param>
        </member>
        <member name="M:Models.Sugarcane.SowRatoon(System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Sow a Sugarcane Crop BUT starting with a Ratoon instead of Newly Planted Crop. (crop_status is set to "crop_alive")
            However can still sow a Newly Planted Crop by setting StartingRatoonNo = 0.
            Sugarcane will keep ratooning indefinitely until it is stopped by using an EndCrop or KillCrop.
            NB. All Ratoons are treated the same. No difference between first ratoon and second, third etc.
            </summary>
            <param name="PlantingDensity">Plant density (plants/m^2)</param>
            <param name="Depth">Sowing Depth (mm)</param>
            <param name="CultivarName">Name of the Cultivar.
            NB. When sowing a ratoon, you don't need to add "_ratoon" to the cultivar name. It will be added automatically.</param>
            <param name="StartingRatoonNo">0 is a Newly Planted Crop, 1 is First Ratoon, 2 is Second Ratoon, etc.</param>
        </member>
        <member name="M:Models.Sugarcane.HarvestCrop">
            <summary>
            HarvestCrop is the same as EndCrop (in that it gets rid of the biomass)
            only unlike EndCrop it can still ratoon again (crop_status is NOT set to "crop_out". It remains "crop_alive")
            </summary>
        </member>
        <member name="M:Models.Sugarcane.KillCrop">
            <summary>
            KillCrop kills just this plant or ratoon (crop_status is set to "crop_dead") but the biomass is left there standing.
            You need to do a Tillage to get rid of the above ground biomass.
            It will not grow or ratoon again. It just sits there dead with an above ground biomass.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.EndCrop">
            <summary>
            EndCrop gets rid of the biomass and requires a replant to start growing again.  (crop_status is set to "crop_out")
            </summary>
        </member>
        <member name="M:Models.Sugarcane.LodgeTheCane">
            <summary>
            Lodge the Sugarcane Today.
            The arguments for how to modify the Sugarcane due to lodging are specified in the ini file.
            </summary>
        </member>
        <member name="M:Models.Sugarcane.HillUpTheSoil(System.Double,System.Double)">
            <summary>
            Mound soil around base of crop and bury some plant material.
            Burying the plant material incorporates it as fresh organic matter into the Soil.
            This applies no matter the state of the plant material: Green, Senesced and Dead
            Can only do a HillUp during the Emergence phase (Sprouting to BeginCane).
            </summary>
            <param name="CaneFr">Fraction of Structural Stem and Stem Sucrose that is buried</param>
            <param name="TopsFr">Fraction of Leaves and Cabbage that is buried</param>
        </member>
        <member name="E:Models.Sugarcane.Sowing">
            <summary>
            Occurs when the Sugarcane crop is sown.
            </summary>
        </member>
        <member name="E:Models.Sugarcane.Harvesting">
            <summary>
            Occurs when the Sugarcane crop is harvested.
            </summary>
        </member>
        <member name="E:Models.Sugarcane.Killing">
            <summary>
            Occurs when the Sugarcane crop is killed.
            </summary>
        </member>
        <member name="E:Models.Sugarcane.WaterChanged">
            <summary>
            Occurs when [water changed].
            </summary>
        </member>
        <member name="E:Models.Sugarcane.BiomassRemoved">
            <summary>
            Occurs when [biomass removed].
            </summary>
        </member>
        <member name="E:Models.Sugarcane.IncorpFOM">
            <summary>
            Occurs when [incorp fom].
            </summary>
        </member>
        <member name="M:Models.Sugarcane.ToFloatArray(System.Double[])">
            <summary>
            To the float array.
            </summary>
            <param name="D">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Sugarcane.sugar_set_other_variables(System.Double[],System.Double[],System.Double[])">
            <summary>
            Sugar_set_other_variableses the specified i_dlt_no3gsm.
            </summary>
            <param name="i_dlt_no3gsm">The i_dlt_no3gsm.</param>
            <param name="i_dlt_nh4gsm">The i_dlt_nh4gsm.</param>
            <param name="i_dlt_sw_dep">The i_dlt_sw_dep.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_update_other_variables(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double)">
            <summary>
            Sugar_update_other_variableses the specified i_dlt_dm_detached.
            </summary>
            <param name="i_dlt_dm_detached">The i_dlt_dm_detached.</param>
            <param name="i_dlt_dm_dead_detached">The i_dlt_dm_dead_detached.</param>
            <param name="i_dlt_n_detached">The i_dlt_n_detached.</param>
            <param name="i_dlt_n_dead_detached">The i_dlt_n_dead_detached.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
        </member>
        <member name="M:Models.Sugarcane.sugar_Send_Crop_Chopped_Event(System.String,System.String[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Sugar_s the send_ crop_ chopped_ event.
            </summary>
            <param name="i_crop_type">The i_crop_type.</param>
            <param name="i_dm_type">The i_dm_type.</param>
            <param name="i_dlt_crop_dm">The i_dlt_crop_dm.</param>
            <param name="i_dlt_dm_n">The i_dlt_dm_n.</param>
            <param name="i_fraction_to_Residue">The i_fraction_to_ residue.</param>
        </member>
        <member name="M:Models.Sugarcane.crop_root_incorp(System.Double,System.Double,System.Double[],System.Double[],System.Double,System.String,System.Int32)">
            <summary>
            Crop_root_incorps the specified i_dlt_dm_root.
            </summary>
            <param name="i_dlt_dm_root">The i_dlt_dm_root.</param>
            <param name="i_dlt_n_root">The i_dlt_n_root.</param>
            <param name="i_dlayer">The i_dlayer.</param>
            <param name="i_root_length">The i_root_length.</param>
            <param name="i_root_depth">The i_root_depth.</param>
            <param name="c_crop_type">The c_crop_type.</param>
            <param name="i_max_layer">The i_max_layer.</param>
            <exception cref="T:Models.Core.ApsimXException">Too many layers for crop routines</exception>
        </member>
        <member name="M:Models.Sugarcane.sugar_hill_up(System.Double,System.Double)">
            <summary>
            Sugar_hill_ups the specified canefr.
            </summary>
            <param name="canefr">The canefr.</param>
            <param name="topsfr">The topsfr.</param>
            <exception cref="T:Models.Core.ApsimXException">Can only hill up during emergence phase</exception>
        </member>
        <member name="M:Models.Sugarcane.BiomassRemovalComplete(System.Double)">
            <summary>
            Biomass has been removed from the plant.
            </summary>
            <param name="fractionRemoved">The fraction of biomass removed</param>
        </member>
        <member name="T:Models.FertiliserType">
            <summary>
            A class for holding fertiliser types
            </summary>
        </member>
        <member name="P:Models.FertiliserType.Name">
            <summary>Gets or sets the name.</summary>
            <value>The name.</value>
        </member>
        <member name="P:Models.FertiliserType.Description">
            <summary>Gets or sets the description.</summary>
            <value>The description.</value>
        </member>
        <member name="P:Models.FertiliserType.FractionNO3">
            <summary>Gets or sets the fraction n o3.</summary>
            <value>The fraction n o3.</value>
        </member>
        <member name="P:Models.FertiliserType.FractionNH4">
            <summary>Gets or sets the fraction n h4.</summary>
            <value>The fraction n h4.</value>
        </member>
        <member name="P:Models.FertiliserType.FractionUrea">
            <summary>Gets or sets the fraction urea.</summary>
            <value>The fraction urea.</value>
        </member>
        <member name="P:Models.FertiliserType.FractionRockP">
            <summary>Gets or sets the fraction rock p.</summary>
            <value>The fraction rock p.</value>
        </member>
        <member name="P:Models.FertiliserType.FractionBandedP">
            <summary>Gets or sets the fraction banded p.</summary>
            <value>The fraction banded p.</value>
        </member>
        <member name="P:Models.FertiliserType.FractionLabileP">
            <summary>Gets or sets the fraction labile p.</summary>
            <value>The fraction labile p.</value>
        </member>
        <member name="P:Models.FertiliserType.FractionCa">
            <summary>Gets or sets the fraction ca.</summary>
            <value>The fraction ca.</value>
        </member>
        <member name="T:Models.Fertiliser">
            <summary>
            The fertiliser model
            </summary>
        </member>
        <member name="F:Models.Fertiliser.Soil">
            <summary>The soil</summary>
        </member>
        <member name="F:Models.Fertiliser.Summary">
            <summary>The summary</summary>
        </member>
        <member name="F:Models.Fertiliser.solutes">
            <summary>Link to Apsim's solute manager module.</summary>
        </member>
        <member name="P:Models.Fertiliser.Definitions">
            <summary>Gets or sets the definitions.</summary>
            <value>The definitions.</value>
        </member>
        <member name="M:Models.Fertiliser.AddDefinitions">
            <summary>Adds the definitions.</summary>
        </member>
        <member name="P:Models.Fertiliser.NitrogenApplied">
            <summary>Gets the nitrogen applied.</summary>
            <value>The nitrogen applied.</value>
        </member>
        <member name="T:Models.Fertiliser.Types">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Fertiliser.Types.CalciteCA">
            <summary>The calcite ca</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.CalciteFine">
            <summary>The calcite fine</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.Dolomite">
            <summary>The dolomite</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.NO3N">
            <summary>The n o3 n</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.NH4N">
            <summary>The n h4 n</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.NH4NO3N">
            <summary>The n h4 n o3 n</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.DAP">
            <summary>The dap</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.MAP">
            <summary>The map</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.UreaN">
            <summary>The urea n</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.UreaNO3">
            <summary>The urea n o3</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.Urea">
            <summary>The urea</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.NH4SO4N">
            <summary>The n h4 s o4 n</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.RockP">
            <summary>The rock p</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.BandedP">
            <summary>The banded p</summary>
        </member>
        <member name="F:Models.Fertiliser.Types.BroadcastP">
            <summary>The broadcast p</summary>
        </member>
        <member name="M:Models.Fertiliser.Apply(System.Double,Models.Fertiliser.Types,System.Double,System.Boolean)">
            <summary>Apply fertiliser.</summary>
            <param name="Amount">The amount.</param>
            <param name="Type">The type.</param>
            <param name="Depth">The depth.</param>
            <param name="doOutput">If true, output will be written to the summary.</param>
            <exception cref="T:Models.Core.ApsimXException">Cannot find fertiliser type ' + Type + '</exception>
        </member>
        <member name="M:Models.Fertiliser.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>prepare event handler from Clock.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Fertiliser.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when [simulation commencing].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Fertiliser.GetLayerDepth(System.Double,System.Double[])">
            <summary>
            Utility function for determining the layer where 'depth' is located in the 'Thickness' array.
            </summary>
            <param name="depth">The depth.</param>
            <param name="thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Irrigation">
            <summary>
            This model controls irrigation events, which can be triggered using the Apply() method.
            </summary>
        </member>
        <member name="F:Models.Irrigation.summary">
            <summary>Access the summary model.</summary>
        </member>
        <member name="F:Models.Irrigation.soil">
            <summary>Access the soil model.</summary>
        </member>
        <member name="P:Models.Irrigation.IrrigationApplied">
            <summary>Gets the amount of irrigation actually applied (mm).</summary>
        </member>
        <member name="P:Models.Irrigation.Depth">
            <summary>Gets or sets the depth at which irrigation is applied (mm).</summary>
        </member>
        <member name="P:Models.Irrigation.Duration">
            <summary>Gets or sets the duration of the irrigation event (minutes).</summary>
        </member>
        <member name="P:Models.Irrigation.Efficiency">
            <summary>Gets or sets the efficiency of the irrigation system (mm/mm).</summary>
        </member>
        <member name="P:Models.Irrigation.WillRunoff">
            <summary>Gets or sets the flag for whether the irrigation can run off (true/false).</summary>
        </member>
        <member name="E:Models.Irrigation.Irrigated">
            <summary>Occurs when [irrigated].</summary>
            <remarks>
            Advertises an irrigation and passes its parameters, thus allowing other models to respond accordingly.
            </remarks>
        </member>
        <member name="M:Models.Irrigation.Apply(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double,System.Double,System.Boolean)">
            <summary>Apply some irrigation.</summary>
            <param name="amount">The amount to apply (mm).</param>
            <param name="depth">The depth of application (mm).</param>
            <param name="duration">The duration of the irrigation event (minutes).</param>
            <param name="efficiency">The irrigation efficiency (mm/mm).</param>
            <param name="willRunoff">Whether irrigation can run off (<c>true</c>/<c>false</c>).</param>
            <param name="no3">Amount of NO3 in irrigation water</param>
            <param name="nh4">Amount of NH4 in irrigation water</param>
            <param name="doOutput">If true, output will be written to the summary.</param>
        </member>
        <member name="M:Models.Irrigation.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>Called when [do daily initialisation].</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Log">
            <summary>
            A low level log component that writes state / parameter variables to a text file.
            </summary>
        </member>
        <member name="M:Models.Log.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Initialise the model.
            </summary>
        </member>
        <member name="M:Models.Log.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Simulation has completed.
            </summary>
        </member>
        <member name="T:Models.Manager">
            <summary>
            The manager model
            </summary>
        </member>
        <member name="F:Models.Manager.CompiledCode">
            <summary>The compiled code</summary>
        </member>
        <member name="F:Models.Manager.isCreated">
            <summary>Has the manager model been fully created yet?</summary>
        </member>
        <member name="F:Models.Manager.cSharpCode">
            <summary>The code to compile.</summary>
        </member>
        <member name="P:Models.Manager.Code">
            <summary>Gets or sets the code to compile.</summary>
        </member>
        <member name="P:Models.Manager.Parameters">
            <summary>The script Model that has been compiled</summary>
        </member>
        <member name="P:Models.Manager.DoSerialiseChildren">
            <summary>Allow children to be serialised?</summary>
        </member>
        <member name="P:Models.Manager.Location">
            <summary>
            Stores column and line of caret, and scrolling position when editing in GUI
            This isn't really a Rectangle, but the Rectangle class gives us a convenient
            way to store both the caret position and scrolling information.
            </summary>
        </member>
        <member name="P:Models.Manager.ActiveTabIndex">
            <summary>
            Stores whether we are currently on the tab displaying the script.
            Meaningful only within the GUI
            </summary>
        </member>
        <member name="M:Models.Manager.OnCreated">
            <summary>
            Called when the model has been newly created in memory whether from 
            cloning or deserialisation.
            </summary>
        </member>
        <member name="M:Models.Manager.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>At simulation commencing time, rebuild the script assembly if required.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Manager.RebuildScriptModel">
            <summary>Rebuild the script model and return error message if script cannot be compiled.</summary>
        </member>
        <member name="M:Models.Manager.GetAssemblyFileName">
            <summary>Work out the assembly file name (with path).</summary>
        </member>
        <member name="M:Models.Manager.ResolveManagerAssembliesEventHandler(System.Object,System.ResolveEventArgs)">
            <summary>A handler to resolve the loading of manager assemblies when binary deserialization happens.</summary>
            <param name="sender"></param>
            <param name="args"></param>
            <remarks>
            Seems like it will only look for DLL's in the bin folder. We can't put the manager DLLs in there
            because when ApsimX is installed, the bin folder will be under c:\program files and we won't have
            permission to save the manager dlls there. Instead we put them in %TEMP%\ApsimX and use this 
            event handler to resolve the assemblies to that location.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Models.Manager.SetParametersInObject(Models.Core.Model)">
            <summary>Set the scripts parameters from the 'xmlElement' passed in.</summary>
            <param name="script">The script.</param>
        </member>
        <member name="M:Models.Manager.GetParametersFromScriptModel(Models.Core.Model)">
            <summary>Get all parameters from the script model and store in our parameters list.</summary>
            <param name="script">The script.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Operation">
            <summary>
            Operations model
            </summary>
        </member>
        <member name="M:Models.Operation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Models.Operation.Date">
            <summary>Gets or sets the date.</summary>
        </member>
        <member name="P:Models.Operation.Action">
            <summary>Gets or sets the action.</summary>
            <value>The action.</value>
        </member>
        <member name="M:Models.Operation.GetActionModel">
            <summary>Gets the action model.</summary>
            <returns></returns>
        </member>
        <member name="P:Models.Operation.Enabled">
            <summary>
            Used to determine whether the operation is enabled or not.
            </summary>
        </member>
        <member name="T:Models.Operations">
            <summary>This class encapsulates an operations schedule.</summary>
        </member>
        <member name="F:Models.Operations.Clock">
            <summary>The clock</summary>
        </member>
        <member name="P:Models.Operations.Operation">
            <summary>Gets or sets the schedule.</summary>
            <value>The schedule.</value>
        </member>
        <member name="M:Models.Operations.OnDoManagement(System.Object,System.EventArgs)">
            <summary>Simulation is commencing.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:Models.Core.ApsimXException">
            Bad operations action found:  + operation.Action
            or
            Cannot find model:  + modelName
            or
            Cannot find method:  + methodName +  in model:  + modelName
            or
            Cannot find argument:  + argumentName +  in operation call:  + operation.Action
            </exception>
        </member>
        <member name="M:Models.Operations.GetArgumentsForMethod(System.String[],System.Reflection.MethodInfo)">
            <summary>
            Try and get the arguments for the specified method. Will return null if arguments don't match the method.
            </summary>
            <param name="arguments">The arguments specified by user.</param>
            <param name="method">The method to try and match to.</param>
            <returns>The arguments or null if not matched.</returns>
        </member>
        <member name="T:Models.Summary">
            <summary>
            This model collects the simulation initial conditions and stores into the DataStore.
            It also provides an API for writing messages to the DataStore.
            </summary>
        </member>
        <member name="F:Models.Summary.storage">
            <summary>A link to a storage service</summary>
        </member>
        <member name="F:Models.Summary.clock">
            <summary>A link to the clock in the simulation</summary>
        </member>
        <member name="F:Models.Summary.simulation">
            <summary>A link to the parent simulation</summary>
        </member>
        <member name="F:Models.Summary.summaryTableColumnNames">
            <summary>The column names for the summary table this model will write</summary>
        </member>
        <member name="T:Models.Summary.OutputType">
            <summary>
            Enumeration used to indicate the format of the output string
            </summary>
        </member>
        <member name="F:Models.Summary.OutputType.plain">
            <summary>
            Plain ASCII text
            </summary>
        </member>
        <member name="F:Models.Summary.OutputType.html">
            <summary>
            HTML format
            </summary>
        </member>
        <member name="F:Models.Summary.OutputType.rtf">
            <summary>
            RTF format
            </summary>
        </member>
        <member name="P:Models.Summary.CaptureErrors">
            <summary>Capture and store error messages?</summary>
        </member>
        <member name="P:Models.Summary.CaptureWarnings">
            <summary>Capture and store warning messages?</summary>
        </member>
        <member name="P:Models.Summary.CaptureSummaryText">
            <summary>Capture and store summary text?</summary>
        </member>
        <member name="M:Models.Summary.OnDoInitialSummary(System.Object,System.EventArgs)">
            <summary>Event handler to create initialise</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Models.Summary.WriteMessage(Models.Core.IModel,System.String)">
            <summary>Write a message to the summary</summary>
            <param name="model">The model writing the message</param>
            <param name="message">The message to write</param>
        </member>
        <member name="M:Models.Summary.WriteWarning(Models.Core.IModel,System.String)">
            <summary>Write a warning message to the summary</summary>
            <param name="model">The model writing the message</param>
            <param name="message">The warning message to write</param>
        </member>
        <member name="M:Models.Summary.WriteError(Models.Core.IModel,System.String)">
            <summary>Write an error message to the summary</summary>
            <param name="model">The model writing the message</param>
            <param name="message">The warning message to write</param>
        </member>
        <member name="M:Models.Summary.CreateInitialConditionsTable">
            <summary>
            Create an initial conditions table in the DataStore.
            </summary>
        </member>
        <member name="M:Models.Summary.WriteSummaryToTextFiles(Models.Core.IStorageReader,System.String)">
            <summary>
            Write a single sumary file for all simulations.
            </summary>
            <param name="storage">The storage where the summary data is stored</param>
            <param name="fileName">The file name to write</param>
        </member>
        <member name="M:Models.Summary.WriteReport(Models.Core.IStorageReader,System.String,System.IO.TextWriter,System.String,Models.Summary.OutputType)">
            <summary>
            Write the summary report to the specified writer.
            </summary>
            <param name="storage">The data store to query</param>
            <param name="simulationName">The simulation name to produce a summary report for</param>
            <param name="writer">Text writer to write to</param>
            <param name="apsimSummaryImageFileName">The file name for the logo. Can be null</param>
            <param name="outtype">Indicates the format to be produced</param>
        </member>
        <member name="M:Models.Summary.GetMessageTable(Models.Core.IStorageReader,System.String)">
            <summary>
            Create a message table ready for writing.
            </summary>
            <param name="storage">The data store</param>
            <param name="simulationName">The simulation name to get messages for</param>
            <returns>The filled message table</returns>
        </member>
        <member name="M:Models.Summary.WriteHeading(System.IO.TextWriter,System.String,Models.Summary.OutputType,MigraDoc.DocumentObjectModel.Document,System.String)">
            <summary>
            Write the specified heading to the TextWriter.
            </summary>
            <param name="writer">Text writer to write to</param>
            <param name="heading">The heading to write</param>
            <param name="outtype">Indicates the format to be produced</param>
            <param name="document">Document object if using MigraDoc to generate output, null otherwise </param>
            <param name="id">Provides an id tag for the heading (html only; optional)</param>
        </member>
        <member name="M:Models.Summary.WriteScript(System.IO.TextWriter,System.Data.DataRow,Models.Summary.OutputType,MigraDoc.DocumentObjectModel.Document)">
            <summary>
            Write out manager script
            </summary>
            <param name="writer">Text writer to write to</param>
            <param name="row">The data table row containing the script</param>
            <param name="outtype">Indicates the format to be produced</param>
            <param name="document">Document object if using MigraDoc to generate output, null otherwise </param>
        </member>
        <member name="M:Models.Summary.WriteTable(System.IO.TextWriter,System.Data.DataTable,Models.Summary.OutputType,System.String,MigraDoc.DocumentObjectModel.Document)">
            <summary>
            Write the specified table to the TextWriter.
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="table">The table to write</param>
            <param name="outtype">Indicates the format to be produced</param>
            <param name="className">The class name of the generated html table</param>
            <param name="document">Document object if using MigraDoc to generate output, null otherwise </param>
        </member>
        <member name="M:Models.Summary.WriteMessageTable(System.IO.TextWriter,System.Data.DataTable,Models.Summary.OutputType,System.Boolean,System.String,MigraDoc.DocumentObjectModel.Document)">
            <summary>
            Write the specified table to the TextWriter.
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="table">The table to write</param>
            <param name="outtype">Indicates the format to be produced</param>
            <param name="includeHeadings">Include headings in the html table produced?</param>
            <param name="className">The class name of the generated html table</param>
            <param name="document">Document object if using MigraDoc to generate output, null otherwise </param>
        </member>
        <member name="M:Models.Summary.FindAllProperties(Models.Core.Model,System.Collections.Generic.List{Models.Core.VariableProperty})">
            <summary>
            Find all properties from the model and fill this.properties.
            </summary>
            <param name="model">The model to search for properties</param>
            <param name="properties">The list of properties to fill</param>
        </member>
        <member name="M:Models.Summary.ConvertInitialConditionsToTables(System.Data.DataTable,System.Collections.Generic.List{System.Data.DataTable})">
            <summary>
            Converts a flat 'InitialConditions' table (from the data store) to a series of data tables.
            </summary>
            <param name="initialConditionsTable">The table to read the rows from</param>
            <param name="tables">The list of tables to create</param>
        </member>
        <member name="M:Models.Summary.AddArrayToTable(System.String,System.String,System.String,System.Boolean,System.Object,System.Data.DataTable)">
            <summary>
            Add a column to the specified table based on values in the 'value'
            </summary>
            <param name="heading">The new column heading</param>
            <param name="dataTypeName">The data type of the value</param>
            <param name="displayFormat">The display format to use when writing the column</param>
            <param name="showTotal">A value indicating whether a total should be added.</param>
            <param name="value">The values containing the array</param>
            <param name="table">The table where a column should be added to</param>
        </member>
        <member name="M:Models.Summary.FormatPropertyValue(System.String,System.Object,System.String)">
            <summary>
            Format the specified value into a string and return the string.
            </summary>
            <param name="dataTypeName">The name of the data type</param>
            <param name="value">The value to format</param>
            <param name="format">The format to use for the value</param>
            <returns>The formatted value as a string</returns>
        </member>
        <member name="T:Models.Surface.AddFaecesType">
            <summary>
            An AddFaeces type that is used for comms between stock and surface organic matter.
            </summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.Defaecations">
            <summary>The defaecations</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.VolumePerDefaecation">
            <summary>The volume per defaecation</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.AreaPerDefaecation">
            <summary>The area per defaecation</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.Eccentricity">
            <summary>The eccentricity</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.OMWeight">
            <summary>The om weight</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.OMN">
            <summary>The omn</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.OMP">
            <summary>The omp</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.OMS">
            <summary>The oms</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.OMAshAlk">
            <summary>The om ash alk</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.NO3N">
            <summary>The n o3 n</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.NH4N">
            <summary>The n h4 n</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.POXP">
            <summary>The poxp</summary>
        </member>
        <member name="F:Models.Surface.AddFaecesType.SO4S">
            <summary>The s o4 s</summary>
        </member>
        <member name="T:Models.Surface.OMFractionType">
            <summary>Type carrying information about the CNP composition of an organic matter fraction</summary>
        </member>
        <member name="F:Models.Surface.OMFractionType.amount">
            <summary>The amount</summary>
        </member>
        <member name="F:Models.Surface.OMFractionType.C">
            <summary>The c</summary>
        </member>
        <member name="F:Models.Surface.OMFractionType.N">
            <summary>The n</summary>
        </member>
        <member name="F:Models.Surface.OMFractionType.P">
            <summary>The p</summary>
        </member>
        <member name="M:Models.Surface.OMFractionType.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.Surface.OMFractionType"/> class.</summary>
        </member>
        <member name="T:Models.Surface.SurfaceOrganicMatter">
            <summary>
            # [Name]
            The surface organic matter model.
            </summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.soil">
            <summary>Link to the soil component</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.summary">
            <summary>Link to the summary component</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.weather">
            <summary>Link to the weather component</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.solutes">
            <summary>Link to Apsim's solute manager module.</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.SoilNitrogen">
            <summary>Link to the soil N model</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.ResidueTypes">
            <summary>Gets or sets the residue types.</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.SurfOM">
            <summary>The surf om</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.numSurfom">
            <summary>The number surfom</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.irrig">
            <summary>The irrig</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.cumeos">
            <summary>The cumeos</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.cf_contrib">
            <summary>The determinant of whether a residue type contributes to the calculation of contact factor (1 or 0)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.C_fract">
            <summary>Fraction of Carbon in plant material (0-1)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.frPoolC">
            <summary>The carbohydrate fraction in fom C pool (0-1)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.frPoolN">
            <summary>The carbohydrate fraction in fom N pool (0-1)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.frPoolP">
            <summary>The carbohydrate fraction in fom P pool (0-1)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.nh4ppm">
            <summary>Ammonium component of residue (ppm)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.no3ppm">
            <summary>Nitrate component of residue (ppm)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.po4ppm">
            <summary>Phosphate component of residue (ppm)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.specific_area">
            <summary>Specific area of residue (ha/kg)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.criticalResidueWeight">
            <summary>critical residue weight below which Thorburn"s cover factor equals one</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.optimumDecompTemp">
            <summary>temperature at which decomp reaches optimum (oC)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.maxCumulativeEOS">
            <summary>cumeos at which decomp rate becomes zero. (mm H2O)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.cnRatioDecompCoeff">
            <summary>Coefficient to determine the magnitude of C:N effects on decomposition of residue</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.cnRatioDecompThreshold">
            <summary>C:N above which decomposition rate of residue declines</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.totalLeachRain">
            <summary>total amount of "leaching" rain to remove all soluble N from surfom</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.minRainToLeach">
            <summary>threshold rainfall amount for leaching to occur</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.criticalMinimumOrganicC">
            <summary>critical minimum org C below which potential decomposition rate is 100% (to avoid numerical imprecision)</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.DefaultCPRatio">
            <summary>Default C:P ratio</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.standingExtinctCoeff">
            <summary>extinction coefficient for standing residues</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.fractionFaecesAdded">
            <summary>fraction of incoming faeces to add</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.actualSOMDecomp">
            <summary>Actual surface organic matter decomposition. Calculated by SoilNitrogen.</summary>
        </member>
        <member name="T:Models.Surface.SurfaceOrganicMatter.FOMPoolDelegate">
            <summary>Delegate for a IncorpFOMPool</summary>
        </member>
        <member name="E:Models.Surface.SurfaceOrganicMatter.IncorpFOMPool">
            <summary>This event is invoked to signal soil nitrogen to incorporate FOM</summary>
        </member>
        <member name="F:Models.Surface.SurfaceOrganicMatter.maxFr">
            <summary>
            Number of pools into which carbon is grouped.
            Currently there are three, indexed as follows:
            0 = carbohydrate
            1 = cellulose
            2 = lignin.
            </summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialResidueName">
            <summary>Gets or sets the name of initial residue pool</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialResidueType">
            <summary>Gets or sets the type of initial residue pool</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialResidueMass">
            <summary>Gets or sets the mass of initial residue pool</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialStandingFraction">
            <summary>Gets or sets the standing fraction of initial residue pool</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialCPR">
            <summary>Gets or sets the Carbon:Phosphorus ratio.</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.InitialCNR">
            <summary>Gets or sets the initial Carbon:Nitrogen ratio.</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.Wt">
            <summary>Total mass of all surface organic materials</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.C">
            <summary>Total carbon of all surface organic carbon</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.N">
            <summary>Total mass of all surface organic nitrogen</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.P">
            <summary>Total mass of all surface organic phosphor</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.NO3">
            <summary>Total mass of nitrate</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.NH4">
            <summary>Total mass of ammonium</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.LabileP">
            <summary>Total mass of labile phosphorus</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.Cover">
            <summary>Fraction of ground covered by all surface OMs</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.tf">
            <summary>Temperature factor for decomposition</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.cf">
            <summary>Contact factor for decomposition</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.wf">
            <summary>Gets the wf.</summary>
        </member>
        <member name="P:Models.Surface.SurfaceOrganicMatter.FractionFaecesAdded">
            <summary>
            Fraction of incoming faeces to add.
            </summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Reset">
            <summary>Called when [reset].</summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.ResidueTypeNames">
            <summary>Return a list of known residue types names</summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Incorporate(System.Double,System.Double)">
            <summary>Incorporates the specified fraction.</summary>
            <param name="fraction">The fraction.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.PotentialDecomposition">
            <summary>Return the potential residue decomposition for today.</summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.AddFaeces(Models.Surface.AddFaecesType)">
            <summary>
            Adds excreta in response to an AddFaeces event
            This is a still the minimalist version, providing
            an alternative to using add_surfaceom directly
            </summary>
            <param name="data">structure holding description of the added faeces</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.AddCover(System.Double,System.Double)">
            <summary>
            "cover1" and "cover2" are numbers between 0 and 1 which
            indicate what fraction of sunlight is intercepted by the
            foliage of plants.  This function returns a number between
            0 and 1 indicating the fraction of sunlight intercepted
            when "cover1" is combined with "cover2", i.e. both sets of
            plants are present.
            </summary>
            <param name="cover1">The cover1.</param>
            <param name="cover2">The cover2.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.GetWeightFromPool(System.String)">
            <summary>Get the weight of the given SOM pool</summary>
            <param name="pool">Name of the pool to get the weight from.</param>
            <returns>The weight of the given pool</returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.SumSurfOMStandingLying(System.Collections.Generic.List{Models.Surface.SurfOrganicMatterType},System.Func{Models.Surface.OMFractionType,System.Double})">
            <summary>Sums the surf om standing lying.</summary>
            <param name="var">The variable.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.SumSurfOMStandingLying(Models.Surface.SurfOrganicMatterType,System.Func{Models.Surface.OMFractionType,System.Double})">
            <summary>Sums the surf om standing lying.</summary>
            <param name="var">The variable.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.SumSurfOM(System.Collections.Generic.List{Models.Surface.SurfOrganicMatterType},System.Func{Models.Surface.SurfOrganicMatterType,System.Double})">
            <summary>Sums the surf om.</summary>
            <param name="var">The variable.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.SumOMFractionType(Models.Surface.OMFractionType[],System.Func{Models.Surface.OMFractionType,System.Double})">
            <summary>Sums the type of the om fraction.</summary>
            <param name="var">The variable.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when a simulation commences.</summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.OnIrrigated(System.Object,Models.Soils.IrrigationApplicationType)">
            <summary>Get irrigation information from an Irrigated event.</summary>
            <param name="sender">The sender.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.OnBiomassRemoved(Models.PMF.BiomassRemovedType)">
            <summary>Called when a plant drops biomass to the soil surface</summary>
            <param name="BiomassRemoved">The biomass removed.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.OnDoSurfaceOrganicMatterDecomposition(System.Object,System.EventArgs)">
            <summary>Do the daily residue decomposition for today.</summary>
            <param name="sender">The event sender</param>
            <param name="args">The event data</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.ReadParam">
            <summary>
            Read in all parameters from parameter file
            </summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.GetResidueNumber(System.String)">
            <summary>Get the solutes number</summary>
            <param name="surfomname">The surfomname.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.PotDecomp(System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Performs manure decomposition taking into account environmental;
            and manure factors (independant to soil N but N balance can modify;
            actual decomposition rates if desired by N model - this is possible;
            because pools are not updated until end of time step - see post routine)
            </summary>
            <param name="c_pot_decomp">The c_pot_decomp.</param>
            <param name="n_pot_decomp">The n_pot_decomp.</param>
            <param name="p_pot_decomp">The p_pot_decomp.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.TemperatureFactor">
            <summary>
            Calculate temperature factor for manure decomposition (0-1).
            <para>
            Notes;
            The temperature factor is a simple function of the square of daily
            average temperature.  The user only needs to give an optimum temperature
            and the code will back calculate the necessary coefficient at compile time.
            </para>
            </summary>
            <returns>temperature factor</returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.ContactFactor">
            <summary>Calculate manure/soil contact factor for manure decomposition (0-1).</summary>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.CNRatioFactor(System.Int32)">
            <summary>Calculate C:N factor for decomposition (0-1).</summary>
            <param name="residue">residue number</param>
            <returns>C:N factor for decomposition(0-1)</returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.MoistureFactor">
            <summary>Calculate moisture factor for manure decomposition (0-1).</summary>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.CoverTotal">
            <summary>Calculate total cover</summary>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Leach(System.Double)">
            <summary>
            Remove mineral N and P from surfom with leaching rainfall and;
            pass to Soil N and Soil P modules.
            </summary>
            <param name="leachRain">The leach rain.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.SendPotDecompEvent">
            <summary>Notify other modules of the potential to decompose.</summary>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.DecomposeSurfom(Models.Soils.SurfaceOrganicMatterDecompType)">
            <summary>Decomposes the surfom.</summary>
            <param name="SOMDecomp">The som decomp.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Decomp(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Performs updating of pools due to surfom decomposition</summary>
            <param name="C_decomp">C to be decomposed</param>
            <param name="N_decomp">N to be decomposed</param>
            <param name="P_decomp">P to be decomposed</param>
            <param name="residue">residue number being dealt with</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Incorp(System.Double,System.Double)">
            <summary>
            Calculate surfom incorporation as a result of tillage and update;
            residue and N pools.
            </summary>
            <param name="fIncorp">The f incorp.</param>
            <param name="tillageDepth">The tillage depth.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.AddNewSurfOM(System.String,System.String)">
            <summary>Adds the new surf om.</summary>
            <param name="newName">The new name.</param>
            <param name="newType">The new type.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.ReadTypeSpecificConstants(System.String,System.Int32,System.Double@)">
            <summary>
            Reads type-specific residue constants from ini-file and places them in c. constants;
            </summary>
            <param name="surfom_type">The surfom_type.</param>
            <param name="i">The i.</param>
            <param name="pot_decomp_rate">The pot_decomp_rate.</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.CoverOfSOM(System.Int32)">
            <summary>
            This function returns the fraction of the soil surface covered by;
            residue according to the relationship from Gregory (1982).
            <para>Notes;</para>
            <para>Gregory"s equation is of the form;</para>
            <para>        Fc = 1.0 - exp (- Am * M)   where Fc = Fraction covered;</para>
            <para>                                          Am = Specific Area (ha/kg)</para>
            <para>                                           M = Mulching rate (kg/ha)</para>
            <para>This residue model keeps track of the total residue area and so we can
            substitute this value (area residue/unit area) for the product_of Am * M.</para>
            </summary>
            <param name="SOMindex">The so mindex.</param>
            <returns></returns>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.Add(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>Adds material to the surface organic matter pool.</summary>
            <param name="mass">The amount of biomass added (kg/ha).</param>
            <param name="N">The amount of N added (ppm).</param>
            <param name="P">The amount of P added (ppm).</param>
            <param name="type">Type of the biomass.</param>
            <param name="name">Name of the biomass written to summary file</param>
        </member>
        <member name="M:Models.Surface.SurfaceOrganicMatter.IncreasePoolArray(System.Double[0:,0:])">
            <summary>Resize2s the d array.</summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="T:Models.Surface.ResidueType">
            <summary>
            Encapsulates a residue type for SurfaceOrganicMatter model
            </summary>
        </member>
        <member name="P:Models.Surface.ResidueType.fom_type">
            <summary>Gets or sets the fom_type.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.derived_from">
            <summary>Gets or sets the derived_from.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.fraction_C">
            <summary>Gets or sets the fraction_ c.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.po4ppm">
            <summary>Gets or sets the po4ppm.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.nh4ppm">
            <summary>Gets or sets the NH4PPM.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.no3ppm">
            <summary>Gets or sets the no3ppm.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.specific_area">
            <summary>Gets or sets the specific_area.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.cf_contrib">
            <summary>Gets or sets the cf_contrib.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.pot_decomp_rate">
            <summary>Gets or sets the pot_decomp_rate.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.fr_c">
            <summary>Gets or sets the FR_C.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.fr_n">
            <summary>Gets or sets the FR_N.</summary>
        </member>
        <member name="P:Models.Surface.ResidueType.fr_p">
            <summary>Gets or sets the FR_P.</summary>
        </member>
        <member name="T:Models.Surface.ResidueTypes">
            <summary>
            Encapsulates a list of residue types for SurfaceOrganicMatter model
            </summary>
        </member>
        <member name="P:Models.Surface.ResidueTypes.ResidueType">
            <summary>Gets or sets the residues.</summary>
        </member>
        <member name="P:Models.Surface.ResidueTypes.Names">
            <summary>Return a list of fom type names</summary>
        </member>
        <member name="M:Models.Surface.ResidueTypes.GetResidueType(System.String)">
            <summary>Gets a specific residue type. Throws if not found.</summary>
            <param name="name">The name of the residue type to find</param>
        </member>
        <member name="M:Models.Surface.ResidueTypes.FillDerived(Models.Surface.ResidueType)">
            <summary>Looks at a residue type and copies properties from the base type if one was specified.</summary>
            <param name="residueType">The residue to examine and change</param>
        </member>
        <member name="T:Models.Surface.SurfOrganicMatterType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.name">
            <summary>The name</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.OrganicMatterType">
            <summary>The organic matter type</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.PotDecompRate">
            <summary>The pot decomp rate</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.no3">
            <summary>The no3</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.nh4">
            <summary>The NH4</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.po4">
            <summary>The po4</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.Standing">
            <summary>The standing</summary>
        </member>
        <member name="F:Models.Surface.SurfOrganicMatterType.Lying">
            <summary>The lying</summary>
        </member>
        <member name="M:Models.Surface.SurfOrganicMatterType.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Models.Surface.SurfOrganicMatterType"/> class.</summary>
        </member>
        <member name="M:Models.Surface.SurfOrganicMatterType.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Models.Surface.SurfOrganicMatterType"/> class.</summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:Models.Tests">
            <summary>
            Test interface.
            </summary>
        </member>
        <member name="P:Models.Tests.Table">
            <summary>
            data table
            </summary>
        </member>
        <member name="P:Models.Tests.AcceptedStats">
            <summary>
            A collection of validated stats.
            </summary>
        </member>
        <member name="P:Models.Tests.AcceptedStatsName">
            <summary>
            A string containing the names of stats in the accepted values.
            Used for checking if the stats class has changed.
            </summary>
        </member>
        <member name="P:Models.Tests.POName">
            <summary>
            The name of the associated Predicted Observed node.
            </summary>
        </member>
        <member name="M:Models.Tests.Test(System.Boolean,System.Boolean)">
            <summary>
            Run tests
            </summary>
            <param name="accept">If true, the stats from this run will be written to file as the accepted stats.</param>
            <param name="GUIrun">If true, do not raise an exception on test failure.</param>
        </member>
        <member name="M:Models.Tests.Document(System.Collections.Generic.List{Models.Core.AutoDocumentation.ITag},System.Int32,System.Int32)">
            <summary>Document the stats.</summary>
            <param name="tags"></param>
            <param name="headingLevel"></param>
            <param name="indent"></param>
        </member>
        <member name="T:Models.Clock">
            <summary>
            The clock model
            </summary>
        </member>
        <member name="F:Models.Clock.args">
            <summary>The arguments</summary>
        </member>
        <member name="F:Models.Clock.Summary">
            <summary>The summary</summary>
        </member>
        <member name="P:Models.Clock.StartDate">
            <summary>Gets or sets the start date.</summary>
            <value>The start date.</value>
        </member>
        <member name="P:Models.Clock.EndDate">
            <summary>Gets or sets the end date.</summary>
            <value>The end date.</value>
        </member>
        <member name="E:Models.Clock.StartOfSimulation">
            <summary>Occurs when [start of simulation].</summary>
        </member>
        <member name="E:Models.Clock.StartOfDay">
            <summary>Occurs when [start of day].</summary>
        </member>
        <member name="E:Models.Clock.StartOfMonth">
            <summary>Occurs when [start of month].</summary>
        </member>
        <member name="E:Models.Clock.StartOfYear">
            <summary>Occurs when [start of year].</summary>
        </member>
        <member name="E:Models.Clock.StartOfWeek">
            <summary>Occurs when [start of week].</summary>
        </member>
        <member name="E:Models.Clock.EndOfDay">
            <summary>Occurs when [end of day].</summary>
        </member>
        <member name="E:Models.Clock.EndOfMonth">
            <summary>Occurs when [end of month].</summary>
        </member>
        <member name="E:Models.Clock.EndOfYear">
            <summary>Occurs when [end of year].</summary>
        </member>
        <member name="E:Models.Clock.EndOfWeek">
            <summary>Occurs when [end of week].</summary>
        </member>
        <member name="E:Models.Clock.EndOfSimulation">
            <summary>Occurs when [end of simulation].</summary>
        </member>
        <member name="E:Models.Clock.DoWeather">
            <summary>Occurs when [do weather].</summary>
        </member>
        <member name="E:Models.Clock.DoDailyInitialisation">
            <summary>Occurs when [do daily initialisation].</summary>
        </member>
        <member name="E:Models.Clock.DoInitialSummary">
            <summary>Occurs when [do initial summary].</summary>
        </member>
        <member name="E:Models.Clock.DoManagement">
            <summary>Occurs when [do management].</summary>
        </member>
        <member name="E:Models.Clock.DoEnergyArbitration">
            <summary>Occurs when [do energy arbitration].</summary>
        </member>
        <member name="E:Models.Clock.DoSoilWaterMovement">
            <summary>Occurs when [do soil water movement].</summary>
        </member>
        <member name="E:Models.Clock.DoSoilTemperature">
            <summary>Occurs when [do soil temperature].</summary>
        </member>
        <member name="E:Models.Clock.DoSoilOrganicMatter">
            <summary>Occurs when [do soil organic matter].</summary>
        </member>
        <member name="E:Models.Clock.DoSurfaceOrganicMatterDecomposition">
            <summary>Occurs when [do surface organic matter decomposition].</summary>
        </member>
        <member name="E:Models.Clock.DoUpdateWaterDemand">
            <summary>Occurs when [do update transpiration].</summary>                   
        </member>
        <member name="E:Models.Clock.DoWaterArbitration">
            <summary>Occurs when [do water arbitration].</summary>
        </member>
        <member name="E:Models.Clock.DoPhenology">
            <summary>Occurs when [do phenology].</summary>                             
        </member>
        <member name="E:Models.Clock.DoPotentialPlantGrowth">
            <summary>Occurs when [do potential plant growth].</summary>
        </member>
        <member name="E:Models.Clock.DoPotentialPlantPartioning">
            <summary>Occurs when [do potential plant partioning].</summary>
        </member>
        <member name="E:Models.Clock.DoNutrientArbitration">
            <summary>Occurs when [do nutrient arbitration].</summary>
        </member>
        <member name="E:Models.Clock.DoActualPlantPartioning">
            <summary>Occurs when [do potential plant partioning].</summary>
        </member>
        <member name="E:Models.Clock.DoActualPlantGrowth">
            <summary>Occurs when [do actual plant growth].</summary>
        </member>
        <member name="E:Models.Clock.DoUpdate">
            <summary>Occurs when [do update].</summary>
        </member>
        <member name="E:Models.Clock.DoStock">
            <summary> Process stock methods in GrazPlan Stock </summary>
        </member>
        <member name="E:Models.Clock.DoLifecycle">
            <summary> Process a Pest and Disease lifecycle object </summary>
        </member>
        <member name="E:Models.Clock.DoManagementCalculations">
            <summary>Occurs when [do management calculations].</summary>
        </member>
        <member name="E:Models.Clock.DoReportCalculations">
            <summary>Occurs when [do report calculations].</summary>
        </member>
        <member name="E:Models.Clock.DoReport">
            <summary>Occurs when [do report].</summary>
        </member>
        <member name="E:Models.Clock.CLEMInitialiseResource">
            <summary>CLEM initialise Resources occurs once at start of simulation</summary>
        </member>
        <member name="E:Models.Clock.CLEMInitialiseActivity">
            <summary>CLEM initialise Activity occurs once at start of simulation</summary>
        </member>
        <member name="E:Models.Clock.CLEMStartOfTimeStep">
            <summary>CLEM start of timestep event</summary>
        </member>
        <member name="E:Models.Clock.CLEMUpdatePasture">
            <summary>CLEM update pasture</summary>
        </member>
        <member name="E:Models.Clock.CLEMPastureReady">
            <summary>CLEM pasture has been added and is ready for use</summary>
        </member>
        <member name="E:Models.Clock.CLEMDoCutAndCarry">
            <summary>CLEM cut and carry</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalBreeding">
            <summary>CLEM Do Animal (Ruminant and Other) Breeding and milk calculations</summary>
        </member>
        <member name="E:Models.Clock.CLEMPotentialIntake">
            <summary>Get potential intake. This includes suckling milk consumption</summary>
        </member>
        <member name="E:Models.Clock.CLEMCalculateManure">
            <summary>Request and allocate resources to all Activities based on UI Tree order of priority. Some activities will obtain resources here and perform actions later</summary>
        </member>
        <member name="E:Models.Clock.CLEMCollectManure">
            <summary>Request and allocate resources to all Activities based on UI Tree order of priority. Some activities will obtain resources here and perform actions later</summary>
        </member>
        <member name="E:Models.Clock.CLEMGetResourcesRequired">
            <summary>Request and perform the collection of maure after resources are allocated and manure produced in time-step</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalMilkProduction">
            <summary>CLEM Calculate Animals (Ruminant and Other) milk production</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalWeightGain">
            <summary>CLEM Calculate Animals(Ruminant and Other) weight gain</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalDeath">
            <summary>CLEM Do Animal (Ruminant and Other) death</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalMilking">
            <summary>CLEM Do Animal (Ruminant and Other) milking</summary>
        </member>
        <member name="E:Models.Clock.CLEMCalculateEcologicalState">
            <summary>CLEM Calculate ecological state after all deaths and before management</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalManage">
            <summary>CLEM Do Animal (Ruminant and Other) Herd Management (Kulling, Castrating, Weaning, etc.)</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalStock">
            <summary>CLEM stock animals to pasture availability or other metrics</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalSell">
            <summary>CLEM sell animals to market including transporting and labour</summary>
        </member>
        <member name="E:Models.Clock.CLEMAnimalBuy">
            <summary>CLEM buy animals including transporting and labour</summary>
        </member>
        <member name="E:Models.Clock.CLEMAgeResources">
            <summary>CLEM Age your resources (eg. Decomose Fodder, Age your labour, Age your Animals)</summary>
        </member>
        <member name="E:Models.Clock.CLEMHerdSummary">
            <summary>CLEM event to calculate monthly herd summary</summary>
        </member>
        <member name="E:Models.Clock.CLEMEndOfTimeStep">
            <summary>CLEM end of timestep event</summary>
        </member>
        <member name="P:Models.Clock.Today">
            <summary>Gets the today.</summary>
            <value>The today.</value>
        </member>
        <member name="P:Models.Clock.FractionComplete">
            <summary>
            Returns the current fraction of the overall simulation which has been completed
            </summary>
        </member>
        <member name="M:Models.Clock.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>An event handler to allow us to initialise ourselves.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Models.Clock.OnDoCommence(System.Object,Models.Core.Runners.RunSimulation.CommenceArgs)">
            <summary>An event handler to signal start of a simulation.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Models.Utilities.Accumulator">
            <summary>
            This class accumulats values of variables
            </summary>
        </member>
        <member name="M:Models.Utilities.Accumulator.#ctor(Models.Core.IModel,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="model"></param>
            <param name="variableName"></param>
            <param name="numberOfDays">Number of days to accumulate</param>
        </member>
        <member name="M:Models.Utilities.Accumulator.Update">
            <summary>
            Perform update
            </summary>
        </member>
        <member name="P:Models.Utilities.Accumulator.Sum">
            <summary>
            Return the sum 
            </summary>
        </member>
        <member name="T:Models.Utilities.R">
            <summary>
            Class for executing arbitrary R code through APSIM.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.windowsDownloadUrl">
            <summary>
            Stable link which always points to the latest Windows release.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.workingDirectory">
            <summary>
            Path to a temporary working directory for the script.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.proc">
            <summary>
            Takes care of initialising and starting the process, reading output, etc.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.rScript">
            <summary>
            Holds the path to the Rscript executable.
            </summary>
        </member>
        <member name="M:Models.Utilities.R.#ctor">
            <summary>
            Default constructor. Checks if R is installed.
            On Windows, prompts user to install if necessasry.
            Will throw on 'Nix systems if R is not installed.
            </summary>
        </member>
        <member name="M:Models.Utilities.R.Finalize">
            <summary>
            Destructor - deletes working directory.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.Finished">
            <summary>
            Invoked when the R script is finished.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.OnDownload">
            <summary>
            Method to be run before downloading R and installing R.
            R will not be downloaded if this returns false.
            </summary>
        </member>
        <member name="F:Models.Utilities.R.OnDownloadCompleted">
            <summary>
            Method to run once R has finished downloading.
            </summary>
        </member>
        <member name="P:Models.Utilities.R.Output">
            <summary>
            Standard output generated by the script. 
            This value is not set until the script has finished running
            (when <see cref="F:Models.Utilities.R.Finished"/> is invoked).
            </summary>
        </member>
        <member name="P:Models.Utilities.R.Error">
            <summary>
            Standard error generated by the script
            This value is not set until the script has finished running
            (when <see cref="F:Models.Utilities.R.Finished"/> is invoked).
            </summary>
        </member>
        <member name="M:Models.Utilities.R.RunAsync(System.String,System.String)">
            <summary>
            Starts the execution of an R script.
            </summary>
            <param name="fileName">Path to an R script. May be a file on disk, or an embedded resource.</param>
            <param name="arguments">Command line arguments to pass to the script.</param>
        </member>
        <member name="M:Models.Utilities.R.Run(System.String,System.String,System.Boolean)">
            <summary>
            Runs an R script and blocks the current thread until the script finishes its execution.
            </summary>
            <param name="fileName">Path to an R script. May be a file on disk, or an embedded resource.</param>
            <param name="arguments">Command line arguments to pass to the script.</param>
            <param name="throwOnError">Throw on error from R?</param>
            <returns>Standard output generated by the R script.</returns>
        </member>
        <member name="M:Models.Utilities.R.RunToTable(System.String,System.String)">
            <summary>
            Runs an R script (synchronously) and returns the stdout as a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="fileName">Path to an R script. May be a file on disk, or an embedded resource.</param>
            <param name="arguments">Command line arguments to pass to the script.</param>
            <returns>Output formatted as a <see cref="T:System.Data.DataTable"/>.</returns>
            <remarks>Not sure that this method really belongs in this class, but it can stay here for now.</remarks>
        </member>
        <member name="M:Models.Utilities.R.Kill">
            <summary>
            Kills the process running the R script.
            </summary>
        </member>
        <member name="M:Models.Utilities.R.GetPackages(System.Collections.Generic.List{System.String})">
            <summary>
            Installs R packages if they are not already installed.
            </summary>
            <param name="packages">List of packages to be installed.</param>
            <returns>StdOut generated by R.</returns>
        </member>
        <member name="M:Models.Utilities.R.GetPackage(System.String)">
            <summary>
            Installs an R package if it is not already installed.
            </summary>
            <param name="package">Name of the package to be installed.</param>
            <returns>Output generated by R.</returns>
        </member>
        <member name="M:Models.Utilities.R.OnExited(System.Object,System.EventArgs)">
            <summary>
            Runs when the script has finished running.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Models.Utilities.R.GetRExePath">
            <summary>
            Get path to RScript.exe
            By default we try to use the 64-bit version.
            </summary>
            <returns>Path to RScript.exe</returns>
        </member>
        <member name="M:Models.Utilities.R.GetRInstallDirectoryFromRegistry">
            <summary>
            Gets the directory that the latest version of R is installed to.
            </summary>
        </member>
        <member name="M:Models.Utilities.R.GetSubKeys(System.String)">
            <summary>
            Gets all sub keys of a given key name in the registry.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Models.Utilities.R.DownloadR">
            <summary>
            Downloads R to the user's machine.
            </summary>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.IO.PathTooLongException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.Net.WebException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.Exception" />
        </member>
        <member name="M:Models.Utilities.R.InstallR(System.String)">
            <summary>
            Runs the R installer.
            </summary>
            <param name="installerPath">Path to the installer.</param>
        </member>
        <member name="M:Models.Utilities.R.GetPathToPackage(System.String)">
            <summary>
            Gets the path to an executable (uses the Unix which utility). 
            Throws if the package does not exist. Obviously this will not
            work on Windows.
            </summary>
        </member>
        <member name="T:Models.WaterModel.CNReductionForCover">
            <summary>Implements the curve number reduction caused by cover.</summary>
        </member>
        <member name="F:Models.WaterModel.CNReductionForCover.EffectiveCoverMultiplier">
            <summary>A multiplier to CoverTot to get effective cover for runoff.</summary>
        </member>
        <member name="F:Models.WaterModel.CNReductionForCover.canopies">
            <summary>A list of all canopies.</summary>
        </member>
        <member name="F:Models.WaterModel.CNReductionForCover.surfaceOrganicMatter">
            <summary>A link to SurfaceOrganicMatter</summary>
        </member>
        <member name="P:Models.WaterModel.CNReductionForCover.CNCov">
            <summary>Gets or sets the cn cov.</summary>
        </member>
        <member name="P:Models.WaterModel.CNReductionForCover.CNRed">
            <summary>Gets or sets the cn red.</summary>
        </member>
        <member name="P:Models.WaterModel.CNReductionForCover.CanopyHeights">
            <summary>Canopy heights. Used by EffectiveCoverMultipler.</summary>
        </member>
        <member name="M:Models.WaterModel.CNReductionForCover.Value(System.Int32)">
            <summary>Returns the value to subtract from curve number due to cover.</summary>
        </member>
        <member name="M:Models.WaterModel.CNReductionForCover.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.WaterModel.CNReductionForCover.CalcCoverForRunoff">
            <summary>Calculate an effective cover that is used for runoff.</summary>
            <returns>The effective cover to use in the runoff calculations.</returns>
        </member>
        <member name="M:Models.WaterModel.CNReductionForCover.addCover(System.Double,System.Double)">
            <summary>Combines two cover values.</summary>
            <param name="cover1">First cover (0-1).</param>
            <param name="cover2">Second cover (0-1).</param>
            <returns></returns>
        </member>
        <member name="T:Models.WaterModel.CNReductionForTillage">
            <summary>
            Implements the curve number reduction caused by tillage.
            Mark Littleboy's tillage effect on runoff (used in PERFECT v2.0)
            Littleboy, Cogle, Smith, Yule and Rao(1996).  Soil management and production
            of alfisols in the SAT's I. Modelling the effects of soil management on runoff
            and erosion.Aust.J.Soil Res. 34: 91-102.
            </summary>
        </member>
        <member name="F:Models.WaterModel.CNReductionForTillage.weather">
            <summary>Link to the weather component.</summary>
        </member>
        <member name="F:Models.WaterModel.CNReductionForTillage.cumWaterSinceTillage">
            <summary>The cumulated amount of rainfall since the tillage date.</summary>
        </member>
        <member name="P:Models.WaterModel.CNReductionForTillage.tillageCnCumWater">
            <summary>The amount of rain required to cease curve number reduction.</summary>
        </member>
        <member name="P:Models.WaterModel.CNReductionForTillage.tillageCnRed">
            <summary>The amount to reduce curve number by the day after tillage (0-100).</summary>
        </member>
        <member name="M:Models.WaterModel.CNReductionForTillage.Value(System.Int32)">
            <summary>Returns the value to subtract from curve number due to tillage.</summary>
        </member>
        <member name="M:Models.WaterModel.CNReductionForTillage.OnTillageCompleted(System.Object,Models.Soils.TillageType)">
            <summary>
            Called when a tillage event has occurred.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="tillageType">The type of tillage performed.</param>
        </member>
        <member name="M:Models.WaterModel.CNReductionForTillage.OnDoDailyInitialisation(System.Object,System.EventArgs)">
            <summary>
            Called at the start of every day.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Models.WaterModel.UnitConversion">
            <summary>
            Handy unit conversions.
            </summary>
        </member>
        <member name="F:Models.WaterModel.UnitConversion.mm2m">
            <summary>mm to m</summary>
        </member>
        <member name="F:Models.WaterModel.UnitConversion.sm2smm">
            <summary>m2 to mm2</summary>
        </member>
        <member name="T:Models.WaterModel.EvaporationModel">
             <summary>
            Soil evaporation is assumed to take place in two stages: the constant and the falling rate stages. 
            
             In the first stage the soil is sufficiently wet for water to be transported to the surface at a rate 
             at least equal to the potential evaporation rate. Potential evapotranspiration is calculated using an 
             equilibrium evaporation concept as modified by Priestly and Taylor(1972).
            
             Once the water content of the soil has decreased below a threshold value the rate of supply from the soil 
             will be less than potential evaporation (second stage evaporation). These behaviors are described in SoilWater 
             through the use of two parameters: U and CONA.
            
             The parameter U (as from CERES) represents the amount of cumulative evaporation before soil supply decreases 
             below atmospheric demand. The rate of soil evaporation during the second stage is specified as a function of 
             time since the end of first stage evaporation. The parameter CONA (from PERFECT) specifies the change in 
             cumulative second stage evaporation against the square root of time.
             
                i.e. Es = CONA t<sup>1/2</sup> 
            
             Water lost by evaporation is removed from the surface layer of the soil profile thus this layer can dry 
             below the wilting point or lower limit (LL) to a specified air-dry water content (air_dry). 
             
             ![Alt Text](CurveNumberCover.png) 
             Figure: Cumulative Soil Evaporation through time for U = 6 mm and CONA = 3.5.
            
             For t &lt;=  t<sub>1</sub>
                Es = Eos
             For t &gt; t<sub>1</sub>
                Es = U x t + CONA x Sqrt(t-t<sub>1</sub>)
             </summary>
        </member>
        <member name="F:Models.WaterModel.EvaporationModel.soil">
            <summary>The water movement model.</summary>
        </member>
        <member name="F:Models.WaterModel.EvaporationModel.sumes1">
            <summary>cumulative soil evaporation in stage 1 (mm)</summary>
        </member>
        <member name="F:Models.WaterModel.EvaporationModel.sumes2">
            <summary>cumulative soil evaporation in stage 2 (mm)</summary>
        </member>
        <member name="F:Models.WaterModel.EvaporationModel.t">
            <summary>time after 2nd-stage soil evaporation begins (d)</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.SALB">
            <summary>Gets or sets the soil albedo.</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.SummerCona">
            <summary>Gets or sets the summer cona.</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.WinterCona">
            <summary>Gets or sets the winter cona.</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.SummerU">
            <summary>Gets or sets the summer U.</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.WinterU">
            <summary>Gets or sets the winter U.</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.SummerDate">
            <summary>Gets or sets the winter date (e.g. "1-nov").</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.WinterDate">
            <summary>Gets or sets the winter date (e.g. "1-apr").</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.Eo">
            <summary>Atmospheric potential evaporation (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.Eos">
            <summary>Eo reduced due to shading (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.Es">
            <summary>Es - actual evaporation (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.CONA">
            <summary>CONA that was used.</summary>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.U">
            <summary>U that was used.</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.Calculate">
            <summary>Calculate soil evaporation.</summary>
            <returns></returns>
        </member>
        <member name="P:Models.WaterModel.EvaporationModel.isSummer">
            <summary>Return true if simulation is in summer.</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.CalcEo">
            <summary>Calculate the Eo (atmospheric potential)</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.soilwat2_eeq_fac">
            <summary>Calculate the Equilibrium Evaporation Rate</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.CalcEoReducedDueToShading">
            <summary>Calculate potential soil evap after modification for crop cover and residue weight.</summary>
        </member>
        <member name="M:Models.WaterModel.EvaporationModel.CalcEs">
            <summary>calculate actual evaporation from soil surface (es)</summary>
        </member>
        <member name="T:Models.WaterModel.ISoil">
            <summary>Interface for a soil.</summary>
        </member>
        <member name="P:Models.WaterModel.ISoil.Water">
            <summary>Amount of water in the soil (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.ISoil.Infiltration">
            <summary>Infiltration (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.ISoil.PotentialRunoff">
            <summary>Gets todays potential runoff (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.ISoil.Properties">
            <summary>Provides access to the soil properties.</summary>
        </member>
        <member name="T:Models.WaterModel.LateralFlowModel">
             <summary>
             Lateral movement of water is calculated from a user specified lateral inflow ('InFlow'). 
             
             Lateral Outflow is the flow that occurs as a result of the soil water going above DUL and the soil being on a slope. So if there is no slope and the water goes above DUL there is no lateral outflow. KLAT is just the lateral resistance of the soil to this flow. It is a soil water conductivity.
            
             The calculation of lateral outflow on a layer basis is now performed using the equation: 
             Lateral flow for a layer = KLAT * d * s / (1 + s<sup>2</sup>)<sup>0.5</sup> * L / A * unit conversions.
             Where: 
                 KLAT = lateral conductivity (mm/day)
                 d = depth of saturation in the layer(mm) = Thickness * (SW - DUL) / (SAT - DUL) if SW > DUL.
                 (Note this allows lateral flow in any "saturated" layer, not just those inside a water table.)
                 s = slope(m / m)
                 L = catchment discharge width. Basically, it's the width of the downslope boundary of the catchment. (m)
                 A = catchment area. (m<sup>2</sup>)
             
             NB. with Lateral Inflow it is assumed that ALL the water goes straight into the layer. 
             Irrespective of the layers ability to hold it. It is like an irrigation. 
             KLAT has no effect and does not alter the amount of water coming into the layer. 
             KLAT only alters the amount of water flowing out of the layer
             </summary>
        </member>
        <member name="F:Models.WaterModel.LateralFlowModel.soil">
            <summary>The water movement model.</summary>
        </member>
        <member name="P:Models.WaterModel.LateralFlowModel.DischargeWidth">
            <summary>The discharge_width (m)</summary>
        </member>
        <member name="P:Models.WaterModel.LateralFlowModel.Slope">
            <summary>The slope</summary>
        </member>
        <member name="P:Models.WaterModel.LateralFlowModel.CatchmentArea">
            <summary>The catchment_area (m2)</summary>
        </member>
        <member name="P:Models.WaterModel.LateralFlowModel.KLAT">
            <summary>The KLAT (mm/day)</summary>
        </member>
        <member name="P:Models.WaterModel.LateralFlowModel.InFlow">
            <summary>The amount of incoming water (mm)</summary>
        </member>
        <member name="M:Models.WaterModel.LateralFlowModel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:Models.WaterModel.LateralFlowModel.Values">
            <summary>Perform the movement of water.</summary>
        </member>
        <member name="T:Models.WaterModel.RunoffModel">
             <summary>
             Runoff from rainfall is calculated using the USDA-Soil Conservation Service procedure known as the curve number technique. 
             The procedure uses total precipitation from one or more storms occurring on a given day to estimate runoff.
             The relation excludes duration of rainfall as an explicit variable, and so rainfall intensity is ignored.
             When irrigation is applied it can optionally be included in the runoff calculation. This flag (willRunoff) can be set
             when applying irrigation.
             
             ![Alt Text](RunoffRainfallCurves.png)
             Figure: Runoff response curves (ie runoff as a function of total daily rainfall) are specified by numbers from 0 (no runoff) to 100 (all runoff). 
             Response curves for three runoff curve numbers for rainfall varying between 0 and 100 mm per day.
             
             The user supplies a curve number for average antecedent rainfall conditions (CN2Bare). 
             From this value the wet (high runoff potential) response curve and the dry (low runoff potential) 
             response curve are calculated. The SoilWater module will then use the family of curves between these 
             two extremes for calculation of runoff depending on the daily moisture status of the soil. 
             The effect of soil moisture on runoff is confined to the effective hydraulic depth as specified in the 
             module's ini file and is calculated to give extra weighting to layers closer to the soil surface.
             ![Alt Text](RunoffResponseCurve.png)
             Figure: Runoff response curves (ie runoff as a function of total daily rainfall) are specified by numbers from 0 (no runoff) to 100 (all runoff). 
            
             ![Alt Text](CurveNumberCover.png) 
             Figure: Residue cover effect on runoff curve number where bare soil curve number is 75 and total reduction in 
             curve number is 20 at 80% cover. 
             
             Surface residues inhibit the transport of water across the soil surface during runoff events and so different 
             families of response curves are used according to the amount of crop and residue cover.The extent of the effect 
             on runoff is specified by a threshold surface cover (CNCov), above which there is no effect, and the corresponding 
             curve number reduction (CNRed). 
            
             Tillage of the soil surface also reduces runoff potential, and a similar modification of Curve Number is used to 
             represent this process. A tillage event is directed to the module, specifying cn_red, the CN reduction, and cn_rain, 
             the rainfall amount required to remove the tillage roughness. CN2 is immediately reduced and increases linearly with 
             cumulative rain, ie.roughness is smoothed out by rain. 
             </summary>
        </member>
        <member name="F:Models.WaterModel.RunoffModel.soil">
            <summary>The water movement model.</summary>
        </member>
        <member name="F:Models.WaterModel.RunoffModel.reductionForCover">
            <summary>A function for reducing CN due to cover.</summary>
        </member>
        <member name="F:Models.WaterModel.RunoffModel.reductionForTillage">
            <summary>A function for reducing CN due to tillage.</summary>
        </member>
        <member name="F:Models.WaterModel.RunoffModel.hydrolEffectiveDepth">
            <summary>Effective hydraulic depth (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.RunoffModel.CN2Bare">
            <summary>Gets or sets the c n2 bare.</summary>
        </member>
        <member name="M:Models.WaterModel.RunoffModel.Value(System.Int32)">
            <summary>Calculate and return the runoff (mm).</summary>
        </member>
        <member name="M:Models.WaterModel.RunoffModel.RunoffWeightingFactor">
            <summary>
            Calculate the weighting factor hydraulic effectiveness used
            to weight the effect of soil moisture on runoff.
            </summary>
            <returns>Weighting factor for runoff</returns>
        </member>
        <member name="T:Models.WaterModel.SaturatedFlowModel">
            <summary>
            When water content in any layer is below SAT but above DUL, a fraction of the water drains to the next 
            deepest layer each day. 
            
            Flux = SWCON x (SW - DUL)
            
            Infiltration or water movement into any layer that exceeds the saturation capacity of the layer automatically 
            cascades to the next layer.
            </summary>
        </member>
        <member name="F:Models.WaterModel.SaturatedFlowModel.soil">
            <summary>The water movement model.</summary>
        </member>
        <member name="P:Models.WaterModel.SaturatedFlowModel.SWCON">
            <summary>Gets or sets the swcon.</summary>
        </member>
        <member name="P:Models.WaterModel.SaturatedFlowModel.backedUpSurface">
            <summary>Amount of water (mm) backed up.</summary>
        </member>
        <member name="P:Models.WaterModel.SaturatedFlowModel.Values">
            <summary>Perform the movement of water.</summary>
        </member>
        <member name="T:Models.WaterModel.SoilModel">
             <summary>
             The SoilWater module is a cascading water balance model that owes much to its precursors in 
             CERES (Jones and Kiniry, 1986) and PERFECT(Littleboy et al, 1992). 
             The algorithms for redistribution of water throughout the soil profile have been inherited from 
             the CERES family of models.
            
             The water characteristics of the soil are specified in terms of the lower limit (ll15), 
             drained upper limit(dul) and saturated(sat) volumetric water contents. Water movement is 
             described using separate algorithms for saturated or unsaturated flow. It is notable that 
             redistribution of solutes, such as nitrate- and urea-N, is carried out in this module.
            
             Modifications adopted from PERFECT include:
             * the effects of surface residues and crop cover on modifying runoff and reducing potential soil evaporation,
             * small rainfall events are lost as first stage evaporation rather than by the slower process of second stage evaporation, and
             * specification of the second stage evaporation coefficient(cona) as an input parameter, providing more flexibility for describing differences in long term soil drying due to soil texture and environmental effects.
            
             The module is interfaced with SurfaceOrganicMatter and crop modules so that simulation of the soil water balance 
             responds to change in the status of surface residues and crop cover(via tillage, decomposition and crop growth).
            
             Enhancements beyond CERES and PERFECT include:
             * the specification of swcon for each layer, being the proportion of soil water above dul that drains in one day
             * isolation from the code of the coefficients determining diffusivity as a function of soil water
               (used in calculating unsaturated flow).Choice of diffusivity coefficients more appropriate for soil type have been found to improve model performance.
             * unsaturated flow is permitted to move water between adjacent soil layers until some nominated gradient in 
               soil water content is achieved, thereby accounting for the effect of gravity on the fully drained soil water profile.
            
             SoilWater is called by APSIM on a daily basis, and typical of such models, the various processes are calculated consecutively. 
             This contrasts with models such as SWIM that solve simultaneously a set of differential equations that describe the flow processes.
             </summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.properties">
            <summary>Link to the soil properties.</summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.lateralFlowModel">
            <summary>Link to the lateral flow model.</summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.runoffModel">
            <summary>Link to the runoff model.</summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.saturatedFlow">
            <summary>Link to the saturated flow model.</summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.unsaturatedFlow">
            <summary>Link to the unsaturated flow model.</summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.evaporationModel">
            <summary>Link to the evaporation model.</summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.waterTableModel">
            <summary>Link to the water table model.</summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.weather">
            <summary>A link to weather data.</summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.irrigation">
            <summary>A link to a irrigation data.</summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.summary">
            <summary>A link to a summary data.</summary>
        </member>
        <member name="F:Models.WaterModel.SoilModel.solutes">
            <summary>Link to Apsim's solute manager module.</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.Water">
            <summary>Amount of water in the soil (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.Runon">
            <summary>Runon (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.CanopyInterception">
            <summary>The amount of rainfall intercepted by the canopy (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.ResidueInterception">
            <summary>The amount of rainfall intercepted by the residue (mm)</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.SoluteFluxEfficiency">
            <summary>The efficiency (0-1) that solutes move down with water.</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.SoluteFlowEfficiency">
            <summary>The efficiency (0-1) that solutes move up with water.</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.LateralFlow">
            <summary>Lateral flow (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.Runoff">
            <summary>Runoff (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.Infiltration">
            <summary>Infiltration (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.Drain">
            <summary>Drainage (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.Evaporation">
            <summary>Evaporation (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.WaterTableDepth">
            <summary>Water table depth (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.Flux">
            <summary>Flux. Water moving down (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.Flow">
            <summary>Flow. Water moving up (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.PotentialInfiltration">
            <summary>Gets todays potential infiltration (mm). Irrigation not included.</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.PotentialRunoff">
            <summary>Gets todays potential runoff (mm).</summary>
        </member>
        <member name="P:Models.WaterModel.SoilModel.Properties">
            <summary>Provides access to the soil properties.</summary>
        </member>
        <member name="M:Models.WaterModel.SoilModel.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>Called when a simulation commences.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Models.WaterModel.SoilModel.OnDoSoilWaterMovement(System.Object,System.EventArgs)">
            <summary>Called by CLOCK to let this model do its water movement.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Models.WaterModel.SoilModel.MoveDown(System.Double[],System.Double[])">
            <summary>Move water down the profile</summary>
            <param name="water">The water values</param>
            <param name="flux">The amount to move down</param>
        </member>
        <member name="M:Models.WaterModel.SoilModel.MoveUp(System.Double[],System.Double[])">
            <summary>Move water up the profile.</summary>
            <param name="water">The water values.</param>
            <param name="flow">The amount to move up.</param>
        </member>
        <member name="M:Models.WaterModel.SoilModel.CalculateSoluteMovementDown(System.Double[],System.Double[],System.Double[],System.Double)">
            <summary>Calculate the solute movement DOWN based on flux.</summary>
            <param name="solute"></param>
            <param name="water"></param>
            <param name="flux"></param>
            <param name="efficiency"></param>
            <returns></returns>
        </member>
        <member name="M:Models.WaterModel.SoilModel.CalculateSoluteMovementUpDown(System.Double[],System.Double[],System.Double[],System.Double)">
            <summary>Calculate the solute movement UP and DOWN based on flow.</summary>
            <param name="solute"></param>
            <param name="water"></param>
            <param name="flux"></param>
            <param name="efficiency"></param>
            <returns></returns>
        </member>
        <member name="M:Models.WaterModel.SoilModel.CalculateSoluteMovementUp(System.Double[],System.Double[],System.Double[],System.Double)">
            <summary>Calculate the solute movement UP based on flow.</summary>
            <param name="solute"></param>
            <param name="water"></param>
            <param name="flow"></param>
            <param name="efficiency"></param>
            <returns></returns>
        </member>
        <member name="M:Models.WaterModel.SoilModel.CheckForErrors">
            <summary>Checks for soil for errors.</summary>
        </member>
        <member name="T:Models.WaterModel.UnsaturatedFlowModel">
             <summary>
             For water contents below DUL, movement depends upon the water content gradient between adjacent layers and the diffusivity,
             which is a function of the average water contents of the two layers.
            
             Unsaturated flow may occur both towards the surface and downwards, but cannot move water out of the bottom of 
             the deepest layer in the profile. Flow between adjacent layers ceases at a soil water gradient (gravity_gradient) 
             specified in the SoilWater ini file.
            
             The diffusivity is defined by two parameters set by the user (diffus_const, diffus_slope) in the SoilWater 
             parameter set (Default values, from CERES, are 88 and 35.4, but 40 and 16 have been found to be more appropriate 
             for describing water movement in cracking clay soils). 
            
             Diffusivity = diffus_const x exp(diffus_slope x thet_av)
            
             where
                thet_av is the average of SW - LL15 across the two layers.
                Flow = Diffusivity x Volumetric Soil Water Gradient
             </summary>
        </member>
        <member name="F:Models.WaterModel.UnsaturatedFlowModel.soil">
            <summary>The water movement model.</summary>
        </member>
        <member name="P:Models.WaterModel.UnsaturatedFlowModel.DiffusConst">
            <summary>
            Gets or sets the diffusivity constant for soil texture
            </summary>
        </member>
        <member name="P:Models.WaterModel.UnsaturatedFlowModel.DiffusSlope">
            <summary>
            Gets or sets the diffusivity slope for diffusivity/soil water content relationship
            </summary>
        </member>
        <member name="P:Models.WaterModel.UnsaturatedFlowModel.Values">
            <summary>Calculate unsaturated flow below drained upper limit.</summary>
        </member>
        <member name="T:Models.WaterModel.WaterTableModel">
            <summary>
            Water table is the depth (in mm) below the ground surface of the first layer which is above saturation.
            </summary>
        </member>
        <member name="F:Models.WaterModel.WaterTableModel.soil">
            <summary>The water movement model.</summary>
        </member>
        <member name="P:Models.WaterModel.WaterTableModel.Depth">
            <summary>Depth of water table (mm)</summary>
        </member>
        <member name="M:Models.WaterModel.WaterTableModel.Value(System.Int32)">
            <summary>Calculate water table depth.</summary>
        </member>
        <member name="M:Models.WaterModel.WaterTableModel.SaturatedFraction(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>Calculate the saturated fraction for the specified layer index.</summary>
            <param name="layerIndex">The layer number</param>
            <param name="Water">The water values.</param>
            <param name="DUL">The drained upper limit values.</param>
            <param name="SAT">The saturation values.</param>
            <returns></returns>
        </member>
        <member name="T:Models.ControlledEnvironment">
            <summary>
             Reads in controlled environment weather data and makes it available to models.
            </summary>
        </member>
        <member name="F:Models.ControlledEnvironment.clock">
            <summary>
            A link to the clock model.
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.StartDate">
            <summary>
            Gets the start date of the weather file
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.EndDate">
            <summary>
            Gets the end date of the weather file
            </summary>
        </member>
        <member name="E:Models.ControlledEnvironment.PreparingNewWeatherData">
            <summary>
            This event will be invoked immediately before models get their weather data.
            models and scripts an opportunity to change the weather data before other models
            reads it.
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.MaxT">
            <summary>
            Gets or sets the maximum temperature (oC)
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.MinT">
            <summary>
            Gets or sets the minimum temperature (oC)
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.MeanT">
            <summary>
            Daily Mean temperature (oC)
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.VPD">
            <summary>
            Daily mean VPD (hPa)
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.Rain">
            <summary>
            Gets or sets the rainfall (mm)
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.Radn">
            <summary>
            Gets or sets the solar radiation. MJ/m2/day
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.PanEvap">
            <summary>
            Gets or sets the Pan Evaporation (mm) (Class A pan)
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.VP">
            <summary>
            Gets or sets the vapor pressure (hPa)
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.Wind">
            <summary>
            Gets or sets the wind value found in weather file or zero if not specified. (code says 3.0 not zero)
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.CO2">
            <summary>
            Gets or sets the CO2 level. If not specified in the weather file the default is 350.
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.AirPressure">
            <summary>
            Gets or sets the atmospheric air pressure. If not specified in the weather file the default is 1010 hPa.
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.Latitude">
            <summary>
            Gets the latitude
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.Tav">
            <summary>
            Gets the average temperature
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.Amp">
            <summary>
            Gets the temperature amplitude.
            </summary>
        </member>
        <member name="P:Models.ControlledEnvironment.DayLength">
            <summary>
            Gets the duration of the day in hours.
            </summary>
        </member>
        <member name="M:Models.ControlledEnvironment.CalculateDayLength(System.Double)">
            <summary>
            Calculate daylength using a given twilight angle
            </summary>
            <param name="twilight"></param>
            <returns></returns>
        </member>
        <member name="M:Models.ControlledEnvironment.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Models.ControlledEnvironment.OnDoWeather(System.Object,System.EventArgs)">
            <summary>
            An event handler for the daily DoWeather event.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:Models.Weather">
            <summary>
             Reads in weather data and makes it available to other models.
            </summary>
        </member>
        <member name="F:Models.Weather.clock">
            <summary>
            A link to the clock model.
            </summary>
        </member>
        <member name="F:Models.Weather.reader">
            <summary>
            A reference to the text file reader object
            </summary>
        </member>
        <member name="F:Models.Weather.maximumTemperatureIndex">
            <summary>
            The index of the maximum temperature column in the weather file
            </summary>
        </member>
        <member name="F:Models.Weather.minimumTemperatureIndex">
            <summary>
            The index of the minimum temperature column in the weather file
            </summary>
        </member>
        <member name="F:Models.Weather.radiationIndex">
            <summary>
            The index of the solar radiation column in the weather file
            </summary>
        </member>
        <member name="F:Models.Weather.rainIndex">
            <summary>
            The index of the rainfall column in the weather file
            </summary>
        </member>
        <member name="F:Models.Weather.evaporationIndex">
            <summary>
            The index of the evaporation column in the weather file
            </summary>
        </member>
        <member name="F:Models.Weather.rainfallHoursIndex">
            <summary>
            The index of the evaporation column in the weather file
            </summary>
        </member>
        <member name="F:Models.Weather.vapourPressureIndex">
            <summary>
            The index of the vapor pressure column in the weather file
            </summary>
        </member>
        <member name="F:Models.Weather.windIndex">
            <summary>
            The index of the wind column in the weather file
            </summary>
        </member>
        <member name="F:Models.Weather.DiffuseFractionIndex">
            <summary>
            The index of the DiffuseFraction column in the weather file
            </summary>
        </member>
        <member name="F:Models.Weather.doSeek">
            <summary>
            A flag indicating whether this model should do a seek on the weather file
            </summary>
        </member>
        <member name="E:Models.Weather.PreparingNewWeatherData">
            <summary>
            This event will be invoked immediately before models get their weather data.
            models and scripts an opportunity to change the weather data before other models
            reads it.
            </summary>
        </member>
        <member name="P:Models.Weather.FileName">
            <summary>
            Gets or sets the file name. Should be relative filename where possible.
            </summary>
        </member>
        <member name="P:Models.Weather.FullFileName">
            <summary>
            Gets or sets the full file name (with path). The user interface uses this. 
            </summary>
        </member>
        <member name="P:Models.Weather.ExcelWorkSheetName">
            <summary>
            Used to hold the WorkSheet Name if data retrieved from an Excel file
            </summary>
        </member>
        <member name="P:Models.Weather.StartDate">
            <summary>
            Gets the start date of the weather file
            </summary>
        </member>
        <member name="P:Models.Weather.EndDate">
            <summary>
            Gets the end date of the weather file
            </summary>
        </member>
        <member name="P:Models.Weather.MaxT">
            <summary>
            Gets or sets the maximum temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Weather.MinT">
            <summary>
            Gets or sets the minimum temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Weather.MeanT">
            <summary>
            Daily Mean temperature (oC)
            </summary>
        </member>
        <member name="P:Models.Weather.VPD">
            <summary>
            Daily mean VPD (hPa)
            </summary>
        </member>
        <member name="P:Models.Weather.Rain">
            <summary>
            Gets or sets the rainfall (mm)
            </summary>
        </member>
        <member name="P:Models.Weather.Radn">
            <summary>
            Gets or sets the solar radiation. MJ/m2/day
            </summary>
        </member>
        <member name="P:Models.Weather.PanEvap">
            <summary>
            Gets or sets the Pan Evaporation (mm) (Class A pan)
            </summary>
        </member>
        <member name="P:Models.Weather.RainfallHours">
            <summary>
            Gets or sets the number of hours rainfall occured in
            </summary>
        </member>
        <member name="P:Models.Weather.VP">
            <summary>
            Gets or sets the vapor pressure (hPa)
            </summary>
        </member>
        <member name="P:Models.Weather.Wind">
            <summary>
            Gets or sets the wind value found in weather file or zero if not specified. (code says 3.0 not zero)
            </summary>
        </member>
        <member name="P:Models.Weather.DiffuseFraction">
            <summary>
            Gets or sets the DF value found in weather file or zero if not specified
            </summary>
        </member>
        <member name="P:Models.Weather.CO2">
            <summary>
            Gets or sets the CO2 level. If not specified in the weather file the default is 350.
            </summary>
        </member>
        <member name="P:Models.Weather.AirPressure">
            <summary>
            Gets or sets the atmospheric air pressure. If not specified in the weather file the default is 1010 hPa.
            </summary>
        </member>
        <member name="P:Models.Weather.Latitude">
            <summary>
            Gets the latitude
            </summary>
        </member>
        <member name="P:Models.Weather.Longitude">
            <summary>
            Gets the longitude
            </summary>
        </member>
        <member name="P:Models.Weather.Tav">
            <summary>
            Gets the average temperature
            </summary>
        </member>
        <member name="P:Models.Weather.Amp">
            <summary>
            Gets the temperature amplitude.
            </summary>
        </member>
        <member name="F:Models.Weather.ActiveTabIndex">
            <summary>
            Temporarily stores which tab is currently displayed.
            Meaningful only within the GUI
            </summary>
        </member>
        <member name="F:Models.Weather.StartYear">
            <summary>
            Temporarily stores the starting date for charts.
            Meaningful only within the GUI
            </summary>
        </member>
        <member name="F:Models.Weather.ShowYears">
            <summary>
            Temporarily stores the years to show in charts.
            Meaningful only within the GUI
            </summary>
        </member>
        <member name="M:Models.Weather.GetReferencedFileNames">
            <summary>Return our input filenames</summary>
        </member>
        <member name="M:Models.Weather.CalculateDayLength(System.Double)">
            <summary>
            Gets the duration of the day in hours.
            </summary>
        </member>
        <member name="M:Models.Weather.OnSimulationCommencing(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for initialization.
            </summary>
        </member>
        <member name="M:Models.Weather.OnSimulationCompleted(System.Object,System.EventArgs)">
            <summary>
            Overrides the base class method to allow for clean up
            </summary>
        </member>
        <member name="M:Models.Weather.GetAllData">
            <summary>
            Get the DataTable view of this data
            </summary>
            <returns>The DataTable</returns>
        </member>
        <member name="M:Models.Weather.OnDoWeather(System.Object,System.EventArgs)">
            <summary>
            An event handler for the daily DoWeather event.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="M:Models.Weather.OpenDataFile">
            <summary>
            Open the weather data file.
            </summary>
            <returns>True if the file was successfully opened</returns>
        </member>
        <member name="M:Models.Weather.CloseDataFile">
            <summary>Close the datafile.</summary>
        </member>
        <member name="M:Models.Weather.CalcTAVAMP">
            <summary>
            Calculate the amp and tav 'constant' values for this weather file
            and store the values into the File constants.
            </summary>
        </member>
        <member name="M:Models.Weather.ProcessMonthlyTAVAMP(System.Double@,System.Double@)">
            <summary>
            Calculate the amp and tav 'constant' values for this weather file.
            </summary>
            <param name="tav">The calculated tav value</param>
            <param name="amp">The calculated amp value</param>
        </member>
        <member name="T:Models.Program">
            <summary>Class to hold a static main entry point.</summary>
        </member>
        <member name="F:Models.Program.files">
            <summary>
            List of files to be run.
            </summary>
        </member>
        <member name="M:Models.Program.Main(System.String[])">
            <summary>
            Main program entry point.
            </summary>
            <param name="args"> Command line arguments</param>
            <returns> Program exit code (0 for success)</returns>
        </member>
        <member name="M:Models.Program.GenerateCsvFiles(System.Object,APSIM.Shared.Utilities.AllCompletedArgs)">
            <summary>
            Generates a .csv file for each .apsimx file that has been run.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Models.Program.OnJobCompleted(System.Object,APSIM.Shared.Utilities.JobCompleteArgs)">
            <summary>Job has completed</summary>
        </member>
        <member name="M:Models.Program.OnAllJobsCompleted(System.Object,APSIM.Shared.Utilities.AllCompletedArgs)">
            <summary>All jobs have completed</summary>
        </member>
        <member name="T:Models.Zones.CircularZone">
            <summary>A circular zone.</summary>
        </member>
        <member name="P:Models.Zones.CircularZone.Radius">
            <summary>Radius of the zone.</summary>
            <value>The radius.</value>
        </member>
        <member name="P:Models.Zones.CircularZone.Width">
            <summary>Width of the zone.</summary>
            <value>The width.</value>
        </member>
        <member name="P:Models.Zones.CircularZone.Distance">
            <summary>
            Returns the distance from edge of system
            </summary>
        </member>
        <member name="P:Models.Zones.CircularZone.Area">
            <summary>
            Return the area of the zone.
            </summary>
        </member>
        <member name="T:Models.Zones.StripCropZone">
            <summary>A strip crop zone.</summary>
        </member>
        <member name="P:Models.Zones.StripCropZone.Length">
            <summary>Length of the zone.</summary>
            <value>The length.</value>
        </member>
        <member name="P:Models.Zones.StripCropZone.Width">
            <summary>Width of the zone.</summary>
            <value>The width.</value>
        </member>
        <member name="P:Models.Zones.StripCropZone.Area">
            <summary>
            Return the area of the zone.
            </summary>
        </member>
        <member name="T:Models.Zones.RectangularZone">
            <summary>A rectangular zone.</summary>
        </member>
        <member name="P:Models.Zones.RectangularZone.Length">
            <summary>Length of the zone.</summary>
            <value>The length.</value>
        </member>
        <member name="P:Models.Zones.RectangularZone.Width">
            <summary>Width of the zone.</summary>
            <value>The width.</value>
        </member>
        <member name="P:Models.Zones.RectangularZone.Distance">
            <summary>
            Returns the distance from edge of system
            </summary>
        </member>
        <member name="P:Models.Zones.RectangularZone.Area">
            <summary>
            Return the area of the zone.
            </summary>
        </member>
        <member name="T:CMPServices.SDMLParser">
            <summary>
            Specialised parser for the SDML found in an XML document.
            </summary>
            <seealso cref="T:CMPServices.XMLParser">XMLParser Class</seealso>
        </member>
        <member name="F:CMPServices.SDMLParser.FName">
            <summary>
            Name of the SDML value.
            </summary>
        </member>
        <member name="F:CMPServices.SDMLParser.FUnit">
            <summary>
            Unit for the scalar.
            </summary>
        </member>
        <member name="F:CMPServices.SDMLParser.FKind">
            <summary>
            Kind of the SDML value.
            </summary>
        </member>
        <member name="F:CMPServices.SDMLParser.FIsScalar">
            <summary>
            True is this is a scalar.
            </summary>
        </member>
        <member name="F:CMPServices.SDMLParser.FIsArray">
            <summary>
            True if this is an array.
            </summary>
        </member>
        <member name="F:CMPServices.SDMLParser.FIsRecord">
            <summary>
            True if this is a record (structure).
            </summary>
        </member>
        <member name="M:CMPServices.SDMLParser.#ctor(System.String)">
            <summary>
            Create a parser object using the SDML XML string.
            </summary>
            <param name="xml">XML string in SDML form.</param>
        </member>
        <member name="M:CMPServices.SDMLParser.#ctor(System.Xml.XmlNode)">
            <summary>
            Create a parser object using the DOM node from another document.
            </summary>
            <param name="domNode">The DOM node to use for creating the parser object.</param>
        </member>
        <member name="M:CMPServices.SDMLParser.getDescription">
            <summary>
            Read the descriptive elements for the SDMl type.
            </summary>
        </member>
        <member name="P:CMPServices.SDMLParser.Name">
            <summary>
            The name of the SDML value.
            </summary>
            <returns>The value of FName.</returns>
        </member>
        <member name="P:CMPServices.SDMLParser.Units">
            <summary>
            Units for the scalar value.
            </summary>
            <returns>The value of FUnit.</returns>
        </member>
        <member name="P:CMPServices.SDMLParser.Kind">
            <summary>
            The kind of the SDML value.
            </summary>
            <returns>The value of FKind.</returns>
        </member>
        <member name="P:CMPServices.SDMLParser.IsScalar">
            <summary>
            Determine if this is a scalar value.
            </summary>
            <returns>True if this is a scalar value.</returns>
        </member>
        <member name="P:CMPServices.SDMLParser.IsRecord">
            <summary>
            Determine if this is a record structure.
            </summary>
            <returns>True if this is a record.</returns>
        </member>
        <member name="P:CMPServices.SDMLParser.IsArray">
            <summary>
            Determine if this is an array.
            </summary>
            <returns>True if this is an array.</returns>
        </member>
        <member name="M:CMPServices.SDMLParser.firstMember">
            <summary>
            Find the first element node of the document. Sets currNode.
            </summary>
            <returns>The XML document for the first element. Empty string if not found.</returns>
        </member>
        <member name="M:CMPServices.SDMLParser.firstMember(System.Xml.XmlNode)">
            <summary>
            Find the first element node in the document using rootNode as the 
            document root. Sets the currNode.
            </summary>
            <param name="rootNode">The base node.</param>
            <returns>currNode value.</returns>
        </member>
        <member name="M:CMPServices.SDMLParser.nextMember">
            <summary>
            Find the next element node after currNode. Sets the currNode.
            </summary>
            <returns>The XML document of the node found. Empty string if not found</returns>
        </member>
        <member name="M:CMPServices.SDMLParser.nextMember(System.Xml.XmlNode)">
            <summary>
            Finds the next DOM element node that is a sibling of startNode. 
            </summary>
            <param name="startNode">DOM Node to start the search from.</param>
            <returns>The DOM Node found. NULL if not found.</returns>
        </member>
        <member name="T:CMPServices.TTypedValue">
            <summary>
            The main class that is used as the base class for structured types such as SDML and DDML values.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.NUMSCALARTYPES">
            <summary>
            Count of scalar types available in a TTypedValue.
            </summary>
        </member>
        <member name="T:CMPServices.TTypedValue.TBaseType">
            <summary>
            The type of the TTypedValue expressed as a simple int.
            See <see cref="M:CMPServices.TTypedValue.baseType">baseType()</see>
            See <see cref="F:CMPServices.TTypedValue.sTYPECODES"/>
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_EMPTY">
            <summary>
            Not a type.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_INT1">
            <summary>
            Single byte integer.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_INT2">
            <summary>
            Two byte integer.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_INT4">
            <summary>
            Four byte signed integer.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_INT8">
            <summary>
            Eight byte signed integer.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_SINGLE">
            <summary>
            Single precision float. 4 bytes.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_DOUBLE">
            <summary>
            Double precision float. 8 bytes.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_CHAR">
            <summary>
            Character.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_BOOL">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_WCHAR">
            <summary>
            Two byte char.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_STR">
            <summary>
            Character string.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_WSTR">
            <summary>
            Two byte char string.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.TBaseType.ITYPE_DEF">
            <summary>
            Defined type such as a record.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.INTSIZE">
            <summary>
            Byte size of a four byte integer.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.typeSize">
            <summary>
            Byte sizes for the field types TBaseType.ITYPE_INT1 To TBaseType.ITYPE_WCHAR
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.sTYPECODES">
            <summary>
            Lookup table of type name strings. 
            </summary>
            <example>
            integer1, 
            integer2, 
            integer4, 
            single, 
            double,
            char,
            boolean,
            wchar,
            string,
            wstring,
            defined
            <code>
            string dblString = sTYPECODES[TBaseType.ITYPE_DOUBLE];
            </code>
            </example>
        </member>
        <member name="F:CMPServices.TTypedValue.STYPE_STR">
            <summary>
            The text name of a string type. "string"
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.STYPE_BOOL">
            <summary>
            The text name of a boolean type. "boolean"
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.STYPE_DOUBLE">
            <summary>
            The text name of a double type. "double"
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.STYPE_INT4">
            <summary>
            The text name of an integer 4 type. "integer4"
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.STYPE_DEF">
            <summary>
            The text name of a defined type. "defined"
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.ctSAME">
            <summary>
            Return value from TTypedValue.isSameType()
            </summary>
            <seealso cref="T:CMPServices.TTypedValue">TTypedValue Class</seealso>
        </member>
        <member name="F:CMPServices.TTypedValue.ctCOMP">
            <summary>
            Return value from TTypedValue.isSameType()
            </summary>
            <seealso cref="T:CMPServices.TTypedValue">TTypedValue Class</seealso>
        </member>
        <member name="F:CMPServices.TTypedValue.ctDODGY">
            <summary>
            Return value from TTypedValue.isSameType()
            </summary>
            <seealso cref="T:CMPServices.TTypedValue">TTypedValue Class</seealso>
        </member>
        <member name="F:CMPServices.TTypedValue.ctBAD">
            <summary>
            Return value from TTypedValue.isSameType(). 
            </summary>
            <seealso cref="T:CMPServices.TTypedValue">TTypedValue Class</seealso>
        </member>
        <member name="T:CMPServices.TTypedValue.unit">
            <summary>
            Contains two unit fields. Used in the array of matching units.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.match1">
            <summary>
            "cc/cc","mm/mm" are matching units.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.match2">
            <summary>
            "m^3/m^3", "mm/mm" are matching units.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.match3">
            <summary>
            "ppm" and "mg/kg" are allowed to match, although "ppm" is invalid
            This is a concession to APSIM
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.match4">
            <summary>
            "g/cc", "Mg/m^3" are matching units, although "cc" is invalid
            This is a concession to APSIM
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.match5">
            <summary>
            "0-1" and "-" match,  as both are dimensionless
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.match6">
            <summary>
            "0-1" and "mm/mm" match, as both are effectively dimensionless
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.match7">
            <summary>
            "cm^3/cm^3" and "mm/mm" match, as both are effectively dimensionless
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.match8">
            <summary>
            "0-1" and "m^3/m^3" match, as both are effectively dimensionless
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.match9">
            <summary>
            "0-1" and "m^2/m^2" match, as both are effectively dimensionless
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.UNITMATCHES">
            <summary>
            Array of the matching units- match1, match2,...
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.FName">
            <summary>
            Name of the typed value.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.FUnit">
            <summary>
            Unit of the typed value.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.FBaseType">
            <summary>
            Store the base type as an integer.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.FIsScalar">
            <summary>
            True if a scalar.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.FIsArray">
            <summary>
            True if an array.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.FIsRecord">
            <summary>
            True if a record.
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.FData">
            <summary>
            Block of bytes containing field/element values
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.FDataSize">
            <summary>
            Size in bytes of the memory block holding the value data
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.FMembers">
            <summary>
            List of TTypedValues that are fld or elem children
            </summary>
        </member>
        <member name="F:CMPServices.TTypedValue.parser">
            <summary>
            Each typed value uses a parser at creation
            </summary>
        </member>
        <member name="M:CMPServices.TTypedValue.getDimension(System.Byte[],System.UInt32)">
            <summary>
            Get the integer value of the dimension bytes. Used for arrays
            and strings 
            </summary>
            <param name="data">The block of byte data.</param>
            <param name="startIndex">Start at this index. 0 -> x</param>
            <returns>Returns the dimension of the array/string</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.getFldElemList">
            <summary>
            Finds children nodes in the xml doc.
            </summary>
        </member>
        <member name="M:CMPServices.TTypedValue.newMember(CMPServices.TTypedValue)">
            <summary>
            Add a new member.
            </summary>
            <param name="bluePrintValue"></param>
        </member>
        <member name="M:CMPServices.TTypedValue.addScalar(System.String,CMPServices.TTypedValue.TBaseType)">
            <summary>
            Add a scalar value.
            </summary>
            <param name="sName">Name</param>
            <param name="aType">Type</param>
            <returns></returns>
        </member>
        <member name="M:CMPServices.TTypedValue.writeFieldInfo(CMPServices.TTypedValue,System.Int32,System.Int32)">
            <summary>
            Writes a field as a string
            </summary>
            <param name="attrInfo">The value</param>
            <param name="indent">Indentation 0-n</param>
            <param name="tab">Number of spaces in each tab</param>
            <returns>The XML for the typed value.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.getText(CMPServices.TTypedValue,System.Int32,System.Int32)">
            <summary>
            Text representation of a TTypedValue.
            </summary>
            <param name="value">The value</param>
            <param name="startIndent">Indent from here.</param>
            <param name="tab">Number of spaces in each tab</param>
            <returns>The XML.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.#ctor(System.String,System.String)">
            <summary>
            Constructs a typed value using an XML description.
            </summary>
            <param name="sXML">XML text description.</param>
            <param name="sBaseType">Set the base type of this object. See <see cref="F:CMPServices.TTypedValue.sTYPECODES"/></param>
        </member>
        <member name="M:CMPServices.TTypedValue.#ctor(CMPServices.SDMLParser,System.Xml.XmlNode,System.String)">
            <summary>
            Construct this object using the parser already created in the parent. Also
            use the dom node, baseNode to be the root node of the document for this
            new typed value. Can also specify the base type using sBaseType.
            </summary>
            <param name="parentParser">Pointer to the parents parser.</param>
            <param name="baseNode">DOM node to use as the root node.</param>
            <param name="sBaseType">Used to set the base type.  See <see cref="F:CMPServices.TTypedValue.sTYPECODES"/></param>
        </member>
        <member name="M:CMPServices.TTypedValue.#ctor(System.String,CMPServices.TTypedValue.TBaseType)">
            <summary>
            Creates a scalar of this aBaseType with sName.
            </summary>
            <param name="sName">Name of the scalar.</param>
            <param name="aBaseType">Base type of this scalar.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.#ctor(System.String,CMPServices.TTypedValue.TBaseType,System.Int32)">
            <summary>
            Creates a one dimensional array of scalar items.
            </summary>
            <param name="sArrayName">Name of this array.</param>
            <param name="aBaseType">Set the base type of this array.</param>
            <param name="iNoElements">Create it with this number of elements.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.#ctor(System.String,CMPServices.TTypedValue,System.Int32)">
            <summary>
            Creates a 1-dimensional array of arbitrary type
            baseValue is used as a blue print only.
            </summary>
            <param name="arrayName">Name of the array.</param>
            <param name="baseValue">Blue print typed value.</param>
            <param name="noElements">Number of elements for the array.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.#ctor(CMPServices.TTypedValue)">
            <summary>
            Copy constructor. This constructor makes a copy of the source's structure.
            For specialised child classes, this constructor should be overriden.
            </summary>
            <param name="typedValue">Use this typed value as the source.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.member(System.UInt32)">
            <summary>
            Finds the array item or field corresponding to the given index.
            </summary>
            <param name="index">Index of the member of this typed value. 1 -> x</param>
            <returns>The typed value.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.member(System.String)">
            <summary>
            Finds the record field corresponding to the given name.
            </summary>
            <param name="sName">Name of the field to find.</param>
            <returns>The typed value found.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.findItemByMemberValue(System.String,System.String)">
            <summary>
            Searches an array of records and attempts to match a specified field with
            a value. When a case insensitive match is found then return the array item.
            </summary>
            <param name="sMemberName">The field name of the record</param>
            <param name="sValue">The string value of the field</param>
            <returns>The record item from the array of records</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setBaseType(System.String)">
            <summary>
            Sets the FBaseType class type.
            </summary>
            <param name="sBaseType">The base type string. See <see cref="F:CMPServices.TTypedValue.sTYPECODES"/></param>
        </member>
        <member name="M:CMPServices.TTypedValue.parseType">
            <summary>
            Do the parsing of this type. If it is a structured type, then it will
            attempt to find all the children. Called during the construction process.
            </summary>
        </member>
        <member name="M:CMPServices.TTypedValue.getDescription">
            <summary>
            Loads the description of this typed value from the parsed xml text.
            Assume that parser.getDescription() has been called.
            </summary>
        </member>
        <member name="M:CMPServices.TTypedValue.constructScalar(System.String,CMPServices.TTypedValue.TBaseType)">
            <summary>
            Contains common code used by the constructors to set the field values of this
            type when it is a scalar.
            </summary>
            <param name="sName">Name of the scalar.</param>
            <param name="aBaseType">The type for this scalar.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.createScalar">
            <summary>
            Allocates memory for this scalar and sets it's initial value.
            </summary>
        </member>
        <member name="M:CMPServices.TTypedValue.count">
            <summary>
            The value returned by count() depends on the type of the value, as follows:
            <para>For a <b>record</b>, it is the number of members in the record</para>
            <para>For a <b>string</b>, it is the number of characters</para>
            <para>For a simple <b>scalar</b>, it is zero</para>
            </summary>
            <returns>The count of elements.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.findArrayType(CMPServices.TTypedValue)">
            <summary>
            Finds the type of this array object by recursing into the lower dimesions
            if needed.
            </summary>
            <param name="typedValue">The typed value to interogate.</param>
            <returns>The base type for this variable.  </returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setUnits(System.String)">
            <summary>
            Set the units of the array elements
            </summary>
            <param name="sUnits">The units string.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.baseType">
            <summary>
            Get the base type of the typed value. See <see cref="T:CMPServices.TTypedValue.TBaseType"/>
            </summary>
            <returns>The base type.</returns>
        </member>
        <member name="P:CMPServices.TTypedValue.Name">
            <summary>
            Name of the typed value.
            </summary>
        </member>
        <member name="M:CMPServices.TTypedValue.units">
            <summary>
            Get the units string.
            </summary>
        </member>
        <member name="M:CMPServices.TTypedValue.isScalar">
            <summary>
            True is this is a scalar.
            </summary>
        </member>
        <member name="M:CMPServices.TTypedValue.isArray">
            <summary>
            True if this is an array.
            </summary>
        </member>
        <member name="M:CMPServices.TTypedValue.isRecord">
            <summary>
            True if this is a record.
            </summary>
        </member>
        <member name="M:CMPServices.TTypedValue.isTextType">
            <summary>
            Tests if this is a character type of scalar.
            </summary>
            <returns>True if this is a scalar of a non number type (text).</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.Double[])">
            <summary>
            Set the values in the array.
            </summary>
            <param name="values">Array of scalar values.</param>
            <returns>True if this is successful: This is an array of scalars and each
            item has been set.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.Int32[])">
            <summary>
            Set the values in the array.
            </summary>
            <param name="values">Array of scalar values.</param>
            <returns>True if this is successful: This is an array of scalars and each
            item has been set.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.Single[])">
            <summary>
            Set the values in the array.
            </summary>
            <param name="values">Array of scalar values.</param>
            <returns>True if this is successful: This is an array of scalars and each
            item has been set.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.Boolean[])">
            <summary>
            Set the values in the array.
            </summary>
            <param name="values">Array of scalar values.</param>
            <returns>True if this is successful: This is an array of scalars and each
            item has been set.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.String[])">
            <summary>
            Set the values in the array.
            </summary>
            <param name="values">Array of scalar values.</param>
            <returns>True if this is successful: This is an array of scalars and each
            item has been set.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.Double)">
            <summary>
            Sets the value for this scalar.
            </summary>
            <param name="value">The value to set this scalar to.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.Int64)">
            <summary>
            Sets the value for this scalar.
            </summary>
            <param name="value">The value to set this scalar to.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.Single)">
            <summary>
            Sets the value for this scalar.
            </summary>
            <param name="value">The value to set this scalar to.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.Int32)">
            <summary>
            Sets the value for this scalar.
            </summary>
            <param name="value">The value to set this scalar to.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.Boolean)">
            <summary>
            Sets the value for this scalar.
            </summary>
            <param name="value">The value to set this scalar to.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.String)">
            <summary>
            Sets the value for this scalar.
            </summary>
            <param name="value">The value to set this scalar to.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(System.Char)">
            <summary>
            Sets the value for this scalar.
            </summary>
            <param name="value">The value to set this scalar to.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setValue(CMPServices.TTypedValue)">
            <summary>
            Assignment from a TTypedValue that need not be of identical type, but must   
            be type-compatible.
            When converting from a scalar string to a numeric an exception will be thrown
            if the source string is not a valid numeric.
            </summary>
            <param name="srcValue">The source typed value.</param>
            <returns>True is the value can be set.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.buildType(System.String)">
            <summary>
            Uses the xml text to build the type. Called by the descendant constructor.
            </summary>
            <param name="sXML">XML text description.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.buildType(CMPServices.SDMLParser,System.Xml.XmlNode)">
            <summary>
            Uses the parents parser and the base node for this this type to build the
            type. Called by the descendant constructor.
            </summary>
            <param name="parentParser">Pointer to the parents parser.</param>
            <param name="baseNode">DOM Node to use as the root node.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.item(System.UInt32)">
            <summary>
            Finds the array item or field corresponding to the given index.
            </summary>
            <param name="index">Index of the member of this typed value. 1 -> x</param>
            <returns>The typed value. null if not found.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.deleteElement(System.Int32)">
            <summary>
            Delete an element from an array. Assumes that 'index' is the natural order
            of the items in the FMembers list.
            </summary>
            <param name="index">Array index 1->x</param>
            <returns></returns>
        </member>
        <member name="M:CMPServices.TTypedValue.setElementCount(System.UInt32)">
            <summary>
            For arrays, this will adjust the size of the FMembers list.
            </summary>
            <param name="dim">New dimension of this array.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.addMember(CMPServices.TTypedValue)">
            <summary>
            Only allowed to add members to records and arrays.
            </summary>
            <param name="newMember">The new member to add to this structure.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.initTypeCopy(CMPServices.TTypedValue)">
            <summary>
            The new member to add to this structure.
            </summary>
            <param name="typedValue">Typed value to copy.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.asInteger">
            <summary>
            Retrieves the TTypedValue as an integer.
            Will also read shorter types of numbers and return them as integers.
            On error an exception is thrown.
            </summary>
            <returns>An integet value.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asIntArray">
            <summary>
            Return an array of integers.
            </summary>
            <returns>Returns and array of zero length if this is not array of scalars
            with at least one element.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asInt32">
            <summary>
            Retrieves the TTypedValue as an integer.
            Will also read shorter types of numbers and return them as integers.
            On error an exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asInt32Array">
            <summary>
            Return an array of integers.
            </summary>
            <returns>Returns and array of zero length if this is not array of scalars
            with at least one element.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asInt">
            <summary>
            Retrieves the TTypedValue as an integer.
            Will also read shorter types of numbers and return them as integers.
            On error an exception is thrown.
            </summary>
            <returns>An integet value.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asSingleArray">
            <summary>
            Return an array of Singles.
            </summary>
            <returns>Returns and array of zero length if this is not array of scalars
            with at least one element.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asSingle">
            <summary>
            The value of this scalar as a float.
            </summary>
            <returns>Floating point value.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asDoubleArray">
            <summary>
            Return an array of Doubles.
            </summary>
            <returns>Returns and array of zero length if this is not array of scalars
            with at least one element.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asDouble">
            <summary>
            The value of this scalar as a double.
            </summary>
            <returns>Double precision value.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asBoolArray">
            <summary>
            Return an array of Booleans.
            </summary>
            <returns>Returns and array of zero length if this is not array of scalars
            with at least one element.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asBooleanArray">
            <summary>
            Return an array of Booleans.
            </summary>
            <returns>Returns and array of zero length if this is not array of scalars
            with at least one element.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asBoolean">
            <summary>
            Returns false if value is 0. Returns true if anything else.
            Reads other interger values and interprets them.
            On error an exception is thrown.
            </summary>
            <returns>Value as true or false.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asBool">
            <summary>
            Returns false if value is 0. Returns true if anything else.
            Reads other interger values and interprets them.
            On error an exception is thrown.
            </summary>
            <returns>Value as true or false.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asChar">
            <summary>
            Returns the character. On error an exception is thrown.
            <para>Conversions: Bool -> 'true'/'false', String -> asStr()[0] .</para>
            </summary>
            <returns>Character value.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asStringArray">
            <summary>
            Return an array of Booleans.
            </summary>
            <returns>Returns and array of zero length if this is not array of scalars
            with at least one element.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asString">
            <summary>
            Gets the text value for this scalar typed value from the data block.
            </summary>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asStr">
            <summary>
            Gets the text value for this scalar typed value from the data block.
            </summary>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asText">
            <summary>
            Gets the text value for this scalar typed value from the data block.
            This representation is intended primarily for use in writing log files.
            </summary>
            <returns>The formatted output as a string. <para>If this is a scalar then the result will 
            be same as asStr().</para><para>An array will be [1,2,3,4,5].</para><para>Records will be
            [fieldname1: asStr(), fieldname2: asStr()]</para></returns>
        </member>
        <member name="M:CMPServices.TTypedValue.asEscapedString">
            <summary>
            Returns the string value of this typed value as an escaped text string.
            </summary>
            <returns>String value escaped.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.escapeText(System.String)">
            <summary>
            Escapes the special characters for storing as xml.
            </summary>
            <param name="text">The character string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.typeName">
            <summary>
            The type of this value as a character string.
            </summary>
            <returns>Type string.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.sizeBytes">
            <summary>
            The size of this type in bytes. For an array it includes the
            4 byte header of each dimension.
            </summary>
            <returns>Integer value of the size.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.canAssignFrom(CMPServices.TTypedValue)">
            <summary>
            Recursive routine for checking whether two types are (a) identical,
            (b) different but compatible, (c) incompatible.
            <para>Note:</para>
            <para>1. Type compatibility is not a transitive relationship.</para>
            <para>2. Unit compatibility needs further implementation.</para>
            </summary>
            <param name="srcValue">The TTypedValue to compare with.</param>
            <returns>Returns: 0 - exact match, 1 - compatible, -1 - cannot match</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.unitsMatch(System.String,System.String)">
            <summary>
            Returns TRUE i.f.f. the two unit strings have the same dimension and
            identical scale.
            </summary>
            <param name="sUnitA">Unit name one.</param>
            <param name="sUnitB">Unit name two.</param>
            <returns>True if matched.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.equals(CMPServices.TTypedValue)">
            <summary>
            Tests for identity of two TTypedValue objects.
            </summary>
            <param name="otherValue">Typed value to test against this one.</param>
            <returns>True if it matches in type, size, and structure.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.hasField(System.String)">
            <summary>
            
            </summary>
            <param name="sName">Name of the field to find.</param>
            <returns>Returns TRUE if the value is a record and it has the nominated field.</returns>
        </member>
        <member name="M:CMPServices.TTypedValue.copyDataBlock(System.Byte[],System.UInt32)">
            <summary>
            Copies the data from a data block into this scalar.
            </summary>
            <param name="newData">The data block to copy into this scalar.</param>
            <param name="startIndex">Start at this index in the byte array.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.getData(System.Byte[]@)">
            <summary>
            Gets the datablock containing all the values from this TTypedValue.
            Assumes that memory has already been allocated for the data to be copied
            into.
            </summary>
            <param name="data">Location to copy data to.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.setData(System.Byte[],System.Int32)">
            <summary>
            Copies the data from a block of memory owned by someone else.
            Overrides setData() and assumes startIndex = 0.
            </summary>
            <param name="newData">The new data to copy into this typed value.</param>
            <param name="iNewSize">The size of the source typed value.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.setData(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Copies the data from a block of memory owned by someone else.
            </summary>
            <param name="newData">The new data to copy into this typed value.</param>
            <param name="iNewSize">The size of the source typed value.</param>
            <param name="startIndex">Start at this index in the byte array.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.copyData(System.Byte[],System.UInt32@)">
            <summary>
            Copies the FData of this type and any children into the memory already
            allocated. Called recursively to fill with data from the children.
            </summary>
            <param name="dataPtr">The location to copy to.</param>
            <param name="startIndex">Start at this index in the byte array.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.copyFrom(CMPServices.TTypedValue)">
            <summary>
            Copies data from one type to this type using the getData() setData() pair.
            Assumes that the source and destination are exactly compatible. Arrays will be
            resized as required.
            </summary>
            <param name="srcValue">The source value.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.copyDataBlock(System.IntPtr,System.UInt32)">
            <summary>
            Copies the data from a data block into this scalar.
            Overloaded version, taking data from an IntPtr
            </summary>
            <param name="newData">The data block to copy into this scalar.</param>
            <param name="startIndex">Start at this index in the byte array.</param>
        </member>
        <member name="M:CMPServices.TTypedValue.setData(System.IntPtr,System.UInt32)">
            <summary>
            Copies the data from a block of memory owned by someone else.
            Overloaded version, taking data from an IntPtr
            </summary>
            <param name="newData">The new data to copy into this typed value.</param>
            <param name="startIndex">Start at this index in the byte array.</param>
        </member>
        <member name="T:CMPServices.TypeMisMatchException">
            <summary>
            Thrown when a type mismatch occurs. 
            For example: attempting to access an array in the manner of a scalar.
            </summary>
        </member>
        <member name="M:CMPServices.TypeMisMatchException.#ctor(System.String)">
            <summary>
            Create an exception that specifies a type mis match
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:CMPServices.TypeMisMatchException.#ctor(CMPServices.TTypedValue,CMPServices.TTypedValue)">
            <summary>
            Constructor that will show details of the two types causing the problem.
            </summary>
            <param name="first">First TTypedValue.</param>
            <param name="second">Second TTypedValue.</param>
        </member>
        <member name="T:CMPServices.ArrayIndexException">
            <summary>
            Thrown when an array item is out of range.
            </summary>
        </member>
        <member name="M:CMPServices.ArrayIndexException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:CMPServices.XMLParser">
            =========================================================================
             <summary>
             The XMLParser class is a wrapper around a DOM parser. It is used as the
             parent class for other specialised parser types. This class makes it easy to 
             access features of the DOM parser.
             </summary>
            =========================================================================
        </member>
        <member name="F:CMPServices.XMLParser.topElement">
            <summary>
            Always points to the root node.
            </summary>
        </member>
        <member name="F:CMPServices.XMLParser.currNode">
            <summary>
            Always points to current node after using firstChild() or nextSibling().
            </summary>
        </member>
        <member name="M:CMPServices.XMLParser.isElement(System.Xml.XmlNode,System.String)">
            <summary>
            Tests if this an element node in the parser tree with a specific name.
            </summary>
            <param name="domNode">The node to test.</param>
            <param name="elementName">The name of the element node.</param>
            <returns>True if this is and element node with this name.</returns>
        </member>
        <member name="M:CMPServices.XMLParser.#ctor(System.String)">
            <summary>
            Construct this parser with an XML string.
            </summary>
            <param name="xml">XML document.</param>
        </member>
        <member name="M:CMPServices.XMLParser.#ctor(System.Xml.XmlNode)">
            <summary>
            Construct this parser using the node from another document parser.
            </summary>
            <param name="domNode">The node.</param>
        </member>
        <member name="M:CMPServices.XMLParser.getNodeValue(System.Xml.XmlNode)">
            <summary>
            Get the value of a DOM node. The result depends on what type of node it is. <see cref="T:System.Xml.XmlNode">See XmlNode Class</see>
            </summary>
            <param name="domNode">The DOM node to query.</param>
            <returns>The Node value. "" if not found.
            <para>This value depends on the value of the nodeType property.</para>
            <para><b>NODE_ATTRIBUTE:</b> Contains a string representing the value of the attribute.
            For attributes with subnodes, this is the concatenated text of all subnodes
            with entities expanded. Setting this value deletes all children of the node
            and replaces them with a single text node containing the value written.</para>
            <para><b>NODE_CDATA_SECTION:</b> Contains a string representing the text stored in the CDATA section.</para>
            <para><b>NODE_COMMENT:</b> Contains the content of the comment, exclusive of the comment's start and end sequence.</para>
            <para><b>NODE_DOCUMENT, NODE_DOCUMENT_TYPE, NODE_DOCUMENT_FRAGMENT,
            NODE_ELEMENT, NODE_ENTITY, NODE_ENTITY_REFERENCE, NODE_NOTATION:</b>
            Contains Null. Note that attempting to set the value of nodes of these types generates an error.</para>
            <para><b>NODE_PROCESSING_INSTRUCTION:</b> Contains the content of the processing instruction,
            excluding the target. (The target appears in the nodeName property.)</para>
            <para><b>NODE_TEXT:</b> Contains a string representing the text stored in the text node.</para>
            ...(source MS doco)
            </returns>
            <seealso cref="T:System.Xml.XmlNode">XmlNode Class</seealso>
        </member>
        <member name="M:CMPServices.XMLParser.InnerXml(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="domNode"></param>
            <returns></returns>
        </member>
        <member name="M:CMPServices.XMLParser.getNodeType(System.Xml.XmlNode)">
            <summary>
            Determine the type of node.
            </summary>
            <param name="domNode">The node to query.</param>
            <returns>The type of the node.</returns>
        </member>
        <member name="M:CMPServices.XMLParser.getText(System.Xml.XmlNode)">
            <summary>
            Get the text of an Element node.
            </summary>
            <param name="domNode">The node to query.</param>
            <returns>The value of the element node.</returns>
        </member>
        <member name="M:CMPServices.XMLParser.docToString(System.Xml.XmlNode)">
            <summary>
            Returns the node's tag and all XML within the node.
            </summary>
            <param name="domNode">The node to query.</param>
            <returns>The section of the XML document including the node's tag.</returns>
        </member>
        <member name="M:CMPServices.XMLParser.getAttrValue(System.Xml.XmlNode,System.String)">
            <summary>
            Get the text from the value of the attribute.
            </summary>
            <param name="domNode">The element node containing the attribute node.</param>
            <param name="attr">The name of the attribute.</param>
            <returns>The value of the attribute node.</returns>
        </member>
        <member name="M:CMPServices.XMLParser.firstChild(System.Xml.XmlNode)">
            <summary>
            Find the first child node of the specified node. Sets currNode.
            </summary>
            <param name="domNode">The node containing the child.</param>
            <returns>The child node.</returns>
        </member>
        <member name="M:CMPServices.XMLParser.nextSibling(System.Xml.XmlNode)">
            <summary>
            Find the next sibling to the currNode. Sets currNode.
            </summary>
            <param name="domNode">The node containing the child.</param>
            <returns>The child node after currNode.</returns>
        </member>
        <member name="M:CMPServices.XMLParser.firstElementChild(System.Xml.XmlNode,System.String)">
            <summary>
            Find the first child node that is an element node of specified name.
            Sets currNode.
            </summary>
            <param name="rootNode">The node.</param>
            <param name="elementName">The name of the element node.</param>
            <returns></returns>
        </member>
        <member name="M:CMPServices.XMLParser.nextElementSibling(System.Xml.XmlNode,System.String)">
            <summary>
            Find the next sibling element node to currNode. Sets currNode.
            </summary>
            <param name="startNode">The node to start from.</param>
            <param name="elementName">The name of the element node.</param>
            <returns></returns>
        </member>
        <member name="M:CMPServices.XMLParser.currentNode">
            <summary>
            Get the node referenced by currNode.
            </summary>
            <returns>Ref to currNode.</returns>
        </member>
        <member name="M:CMPServices.XMLParser.rootNode">
            <summary>
            Get the topmost node in the document.
            </summary>
            <returns>Ref to topElement field.</returns>
        </member>
        <member name="M:CMPServices.XMLParser.setTopNode(System.Xml.XmlNode)">
            <summary>
            Set the topmost node in the document.
            </summary>
            <param name="anode">The node to be referenced by topElement field.</param>
        </member>
        <member name="T:StdUnits.DMY">
            <summary>
            Split the long integer into three       
            parts: day and month get a byte each,  
            year gets two. Note that this arrangement allows relational                   
            operators to be used on date values
            </summary>
        </member>
        <member name="F:StdUnits.DMY.D">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:StdUnits.DMY.M">
            <summary>
            Month
            </summary>
        </member>
        <member name="F:StdUnits.DMY.Y">
            <summary>
            Year
            </summary>
        </member>
        <member name="T:StdUnits.StdDate">
            <summary>
            GrazPlan date utilities
            </summary>
        </member>
        <member name="F:StdUnits.StdDate.CumulDays">
            <summary>
            No. of days up to the last day of previous month. 29 Feb not included   [months 1..12]
            </summary>
        </member>
        <member name="F:StdUnits.StdDate.LastDay">
            <summary>
            Last day of each month   [1..12]
            </summary>
        </member>
        <member name="F:StdUnits.StdDate.MonthText">
            <summary>
            Short text name of the month
            </summary>
        </member>
        <member name="M:StdUnits.StdDate.DateVal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the date value for specified dmy
            </summary>
            <param name="Day">Day number</param>
            <param name="Month">Month number</param>
            <param name="Year">Year number</param>
            <returns>The date value integer</returns>
        </member>
        <member name="M:StdUnits.StdDate.DayOf(System.Int32)">
            <summary>
            Get the day of month from the date value
            </summary>
            <param name="Dt">Date value</param>
            <returns>Day of month</returns>
        </member>
        <member name="M:StdUnits.StdDate.MonthOf(System.Int32)">
            <summary>
            Get the month of the year from the date value
            </summary>
            <param name="Dt">Date value</param>
            <returns>Month of year</returns>
        </member>
        <member name="M:StdUnits.StdDate.YearOf(System.Int32)">
            <summary>
            Get the year number from the date value
            </summary>
            <param name="Dt">The date value</param>
            <returns>Year number</returns>
        </member>
        <member name="M:StdUnits.StdDate.DateValid(System.Int32)">
            <summary>
            Test that this is a real date
            </summary>
            <param name="Dt">Date value</param>
            <returns>True if this is a valid date</returns>
        </member>
        <member name="M:StdUnits.StdDate.LeapYear(System.Int32)">
            <summary>
            Is a year a leap year?  N.B. returns TRUE for Y=0                         }
            </summary>
            <param name="Y"></param>
            <returns></returns>
        </member>
        <member name="M:StdUnits.StdDate.Num2Str(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Format a number with or without zeros
            </summary>
            <param name="N"></param>
            <param name="Len"></param>
            <param name="ZeroFill"></param>
            <returns>Formatted number</returns>
        </member>
        <member name="M:StdUnits.StdDate.DateStrFmt(System.Int32,System.String)">
            <summary>
            Format a date value
            </summary>
            <param name="Dt">Date value</param>
            <param name="Fmt">Format string YYYY, yy, YY, mmm, MM, mm, M, DD, dd, D</param>
            <returns>Formatted date string</returns>
        </member>
        <member name="M:StdUnits.StdDate.MonthLength(System.Int32,System.Int32)">
            <summary>
            Get the length of the month in days
            </summary>
            <param name="M">Month number</param>
            <param name="Y">Year number</param>
            <returns>Days in the month</returns>
        </member>
        <member name="M:StdUnits.StdDate.MonthShift(StdUnits.DMY@,System.Int32)">
            <summary>
             Shift a date by a given number of months                              
            </summary>
            <param name="aDate">Original date value</param>
            <param name="Months">Months to increment by</param>
        </member>
        <member name="M:StdUnits.StdDate.DateShift(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Change a date by a given number of days, months and/or years, forward or back.                                                                     
            </summary>
            <param name="Dt">Starting date value</param>
            <param name="Sh_D">Number of days</param>
            <param name="Sh_M"></param>
            <param name="Sh_Y"></param>
            <returns>Date moved</returns>
        </member>
        <member name="M:StdUnits.StdDate.Interval(System.Int32,System.Int32)">
            <summary>
             Interval between two dates.  Note that Interval(D,D) = 0.                 
            </summary>
            <param name="D1"></param>
            <param name="D2"></param>
            <returns></returns>
        </member>
        <member name="M:StdUnits.StdDate.DOY(System.Int32,System.Boolean)">
            <summary>
            Day of year function.                                                     
              Dt     Date to convert to day-of-year                                   
              UseYr  If TRUE, Feb 29 is counted if YearOf(D) is zero or a leap year.  
                     If FALSE, Feb 29 is counted regardless of the year.              
            </summary>
            <param name="Dt"></param>
            <param name="UseYr"></param>
            <returns></returns>
        </member>
        <member name="T:StdUnits.StdMath">
            <summary>
            Math utilities
            </summary>
        </member>
        <member name="F:StdUnits.StdMath.MISSING">
            <summary>
            Missing float value
            </summary>
        </member>
        <member name="F:StdUnits.StdMath.DMISSING">
            <summary>
            missing double value
            </summary>
        </member>
        <member name="F:StdUnits.StdMath.Root2Pi">
            <summary>
            Square root of 2 * pi
            </summary>
        </member>
        <member name="T:StdUnits.StdMath.TSigConsts">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:StdUnits.StdMath.TSigConsts.values">
            <summary>
            Array of values
            </summary>
        </member>
        <member name="F:StdUnits.StdMath.EPS">
            <summary>
            Small value 1E-7
            </summary>
        </member>
        <member name="M:StdUnits.StdMath.Sqr(System.Double)">
            <summary>
            Square the value
            </summary>
            <param name="value"></param>
            <returns>Value squared</returns>
        </member>
        <member name="M:StdUnits.StdMath.DIM(System.Double,System.Double)">
            <summary>
            Mimics FORTRAN DIM function              
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <returns></returns>
        </member>
        <member name="M:StdUnits.StdMath.IDIM(System.Int32,System.Int32)">
            <summary>
            Integer DIM function
            </summary>
            <returns></returns>
        </member>
        <member name="M:StdUnits.StdMath.RAMP(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="X"></param>
            <param name="Z1"></param>
            <param name="Z2"></param>
            <returns></returns>
        </member>
        <member name="M:StdUnits.StdMath.Divide(System.Double,System.Double,System.Double)">
            <summary>
            Divide value1 by value2. On error, the value errVal will be returned.
            </summary>
        </member>
        <member name="M:StdUnits.StdMath.XDiv(System.Double,System.Double)">
            <summary>
            Division operation. If numerator is close to zero then return 0.0
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <returns></returns>
        </member>
        <member name="M:StdUnits.StdMath.Pow(System.Double,System.Double)">
            <summary>
            Raise a number to a power. Throws exception when X is -ve.
            </summary>
            <param name="X">Value</param>
            <param name="Y">Indice</param>
            <returns>Zero if X is close to zero. Otherwise X^Y</returns>
        </member>
        <member name="M:StdUnits.StdMath.CumNormal(System.Double)">
            <summary>
            
            </summary>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:StdUnits.StdMath.SIG(System.Double,System.Double[])">
            <summary>
            
            </summary>
            <param name="X"></param>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="T:StdUnits.MyRandom">
            <summary>
            
            </summary>
        </member>
        <member name="M:StdUnits.MyRandom.Random">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:StdUnits.MyRandom.#ctor(System.Int32)">
            <summary>
            Container class for a random number generator. This means that it becomes
            thread safe and won't be trampled my another thread generating random
            numbers. Code moved from global implementation in StdMATH.pas and System.pas.
            </summary>
            <param name="SeedVal"></param>
        </member>
        <member name="M:StdUnits.MyRandom.Initialise(System.Int32)">
            <summary>
            Uses the SeedVal if it is > 0 otherwise it uses the system seed generated
            </summary>
            <param name="SeedVal"></param>
        </member>
        <member name="M:StdUnits.MyRandom.RandomValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:StdUnits.MyRandom.RndRound(System.Double)">
            <summary>
            
            </summary>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:StdUnits.MyRandom.RndPropn(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="N"></param>
            <param name="P"></param>
            <returns></returns>
        </member>
        <member name="P:StdUnits.MyRandom.RandNo">
            <summary>
            Gets the random number
            </summary>
        </member>
        <member name="P:StdUnits.MyRandom.Seed">
            <summary>
            Gets the seed value
            </summary>
        </member>
        <member name="T:StdUnits.StdStrng">
            <summary>
            String utility functions
            </summary>
        </member>
        <member name="F:StdUnits.StdStrng.whitespace">
            The following set of routines is taken from the old CPI 
            StdStrng.pas unit.
            Token-handling routines for use in parsing.  A token is either:
              * a string made up of alphanumeric characters and/or the underscore
              * any string enclosed in double quotes (the quotes are stripped) 
              * a punctuation mark (other than double quotes) 
        </member>
        <member name="M:StdUnits.StdStrng.TextToken(System.String@,System.String@,System.Boolean)">
             <summary>
             TextToken strips the first token from a string.
            </summary>
            <param name="inSt">
             String from which a token is to be taken.  It is returned as the
             remaining part of the input value (including any leading whitespace).
            </param>
            <param name="token">
             Returned as the token which has been taken from InSt.  If InSt is
             null or entirely whitespace, then Token will be the null string.
            </param>
            <param name="bRetainCase">
             If true, case is unchanged, otherwise the "returned" token is converted
             to uppercase.
            </param>
        </member>
        <member name="M:StdUnits.StdStrng.MatchToken(System.String@,System.String)">
            <summary>
            Function which returns TRUE i.f.f. the first token in a string matches
            an input token.  The match is case-insensitive. 
            </summary>
            <param name="inSt">
            String in which to look for Match.  If Match is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace) on return. If not, inSt is returned unchanged. 
            </param>
            <param name="match">
            Token to be sought.  If Match is not a token, its first token is used instead. 
            </param>
            <returns>
            TRUE i.f.f. the first token in a string match
            </returns>
        </member>
        <member name="M:StdUnits.StdStrng.TokenInt(System.String@,System.Int32@)">
            <summary>
            Take an integer from the front of a string.
            </summary>
            <param name="inSt">
            String from which to take an integer.  If it is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace).  If not, InSt is returned unchanged.
            </param>
            <param name="n">
            Returns the integer value.  If no integer is found in the string, 
            N is undefined.
            </param>
            <returns>
            Returns TRUE i.f.f. an integer was found.
            </returns>
        </member>
        <member name="M:StdUnits.StdStrng.TokenFloat(System.String@,System.Single@)">
            <summary>
            Take a floating-point value from the front of a string.
             Rules are analogous to Token_Int. Exponential notation is dealt with.
            </summary>
            <param name="inSt">
            String from which to take a value.  If it is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace).  If not, InSt is returned unchanged.
            </param>
            <param name="x">
            Returns the value.  If no value is found in the string, 
            x is undefined.
            </param>
            <returns>
            Returns TRUE i.f.f. a value was found.
            </returns>
        </member>
        <member name="M:StdUnits.StdStrng.TokenDouble(System.String@,System.Double@)">
            <summary>
            Take a double value from the front of a string.
             Rules are analogous to Token_Int. Exponential notation is dealt with.
            </summary>
            <param name="inSt">
            String from which to take a value.  If it is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace).  If not, InSt is returned unchanged.
            </param>
            <param name="x">
            Returns the value.  If no value is found in the string, 
            x is undefined.
            </param>
            <returns>
            Returns TRUE i.f.f. a value was found.
            </returns>
        </member>
        <member name="M:StdUnits.StdStrng.TokenDate(System.String@,System.Int32@)">
            <summary>
            Token_Date follows the same rules for its parameters as Token_Int.  It    
            expects day to precede months, and months to precede years, but it can    
            cope with D-M-Y and D-M-0 kinds of date.  Token_Date is implemented as a  
            state-based parser:                                                       
                                                                                       
            State                     Next token  Token means  Go to state            
            -----                     ----------  -----------  -----------            
            -1   Error                                                              
            0   Start of parsing   Number       Day of month    1                  
                                     else                      -1                  
            1   Past day           '/' or '-'   Delimiter       2                  
                                   JAN-DEC      Month           3                  
                                     else                       2                  
            2   Numeric month      1-12         Month           3                  
                                     else                      -1                  
            3   Past month         '/' or '-'   Delimiter       3                  
                                   Number       Year            4                  
                                     else       Year=0          4                  
            </summary>
            <param name="InSt"></param>
            <param name="D"></param>
            <returns></returns>
        </member>
        <member name="T:CropConstants">
            <summary>
            Sugar constants
            </summary>
        </member>
        <member name="F:CropConstants.max_table">
            <summary>
            The max_table
            </summary>
        </member>
        <member name="F:CropConstants.max_stage">
            <summary>
            The max_stage
            </summary>
        </member>
        <member name="F:CropConstants.max_part">
            <summary>
            The max_part
            </summary>
        </member>
        <member name="P:CropConstants.stage_names">
            <summary>
            Gets or sets the stage_names.
            </summary>
            <value>
            The stage_names.
            </value>
        </member>
        <member name="P:CropConstants.stage_code_list">
            <summary>
            Gets or sets the stage_code_list.
            </summary>
            <value>
            The stage_code_list.
            </value>
        </member>
        <member name="P:CropConstants.rue">
            <summary>
            Gets or sets the rue.
            </summary>
            <value>
            The rue.
            </value>
        </member>
        <member name="P:CropConstants.root_depth_rate">
            <summary>
            Gets or sets the root_depth_rate.
            </summary>
            <value>
            The root_depth_rate.
            </value>
        </member>
        <member name="P:CropConstants.ratio_root_shoot">
            <summary>
            Gets or sets the ratio_root_shoot.
            </summary>
            <value>
            The ratio_root_shoot.
            </value>
        </member>
        <member name="P:CropConstants.transp_eff_cf">
            <summary>
            Gets or sets the transp_eff_cf.
            </summary>
            <value>
            The transp_eff_cf.
            </value>
        </member>
        <member name="P:CropConstants.n_fix_rate">
            <summary>
            Gets or sets the n_fix_rate.
            </summary>
            <value>
            The n_fix_rate.
            </value>
        </member>
        <member name="P:CropConstants.extinction_coef">
            <summary>
            Gets or sets the extinction_coef.
            </summary>
            <value>
            The extinction_coef.
            </value>
        </member>
        <member name="P:CropConstants.extinction_coef_dead">
            <summary>
            Gets or sets the extinction_coef_dead.
            </summary>
            <value>
            The extinction_coef_dead.
            </value>
        </member>
        <member name="P:CropConstants.leaf_no_crit">
            <summary>
            Gets or sets the leaf_no_crit.
            </summary>
            <value>
            The leaf_no_crit.
            </value>
        </member>
        <member name="P:CropConstants.tt_emerg_limit">
            <summary>
            Gets or sets the tt_emerg_limit.
            </summary>
            <value>
            The tt_emerg_limit.
            </value>
        </member>
        <member name="P:CropConstants.days_germ_limit">
            <summary>
            Gets or sets the days_germ_limit.
            </summary>
            <value>
            The days_germ_limit.
            </value>
        </member>
        <member name="P:CropConstants.swdf_pheno_limit">
            <summary>
            Gets or sets the swdf_pheno_limit.
            </summary>
            <value>
            The swdf_pheno_limit.
            </value>
        </member>
        <member name="P:CropConstants.swdf_photo_limit">
            <summary>
            Gets or sets the swdf_photo_limit.
            </summary>
            <value>
            The swdf_photo_limit.
            </value>
        </member>
        <member name="P:CropConstants.swdf_photo_rate">
            <summary>
            Gets or sets the swdf_photo_rate.
            </summary>
            <value>
            The swdf_photo_rate.
            </value>
        </member>
        <member name="P:CropConstants.initial_root_depth">
            <summary>
            Gets or sets the initial_root_depth.
            </summary>
            <value>
            The initial_root_depth.
            </value>
        </member>
        <member name="P:CropConstants.specific_root_length">
            <summary>
            Gets or sets the specific_root_length.
            </summary>
            <value>
            The specific_root_length.
            </value>
        </member>
        <member name="P:CropConstants.x_plant_rld">
            <summary>
            Gets or sets the x_plant_rld.
            </summary>
            <value>
            The x_plant_rld.
            </value>
        </member>
        <member name="P:CropConstants.y_rel_root_rate">
            <summary>
            Gets or sets the y_rel_root_rate.
            </summary>
            <value>
            The y_rel_root_rate.
            </value>
        </member>
        <member name="P:CropConstants.root_die_back_fr">
            <summary>
            Gets or sets the root_die_back_fr.
            </summary>
            <value>
            The root_die_back_fr.
            </value>
        </member>
        <member name="P:CropConstants.initial_tpla">
            <summary>
            Gets or sets the initial_tpla.
            </summary>
            <value>
            The initial_tpla.
            </value>
        </member>
        <member name="P:CropConstants.sla_lfno">
            <summary>
            Gets or sets the sla_lfno.
            </summary>
            <value>
            The sla_lfno.
            </value>
        </member>
        <member name="P:CropConstants.sla_max">
            <summary>
            Gets or sets the sla_max.
            </summary>
            <value>
            The sla_max.
            </value>
        </member>
        <member name="P:CropConstants.sla_min">
            <summary>
            Gets or sets the sla_min.
            </summary>
            <value>
            The sla_min.
            </value>
        </member>
        <member name="P:CropConstants.x_stem_wt">
            <summary>
            Gets or sets the x_stem_wt.
            </summary>
            <value>
            The x_stem_wt.
            </value>
        </member>
        <member name="P:CropConstants.y_height">
            <summary>
            Gets or sets the y_height.
            </summary>
            <value>
            The y_height.
            </value>
        </member>
        <member name="P:CropConstants.svp_fract">
            <summary>
            Gets or sets the svp_fract.
            </summary>
            <value>
            The svp_fract.
            </value>
        </member>
        <member name="P:CropConstants.eo_crop_factor_default">
            <summary>
            Gets or sets the eo_crop_factor_default.
            </summary>
            <value>
            The eo_crop_factor_default.
            </value>
        </member>
        <member name="P:CropConstants.pesw_germ">
            <summary>
            Gets or sets the pesw_germ.
            </summary>
            <value>
            The pesw_germ.
            </value>
        </member>
        <member name="P:CropConstants.fasw_emerg">
            <summary>
            Gets or sets the fasw_emerg.
            </summary>
            <value>
            The fasw_emerg.
            </value>
        </member>
        <member name="P:CropConstants.rel_emerg_rate">
            <summary>
            Gets or sets the rel_emerg_rate.
            </summary>
            <value>
            The rel_emerg_rate.
            </value>
        </member>
        <member name="P:CropConstants.leaf_no_at_emerg">
            <summary>
            Gets or sets the leaf_no_at_emerg.
            </summary>
            <value>
            The leaf_no_at_emerg.
            </value>
        </member>
        <member name="P:CropConstants.shoot_lag">
            <summary>
            Gets or sets the shoot_lag.
            </summary>
            <value>
            The shoot_lag.
            </value>
        </member>
        <member name="P:CropConstants.shoot_rate">
            <summary>
            Gets or sets the shoot_rate.
            </summary>
            <value>
            The shoot_rate.
            </value>
        </member>
        <member name="P:CropConstants.x_node_no_app">
            <summary>
            Gets or sets the x_node_no_app.
            </summary>
            <value>
            The x_node_no_app.
            </value>
        </member>
        <member name="P:CropConstants.y_node_app_rate">
            <summary>
            Gets or sets the y_node_app_rate.
            </summary>
            <value>
            The y_node_app_rate.
            </value>
        </member>
        <member name="P:CropConstants.x_node_no_leaf">
            <summary>
            Gets or sets the x_node_no_leaf.
            </summary>
            <value>
            The x_node_no_leaf.
            </value>
        </member>
        <member name="P:CropConstants.y_leaves_per_node">
            <summary>
            Gets or sets the y_leaves_per_node.
            </summary>
            <value>
            The y_leaves_per_node.
            </value>
        </member>
        <member name="P:CropConstants.dm_root_init">
            <summary>
            Gets or sets the dm_root_init.
            </summary>
            <value>
            The dm_root_init.
            </value>
        </member>
        <member name="P:CropConstants.dm_sstem_init">
            <summary>
            Gets or sets the dm_sstem_init.
            </summary>
            <value>
            The dm_sstem_init.
            </value>
        </member>
        <member name="P:CropConstants.dm_leaf_init">
            <summary>
            Gets or sets the dm_leaf_init.
            </summary>
            <value>
            The dm_leaf_init.
            </value>
        </member>
        <member name="P:CropConstants.dm_cabbage_init">
            <summary>
            Gets or sets the dm_cabbage_init.
            </summary>
            <value>
            The dm_cabbage_init.
            </value>
        </member>
        <member name="P:CropConstants.dm_sucrose_init">
            <summary>
            Gets or sets the dm_sucrose_init.
            </summary>
            <value>
            The dm_sucrose_init.
            </value>
        </member>
        <member name="P:CropConstants.leaf_cabbage_ratio">
            <summary>
            Gets or sets the leaf_cabbage_ratio.
            </summary>
            <value>
            The leaf_cabbage_ratio.
            </value>
        </member>
        <member name="P:CropConstants.cabbage_sheath_fr">
            <summary>
            Gets or sets the cabbage_sheath_fr.
            </summary>
            <value>
            The cabbage_sheath_fr.
            </value>
        </member>
        <member name="P:CropConstants.dm_root_sen_frac">
            <summary>
            Gets or sets the dm_root_sen_frac.
            </summary>
            <value>
            The dm_root_sen_frac.
            </value>
        </member>
        <member name="P:CropConstants.dead_detach_frac">
            <summary>
            Gets or sets the dead_detach_frac.
            </summary>
            <value>
            The dead_detach_frac.
            </value>
        </member>
        <member name="P:CropConstants.sen_detach_frac">
            <summary>
            Gets or sets the sen_detach_frac.
            </summary>
            <value>
            The sen_detach_frac.
            </value>
        </member>
        <member name="P:CropConstants.leaf_no_correction">
            <summary>
            Gets or sets the leaf_no_correction.
            </summary>
            <value>
            The leaf_no_correction.
            </value>
        </member>
        <member name="P:CropConstants.lai_sen_light">
            <summary>
            Gets or sets the lai_sen_light.
            </summary>
            <value>
            The lai_sen_light.
            </value>
        </member>
        <member name="P:CropConstants.sen_light_slope">
            <summary>
            Gets or sets the sen_light_slope.
            </summary>
            <value>
            The sen_light_slope.
            </value>
        </member>
        <member name="P:CropConstants.frost_temp">
            <summary>
            Gets or sets the frost_temp.
            </summary>
            <value>
            The frost_temp.
            </value>
        </member>
        <member name="P:CropConstants.frost_fraction">
            <summary>
            Gets or sets the frost_fraction.
            </summary>
            <value>
            The frost_fraction.
            </value>
        </member>
        <member name="P:CropConstants.sen_rate_water">
            <summary>
            Gets or sets the sen_rate_water.
            </summary>
            <value>
            The sen_rate_water.
            </value>
        </member>
        <member name="P:CropConstants.twilight">
            <summary>
            Gets or sets the twilight.
            </summary>
            <value>
            The twilight.
            </value>
        </member>
        <member name="P:CropConstants.x_stage_code">
            <summary>
            Gets or sets the x_stage_code.
            </summary>
            <value>
            The x_stage_code.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_crit_leaf">
            <summary>
            critical N concentration of leaf (g N/g biomass)
            </summary>
            <value>
            The y_n_conc_crit_leaf.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_min_leaf">
            <summary>
            minimum N concentration of leaf (g N/g biomass)
            </summary>
            <value>
            The y_n_conc_min_leaf.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_crit_cane">
            <summary>
            critical N concentration of stem (g N/g biomass)
            </summary>
            <value>
            The y_n_conc_crit_cane.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_min_cane">
            <summary>
            minimum N concentration of stem (g N/g biomass)
            </summary>
            <value>
            The y_n_conc_min_cane.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_crit_cabbage">
            <summary>
            critical N concentration of flower(g N/g biomass)
            </summary>
            <value>
            The y_n_conc_crit_cabbage.
            </value>
        </member>
        <member name="P:CropConstants.y_n_conc_min_cabbage">
            <summary>
            minimum N concentration of flower (g N/g biomass)
            </summary>
            <value>
            The y_n_conc_min_cabbage.
            </value>
        </member>
        <member name="P:CropConstants.n_conc_crit_root">
            <summary>
            Gets or sets the n_conc_crit_root.
            </summary>
            <value>
            The n_conc_crit_root.
            </value>
        </member>
        <member name="P:CropConstants.n_conc_min_root">
            <summary>
            Gets or sets the n_conc_min_root.
            </summary>
            <value>
            The n_conc_min_root.
            </value>
        </member>
        <member name="P:CropConstants.n_root_init_conc">
            <summary>
            Gets or sets the n_root_init_conc.
            </summary>
            <value>
            The n_root_init_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_sstem_init_conc">
            <summary>
            Gets or sets the n_sstem_init_conc.
            </summary>
            <value>
            The n_sstem_init_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_leaf_init_conc">
            <summary>
            Gets or sets the n_leaf_init_conc.
            </summary>
            <value>
            The n_leaf_init_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_cabbage_init_conc">
            <summary>
            Gets or sets the n_cabbage_init_conc.
            </summary>
            <value>
            The n_cabbage_init_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_root_sen_conc">
            <summary>
            Gets or sets the n_root_sen_conc.
            </summary>
            <value>
            The n_root_sen_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_leaf_sen_conc">
            <summary>
            Gets or sets the n_leaf_sen_conc.
            </summary>
            <value>
            The n_leaf_sen_conc.
            </value>
        </member>
        <member name="P:CropConstants.n_cabbage_sen_conc">
            <summary>
            Gets or sets the n_cabbage_sen_conc.
            </summary>
            <value>
            The n_cabbage_sen_conc.
            </value>
        </member>
        <member name="P:CropConstants.x_ave_temp">
            <summary>
            Gets or sets the x_ave_temp.
            </summary>
            <value>
            The x_ave_temp.
            </value>
        </member>
        <member name="P:CropConstants.y_stress_photo">
            <summary>
            Gets or sets the y_stress_photo.
            </summary>
            <value>
            The y_stress_photo.
            </value>
        </member>
        <member name="P:CropConstants.x_ave_temp_stalk">
            <summary>
            Gets or sets the x_ave_temp_stalk.
            </summary>
            <value>
            The x_ave_temp_stalk.
            </value>
        </member>
        <member name="P:CropConstants.y_stress_stalk">
            <summary>
            Gets or sets the y_stress_stalk.
            </summary>
            <value>
            The y_stress_stalk.
            </value>
        </member>
        <member name="P:CropConstants.x_temp">
            <summary>
            Gets or sets the x_temp.
            </summary>
            <value>
            The x_temp.
            </value>
        </member>
        <member name="P:CropConstants.y_tt">
            <summary>
            Gets or sets the y_tt.
            </summary>
            <value>
            The y_tt.
            </value>
        </member>
        <member name="P:CropConstants.x_sw_demand_ratio">
            <summary>
            Gets or sets the x_sw_demand_ratio.
            </summary>
            <value>
            The x_sw_demand_ratio.
            </value>
        </member>
        <member name="P:CropConstants.y_swdef_leaf">
            <summary>
            Gets or sets the y_swdef_leaf.
            </summary>
            <value>
            The y_swdef_leaf.
            </value>
        </member>
        <member name="P:CropConstants.x_demand_ratio_stalk">
            <summary>
            Gets or sets the x_demand_ratio_stalk.
            </summary>
            <value>
            The x_demand_ratio_stalk.
            </value>
        </member>
        <member name="P:CropConstants.y_swdef_stalk">
            <summary>
            Gets or sets the y_swdef_stalk.
            </summary>
            <value>
            The y_swdef_stalk.
            </value>
        </member>
        <member name="P:CropConstants.x_sw_avail_ratio">
            <summary>
            Gets or sets the x_sw_avail_ratio.
            </summary>
            <value>
            The x_sw_avail_ratio.
            </value>
        </member>
        <member name="P:CropConstants.y_swdef_pheno">
            <summary>
            Gets or sets the y_swdef_pheno.
            </summary>
            <value>
            The y_swdef_pheno.
            </value>
        </member>
        <member name="P:CropConstants.x_sw_ratio">
            <summary>
            Gets or sets the x_sw_ratio.
            </summary>
            <value>
            The x_sw_ratio.
            </value>
        </member>
        <member name="P:CropConstants.y_sw_fac_root">
            <summary>
            Gets or sets the y_sw_fac_root.
            </summary>
            <value>
            The y_sw_fac_root.
            </value>
        </member>
        <member name="P:CropConstants.k_nfact_photo">
            <summary>
            Gets or sets the k_nfact_photo.
            </summary>
            <value>
            The k_nfact_photo.
            </value>
        </member>
        <member name="P:CropConstants.k_nfact_expansion">
            <summary>
            Gets or sets the k_nfact_expansion.
            </summary>
            <value>
            The k_nfact_expansion.
            </value>
        </member>
        <member name="P:CropConstants.k_nfact_stalk">
            <summary>
            Gets or sets the k_nfact_stalk.
            </summary>
            <value>
            The k_nfact_stalk.
            </value>
        </member>
        <member name="P:CropConstants.k_nfact_pheno">
            <summary>
            Gets or sets the k_nfact_pheno.
            </summary>
            <value>
            The k_nfact_pheno.
            </value>
        </member>
        <member name="P:CropConstants.oxdef_photo_rtfr">
            <summary>
            Gets or sets the oxdef_photo_rtfr.
            </summary>
            <value>
            The oxdef_photo_rtfr.
            </value>
        </member>
        <member name="P:CropConstants.oxdef_photo">
            <summary>
            Gets or sets the oxdef_photo.
            </summary>
            <value>
            The oxdef_photo.
            </value>
        </member>
        <member name="P:CropConstants.x_afps">
            <summary>
            Gets or sets the x_afps.
            </summary>
            <value>
            The x_afps.
            </value>
        </member>
        <member name="P:CropConstants.y_afps_fac">
            <summary>
            Gets or sets the y_afps_fac.
            </summary>
            <value>
            The y_afps_fac.
            </value>
        </member>
        <member name="P:CropConstants.cane_dmf_max">
            <summary>
            Gets or sets the cane_dmf_max.
            </summary>
            <value>
            The cane_dmf_max.
            </value>
        </member>
        <member name="P:CropConstants.cane_dmf_min">
            <summary>
            Gets or sets the cane_dmf_min.
            </summary>
            <value>
            The cane_dmf_min.
            </value>
        </member>
        <member name="P:CropConstants.cane_dmf_tt">
            <summary>
            Gets or sets the cane_dmf_tt.
            </summary>
            <value>
            The cane_dmf_tt.
            </value>
        </member>
        <member name="P:CropConstants.cane_dmf_rate">
            <summary>
            Gets or sets the cane_dmf_rate.
            </summary>
            <value>
            The cane_dmf_rate.
            </value>
        </member>
        <member name="P:CropConstants.stress_lodge">
            <summary>
            Gets or sets the stress_lodge.
            </summary>
            <value>
            The stress_lodge.
            </value>
        </member>
        <member name="P:CropConstants.death_fr_lodge">
            <summary>
            Gets or sets the death_fr_lodge.
            </summary>
            <value>
            The death_fr_lodge.
            </value>
        </member>
        <member name="P:CropConstants.lodge_redn_photo">
            <summary>
            Gets or sets the lodge_redn_photo.
            </summary>
            <value>
            The lodge_redn_photo.
            </value>
        </member>
        <member name="P:CropConstants.lodge_redn_sucrose">
            <summary>
            Gets or sets the lodge_redn_sucrose.
            </summary>
            <value>
            The lodge_redn_sucrose.
            </value>
        </member>
        <member name="P:CropConstants.lodge_redn_green_leaf">
            <summary>
            Gets or sets the lodge_redn_green_leaf.
            </summary>
            <value>
            The lodge_redn_green_leaf.
            </value>
        </member>
        <member name="P:CropConstants.num_plant_rld">
            <summary>
            Gets the num_plant_rld.
            </summary>
            <value>
            The num_plant_rld.
            </value>
        </member>
        <member name="P:CropConstants.num_sla_lfno">
            <summary>
            Gets the num_sla_lfno.
            </summary>
            <value>
            The num_sla_lfno.
            </value>
        </member>
        <member name="P:CropConstants.num_stem_wt">
            <summary>
            Gets the num_stem_wt.
            </summary>
            <value>
            The num_stem_wt.
            </value>
        </member>
        <member name="P:CropConstants.num_fasw_emerg">
            <summary>
            Gets the num_fasw_emerg.
            </summary>
            <value>
            The num_fasw_emerg.
            </value>
        </member>
        <member name="P:CropConstants.num_node_no_app">
            <summary>
            Gets the num_node_no_app.
            </summary>
            <value>
            The num_node_no_app.
            </value>
        </member>
        <member name="P:CropConstants.num_node_no_leaf">
            <summary>
            Gets the num_node_no_leaf.
            </summary>
            <value>
            The num_node_no_leaf.
            </value>
        </member>
        <member name="P:CropConstants.num_frost_temp">
            <summary>
            Gets the num_frost_temp.
            </summary>
            <value>
            The num_frost_temp.
            </value>
        </member>
        <member name="P:CropConstants.num_N_conc_stage">
            <summary>
            Gets the num_ n_conc_stage.
            </summary>
            <value>
            The num_ n_conc_stage.
            </value>
        </member>
        <member name="P:CropConstants.num_ave_temp">
            <summary>
            Gets the num_ave_temp.
            </summary>
            <value>
            The num_ave_temp.
            </value>
        </member>
        <member name="P:CropConstants.num_ave_temp_stalk">
            <summary>
            Gets the num_ave_temp_stalk.
            </summary>
            <value>
            The num_ave_temp_stalk.
            </value>
        </member>
        <member name="P:CropConstants.num_temp">
            <summary>
            Gets the num_temp.
            </summary>
            <value>
            The num_temp.
            </value>
        </member>
        <member name="P:CropConstants.num_sw_demand_ratio">
            <summary>
            Gets the num_sw_demand_ratio.
            </summary>
            <value>
            The num_sw_demand_ratio.
            </value>
        </member>
        <member name="P:CropConstants.num_demand_ratio_stalk">
            <summary>
            Gets the num_demand_ratio_stalk.
            </summary>
            <value>
            The num_demand_ratio_stalk.
            </value>
        </member>
        <member name="P:CropConstants.num_sw_avail_ratio">
            <summary>
            Gets the num_sw_avail_ratio.
            </summary>
            <value>
            The num_sw_avail_ratio.
            </value>
        </member>
        <member name="P:CropConstants.num_sw_ratio">
            <summary>
            Gets the num_sw_ratio.
            </summary>
            <value>
            The num_sw_ratio.
            </value>
        </member>
        <member name="P:CropConstants.num_oxdef_photo">
            <summary>
            Gets the num_oxdef_photo.
            </summary>
            <value>
            The num_oxdef_photo.
            </value>
        </member>
        <member name="P:CropConstants.num_afps">
            <summary>
            Gets the num_afps.
            </summary>
            <value>
            The num_afps.
            </value>
        </member>
        <member name="P:CropConstants.num_cane_dmf">
            <summary>
            Gets the num_cane_dmf.
            </summary>
            <value>
            The num_cane_dmf.
            </value>
        </member>
        <member name="P:CropConstants.num_stress_lodge">
            <summary>
            Gets the num_stress_lodge.
            </summary>
            <value>
            The num_stress_lodge.
            </value>
        </member>
        <member name="T:CultivarConstants">
            <summary>
            Cultivar constants class.
            </summary>
        </member>
        <member name="F:CultivarConstants.max_table">
            <summary>
            The max_table
            </summary>
        </member>
        <member name="F:CultivarConstants.max_leaf">
            <summary>
            The max_leaf
            </summary>
        </member>
        <member name="P:CultivarConstants.cultivar_name">
            <summary>
            Gets or sets the cultivar_name.
            </summary>
            <value>
            The cultivar_name.
            </value>
        </member>
        <member name="P:CultivarConstants.leaf_size">
            <summary>
            Gets or sets the leaf_size.
            </summary>
            <value>
            The leaf_size.
            </value>
        </member>
        <member name="P:CultivarConstants.leaf_size_no">
            <summary>
            Gets or sets the leaf_size_no.
            </summary>
            <value>
            The leaf_size_no.
            </value>
        </member>
        <member name="P:CultivarConstants.cane_fraction">
            <summary>
            Gets or sets the cane_fraction.
            </summary>
            <value>
            The cane_fraction.
            </value>
        </member>
        <member name="P:CultivarConstants.sucrose_fraction_stalk">
            <summary>
            Gets or sets the sucrose_fraction_stalk.
            </summary>
            <value>
            The sucrose_fraction_stalk.
            </value>
        </member>
        <member name="P:CultivarConstants.stress_factor_stalk">
            <summary>
            Gets or sets the stress_factor_stalk.
            </summary>
            <value>
            The stress_factor_stalk.
            </value>
        </member>
        <member name="P:CultivarConstants.sucrose_delay">
            <summary>
            Gets or sets the sucrose_delay.
            </summary>
            <value>
            The sucrose_delay.
            </value>
        </member>
        <member name="P:CultivarConstants.min_sstem_sucrose">
            <summary>
            Gets or sets the min_sstem_sucrose.
            </summary>
            <value>
            The min_sstem_sucrose.
            </value>
        </member>
        <member name="P:CultivarConstants.min_sstem_sucrose_redn">
            <summary>
            Gets or sets the min_sstem_sucrose_redn.
            </summary>
            <value>
            The min_sstem_sucrose_redn.
            </value>
        </member>
        <member name="P:CultivarConstants.tt_emerg_to_begcane">
            <summary>
            Gets or sets the tt_emerg_to_begcane.
            </summary>
            <value>
            The tt_emerg_to_begcane.
            </value>
        </member>
        <member name="P:CultivarConstants.tt_begcane_to_flowering">
            <summary>
            Gets or sets the tt_begcane_to_flowering.
            </summary>
            <value>
            The tt_begcane_to_flowering.
            </value>
        </member>
        <member name="P:CultivarConstants.tt_flowering_to_crop_end">
            <summary>
            Gets or sets the tt_flowering_to_crop_end.
            </summary>
            <value>
            The tt_flowering_to_crop_end.
            </value>
        </member>
        <member name="P:CultivarConstants.green_leaf_no">
            <summary>
            Gets or sets the green_leaf_no.
            </summary>
            <value>
            The green_leaf_no.
            </value>
        </member>
        <member name="P:CultivarConstants.tillerf_leaf_size">
            <summary>
            Gets or sets the tillerf_leaf_size.
            </summary>
            <value>
            The tillerf_leaf_size.
            </value>
        </member>
        <member name="P:CultivarConstants.tillerf_leaf_size_no">
            <summary>
            Gets or sets the tillerf_leaf_size_no.
            </summary>
            <value>
            The tillerf_leaf_size_no.
            </value>
        </member>
        <member name="P:CultivarConstants.num_leaf_size">
            <summary>
            Gets the num_leaf_size.
            </summary>
            <value>
            The num_leaf_size.
            </value>
        </member>
        <member name="P:CultivarConstants.num_stress_factor_stalk">
            <summary>
            Gets the num_stress_factor_stalk.
            </summary>
            <value>
            The num_stress_factor_stalk.
            </value>
        </member>
        <member name="P:CultivarConstants.num_tillerf_leaf_size">
            <summary>
            Gets the num_tillerf_leaf_size.
            </summary>
            <value>
            The num_tillerf_leaf_size.
            </value>
        </member>
        <member name="T:mu">
            <summary>
            Temporary class for math utilities.
            </summary>
        </member>
        <member name="M:mu.error_margin(System.Double)">
            <summary>
            Error_margins the specified variable.
            </summary>
            <param name="Variable">The variable.</param>
            <returns></returns>
        </member>
        <member name="M:mu.reals_are_equal(System.Double,System.Double)">
            <summary>
            Reals_are_equals the specified first.
            </summary>
            <param name="First">The first.</param>
            <param name="Second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:mu.reals_are_equal(System.Double,System.Double,System.Double)">
            <summary>
            Reals_are_equals the specified first.
            </summary>
            <param name="First">The first.</param>
            <param name="Second">The second.</param>
            <param name="Tolerance">The tolerance.</param>
            <returns></returns>
        </member>
        <member name="M:mu.dim(System.Double,System.Double)">
            <summary>
            Dims the specified x.
            </summary>
            <param name="X">The x.</param>
            <param name="Y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:mu.RoundArray(System.Double[],System.Int32)">
            <summary>
            Rounds the array.
            </summary>
            <param name="InputArray">The input array.</param>
            <param name="DecimalPlaces">The decimal places.</param>
            <returns></returns>
        </member>
    </members>
</doc>
