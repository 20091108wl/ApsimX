library(RSQLite)
source("C:\\Users\\fai04d\\Documents\\ApsimX test suite\\tests.R")
# read control file
master <- readWorksheetFromFile("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", sheet = 1, header = FALSE)
args <- commandArgs(TRUE)
db <- dbConnect(SQLite(), dbname="C:\\Users\\fai04d\\Documents\\ApsimX test suite\\fertiliserNET")
readSimOutput <- dbReadTable(db, "test")
#TODO: drop Date column if it exists; either by pattern match or db field type (might not be called Date - field type better (may not use / either)
readSimOutput <- subset(readSimOutput, select=-Date) #temporary
# redirect result to temp var so we dont have it appearing in output
junk <- dbDisconnect(db)
rm(junk)
#get tests to run
tests <- master[master[1] == "test",]
for (i in c(1:nrow(tests))) {
#get columns to run them on
if (tests[i, "Col6"] != "all"){
cols <- tests[i,c(grep("Col6",colnames(tests)):ncol(tests))]
cols <- cols[sapply(cols, function(x) !any(is.na(x)))] #remove NA columns
print(unlist(cols))
if (ncol(readSimOutput) > 1)
simOutput <- subset(readSimOutput, select=unlist(cols))
}
# retrieve the test name and run it
# test must accept a data frame
func <- match.fun(tests$Col2[i])
ifelse(i == 1,
#testing
results <- paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])),
results <- c(results, paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]))))
#results <- func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]),
#results <- c(results, func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])))
}
print(results)
#print(all(results))
library(XLConnect)
library(RSQLite)
source("C:\\Users\\fai04d\\Documents\\ApsimX test suite\\tests.R")
# read control file
master <- readWorksheetFromFile("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", sheet = 1, header = FALSE)
args <- commandArgs(TRUE)
db <- dbConnect(SQLite(), dbname="C:\\Users\\fai04d\\Documents\\ApsimX test suite\\fertiliserNET")
readSimOutput <- dbReadTable(db, "test")
#TODO: drop Date column if it exists; either by pattern match or db field type (might not be called Date - field type better (may not use / either)
readSimOutput <- subset(readSimOutput, select=-Date) #temporary
# redirect result to temp var so we dont have it appearing in output
junk <- dbDisconnect(db)
rm(junk)
#get tests to run
tests <- master[master[1] == "test",]
for (i in c(1:nrow(tests))) {
#get columns to run them on
if (tests[i, "Col6"] != "all"){
cols <- tests[i,c(grep("Col6",colnames(tests)):ncol(tests))]
cols <- cols[sapply(cols, function(x) !any(is.na(x)))] #remove NA columns
print(unlist(cols))
if (ncol(readSimOutput) > 1)
simOutput <- subset(readSimOutput, select=unlist(cols))
}
# retrieve the test name and run it
# test must accept a data frame
func <- match.fun(tests$Col2[i])
ifelse(i == 1,
#testing
results <- paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])),
results <- c(results, paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]))))
#results <- func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]),
#results <- c(results, func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])))
}
print(results)
#print(all(results))
rm(list=ls())
rm(list=ls())
library(XLConnect)
library(RSQLite)
source("C:\\Users\\fai04d\\Documents\\ApsimX test suite\\tests.R")
# read control file
master <- readWorksheetFromFile("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", sheet = 1, header = FALSE)
args <- commandArgs(TRUE)
db <- dbConnect(SQLite(), dbname="C:\\Users\\fai04d\\Documents\\ApsimX test suite\\fertiliserNET")
readSimOutput <- dbReadTable(db, "test")
#TODO: drop Date column if it exists; either by pattern match or db field type (might not be called Date - field type better (may not use / either)
readSimOutput <- subset(readSimOutput, select=-Date) #temporary
# redirect result to temp var so we dont have it appearing in output
junk <- dbDisconnect(db)
rm(junk)
#get tests to run
tests <- master[master[1] == "test",]
for (i in c(1:nrow(tests))) {
#get columns to run them on
if (tests[i, "Col6"] != "all"){
cols <- tests[i,c(grep("Col6",colnames(tests)):ncol(tests))]
cols <- cols[sapply(cols, function(x) !any(is.na(x)))] #remove NA columns
print(unlist(cols))
if (ncol(readSimOutput) > 1)
simOutput <- subset(readSimOutput, select=unlist(cols))
}
# retrieve the test name and run it
# test must accept a data frame
func <- match.fun(tests$Col2[i])
ifelse(i == 1,
#testing
results <- paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])),
results <- c(results, paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]))))
#results <- func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]),
#results <- c(results, func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])))
}
print(results)
#print(all(results))
rm(list=ls())
library(XLConnect)
library(RSQLite)
source("C:\\Users\\fai04d\\Documents\\ApsimX test suite\\tests.R")
# read control file
master <- readWorksheetFromFile("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", sheet = 1, header = FALSE)
args <- commandArgs(TRUE)
db <- dbConnect(SQLite(), dbname="C:\\Users\\fai04d\\Documents\\ApsimX test suite\\fertiliserNET")
readSimOutput <- dbReadTable(db, "test")
#TODO: drop Date column if it exists; either by pattern match or db field type (might not be called Date - field type better (may not use / either)
readSimOutput <- subset(readSimOutput, select=-Date) #temporary
# redirect result to temp var so we dont have it appearing in output
junk <- dbDisconnect(db)
rm(junk)
#get tests to run
tests <- master[master[1] == "test",]
for (i in c(1:nrow(tests))) {
#get columns to run them on
if (tests[i, "Col6"] != "all"){
cols <- tests[i,c(grep("Col6",colnames(tests)):ncol(tests))]
cols <- cols[sapply(cols, function(x) !any(is.na(x)))] #remove NA columns
print(unlist(cols))
if (ncol(readSimOutput) > 1)
simOutput <- subset(readSimOutput, select=unlist(cols))
}
else
simOutput <- readSimOutput
# retrieve the test name and run it
# test must accept a data frame
func <- match.fun(tests$Col2[i])
ifelse(i == 1,
#testing
results <- paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])),
results <- c(results, paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]))))
#results <- func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]),
#results <- c(results, func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])))
}
print(results)
#print(all(results))
workbook <- loadWorkbook("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", FALSE)
fix(workbook)
help(XLConnect)
wb <- loadWorkbook("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", FALSE)
sheets <- readWorksheet(wb, sheets = getSheets(wb))
?getSheets
sheets <- sheets = getSheets(wb)
sheets <- getSheets(wb)
fix(sheets)
wb <- loadWorkbook("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", FALSE)
sheets <- getSheets(wb)
length(sheets)
simsToTest <- master[master[1] == "sim", -1]
View(simsToTest)
simsToTest <- simsToTest[sapply(simsToTest, function(x) !any(is.na(x)))] #remove NA columns
View(simsToTest)
rm(list=ls()) #remove for production
options(java.parameters = "-Xmx1024m")
library(XLConnect)
library(RSQLite)
source("C:\\Users\\fai04d\\Documents\\ApsimX test suite\\tests.R")
# read control file
wb <- loadWorkbook("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", FALSE)
sheets <- getSheets(wb)
args <- commandArgs(TRUE)
#run tests on each sheet
for (ind in c(1:length(sheets))){
# get list of sims to test in this suite TODO handle 'all'
master <- readWorksheet(wb, sheet = ind, header = FALSE)
simsToTest <- master[master[1] == "sim", -1]
simsToTest <- simsToTest[sapply(simsToTest, function(x) !any(is.na(x)))] #remove NA columns
for (sim in c(1:ncol(simsToTest)))
{
db <- dbConnect(SQLite(), dbname="C:\\Users\\fai04d\\Documents\\ApsimX test suite\\fertiliserNET")
readSimOutput <- dbReadTable(db, simsToTest[i])
# redirect result to temp var so we dont have it appearing in output
junk <- dbDisconnect(db)
rm(junk)
#TODO: drop Date column if it exists; either by pattern match or db field type (might not be called Date - field type better (may not use / either)
readSimOutput <- subset(readSimOutput, select=-Date) #temporary
#get tests to run
tests <- master[master[1] == "test",]
for (i in c(1:nrow(tests))) {
#get columns to run them on
if (tests[i, "Col6"] != "all"){
cols <- tests[i,c(grep("Col6",colnames(tests)):ncol(tests))]
cols <- cols[sapply(cols, function(x) !any(is.na(x)))] #remove NA columns
print(unlist(cols))
if (ncol(readSimOutput) > 1)
simOutput <- subset(readSimOutput, select=unlist(cols))
}
else
simOutput <- readSimOutput
# retrieve the test name and run it
# test must accept a data frame
func <- match.fun(tests$Col2[i])
ifelse(i == 1,
#testing
results <- paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])),
results <- c(results, paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]))))
#results <- func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]),
#results <- c(results, func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])))
}
}
}
print(results)
#print(all(results))
fix(db)
rm(list=ls()) #remove for production
options(java.parameters = "-Xmx1024m")
library(XLConnect)
library(RSQLite)
source("C:\\Users\\fai04d\\Documents\\ApsimX test suite\\tests.R")
# read control file
wb <- loadWorkbook("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", FALSE)
sheets <- getSheets(wb)
args <- commandArgs(TRUE)
#run tests on each sheet
for (ind in c(1:length(sheets))){
# get list of sims to test in this suite TODO handle 'all'
master <- readWorksheet(wb, sheet = ind, header = FALSE)
simsToTest <- master[master[1] == "sim", -1]
simsToTest <- simsToTest[sapply(simsToTest, function(x) !any(is.na(x)))] #remove NA columns
for (sim in c(1:ncol(simsToTest)))
{
db <- dbConnect(SQLite(), dbname="C:\\Users\\fai04d\\Documents\\ApsimX test suite\\fertiliserNET")
readSimOutput <- dbReadTable(db, simsToTest[sim])
# redirect result to temp var so we dont have it appearing in output
junk <- dbDisconnect(db)
rm(junk)
#TODO: drop Date column if it exists; either by pattern match or db field type (might not be called Date - field type better (may not use / either)
readSimOutput <- subset(readSimOutput, select=-Date) #temporary
#get tests to run
tests <- master[master[1] == "test",]
for (i in c(1:nrow(tests))) {
#get columns to run them on
if (tests[i, "Col6"] != "all"){
cols <- tests[i,c(grep("Col6",colnames(tests)):ncol(tests))]
cols <- cols[sapply(cols, function(x) !any(is.na(x)))] #remove NA columns
print(unlist(cols))
if (ncol(readSimOutput) > 1)
simOutput <- subset(readSimOutput, select=unlist(cols))
}
else
simOutput <- readSimOutput
# retrieve the test name and run it
# test must accept a data frame
func <- match.fun(tests$Col2[i])
ifelse(i == 1,
#testing
results <- paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])),
results <- c(results, paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]))))
#results <- func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]),
#results <- c(results, func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])))
}
}
}
print(results)
#print(all(results))
View(simsToTest)
rm(list=ls()) #remove for production
options(java.parameters = "-Xmx1024m")
library(XLConnect)
library(RSQLite)
source("C:\\Users\\fai04d\\Documents\\ApsimX test suite\\tests.R")
# read control file
wb <- loadWorkbook("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", FALSE)
sheets <- getSheets(wb)
args <- commandArgs(TRUE)
#run tests on each sheet
for (ind in c(1:length(sheets))){
# get list of sims to test in this suite TODO handle 'all'
master <- readWorksheet(wb, sheet = ind, header = FALSE)
simsToTest <- master[master[1] == "sim", -1]
simsToTest <- simsToTest[sapply(simsToTest, function(x) !any(is.na(x)))] #remove NA columns
for (sim in c(1:ncol(simsToTest)))
{
db <- dbConnect(SQLite(), dbname="C:\\Users\\fai04d\\Documents\\ApsimX test suite\\fertiliserNET")
readSimOutput <- dbReadTable(db, simsToTest[sim])
# redirect result to temp var so we dont have it appearing in output
junk <- dbDisconnect(db)
rm(junk)
#TODO: drop Date column if it exists; either by pattern match or db field type (might not be called Date - field type better (may not use / either)
readSimOutput <- subset(readSimOutput, select=-Date) #temporary
#get tests to run
tests <- master[master[1] == "test",]
for (i in c(1:nrow(tests))) {
#get columns to run them on
if (tests[i, "Col6"] != "all"){
cols <- tests[i,c(grep("Col6",colnames(tests)):ncol(tests))]
cols <- cols[sapply(cols, function(x) !any(is.na(x)))] #remove NA columns
print(unlist(cols))
if (ncol(readSimOutput) > 1)
simOutput <- subset(readSimOutput, select=unlist(cols))
}
else
simOutput <- readSimOutput
# retrieve the test name and run it
# test must accept a data frame
func <- match.fun(tests$Col2[i])
ifelse(i == 1,
#testing
results <- paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])),
results <- c(results, paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]))))
#results <- func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]),
#results <- c(results, func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])))
}
}
}
print(results)
#print(all(results))
master <- readWorksheet(wb, sheet = ind, header = FALSE)
simsToTest <- master[master[1] == "sim", -1]
simsToTest <- simsToTest[sapply(simsToTest, function(x) !any(is.na(x)))] #remove NA columns
db <- dbConnect(SQLite(), dbname="C:\\Users\\fai04d\\Documents\\ApsimX test suite\\fertiliserNET")
readSimOutput <- dbReadTable(db, simsToTest[sim])
simsToTest[sim]
typeof(simsToTest[sim])
class(simsToTest[sim])
class(as.character(simsToTest[sim]))
readSimOutput <- dbReadTable(db, as.character(simsToTest[sim]))
rm(list=ls()) #remove for production
options(java.parameters = "-Xmx1024m")
library(XLConnect)
library(RSQLite)
source("C:\\Users\\fai04d\\Documents\\ApsimX test suite\\tests.R")
# read control file
wb <- loadWorkbook("C:\\apsim\\tests\\fertilisernet\\sensibility.xlsx", FALSE)
sheets <- getSheets(wb)
args <- commandArgs(TRUE)
#run tests on each sheet
for (ind in c(1:length(sheets))){
# get list of sims to test in this suite TODO handle 'all'
master <- readWorksheet(wb, sheet = ind, header = FALSE)
simsToTest <- master[master[1] == "sim", -1]
simsToTest <- simsToTest[sapply(simsToTest, function(x) !any(is.na(x)))] #remove NA columns
for (sim in c(1:ncol(simsToTest)))
{
db <- dbConnect(SQLite(), dbname="C:\\Users\\fai04d\\Documents\\ApsimX test suite\\fertiliserNET")
readSimOutput <- dbReadTable(db, as.character(simsToTest[sim]))
# redirect result to temp var so we dont have it appearing in output
junk <- dbDisconnect(db)
rm(junk)
#TODO: drop Date column if it exists; either by pattern match or db field type (might not be called Date - field type better (may not use / either)
readSimOutput <- subset(readSimOutput, select=-Date) #temporary
#get tests to run
tests <- master[master[1] == "test",]
for (i in c(1:nrow(tests))) {
#get columns to run them on
if (tests[i, "Col6"] != "all"){
cols <- tests[i,c(grep("Col6",colnames(tests)):ncol(tests))]
cols <- cols[sapply(cols, function(x) !any(is.na(x)))] #remove NA columns
print(unlist(cols))
if (ncol(readSimOutput) > 1)
simOutput <- subset(readSimOutput, select=unlist(cols))
}
else
simOutput <- readSimOutput
# retrieve the test name and run it
# test must accept a data frame
func <- match.fun(tests$Col2[i])
ifelse(i == 1,
#testing
results <- paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])),
results <- c(results, paste(tests$Col2[i], func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]))))
#results <- func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i]),
#results <- c(results, func(simOutput, tests$Col3[i], tests$Col4[i], tests$Col5[i])))
}
}
}
print(results)
#print(all(results))
rm(list=ls()) # for testing only
setwd("C:\\ApsimX\\ApsimX")
library("XML")
library("RSQLite")
args <- commandArgs(TRUE)
args <- c("C:\\ApsimX\\ApsimX\\Tests\\Test.apsimx", "C:\\ApsimX\\ApsimX\\Tests\\") # for testing only
#if(length(args) == 0)
#  stop("Usage: rscript RunTest.R <path to .apsimx>")
args[1] <- ifelse(is.na(unlist(strsplit(args[1], ".apsimx", fixed = TRUE))), args[1], unlist(strsplit(args[1], ".apsimx", fixed = TRUE)))
source("Tests/RTestSuite/tests.R")
# read tests from .apsimx
doc <- xmlTreeParse(paste(args[1], ".apsimx",sep=""), useInternalNodes=TRUE)
group <- getNodeSet(doc, "/Simulations/Tests/Test")
groupdf <- list()
c <- 1
for (n in group){
groupdf[[c]] <- xmlToDataFrame(n, stringsAsFactors=FALSE)
c <- c+1
}
rm(c)
#run tests on each test group
for (ind in c(1:length(groupdf))){
currentSimGroup <- groupdf[[ind]]
dbName <- paste(args[1], ".db",sep="")
simsToTest <- unlist(strsplit(currentSimGroup[1, 1], ","))
for (sim in c(1:length(simsToTest)))
{
#connect to simulator output and baseline data if available
db <- dbConnect(SQLite(), dbname = dbName)
dbBase <- dbConnect(SQLite(), dbname = paste(dbName, ".baseline", sep=""))
#get report ID and extract relevant info from table
simID <- dbGetQuery(db, paste("SELECT ID FROM Simulations WHERE Name='", simsToTest[sim], "'", sep=""))
readSimOutput <- dbReadTable(db, "Report")
readSimOutput <- readSimOutput[readSimOutput$SimulationID == simID,]
#do the same thing for baseline data
readSimOutputBase <- dbReadTable(dbBase, "Report")
readSimOutputBase <- readSimOutputBase[readSimOutputBase$SimulationID == simID,]
# redirect result to temp var so we dont have it appearing in output
junk <- dbDisconnect(db)
junk <- dbDisconnect(dbBase)
rm(junk)
# drop Date column if it exists
readSimOutput     <- readSimOutput[,     -grep("[0-9]{4}-[0-9]{2}-[0-9]{2}", readSimOutput)]
readSimOutputBase <- readSimOutputBase[, -grep("[0-9]{4}-[0-9]{2}-[0-9]{2}", readSimOutputBase)]
#get tests to run
tests <- unlist(strsplit(currentSimGroup[3, 1], ","))
#prepare to run the tests
for (i in c(1:length(tests))) {
#get columns to run them on
cols <- unlist(strsplit(currentSimGroup[4, 1], ","))
simOutput    <- subset(readSimOutput,      select=unlist(cols))
simOutputBase <- subset(readSimOutputBase, select=unlist(cols))
# retrieve the test name
func <- match.fun(tests[i])
#unpack parameters
params <- as.numeric(unlist(strsplit(currentSimGroup[5, 1], ",")))
#run each test
ifelse(i == 1,
results <- func((simOutput), tests$name[i], params, simOutputBase),
results <- c(results, func(simOutput, tests$name[i], params, simOutputBase)))
}
}
}
print(tests)
print(results)
if (all(results) == FALSE) stop("One or more tests failed.")
rm(list=ls()) # for testing only
setwd("C:\\ApsimX\\ApsimX")
library("XML")
library("RSQLite")
args <- commandArgs(TRUE)
args <- c("C:\\ApsimX\\ApsimX\\Tests\\Test.apsimx", "C:\\ApsimX\\ApsimX\\Tests\\") # for testing only
#if(length(args) == 0)
#  stop("Usage: rscript RunTest.R <path to .apsimx>")
args[1] <- ifelse(is.na(unlist(strsplit(args[1], ".apsimx", fixed = TRUE))), args[1], unlist(strsplit(args[1], ".apsimx", fixed = TRUE)))
source("Tests/RTestSuite/tests.R")
# read tests from .apsimx
doc <- xmlTreeParse(paste(args[1], ".apsimx",sep=""), useInternalNodes=TRUE)
group <- getNodeSet(doc, "/Simulations/Tests/Test")
groupdf <- list()
c <- 1
for (n in group){
groupdf[[c]] <- xmlToDataFrame(n, stringsAsFactors=FALSE)
c <- c+1
}
rm(c)
#run tests on each test group
for (ind in c(1:length(groupdf))){
currentSimGroup <- groupdf[[ind]]
dbName <- paste(args[1], ".db",sep="")
simsToTest <- unlist(strsplit(currentSimGroup[1, 1], ","))
for (sim in c(1:length(simsToTest)))
{
#connect to simulator output and baseline data if available
db <- dbConnect(SQLite(), dbname = dbName)
dbBase <- dbConnect(SQLite(), dbname = paste(dbName, ".baseline", sep=""))
#get report ID and extract relevant info from table
simID <- dbGetQuery(db, paste("SELECT ID FROM Simulations WHERE Name='", simsToTest[sim], "'", sep=""))
readSimOutput <- dbReadTable(db, "Report")
readSimOutput <- readSimOutput[readSimOutput$SimulationID == simID,]
#do the same thing for baseline data
readSimOutputBase <- dbReadTable(dbBase, "Report")
readSimOutputBase <- readSimOutputBase[readSimOutputBase$SimulationID == simID,]
# redirect result to temp var so we dont have it appearing in output
junk <- dbDisconnect(db)
junk <- dbDisconnect(dbBase)
rm(junk)
# drop Date column if it exists
readSimOutput     <- readSimOutput[,     -grep("[0-9]{4}-[0-9]{2}-[0-9]{2}", readSimOutput)]
readSimOutputBase <- readSimOutputBase[, -grep("[0-9]{4}-[0-9]{2}-[0-9]{2}", readSimOutputBase)]
#get tests to run
tests <- unlist(strsplit(currentSimGroup[3, 1], ","))
#prepare to run the tests
for (i in c(1:length(tests))) {
#get columns to run them on
cols <- unlist(strsplit(currentSimGroup[4, 1], ","))
simOutput    <- subset(readSimOutput,      select=unlist(cols))
simOutputBase <- subset(readSimOutputBase, select=unlist(cols))
# retrieve the test name
func <- match.fun(tests[i])
#unpack parameters
params <- as.numeric(unlist(strsplit(currentSimGroup[5, 1], ",")))
#run each test
ifelse(i == 1,
results <- func((simOutput), tests$name[i], params, simOutputBase),
results <- c(results, func(simOutput, tests$name[i], params, simOutputBase)))
}
}
}
print(tests)
print(results)
if (all(results) == FALSE) stop("One or more tests failed.")
